
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 34 d5 00 00       	call   c000d554 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 03 e3 01 00       	call   c001e328 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 04 ef 01 c0       	mov    ebx,0xc001ef04
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 0c ef 01 c0    	cmp    ebx,0xc001ef0c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 88 28 02 c0       	mov    eax,0xc0022888
c0000049:	3d 88 28 02 c0       	cmp    eax,0xc0022888
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 88 28 02 c0       	push   0xc0022888
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 88 28 02 c0       	mov    eax,0xc0022888
c0000075:	2d 88 28 02 c0       	sub    eax,0xc0022888
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 88 28 02 c0       	push   0xc0022888
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 28 2a 02 c0 00 	cmp    BYTE PTR ds:0xc0022a28,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 14 ef 01 c0       	mov    ebx,0xc001ef14
c00000bb:	81 eb 10 ef 01 c0    	sub    ebx,0xc001ef10
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 10 ef 01 c0       	mov    esi,0xc001ef10
c00000ca:	a1 2c 2a 02 c0       	mov    eax,ds:0xc0022a2c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 2c 2a 02 c0       	mov    ds:0xc0022a2c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 2c 2a 02 c0       	mov    eax,ds:0xc0022a2c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 88 28 02 c0       	push   0xc0022888
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 28 2a 02 c0 01 	mov    BYTE PTR ds:0xc0022a28,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 30 2a 02 c0       	push   0xc0022a30
c000012c:	68 88 28 02 c0       	push   0xc0022888
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	c3                   	ret    

c00001b5 <goToVM86>:
c00001b5:	fa                   	cli    
c00001b6:	55                   	push   ebp
c00001b7:	89 e5                	mov    ebp,esp
c00001b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001c5:	25 ff ff 00 00       	and    eax,0xffff
c00001ca:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00001d6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00001dc:	52                   	push   edx
c00001dd:	51                   	push   ecx
c00001de:	68 02 02 02 00       	push   0x20202
c00001e3:	53                   	push   ebx
c00001e4:	50                   	push   eax
c00001e5:	cf                   	iret   

c00001e6 <goToUsermode>:
c00001e6:	fa                   	cli    
c00001e7:	55                   	push   ebp
c00001e8:	89 e5                	mov    ebp,esp
c00001ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00001ed:	66 b8 23 00          	mov    ax,0x23
c00001f1:	66 8e d8             	mov    ds,ax
c00001f4:	66 8e c0             	mov    es,ax
c00001f7:	66 8e e0             	mov    fs,ax
c00001fa:	66 8e e8             	mov    gs,ax
c00001fd:	89 e0                	mov    eax,esp
c00001ff:	68 23 00 00 00       	push   0x23
c0000204:	50                   	push   eax
c0000205:	68 02 02 00 00       	push   0x202
c000020a:	68 1b 00 00 00       	push   0x1b
c000020f:	53                   	push   ebx
c0000210:	cf                   	iret   

c0000211 <switchToThreadASMFirstTime>:
c0000211:	9c                   	pushf  
c0000212:	fa                   	cli    
c0000213:	50                   	push   eax
c0000214:	53                   	push   ebx
c0000215:	51                   	push   ecx
c0000216:	52                   	push   edx
c0000217:	56                   	push   esi
c0000218:	57                   	push   edi
c0000219:	55                   	push   ebp
c000021a:	e9 11 00 00 00       	jmp    c0000230 <commonThreadSwitch>

c000021f <switchToThreadASM>:
c000021f:	9c                   	pushf  
c0000220:	50                   	push   eax
c0000221:	53                   	push   ebx
c0000222:	51                   	push   ecx
c0000223:	52                   	push   edx
c0000224:	56                   	push   esi
c0000225:	57                   	push   edi
c0000226:	55                   	push   ebp
c0000227:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000022d:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000230 <commonThreadSwitch>:
c0000230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000234:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000023a:	8b 06                	mov    eax,DWORD PTR [esi]
c000023c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000023f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000242:	0f 20 d9             	mov    ecx,cr3
c0000245:	39 c8                	cmp    eax,ecx
c0000247:	74 03                	je     c000024c <commonThreadSwitch.doneVAS>
c0000249:	0f 22 d8             	mov    cr3,eax

c000024c <commonThreadSwitch.doneVAS>:
c000024c:	85 d2                	test   edx,edx
c000024e:	74 4e                	je     c000029e <commonThreadSwitch.notFirstTime>
c0000250:	fa                   	cli    
c0000251:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000254:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000259:	60                   	pusha  
c000025a:	e8 89 1e 01 00       	call   c00120e8 <mapVASFirstTime>
c000025f:	61                   	popa   
c0000260:	89 c4                	mov    esp,eax
c0000262:	56                   	push   esi
c0000263:	52                   	push   edx
c0000264:	e8 c3 da 00 00       	call   c000dd2c <changeTSS>
c0000269:	5a                   	pop    edx
c000026a:	5e                   	pop    esi
c000026b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000272:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000278:	74 39                	je     c00002b3 <commonThreadSwitch.cameOffAFork>
c000027a:	5d                   	pop    ebp
c000027b:	5f                   	pop    edi
c000027c:	5e                   	pop    esi
c000027d:	59                   	pop    ecx
c000027e:	59                   	pop    ecx
c000027f:	5b                   	pop    ebx
c0000280:	58                   	pop    eax
c0000281:	81 c4 04 00 00 00    	add    esp,0x4
c0000287:	6a 02                	push   0x2
c0000289:	9d                   	popf   
c000028a:	52                   	push   edx
c000028b:	e8 af de 00 00       	call   c000e13f <taskStartupFunction>
c0000290:	5a                   	pop    edx
c0000291:	50                   	push   eax
c0000292:	ff d2                	call   edx
c0000294:	e8 55 e6 00 00       	call   c000e8ee <taskReturned>
c0000299:	e9 fb ff ff ff       	jmp    c0000299 <commonThreadSwitch.doneVAS+0x4d>

c000029e <commonThreadSwitch.notFirstTime>:
c000029e:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a1:	56                   	push   esi
c00002a2:	52                   	push   edx
c00002a3:	e8 84 da 00 00       	call   c000dd2c <changeTSS>
c00002a8:	5a                   	pop    edx
c00002a9:	5e                   	pop    esi
c00002aa:	5d                   	pop    ebp
c00002ab:	5f                   	pop    edi
c00002ac:	5e                   	pop    esi
c00002ad:	5a                   	pop    edx
c00002ae:	59                   	pop    ecx
c00002af:	5b                   	pop    ebx
c00002b0:	58                   	pop    eax
c00002b1:	9d                   	popf   
c00002b2:	c3                   	ret    

c00002b3 <commonThreadSwitch.cameOffAFork>:
c00002b3:	31 c0                	xor    eax,eax
c00002b5:	31 d2                	xor    edx,edx
c00002b7:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002ba:	e9 a2 02 00 00       	jmp    c0000561 <offAForkJumpThingy>

c00002bf <detectCPUID>:
c00002bf:	9c                   	pushf  
c00002c0:	9c                   	pushf  
c00002c1:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002c8:	9d                   	popf   
c00002c9:	9c                   	pushf  
c00002ca:	58                   	pop    eax
c00002cb:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002ce:	9d                   	popf   
c00002cf:	25 00 00 20 00       	and    eax,0x200000
c00002d4:	c3                   	ret    

c00002d5 <asmQuickAcquireLock>:
c00002d5:	55                   	push   ebp
c00002d6:	89 e5                	mov    ebp,esp
c00002d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00002db <asmQuickAcquireLock.retry>:
c00002db:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00002e0:	72 02                	jb     c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002e2:	fa                   	cli    
c00002e3:	c3                   	ret    

c00002e4 <asmQuickAcquireLock.spin_with_pause>:
c00002e4:	f3 90                	pause  
c00002e6:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00002ec:	75 f6                	jne    c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002ee:	e9 e8 ff ff ff       	jmp    c00002db <asmQuickAcquireLock.retry>

c00002f3 <asmQuickReleaseLock>:
c00002f3:	55                   	push   ebp
c00002f4:	89 e5                	mov    ebp,esp
c00002f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00002fd:	5d                   	pop    ebp
c00002fe:	c3                   	ret    

c00002ff <asmAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 05                	jb     c0000311 <asmAcquireLock.spin_with_pause>
c000030c:	9c                   	pushf  
c000030d:	58                   	pop    eax
c000030e:	fa                   	cli    
c000030f:	5d                   	pop    ebp
c0000310:	c3                   	ret    

c0000311 <asmAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmAcquireLock.spin_with_pause>
c000031b:	e9 e5 ff ff ff       	jmp    c0000305 <asmAcquireLock.retry>

c0000320 <asmReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000329:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000032f:	52                   	push   edx
c0000330:	9d                   	popf   
c0000331:	5d                   	pop    ebp
c0000332:	c3                   	ret    

c0000333 <loadGDT>:
c0000333:	0f 01 15 24 36 02 c0 	lgdtd  ds:0xc0023624
c000033a:	66 b8 10 00          	mov    ax,0x10
c000033e:	66 8e d8             	mov    ds,ax
c0000341:	66 8e c0             	mov    es,ax
c0000344:	66 8e e0             	mov    fs,ax
c0000347:	66 8e e8             	mov    gs,ax
c000034a:	66 8e d0             	mov    ss,ax
c000034d:	e9 00 00 00 00       	jmp    c0000352 <flush2>

c0000352 <flush2>:
c0000352:	c3                   	ret    

c0000353 <isr0>:
c0000353:	fa                   	cli    
c0000354:	68 00 00 00 00       	push   0x0
c0000359:	68 00 00 00 00       	push   0x0
c000035e:	e9 a2 01 00 00       	jmp    c0000505 <int_common_stub>

c0000363 <isr1>:
c0000363:	fa                   	cli    
c0000364:	6a 00                	push   0x0
c0000366:	6a 01                	push   0x1
c0000368:	e9 98 01 00 00       	jmp    c0000505 <int_common_stub>

c000036d <isr2>:
c000036d:	fa                   	cli    
c000036e:	6a 00                	push   0x0
c0000370:	6a 02                	push   0x2
c0000372:	e9 8e 01 00 00       	jmp    c0000505 <int_common_stub>

c0000377 <isr3>:
c0000377:	fa                   	cli    
c0000378:	6a 00                	push   0x0
c000037a:	6a 03                	push   0x3
c000037c:	e9 84 01 00 00       	jmp    c0000505 <int_common_stub>

c0000381 <isr4>:
c0000381:	fa                   	cli    
c0000382:	6a 00                	push   0x0
c0000384:	6a 04                	push   0x4
c0000386:	e9 7a 01 00 00       	jmp    c0000505 <int_common_stub>

c000038b <isr5>:
c000038b:	fa                   	cli    
c000038c:	6a 00                	push   0x0
c000038e:	6a 05                	push   0x5
c0000390:	e9 70 01 00 00       	jmp    c0000505 <int_common_stub>

c0000395 <isr6>:
c0000395:	fa                   	cli    
c0000396:	6a 00                	push   0x0
c0000398:	6a 06                	push   0x6
c000039a:	e9 66 01 00 00       	jmp    c0000505 <int_common_stub>

c000039f <isr7>:
c000039f:	fa                   	cli    
c00003a0:	6a 00                	push   0x0
c00003a2:	6a 07                	push   0x7
c00003a4:	e9 5c 01 00 00       	jmp    c0000505 <int_common_stub>

c00003a9 <isr8>:
c00003a9:	fa                   	cli    
c00003aa:	6a 08                	push   0x8
c00003ac:	e9 54 01 00 00       	jmp    c0000505 <int_common_stub>

c00003b1 <isr9>:
c00003b1:	fa                   	cli    
c00003b2:	6a 00                	push   0x0
c00003b4:	6a 09                	push   0x9
c00003b6:	e9 4a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003bb <isr10>:
c00003bb:	fa                   	cli    
c00003bc:	6a 0a                	push   0xa
c00003be:	e9 42 01 00 00       	jmp    c0000505 <int_common_stub>

c00003c3 <isr11>:
c00003c3:	fa                   	cli    
c00003c4:	6a 0b                	push   0xb
c00003c6:	e9 3a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003cb <isr12>:
c00003cb:	fa                   	cli    
c00003cc:	6a 0c                	push   0xc
c00003ce:	e9 32 01 00 00       	jmp    c0000505 <int_common_stub>

c00003d3 <isr13>:
c00003d3:	fa                   	cli    
c00003d4:	6a 0d                	push   0xd
c00003d6:	e9 2a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003db <isr14>:
c00003db:	fa                   	cli    
c00003dc:	6a 0e                	push   0xe
c00003de:	e9 22 01 00 00       	jmp    c0000505 <int_common_stub>

c00003e3 <isr15>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 0f                	push   0xf
c00003e8:	e9 18 01 00 00       	jmp    c0000505 <int_common_stub>

c00003ed <isr16>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 10                	push   0x10
c00003f2:	e9 0e 01 00 00       	jmp    c0000505 <int_common_stub>

c00003f7 <isr17>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 11                	push   0x11
c00003fc:	e9 04 01 00 00       	jmp    c0000505 <int_common_stub>

c0000401 <isr18>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 12                	push   0x12
c0000406:	e9 fa 00 00 00       	jmp    c0000505 <int_common_stub>

c000040b <isr96>:
c000040b:	fa                   	cli    
c000040c:	6a 00                	push   0x0
c000040e:	6a 60                	push   0x60
c0000410:	e9 20 01 00 00       	jmp    c0000535 <syscall_common_stub>

c0000415 <irq0>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 20                	push   0x20
c000041a:	e9 e6 00 00 00       	jmp    c0000505 <int_common_stub>

c000041f <irq1>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 21                	push   0x21
c0000424:	e9 dc 00 00 00       	jmp    c0000505 <int_common_stub>

c0000429 <irq2>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 22                	push   0x22
c000042e:	e9 d2 00 00 00       	jmp    c0000505 <int_common_stub>

c0000433 <irq3>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 23                	push   0x23
c0000438:	e9 c8 00 00 00       	jmp    c0000505 <int_common_stub>

c000043d <irq4>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 24                	push   0x24
c0000442:	e9 be 00 00 00       	jmp    c0000505 <int_common_stub>

c0000447 <irq5>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 25                	push   0x25
c000044c:	e9 b4 00 00 00       	jmp    c0000505 <int_common_stub>

c0000451 <irq6>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 26                	push   0x26
c0000456:	e9 aa 00 00 00       	jmp    c0000505 <int_common_stub>

c000045b <irq7>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 27                	push   0x27
c0000460:	e9 a0 00 00 00       	jmp    c0000505 <int_common_stub>

c0000465 <irq8>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 28                	push   0x28
c000046a:	e9 96 00 00 00       	jmp    c0000505 <int_common_stub>

c000046f <irq9>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 29                	push   0x29
c0000474:	e9 8c 00 00 00       	jmp    c0000505 <int_common_stub>

c0000479 <irq10>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 2a                	push   0x2a
c000047e:	e9 82 00 00 00       	jmp    c0000505 <int_common_stub>

c0000483 <irq11>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 2b                	push   0x2b
c0000488:	e9 78 00 00 00       	jmp    c0000505 <int_common_stub>

c000048d <irq12>:
c000048d:	fa                   	cli    
c000048e:	6a 00                	push   0x0
c0000490:	6a 2c                	push   0x2c
c0000492:	e9 6e 00 00 00       	jmp    c0000505 <int_common_stub>

c0000497 <irq13>:
c0000497:	fa                   	cli    
c0000498:	6a 00                	push   0x0
c000049a:	6a 2d                	push   0x2d
c000049c:	e9 64 00 00 00       	jmp    c0000505 <int_common_stub>

c00004a1 <irq14>:
c00004a1:	fa                   	cli    
c00004a2:	6a 00                	push   0x0
c00004a4:	6a 2e                	push   0x2e
c00004a6:	e9 5a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004ab <irq15>:
c00004ab:	fa                   	cli    
c00004ac:	6a 00                	push   0x0
c00004ae:	6a 2f                	push   0x2f
c00004b0:	e9 50 00 00 00       	jmp    c0000505 <int_common_stub>

c00004b5 <irq16>:
c00004b5:	fa                   	cli    
c00004b6:	6a 00                	push   0x0
c00004b8:	6a 30                	push   0x30
c00004ba:	e9 46 00 00 00       	jmp    c0000505 <int_common_stub>

c00004bf <irq17>:
c00004bf:	fa                   	cli    
c00004c0:	6a 00                	push   0x0
c00004c2:	6a 31                	push   0x31
c00004c4:	e9 3c 00 00 00       	jmp    c0000505 <int_common_stub>

c00004c9 <irq18>:
c00004c9:	fa                   	cli    
c00004ca:	6a 00                	push   0x0
c00004cc:	6a 32                	push   0x32
c00004ce:	e9 32 00 00 00       	jmp    c0000505 <int_common_stub>

c00004d3 <irq19>:
c00004d3:	fa                   	cli    
c00004d4:	6a 00                	push   0x0
c00004d6:	6a 33                	push   0x33
c00004d8:	e9 28 00 00 00       	jmp    c0000505 <int_common_stub>

c00004dd <irq20>:
c00004dd:	fa                   	cli    
c00004de:	6a 00                	push   0x0
c00004e0:	6a 34                	push   0x34
c00004e2:	e9 1e 00 00 00       	jmp    c0000505 <int_common_stub>

c00004e7 <irq21>:
c00004e7:	fa                   	cli    
c00004e8:	6a 00                	push   0x0
c00004ea:	6a 35                	push   0x35
c00004ec:	e9 14 00 00 00       	jmp    c0000505 <int_common_stub>

c00004f1 <irq22>:
c00004f1:	fa                   	cli    
c00004f2:	6a 00                	push   0x0
c00004f4:	6a 36                	push   0x36
c00004f6:	e9 0a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004fb <irq23>:
c00004fb:	fa                   	cli    
c00004fc:	6a 00                	push   0x0
c00004fe:	6a 37                	push   0x37
c0000500:	e9 00 00 00 00       	jmp    c0000505 <int_common_stub>

c0000505 <int_common_stub>:
c0000505:	60                   	pusha  
c0000506:	1e                   	push   ds
c0000507:	06                   	push   es
c0000508:	0f a0                	push   fs
c000050a:	0f a8                	push   gs
c000050c:	66 b8 10 00          	mov    ax,0x10
c0000510:	66 8e d8             	mov    ds,ax
c0000513:	66 8e c0             	mov    es,ax
c0000516:	66 8e e0             	mov    fs,ax
c0000519:	66 8e e8             	mov    gs,ax
c000051c:	89 e1                	mov    ecx,esp
c000051e:	51                   	push   ecx
c000051f:	b9 ab 3d 01 c0       	mov    ecx,0xc0013dab
c0000524:	ff d1                	call   ecx
c0000526:	59                   	pop    ecx
c0000527:	0f a9                	pop    gs
c0000529:	0f a1                	pop    fs
c000052b:	07                   	pop    es
c000052c:	1f                   	pop    ds
c000052d:	61                   	popa   
c000052e:	81 c4 08 00 00 00    	add    esp,0x8
c0000534:	cf                   	iret   

c0000535 <syscall_common_stub>:
c0000535:	60                   	pusha  
c0000536:	1e                   	push   ds
c0000537:	06                   	push   es
c0000538:	0f a0                	push   fs
c000053a:	0f a8                	push   gs
c000053c:	66 b8 10 00          	mov    ax,0x10
c0000540:	66 8e d8             	mov    ds,ax
c0000543:	66 8e c0             	mov    es,ax
c0000546:	66 8e e0             	mov    fs,ax
c0000549:	66 8e e8             	mov    gs,ax
c000054c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000552:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000555:	89 e1                	mov    ecx,esp
c0000557:	51                   	push   ecx
c0000558:	fb                   	sti    
c0000559:	b9 ab 3d 01 c0       	mov    ecx,0xc0013dab
c000055e:	ff d1                	call   ecx
c0000560:	59                   	pop    ecx

c0000561 <offAForkJumpThingy>:
c0000561:	0f a9                	pop    gs
c0000563:	0f a1                	pop    fs
c0000565:	07                   	pop    es
c0000566:	1f                   	pop    ds
c0000567:	61                   	popa   
c0000568:	81 c4 08 00 00 00    	add    esp,0x8
c000056e:	cf                   	iret   

c000056f <memcmp>:
c000056f:	56                   	push   esi
c0000570:	53                   	push   ebx
c0000571:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000575:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000057d:	01 d6                	add    esi,edx
c000057f:	39 f2                	cmp    edx,esi
c0000581:	74 0e                	je     c0000591 <memcmp+0x22>
c0000583:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000586:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000589:	38 c8                	cmp    al,cl
c000058b:	75 08                	jne    c0000595 <memcmp+0x26>
c000058d:	42                   	inc    edx
c000058e:	43                   	inc    ebx
c000058f:	eb ee                	jmp    c000057f <memcmp+0x10>
c0000591:	31 c0                	xor    eax,eax
c0000593:	eb 02                	jmp    c0000597 <memcmp+0x28>
c0000595:	29 c8                	sub    eax,ecx
c0000597:	5b                   	pop    ebx
c0000598:	5e                   	pop    esi
c0000599:	c3                   	ret    

c000059a <memmove>:
c000059a:	56                   	push   esi
c000059b:	53                   	push   ebx
c000059c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00005a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00005a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00005a8:	39 c8                	cmp    eax,ecx
c00005aa:	73 12                	jae    c00005be <memmove+0x24>
c00005ac:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00005af:	89 c3                	mov    ebx,eax
c00005b1:	39 f1                	cmp    ecx,esi
c00005b3:	74 1a                	je     c00005cf <memmove+0x35>
c00005b5:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005b7:	43                   	inc    ebx
c00005b8:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00005bb:	41                   	inc    ecx
c00005bc:	eb f3                	jmp    c00005b1 <memmove+0x17>
c00005be:	76 0f                	jbe    c00005cf <memmove+0x35>
c00005c0:	85 d2                	test   edx,edx
c00005c2:	74 0b                	je     c00005cf <memmove+0x35>
c00005c4:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00005c8:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00005cc:	4a                   	dec    edx
c00005cd:	eb f1                	jmp    c00005c0 <memmove+0x26>
c00005cf:	5b                   	pop    ebx
c00005d0:	5e                   	pop    esi
c00005d1:	c3                   	ret    

c00005d2 <memcpy>:
c00005d2:	57                   	push   edi
c00005d3:	56                   	push   esi
c00005d4:	53                   	push   ebx
c00005d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005dd:	89 da                	mov    edx,ebx
c00005df:	89 d9                	mov    ecx,ebx
c00005e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005e5:	83 e2 fc             	and    edx,0xfffffffc
c00005e8:	c1 e9 02             	shr    ecx,0x2
c00005eb:	89 c7                	mov    edi,eax
c00005ed:	fc                   	cld    
c00005ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00005f0:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00005f3:	01 c2                	add    edx,eax
c00005f5:	01 de                	add    esi,ebx
c00005f7:	39 f1                	cmp    ecx,esi
c00005f9:	74 09                	je     c0000604 <memcpy+0x32>
c00005fb:	8a 19                	mov    bl,BYTE PTR [ecx]
c00005fd:	42                   	inc    edx
c00005fe:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000601:	41                   	inc    ecx
c0000602:	eb f3                	jmp    c00005f7 <memcpy+0x25>
c0000604:	5b                   	pop    ebx
c0000605:	5e                   	pop    esi
c0000606:	5f                   	pop    edi
c0000607:	c3                   	ret    

c0000608 <memset>:
c0000608:	53                   	push   ebx
c0000609:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000060d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000611:	89 c2                	mov    edx,eax
c0000613:	01 c1                	add    ecx,eax
c0000615:	39 ca                	cmp    edx,ecx
c0000617:	74 0a                	je     c0000623 <memset+0x1b>
c0000619:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c000061d:	42                   	inc    edx
c000061e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000621:	eb f2                	jmp    c0000615 <memset+0xd>
c0000623:	5b                   	pop    ebx
c0000624:	c3                   	ret    

c0000625 <strlen>:
c0000625:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000629:	31 c0                	xor    eax,eax
c000062b:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000062f:	74 03                	je     c0000634 <strlen+0xf>
c0000631:	40                   	inc    eax
c0000632:	eb f7                	jmp    c000062b <strlen+0x6>
c0000634:	c3                   	ret    

c0000635 <strpbrk>:
c0000635:	53                   	push   ebx
c0000636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000063a:	8a 08                	mov    cl,BYTE PTR [eax]
c000063c:	84 c9                	test   cl,cl
c000063e:	74 14                	je     c0000654 <strpbrk+0x1f>
c0000640:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000644:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000646:	84 db                	test   bl,bl
c0000648:	74 07                	je     c0000651 <strpbrk+0x1c>
c000064a:	38 cb                	cmp    bl,cl
c000064c:	74 08                	je     c0000656 <strpbrk+0x21>
c000064e:	42                   	inc    edx
c000064f:	eb f3                	jmp    c0000644 <strpbrk+0xf>
c0000651:	40                   	inc    eax
c0000652:	eb e6                	jmp    c000063a <strpbrk+0x5>
c0000654:	31 c0                	xor    eax,eax
c0000656:	5b                   	pop    ebx
c0000657:	c3                   	ret    

c0000658 <strtok>:
c0000658:	56                   	push   esi
c0000659:	53                   	push   ebx
c000065a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000065e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000662:	85 db                	test   ebx,ebx
c0000664:	75 0e                	jne    c0000674 <strtok+0x1c>
c0000666:	8b 1d 48 2a 02 c0    	mov    ebx,DWORD PTR ds:0xc0022a48
c000066c:	85 db                	test   ebx,ebx
c000066e:	75 04                	jne    c0000674 <strtok+0x1c>
c0000670:	31 db                	xor    ebx,ebx
c0000672:	eb 2e                	jmp    c00006a2 <strtok+0x4a>
c0000674:	56                   	push   esi
c0000675:	53                   	push   ebx
c0000676:	e8 ba ff ff ff       	call   c0000635 <strpbrk>
c000067b:	5a                   	pop    edx
c000067c:	a3 48 2a 02 c0       	mov    ds:0xc0022a48,eax
c0000681:	59                   	pop    ecx
c0000682:	a1 48 2a 02 c0       	mov    eax,ds:0xc0022a48
c0000687:	39 d8                	cmp    eax,ebx
c0000689:	75 07                	jne    c0000692 <strtok+0x3a>
c000068b:	43                   	inc    ebx
c000068c:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000690:	eb e2                	jmp    c0000674 <strtok+0x1c>
c0000692:	85 c0                	test   eax,eax
c0000694:	74 da                	je     c0000670 <strtok+0x18>
c0000696:	8d 50 01             	lea    edx,[eax+0x1]
c0000699:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000069c:	89 15 48 2a 02 c0    	mov    DWORD PTR ds:0xc0022a48,edx
c00006a2:	89 d8                	mov    eax,ebx
c00006a4:	5b                   	pop    ebx
c00006a5:	5e                   	pop    esi
c00006a6:	c3                   	ret    

c00006a7 <strcpy>:
c00006a7:	53                   	push   ebx
c00006a8:	31 d2                	xor    edx,edx
c00006aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00006b2:	8d 1c 10             	lea    ebx,[eax+edx*1]
c00006b5:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00006b8:	84 c9                	test   cl,cl
c00006ba:	74 06                	je     c00006c2 <strcpy+0x1b>
c00006bc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00006bf:	42                   	inc    edx
c00006c0:	eb ec                	jmp    c00006ae <strcpy+0x7>
c00006c2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006c5:	5b                   	pop    ebx
c00006c6:	c3                   	ret    

c00006c7 <strncpy>:
c00006c7:	56                   	push   esi
c00006c8:	53                   	push   ebx
c00006c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00006d5:	89 c3                	mov    ebx,eax
c00006d7:	85 c9                	test   ecx,ecx
c00006d9:	74 1a                	je     c00006f5 <strncpy+0x2e>
c00006db:	46                   	inc    esi
c00006dc:	43                   	inc    ebx
c00006dd:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00006e0:	49                   	dec    ecx
c00006e1:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00006e4:	84 d2                	test   dl,dl
c00006e6:	75 ef                	jne    c00006d7 <strncpy+0x10>
c00006e8:	31 d2                	xor    edx,edx
c00006ea:	39 d1                	cmp    ecx,edx
c00006ec:	74 07                	je     c00006f5 <strncpy+0x2e>
c00006ee:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00006f2:	42                   	inc    edx
c00006f3:	eb f5                	jmp    c00006ea <strncpy+0x23>
c00006f5:	5b                   	pop    ebx
c00006f6:	5e                   	pop    esi
c00006f7:	c3                   	ret    

c00006f8 <strcmp>:
c00006f8:	31 c9                	xor    ecx,ecx
c00006fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00006fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000702:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000706:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000070a:	38 d0                	cmp    al,dl
c000070c:	75 08                	jne    c0000716 <strcmp+0x1e>
c000070e:	41                   	inc    ecx
c000070f:	84 c0                	test   al,al
c0000711:	75 e7                	jne    c00006fa <strcmp+0x2>
c0000713:	31 c0                	xor    eax,eax
c0000715:	c3                   	ret    
c0000716:	29 d0                	sub    eax,edx
c0000718:	c3                   	ret    

c0000719 <strchr>:
c0000719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000071d:	8a 10                	mov    dl,BYTE PTR [eax]
c000071f:	84 d2                	test   dl,dl
c0000721:	74 09                	je     c000072c <strchr+0x13>
c0000723:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c0000727:	74 05                	je     c000072e <strchr+0x15>
c0000729:	40                   	inc    eax
c000072a:	eb f1                	jmp    c000071d <strchr+0x4>
c000072c:	31 c0                	xor    eax,eax
c000072e:	c3                   	ret    

c000072f <strncmp>:
c000072f:	56                   	push   esi
c0000730:	53                   	push   ebx
c0000731:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000735:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000073d:	01 d6                	add    esi,edx
c000073f:	39 f2                	cmp    edx,esi
c0000741:	74 12                	je     c0000755 <strncmp+0x26>
c0000743:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000746:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000749:	38 c8                	cmp    al,cl
c000074b:	75 0c                	jne    c0000759 <strncmp+0x2a>
c000074d:	42                   	inc    edx
c000074e:	84 c0                	test   al,al
c0000750:	74 03                	je     c0000755 <strncmp+0x26>
c0000752:	43                   	inc    ebx
c0000753:	eb ea                	jmp    c000073f <strncmp+0x10>
c0000755:	31 c0                	xor    eax,eax
c0000757:	eb 02                	jmp    c000075b <strncmp+0x2c>
c0000759:	29 c8                	sub    eax,ecx
c000075b:	5b                   	pop    ebx
c000075c:	5e                   	pop    esi
c000075d:	c3                   	ret    

c000075e <strcat>:
c000075e:	53                   	push   ebx
c000075f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000763:	89 c1                	mov    ecx,eax
c0000765:	8d 51 01             	lea    edx,[ecx+0x1]
c0000768:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000076c:	74 04                	je     c0000772 <strcat+0x14>
c000076e:	89 d1                	mov    ecx,edx
c0000770:	eb f3                	jmp    c0000765 <strcat+0x7>
c0000772:	31 d2                	xor    edx,edx
c0000774:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000778:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000077b:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000077e:	42                   	inc    edx
c000077f:	84 db                	test   bl,bl
c0000781:	75 f1                	jne    c0000774 <strcat+0x16>
c0000783:	5b                   	pop    ebx
c0000784:	c3                   	ret    

c0000785 <strncat>:
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000793:	89 c2                	mov    edx,eax
c0000795:	85 db                	test   ebx,ebx
c0000797:	74 23                	je     c00007bc <strncat+0x37>
c0000799:	8d 72 01             	lea    esi,[edx+0x1]
c000079c:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c00007a0:	74 04                	je     c00007a6 <strncat+0x21>
c00007a2:	89 f2                	mov    edx,esi
c00007a4:	eb f3                	jmp    c0000799 <strncat+0x14>
c00007a6:	8d 34 19             	lea    esi,[ecx+ebx*1]
c00007a9:	41                   	inc    ecx
c00007aa:	42                   	inc    edx
c00007ab:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00007ae:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b1:	84 db                	test   bl,bl
c00007b3:	74 07                	je     c00007bc <strncat+0x37>
c00007b5:	39 f1                	cmp    ecx,esi
c00007b7:	75 f0                	jne    c00007a9 <strncat+0x24>
c00007b9:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00007bc:	5b                   	pop    ebx
c00007bd:	5e                   	pop    esi
c00007be:	c3                   	ret    

c00007bf <strstr>:
c00007bf:	57                   	push   edi
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ca:	57                   	push   edi
c00007cb:	e8 55 fe ff ff       	call   c0000625 <strlen>
c00007d0:	59                   	pop    ecx
c00007d1:	89 c6                	mov    esi,eax
c00007d3:	85 c0                	test   eax,eax
c00007d5:	74 1f                	je     c00007f6 <strstr+0x37>
c00007d7:	53                   	push   ebx
c00007d8:	e8 48 fe ff ff       	call   c0000625 <strlen>
c00007dd:	5a                   	pop    edx
c00007de:	39 f0                	cmp    eax,esi
c00007e0:	72 12                	jb     c00007f4 <strstr+0x35>
c00007e2:	56                   	push   esi
c00007e3:	57                   	push   edi
c00007e4:	53                   	push   ebx
c00007e5:	e8 85 fd ff ff       	call   c000056f <memcmp>
c00007ea:	83 c4 0c             	add    esp,0xc
c00007ed:	85 c0                	test   eax,eax
c00007ef:	74 05                	je     c00007f6 <strstr+0x37>
c00007f1:	43                   	inc    ebx
c00007f2:	eb e3                	jmp    c00007d7 <strstr+0x18>
c00007f4:	31 db                	xor    ebx,ebx
c00007f6:	89 d8                	mov    eax,ebx
c00007f8:	5b                   	pop    ebx
c00007f9:	5e                   	pop    esi
c00007fa:	5f                   	pop    edi
c00007fb:	c3                   	ret    

c00007fc <toupper>:
c00007fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000800:	0f b6 d0             	movzx  edx,al
c0000803:	f6 82 20 ef 01 c0 02 	test   BYTE PTR [edx-0x3ffe10e0],0x2
c000080a:	74 03                	je     c000080f <toupper+0x13>
c000080c:	83 e8 20             	sub    eax,0x20
c000080f:	c3                   	ret    

c0000810 <tolower>:
c0000810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000814:	0f b6 d0             	movzx  edx,al
c0000817:	f6 82 20 ef 01 c0 01 	test   BYTE PTR [edx-0x3ffe10e0],0x1
c000081e:	74 03                	je     c0000823 <tolower+0x13>
c0000820:	83 c0 20             	add    eax,0x20
c0000823:	c3                   	ret    

c0000824 <simple_strtoul>:
c0000824:	55                   	push   ebp
c0000825:	57                   	push   edi
c0000826:	56                   	push   esi
c0000827:	53                   	push   ebx
c0000828:	83 ec 08             	sub    esp,0x8
c000082b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000082f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000833:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000836:	f6 82 20 ef 01 c0 08 	test   BYTE PTR [edx-0x3ffe10e0],0x8
c000083d:	74 03                	je     c0000842 <simple_strtoul+0x1e>
c000083f:	41                   	inc    ecx
c0000840:	eb f1                	jmp    c0000833 <simple_strtoul+0xf>
c0000842:	80 fa 09             	cmp    dl,0x9
c0000845:	74 f8                	je     c000083f <simple_strtoul+0x1b>
c0000847:	80 fa 2d             	cmp    dl,0x2d
c000084a:	75 0b                	jne    c0000857 <simple_strtoul+0x33>
c000084c:	41                   	inc    ecx
c000084d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000855:	eb 0e                	jmp    c0000865 <simple_strtoul+0x41>
c0000857:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000085f:	80 fa 2b             	cmp    dl,0x2b
c0000862:	75 01                	jne    c0000865 <simple_strtoul+0x41>
c0000864:	41                   	inc    ecx
c0000865:	85 f6                	test   esi,esi
c0000867:	75 22                	jne    c000088b <simple_strtoul+0x67>
c0000869:	be 0a 00 00 00       	mov    esi,0xa
c000086e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000871:	75 5a                	jne    c00008cd <simple_strtoul+0xa9>
c0000873:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000877:	50                   	push   eax
c0000878:	e8 93 ff ff ff       	call   c0000810 <tolower>
c000087d:	5a                   	pop    edx
c000087e:	83 f8 78             	cmp    eax,0x78
c0000881:	74 03                	je     c0000886 <simple_strtoul+0x62>
c0000883:	41                   	inc    ecx
c0000884:	eb 16                	jmp    c000089c <simple_strtoul+0x78>
c0000886:	83 c1 02             	add    ecx,0x2
c0000889:	eb 22                	jmp    c00008ad <simple_strtoul+0x89>
c000088b:	8d 46 fe             	lea    eax,[esi-0x2]
c000088e:	83 f8 22             	cmp    eax,0x22
c0000891:	0f 87 b7 00 00 00    	ja     c000094e <simple_strtoul+0x12a>
c0000897:	83 fe 08             	cmp    esi,0x8
c000089a:	75 0c                	jne    c00008a8 <simple_strtoul+0x84>
c000089c:	be 08 00 00 00       	mov    esi,0x8
c00008a1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008a4:	75 27                	jne    c00008cd <simple_strtoul+0xa9>
c00008a6:	eb 1f                	jmp    c00008c7 <simple_strtoul+0xa3>
c00008a8:	83 fe 10             	cmp    esi,0x10
c00008ab:	75 20                	jne    c00008cd <simple_strtoul+0xa9>
c00008ad:	be 10 00 00 00       	mov    esi,0x10
c00008b2:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008b5:	75 16                	jne    c00008cd <simple_strtoul+0xa9>
c00008b7:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008bb:	50                   	push   eax
c00008bc:	e8 4f ff ff ff       	call   c0000810 <tolower>
c00008c1:	5d                   	pop    ebp
c00008c2:	83 f8 78             	cmp    eax,0x78
c00008c5:	74 03                	je     c00008ca <simple_strtoul+0xa6>
c00008c7:	41                   	inc    ecx
c00008c8:	eb 03                	jmp    c00008cd <simple_strtoul+0xa9>
c00008ca:	83 c1 02             	add    ecx,0x2
c00008cd:	31 ed                	xor    ebp,ebp
c00008cf:	31 db                	xor    ebx,ebx
c00008d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00008d8:	8a 11                	mov    dl,BYTE PTR [ecx]
c00008da:	84 d2                	test   dl,dl
c00008dc:	74 27                	je     c0000905 <simple_strtoul+0xe1>
c00008de:	0f b6 fa             	movzx  edi,dl
c00008e1:	f6 87 20 ef 01 c0 04 	test   BYTE PTR [edi-0x3ffe10e0],0x4
c00008e8:	74 05                	je     c00008ef <simple_strtoul+0xcb>
c00008ea:	83 ef 30             	sub    edi,0x30
c00008ed:	eb 22                	jmp    c0000911 <simple_strtoul+0xed>
c00008ef:	0f be d2             	movsx  edx,dl
c00008f2:	52                   	push   edx
c00008f3:	e8 04 ff ff ff       	call   c00007fc <toupper>
c00008f8:	5f                   	pop    edi
c00008f9:	0f b6 d0             	movzx  edx,al
c00008fc:	f6 82 20 ef 01 c0 01 	test   BYTE PTR [edx-0x3ffe10e0],0x1
c0000903:	75 09                	jne    c000090e <simple_strtoul+0xea>
c0000905:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000090a:	75 2d                	jne    c0000939 <simple_strtoul+0x115>
c000090c:	eb 57                	jmp    c0000965 <simple_strtoul+0x141>
c000090e:	8d 78 c9             	lea    edi,[eax-0x37]
c0000911:	39 f7                	cmp    edi,esi
c0000913:	73 f0                	jae    c0000905 <simple_strtoul+0xe1>
c0000915:	31 d2                	xor    edx,edx
c0000917:	89 f8                	mov    eax,edi
c0000919:	f7 d0                	not    eax
c000091b:	f7 f6                	div    esi
c000091d:	39 d8                	cmp    eax,ebx
c000091f:	72 0e                	jb     c000092f <simple_strtoul+0x10b>
c0000921:	0f af de             	imul   ebx,esi
c0000924:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000092b:	01 fb                	add    ebx,edi
c000092d:	eb 07                	jmp    c0000936 <simple_strtoul+0x112>
c000092f:	bd 01 00 00 00       	mov    ebp,0x1
c0000934:	31 db                	xor    ebx,ebx
c0000936:	41                   	inc    ecx
c0000937:	eb 9f                	jmp    c00008d8 <simple_strtoul+0xb4>
c0000939:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000093c:	09 d8                	or     eax,ebx
c000093e:	75 1f                	jne    c000095f <simple_strtoul+0x13b>
c0000940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000944:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000948:	31 db                	xor    ebx,ebx
c000094a:	89 38                	mov    DWORD PTR [eax],edi
c000094c:	eb 17                	jmp    c0000965 <simple_strtoul+0x141>
c000094e:	31 db                	xor    ebx,ebx
c0000950:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000955:	74 14                	je     c000096b <simple_strtoul+0x147>
c0000957:	31 ed                	xor    ebp,ebp
c0000959:	85 c9                	test   ecx,ecx
c000095b:	75 e3                	jne    c0000940 <simple_strtoul+0x11c>
c000095d:	31 db                	xor    ebx,ebx
c000095f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000963:	89 08                	mov    DWORD PTR [eax],ecx
c0000965:	4d                   	dec    ebp
c0000966:	75 03                	jne    c000096b <simple_strtoul+0x147>
c0000968:	83 cb ff             	or     ebx,0xffffffff
c000096b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000970:	75 02                	jne    c0000974 <simple_strtoul+0x150>
c0000972:	f7 db                	neg    ebx
c0000974:	83 c4 08             	add    esp,0x8
c0000977:	89 d8                	mov    eax,ebx
c0000979:	5b                   	pop    ebx
c000097a:	5e                   	pop    esi
c000097b:	5f                   	pop    edi
c000097c:	5d                   	pop    ebp
c000097d:	c3                   	ret    

c000097e <largebin_index>:
c000097e:	89 c2                	mov    edx,eax
c0000980:	c1 ea 08             	shr    edx,0x8
c0000983:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000989:	77 10                	ja     c000099b <largebin_index+0x1d>
c000098b:	0f bd d2             	bsr    edx,edx
c000098e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000991:	d3 e8                	shr    eax,cl
c0000993:	83 e0 03             	and    eax,0x3
c0000996:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099a:	c3                   	ret    
c000099b:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a0:	c3                   	ret    

c00009a1 <malloc_init_state>:
c00009a1:	53                   	push   ebx
c00009a2:	8d 50 34             	lea    edx,[eax+0x34]
c00009a5:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009ab:	89 d1                	mov    ecx,edx
c00009ad:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b3:	83 c2 08             	add    edx,0x8
c00009b6:	39 da                	cmp    edx,ebx
c00009b8:	75 f3                	jne    c00009ad <malloc_init_state+0xc>
c00009ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00009bc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c6:	83 e2 03             	and    edx,0x3
c00009c9:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d3:	83 ca 48             	or     edx,0x48
c00009d6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ea:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f1:	89 10                	mov    DWORD PTR [eax],edx
c00009f3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a00:	5b                   	pop    ebx
c0000a01:	c3                   	ret    

c0000a02 <malloc_consolidate>:
c0000a02:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a04:	85 d2                	test   edx,edx
c0000a06:	0f 84 d8 00 00 00    	je     c0000ae4 <malloc_consolidate+0xe2>
c0000a0c:	55                   	push   ebp
c0000a0d:	83 e2 fd             	and    edx,0xfffffffd
c0000a10:	57                   	push   edi
c0000a11:	89 c5                	mov    ebp,eax
c0000a13:	56                   	push   esi
c0000a14:	8d 78 34             	lea    edi,[eax+0x34]
c0000a17:	53                   	push   ebx
c0000a18:	83 ec 10             	sub    esp,0x10
c0000a1b:	89 10                	mov    DWORD PTR [eax],edx
c0000a1d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a21:	c1 ea 03             	shr    edx,0x3
c0000a24:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a28:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a2f:	85 d2                	test   edx,edx
c0000a31:	0f 84 98 00 00 00    	je     c0000acf <malloc_consolidate+0xcd>
c0000a37:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a3e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a41:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a44:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a48:	89 f9                	mov    ecx,edi
c0000a4a:	83 e1 fe             	and    ecx,0xfffffffe
c0000a4d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a50:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a53:	83 e3 fc             	and    ebx,0xfffffffc
c0000a56:	83 e7 01             	and    edi,0x1
c0000a59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5c:	75 14                	jne    c0000a72 <malloc_consolidate+0x70>
c0000a5e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a60:	29 fa                	sub    edx,edi
c0000a62:	01 f9                	add    ecx,edi
c0000a64:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a67:	89 fb                	mov    ebx,edi
c0000a69:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a6f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a72:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a75:	74 40                	je     c0000ab7 <malloc_consolidate+0xb5>
c0000a77:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a7d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a81:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a84:	83 e7 01             	and    edi,0x1
c0000a87:	75 0e                	jne    c0000a97 <malloc_consolidate+0x95>
c0000a89:	01 d9                	add    ecx,ebx
c0000a8b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a8e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a91:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a94:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a97:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9a:	89 ce                	mov    esi,ecx
c0000a9c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000a9f:	83 ce 01             	or     esi,0x1
c0000aa2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aa8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000aab:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000aaf:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab5:	eb 0c                	jmp    c0000ac3 <malloc_consolidate+0xc1>
c0000ab7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000aba:	83 c9 01             	or     ecx,0x1
c0000abd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ac7:	85 d2                	test   edx,edx
c0000ac9:	0f 85 6f ff ff ff    	jne    c0000a3e <malloc_consolidate+0x3c>
c0000acf:	83 c5 04             	add    ebp,0x4
c0000ad2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad6:	0f 85 50 ff ff ff    	jne    c0000a2c <malloc_consolidate+0x2a>
c0000adc:	83 c4 10             	add    esp,0x10
c0000adf:	5b                   	pop    ebx
c0000ae0:	5e                   	pop    esi
c0000ae1:	5f                   	pop    edi
c0000ae2:	5d                   	pop    ebp
c0000ae3:	c3                   	ret    
c0000ae4:	e9 b8 fe ff ff       	jmp    c00009a1 <malloc_init_state>

c0000ae9 <dlfree>:
c0000ae9:	57                   	push   edi
c0000aea:	56                   	push   esi
c0000aeb:	53                   	push   ebx
c0000aec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af0:	85 db                	test   ebx,ebx
c0000af2:	0f 84 e2 00 00 00    	je     c0000bda <dlfree+0xf1>
c0000af8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afb:	8b 0d 60 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022a60
c0000b01:	89 f0                	mov    eax,esi
c0000b03:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b06:	83 e0 fc             	and    eax,0xfffffffc
c0000b09:	39 c1                	cmp    ecx,eax
c0000b0b:	72 24                	jb     c0000b31 <dlfree+0x48>
c0000b0d:	83 c9 03             	or     ecx,0x3
c0000b10:	c1 e8 03             	shr    eax,0x3
c0000b13:	89 0d 60 2a 02 c0    	mov    DWORD PTR ds:0xc0022a60,ecx
c0000b19:	83 e8 02             	sub    eax,0x2
c0000b1c:	8b 0c 85 64 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd59c]
c0000b23:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b25:	89 14 85 64 2a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd59c],edx
c0000b2c:	e9 a9 00 00 00       	jmp    c0000bda <dlfree+0xf1>
c0000b31:	83 e6 02             	and    esi,0x2
c0000b34:	0f 85 a0 00 00 00    	jne    c0000bda <dlfree+0xf1>
c0000b3a:	83 c9 01             	or     ecx,0x1
c0000b3d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b40:	89 0d 60 2a 02 c0    	mov    DWORD PTR ds:0xc0022a60,ecx
c0000b46:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b49:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b50:	75 13                	jne    c0000b65 <dlfree+0x7c>
c0000b52:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b55:	29 da                	sub    edx,ebx
c0000b57:	01 d8                	add    eax,ebx
c0000b59:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b5f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b62:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b65:	39 35 8c 2a 02 c0    	cmp    DWORD PTR ds:0xc0022a8c,esi
c0000b6b:	74 40                	je     c0000bad <dlfree+0xc4>
c0000b6d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b71:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b74:	80 e3 01             	and    bl,0x1
c0000b77:	75 0e                	jne    c0000b87 <dlfree+0x9e>
c0000b79:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b7f:	01 c8                	add    eax,ecx
c0000b81:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b84:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b87:	8b 0d 9c 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022a9c
c0000b8d:	c7 42 0c 94 2a 02 c0 	mov    DWORD PTR [edx+0xc],0xc0022a94
c0000b94:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b97:	89 15 9c 2a 02 c0    	mov    DWORD PTR ds:0xc0022a9c,edx
c0000b9d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba0:	89 c1                	mov    ecx,eax
c0000ba2:	83 c9 01             	or     ecx,0x1
c0000ba5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ba8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bab:	eb 10                	jmp    c0000bbd <dlfree+0xd4>
c0000bad:	01 c8                	add    eax,ecx
c0000baf:	89 c1                	mov    ecx,eax
c0000bb1:	83 c9 01             	or     ecx,0x1
c0000bb4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bb7:	89 15 8c 2a 02 c0    	mov    DWORD PTR ds:0xc0022a8c,edx
c0000bbd:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc2:	76 16                	jbe    c0000bda <dlfree+0xf1>
c0000bc4:	f6 05 60 2a 02 c0 02 	test   BYTE PTR ds:0xc0022a60,0x2
c0000bcb:	74 0d                	je     c0000bda <dlfree+0xf1>
c0000bcd:	5b                   	pop    ebx
c0000bce:	b8 60 2a 02 c0       	mov    eax,0xc0022a60
c0000bd3:	5e                   	pop    esi
c0000bd4:	5f                   	pop    edi
c0000bd5:	e9 28 fe ff ff       	jmp    c0000a02 <malloc_consolidate>
c0000bda:	5b                   	pop    ebx
c0000bdb:	5e                   	pop    esi
c0000bdc:	5f                   	pop    edi
c0000bdd:	c3                   	ret    

c0000bde <sYSMALLOc>:
c0000bde:	55                   	push   ebp
c0000bdf:	57                   	push   edi
c0000be0:	56                   	push   esi
c0000be1:	53                   	push   ebx
c0000be2:	89 d3                	mov    ebx,edx
c0000be4:	83 ec 2c             	sub    esp,0x2c
c0000be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000beb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bf1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000bf4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000bf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bfb:	74 1f                	je     c0000c1c <sYSMALLOc+0x3e>
c0000bfd:	89 d8                	mov    eax,ebx
c0000bff:	e8 fe fd ff ff       	call   c0000a02 <malloc_consolidate>
c0000c04:	83 ec 0c             	sub    esp,0xc
c0000c07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c0b:	83 e8 07             	sub    eax,0x7
c0000c0e:	50                   	push   eax
c0000c0f:	e8 30 02 00 00       	call   c0000e44 <dlmalloc>
c0000c14:	83 c4 10             	add    esp,0x10
c0000c17:	e9 20 02 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c1c:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c1f:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c25:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c28:	83 e0 fc             	and    eax,0xfffffffc
c0000c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c33:	83 c0 10             	add    eax,0x10
c0000c36:	01 c1                	add    ecx,eax
c0000c38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c3c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c43:	74 04                	je     c0000c49 <sYSMALLOc+0x6b>
c0000c45:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c49:	f7 da                	neg    edx
c0000c4b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c4f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c53:	21 d1                	and    ecx,edx
c0000c55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c59:	7f 07                	jg     c0000c62 <sYSMALLOc+0x84>
c0000c5b:	31 c0                	xor    eax,eax
c0000c5d:	e9 da 01 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c62:	83 ec 0c             	sub    esp,0xc
c0000c65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c69:	e8 44 c4 00 00       	call   c000d0b2 <sbrk>
c0000c6e:	83 c4 10             	add    esp,0x10
c0000c71:	89 c6                	mov    esi,eax
c0000c73:	83 f8 ff             	cmp    eax,0xffffffff
c0000c76:	74 e3                	je     c0000c5b <sYSMALLOc+0x7d>
c0000c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c7c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c80:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c83:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c89:	39 f1                	cmp    ecx,esi
c0000c8b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c91:	75 13                	jne    c0000ca6 <sYSMALLOc+0xc8>
c0000c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c97:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c9b:	83 c8 01             	or     eax,0x1
c0000c9e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ca1:	e9 3e 01 00 00       	jmp    c0000de4 <sYSMALLOc+0x206>
c0000ca6:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000cac:	88 d0                	mov    al,dl
c0000cae:	83 e0 01             	and    eax,0x1
c0000cb1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cb6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cba:	0f 95 c0             	setne  al
c0000cbd:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cc1:	39 f1                	cmp    ecx,esi
c0000cc3:	76 12                	jbe    c0000cd7 <sYSMALLOc+0xf9>
c0000cc5:	84 c0                	test   al,al
c0000cc7:	74 0e                	je     c0000cd7 <sYSMALLOc+0xf9>
c0000cc9:	83 e2 fe             	and    edx,0xfffffffe
c0000ccc:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cd2:	e9 83 00 00 00       	jmp    c0000d5a <sYSMALLOc+0x17c>
c0000cd7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000cdc:	74 7c                	je     c0000d5a <sYSMALLOc+0x17c>
c0000cde:	84 c0                	test   al,al
c0000ce0:	74 0c                	je     c0000cee <sYSMALLOc+0x110>
c0000ce2:	89 f0                	mov    eax,esi
c0000ce4:	29 c8                	sub    eax,ecx
c0000ce6:	01 e8                	add    eax,ebp
c0000ce8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cee:	89 f2                	mov    edx,esi
c0000cf0:	83 e2 07             	and    edx,0x7
c0000cf3:	74 0c                	je     c0000d01 <sYSMALLOc+0x123>
c0000cf5:	b8 08 00 00 00       	mov    eax,0x8
c0000cfa:	29 d0                	sub    eax,edx
c0000cfc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000cff:	eb 04                	jmp    c0000d05 <sYSMALLOc+0x127>
c0000d01:	89 f5                	mov    ebp,esi
c0000d03:	31 c0                	xor    eax,eax
c0000d05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d11:	01 c1                	add    ecx,eax
c0000d13:	83 ec 0c             	sub    esp,0xc
c0000d16:	01 f1                	add    ecx,esi
c0000d18:	01 ca                	add    edx,ecx
c0000d1a:	29 c8                	sub    eax,ecx
c0000d1c:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d20:	01 c2                	add    edx,eax
c0000d22:	52                   	push   edx
c0000d23:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d27:	e8 86 c3 00 00       	call   c000d0b2 <sbrk>
c0000d2c:	83 c4 10             	add    esp,0x10
c0000d2f:	83 f8 ff             	cmp    eax,0xffffffff
c0000d32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d36:	75 0f                	jne    c0000d47 <sYSMALLOc+0x169>
c0000d38:	83 ec 0c             	sub    esp,0xc
c0000d3b:	6a 00                	push   0x0
c0000d3d:	e8 70 c3 00 00       	call   c000d0b2 <sbrk>
c0000d42:	83 c4 10             	add    esp,0x10
c0000d45:	eb 30                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d47:	39 c6                	cmp    esi,eax
c0000d49:	76 33                	jbe    c0000d7e <sYSMALLOc+0x1a0>
c0000d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d4f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d56:	01 f0                	add    eax,esi
c0000d58:	eb 1d                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d5a:	83 ec 0c             	sub    esp,0xc
c0000d5d:	89 f5                	mov    ebp,esi
c0000d5f:	6a 00                	push   0x0
c0000d61:	e8 4c c3 00 00       	call   c000d0b2 <sbrk>
c0000d66:	89 c2                	mov    edx,eax
c0000d68:	29 f2                	sub    edx,esi
c0000d6a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d6e:	83 c4 10             	add    esp,0x10
c0000d71:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d77:	31 d2                	xor    edx,edx
c0000d79:	83 f8 ff             	cmp    eax,0xffffffff
c0000d7c:	74 66                	je     c0000de4 <sYSMALLOc+0x206>
c0000d7e:	29 e8                	sub    eax,ebp
c0000d80:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d83:	01 d0                	add    eax,edx
c0000d85:	83 c8 01             	or     eax,0x1
c0000d88:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d8b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d91:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d96:	74 4c                	je     c0000de4 <sYSMALLOc+0x206>
c0000d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d9c:	83 e8 0c             	sub    eax,0xc
c0000d9f:	83 e0 f8             	and    eax,0xfffffff8
c0000da2:	89 c2                	mov    edx,eax
c0000da4:	83 ca 01             	or     edx,0x1
c0000da7:	83 f8 0f             	cmp    eax,0xf
c0000daa:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000dad:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000db5:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dbd:	76 25                	jbe    c0000de4 <sYSMALLOc+0x206>
c0000dbf:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dc5:	83 ec 0c             	sub    esp,0xc
c0000dc8:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000dd2:	83 c7 08             	add    edi,0x8
c0000dd5:	57                   	push   edi
c0000dd6:	e8 0e fd ff ff       	call   c0000ae9 <dlfree>
c0000ddb:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000de1:	83 c4 10             	add    esp,0x10
c0000de4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000dea:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df0:	73 06                	jae    c0000df8 <sYSMALLOc+0x21a>
c0000df2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000df8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000dfe:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e04:	73 06                	jae    c0000e0c <sYSMALLOc+0x22e>
c0000e06:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e0f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e12:	83 e2 fc             	and    edx,0xfffffffc
c0000e15:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e19:	0f 82 3c fe ff ff    	jb     c0000c5b <sYSMALLOc+0x7d>
c0000e1f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e23:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e26:	29 fa                	sub    edx,edi
c0000e28:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2b:	83 ca 01             	or     edx,0x1
c0000e2e:	89 fb                	mov    ebx,edi
c0000e30:	83 c0 08             	add    eax,0x8
c0000e33:	83 cb 01             	or     ebx,0x1
c0000e36:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e39:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3c:	83 c4 2c             	add    esp,0x2c
c0000e3f:	5b                   	pop    ebx
c0000e40:	5e                   	pop    esi
c0000e41:	5f                   	pop    edi
c0000e42:	5d                   	pop    ebp
c0000e43:	c3                   	ret    

c0000e44 <dlmalloc>:
c0000e44:	55                   	push   ebp
c0000e45:	57                   	push   edi
c0000e46:	56                   	push   esi
c0000e47:	53                   	push   ebx
c0000e48:	83 ec 1c             	sub    esp,0x1c
c0000e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e4f:	83 f8 df             	cmp    eax,0xffffffdf
c0000e52:	0f 87 70 03 00 00    	ja     c00011c8 <dlmalloc+0x384>
c0000e58:	83 c0 0b             	add    eax,0xb
c0000e5b:	be 10 00 00 00       	mov    esi,0x10
c0000e60:	83 f8 0f             	cmp    eax,0xf
c0000e63:	76 05                	jbe    c0000e6a <dlmalloc+0x26>
c0000e65:	83 e0 f8             	and    eax,0xfffffff8
c0000e68:	89 c6                	mov    esi,eax
c0000e6a:	8b 3d 60 2a 02 c0    	mov    edi,DWORD PTR ds:0xc0022a60
c0000e70:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e76:	75 17                	jne    c0000e8f <dlmalloc+0x4b>
c0000e78:	85 ff                	test   edi,edi
c0000e7a:	0f 85 05 03 00 00    	jne    c0001185 <dlmalloc+0x341>
c0000e80:	b8 60 2a 02 c0       	mov    eax,0xc0022a60
c0000e85:	e8 78 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000e8a:	e9 f6 02 00 00       	jmp    c0001185 <dlmalloc+0x341>
c0000e8f:	39 f7                	cmp    edi,esi
c0000e91:	72 1f                	jb     c0000eb2 <dlmalloc+0x6e>
c0000e93:	89 f2                	mov    edx,esi
c0000e95:	c1 ea 03             	shr    edx,0x3
c0000e98:	83 ea 02             	sub    edx,0x2
c0000e9b:	8b 04 95 64 2a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd59c]
c0000ea2:	85 c0                	test   eax,eax
c0000ea4:	74 0c                	je     c0000eb2 <dlmalloc+0x6e>
c0000ea6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000ea9:	89 0c 95 64 2a 02 c0 	mov    DWORD PTR [edx*4-0x3ffdd59c],ecx
c0000eb0:	eb 30                	jmp    c0000ee2 <dlmalloc+0x9e>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000eba:	77 2e                	ja     c0000eea <dlmalloc+0xa6>
c0000ebc:	c1 e8 03             	shr    eax,0x3
c0000ebf:	8d 14 c5 94 2a 02 c0 	lea    edx,[eax*8-0x3ffdd56c]
c0000ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eca:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ecd:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed0:	39 c3                	cmp    ebx,eax
c0000ed2:	74 2e                	je     c0000f02 <dlmalloc+0xbe>
c0000ed4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000ed7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000edc:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000edf:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee2:	83 c0 08             	add    eax,0x8
c0000ee5:	e9 e0 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000eea:	e8 8f fa ff ff       	call   c000097e <largebin_index>
c0000eef:	83 e7 02             	and    edi,0x2
c0000ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef6:	74 0a                	je     c0000f02 <dlmalloc+0xbe>
c0000ef8:	b8 60 2a 02 c0       	mov    eax,0xc0022a60
c0000efd:	e8 00 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000f02:	8d 46 10             	lea    eax,[esi+0x10]
c0000f05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f09:	8b 1d a0 2a 02 c0    	mov    ebx,DWORD PTR ds:0xc0022aa0
c0000f0f:	81 fb 94 2a 02 c0    	cmp    ebx,0xc0022a94
c0000f15:	0f 84 13 01 00 00    	je     c000102e <dlmalloc+0x1ea>
c0000f1b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f1e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f21:	83 e7 fc             	and    edi,0xfffffffc
c0000f24:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2a:	77 4c                	ja     c0000f78 <dlmalloc+0x134>
c0000f2c:	3d 94 2a 02 c0       	cmp    eax,0xc0022a94
c0000f31:	75 45                	jne    c0000f78 <dlmalloc+0x134>
c0000f33:	39 1d 90 2a 02 c0    	cmp    DWORD PTR ds:0xc0022a90,ebx
c0000f39:	75 3d                	jne    c0000f78 <dlmalloc+0x134>
c0000f3b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f3f:	73 37                	jae    c0000f78 <dlmalloc+0x134>
c0000f41:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f44:	89 fa                	mov    edx,edi
c0000f46:	a3 9c 2a 02 c0       	mov    ds:0xc0022a9c,eax
c0000f4b:	a3 a0 2a 02 c0       	mov    ds:0xc0022aa0,eax
c0000f50:	a3 90 2a 02 c0       	mov    ds:0xc0022a90,eax
c0000f55:	29 f2                	sub    edx,esi
c0000f57:	c7 40 08 94 2a 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022a94
c0000f5e:	c7 40 0c 94 2a 02 c0 	mov    DWORD PTR [eax+0xc],0xc0022a94
c0000f65:	83 ce 01             	or     esi,0x1
c0000f68:	89 d1                	mov    ecx,edx
c0000f6a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f6d:	83 c9 01             	or     ecx,0x1
c0000f70:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f73:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f76:	eb 15                	jmp    c0000f8d <dlmalloc+0x149>
c0000f78:	a3 a0 2a 02 c0       	mov    ds:0xc0022aa0,eax
c0000f7d:	39 fe                	cmp    esi,edi
c0000f7f:	c7 40 08 94 2a 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022a94
c0000f86:	75 0d                	jne    c0000f95 <dlmalloc+0x151>
c0000f88:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f8d:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f90:	e9 35 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000f95:	89 f8                	mov    eax,edi
c0000f97:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000f9d:	77 19                	ja     c0000fb8 <dlmalloc+0x174>
c0000f9f:	c1 e8 03             	shr    eax,0x3
c0000fa2:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fa5:	83 c2 0d             	add    edx,0xd
c0000fa8:	8d 2c 95 58 2a 02 c0 	lea    ebp,[edx*4-0x3ffdd5a8]
c0000faf:	8b 14 95 60 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd5a0]
c0000fb6:	eb 46                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000fb8:	e8 c1 f9 ff ff       	call   c000097e <largebin_index>
c0000fbd:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc0:	83 c2 0d             	add    edx,0xd
c0000fc3:	8d 0c 95 60 2a 02 c0 	lea    ecx,[edx*4-0x3ffdd5a0]
c0000fca:	8b 14 95 60 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd5a0]
c0000fd1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fd8:	89 d5                	mov    ebp,edx
c0000fda:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fde:	74 1e                	je     c0000ffe <dlmalloc+0x1ba>
c0000fe0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000fe6:	77 12                	ja     c0000ffa <dlmalloc+0x1b6>
c0000fe8:	83 cf 01             	or     edi,0x1
c0000feb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000fee:	76 05                	jbe    c0000ff5 <dlmalloc+0x1b1>
c0000ff0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff3:	eb f6                	jmp    c0000feb <dlmalloc+0x1a7>
c0000ff5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ff8:	eb 04                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000ffa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000ffe:	89 c7                	mov    edi,eax
c0001000:	88 c1                	mov    cl,al
c0001002:	c1 ff 05             	sar    edi,0x5
c0001005:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001009:	bf 01 00 00 00       	mov    edi,0x1
c000100e:	d3 e7                	shl    edi,cl
c0001010:	89 f8                	mov    eax,edi
c0001012:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001016:	09 04 bd 94 2d 02 c0 	or     DWORD PTR [edi*4-0x3ffdd26c],eax
c000101d:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001020:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001023:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001026:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001029:	e9 db fe ff ff       	jmp    c0000f09 <dlmalloc+0xc5>
c000102e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001034:	76 78                	jbe    c00010ae <dlmalloc+0x26a>
c0001036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103a:	8d 04 c5 94 2a 02 c0 	lea    eax,[eax*8-0x3ffdd56c]
c0001041:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001047:	39 ca                	cmp    edx,ecx
c0001049:	74 63                	je     c00010ae <dlmalloc+0x26a>
c000104b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000104e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001051:	83 e3 fc             	and    ebx,0xfffffffc
c0001054:	39 de                	cmp    esi,ebx
c0001056:	77 52                	ja     c00010aa <dlmalloc+0x266>
c0001058:	89 df                	mov    edi,ebx
c000105a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000105d:	29 f7                	sub    edi,esi
c000105f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001062:	01 d3                	add    ebx,edx
c0001064:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001067:	83 ff 0f             	cmp    edi,0xf
c000106a:	8d 42 08             	lea    eax,[edx+0x8]
c000106d:	77 09                	ja     c0001078 <dlmalloc+0x234>
c000106f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001073:	e9 52 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001078:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000107b:	83 ce 01             	or     esi,0x1
c000107e:	89 0d 9c 2a 02 c0    	mov    DWORD PTR ds:0xc0022a9c,ecx
c0001084:	89 0d a0 2a 02 c0    	mov    DWORD PTR ds:0xc0022aa0,ecx
c000108a:	c7 41 08 94 2a 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0022a94
c0001091:	c7 41 0c 94 2a 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0022a94
c0001098:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000109b:	89 fa                	mov    edx,edi
c000109d:	83 ca 01             	or     edx,0x1
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	89 3b                	mov    DWORD PTR [ebx],edi
c00010a5:	e9 20 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c00010aa:	89 c2                	mov    edx,eax
c00010ac:	eb 99                	jmp    c0001047 <dlmalloc+0x203>
c00010ae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b2:	b8 01 00 00 00       	mov    eax,0x1
c00010b7:	41                   	inc    ecx
c00010b8:	89 cb                	mov    ebx,ecx
c00010ba:	8d 14 cd 8c 2a 02 c0 	lea    edx,[ecx*8-0x3ffdd574]
c00010c1:	c1 eb 05             	shr    ebx,0x5
c00010c4:	d3 e0                	shl    eax,cl
c00010c6:	8b 3c 9d 94 2d 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdd26c]
c00010cd:	39 f8                	cmp    eax,edi
c00010cf:	77 04                	ja     c00010d5 <dlmalloc+0x291>
c00010d1:	85 c0                	test   eax,eax
c00010d3:	75 26                	jne    c00010fb <dlmalloc+0x2b7>
c00010d5:	43                   	inc    ebx
c00010d6:	83 fb 02             	cmp    ebx,0x2
c00010d9:	0f 87 a6 00 00 00    	ja     c0001185 <dlmalloc+0x341>
c00010df:	8b 3c 9d 94 2d 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdd26c]
c00010e6:	85 ff                	test   edi,edi
c00010e8:	74 eb                	je     c00010d5 <dlmalloc+0x291>
c00010ea:	89 d8                	mov    eax,ebx
c00010ec:	c1 e0 06             	shl    eax,0x6
c00010ef:	8d 14 85 8c 2a 02 c0 	lea    edx,[eax*4-0x3ffdd574]
c00010f6:	b8 01 00 00 00       	mov    eax,0x1
c00010fb:	85 f8                	test   eax,edi
c00010fd:	75 07                	jne    c0001106 <dlmalloc+0x2c2>
c00010ff:	83 c2 08             	add    edx,0x8
c0001102:	01 c0                	add    eax,eax
c0001104:	eb f5                	jmp    c00010fb <dlmalloc+0x2b7>
c0001106:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001109:	39 ca                	cmp    edx,ecx
c000110b:	75 14                	jne    c0001121 <dlmalloc+0x2dd>
c000110d:	89 c1                	mov    ecx,eax
c000110f:	83 c2 08             	add    edx,0x8
c0001112:	f7 d1                	not    ecx
c0001114:	01 c0                	add    eax,eax
c0001116:	21 cf                	and    edi,ecx
c0001118:	89 3c 9d 94 2d 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdd26c],edi
c000111f:	eb ac                	jmp    c00010cd <dlmalloc+0x289>
c0001121:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001124:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001127:	83 e0 fc             	and    eax,0xfffffffc
c000112a:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000112d:	89 c3                	mov    ebx,eax
c000112f:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001132:	29 f3                	sub    ebx,esi
c0001134:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001137:	83 fb 0f             	cmp    ebx,0xf
c000113a:	8d 41 08             	lea    eax,[ecx+0x8]
c000113d:	77 09                	ja     c0001148 <dlmalloc+0x304>
c000113f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001143:	e9 82 00 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001148:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000114b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001151:	89 3d 9c 2a 02 c0    	mov    DWORD PTR ds:0xc0022a9c,edi
c0001157:	89 3d a0 2a 02 c0    	mov    DWORD PTR ds:0xc0022aa0,edi
c000115d:	c7 47 08 94 2a 02 c0 	mov    DWORD PTR [edi+0x8],0xc0022a94
c0001164:	c7 47 0c 94 2a 02 c0 	mov    DWORD PTR [edi+0xc],0xc0022a94
c000116b:	77 06                	ja     c0001173 <dlmalloc+0x32f>
c000116d:	89 3d 90 2a 02 c0    	mov    DWORD PTR ds:0xc0022a90,edi
c0001173:	83 ce 01             	or     esi,0x1
c0001176:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001179:	89 d9                	mov    ecx,ebx
c000117b:	83 c9 01             	or     ecx,0x1
c000117e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001181:	89 1a                	mov    DWORD PTR [edx],ebx
c0001183:	eb 45                	jmp    c00011ca <dlmalloc+0x386>
c0001185:	a1 8c 2a 02 c0       	mov    eax,ds:0xc0022a8c
c000118a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000118d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001190:	83 e2 fc             	and    edx,0xfffffffc
c0001193:	39 d1                	cmp    ecx,edx
c0001195:	77 1e                	ja     c00011b5 <dlmalloc+0x371>
c0001197:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119a:	89 f3                	mov    ebx,esi
c000119c:	89 0d 8c 2a 02 c0    	mov    DWORD PTR ds:0xc0022a8c,ecx
c00011a2:	83 cb 01             	or     ebx,0x1
c00011a5:	29 f2                	sub    edx,esi
c00011a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011aa:	83 ca 01             	or     edx,0x1
c00011ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b0:	e9 2d fd ff ff       	jmp    c0000ee2 <dlmalloc+0x9e>
c00011b5:	83 c4 1c             	add    esp,0x1c
c00011b8:	89 f0                	mov    eax,esi
c00011ba:	5b                   	pop    ebx
c00011bb:	ba 60 2a 02 c0       	mov    edx,0xc0022a60
c00011c0:	5e                   	pop    esi
c00011c1:	5f                   	pop    edi
c00011c2:	5d                   	pop    ebp
c00011c3:	e9 16 fa ff ff       	jmp    c0000bde <sYSMALLOc>
c00011c8:	31 c0                	xor    eax,eax
c00011ca:	83 c4 1c             	add    esp,0x1c
c00011cd:	5b                   	pop    ebx
c00011ce:	5e                   	pop    esi
c00011cf:	5f                   	pop    edi
c00011d0:	5d                   	pop    ebp
c00011d1:	c3                   	ret    

c00011d2 <iALLOc>:
c00011d2:	55                   	push   ebp
c00011d3:	89 c5                	mov    ebp,eax
c00011d5:	57                   	push   edi
c00011d6:	56                   	push   esi
c00011d7:	53                   	push   ebx
c00011d8:	83 ec 2c             	sub    esp,0x2c
c00011db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e7:	83 3d 60 2a 02 c0 00 	cmp    DWORD PTR ds:0xc0022a60,0x0
c00011ee:	75 12                	jne    c0001202 <iALLOc+0x30>
c00011f0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011f4:	b8 60 2a 02 c0       	mov    eax,0xc0022a60
c00011f9:	e8 04 f8 ff ff       	call   c0000a02 <malloc_consolidate>
c00011fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001202:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001207:	74 12                	je     c000121b <iALLOc+0x49>
c0001209:	85 ed                	test   ebp,ebp
c000120b:	0f 84 64 01 00 00    	je     c0001375 <iALLOc+0x1a3>
c0001211:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001219:	eb 33                	jmp    c000124e <iALLOc+0x7c>
c000121b:	85 ed                	test   ebp,ebp
c000121d:	75 14                	jne    c0001233 <iALLOc+0x61>
c000121f:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001227:	83 c4 2c             	add    esp,0x2c
c000122a:	5b                   	pop    ebx
c000122b:	5e                   	pop    esi
c000122c:	5f                   	pop    edi
c000122d:	5d                   	pop    ebp
c000122e:	e9 11 fc ff ff       	jmp    c0000e44 <dlmalloc>
c0001233:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001242:	83 f8 0f             	cmp    eax,0xf
c0001245:	76 07                	jbe    c000124e <iALLOc+0x7c>
c0001247:	83 e0 f8             	and    eax,0xfffffff8
c000124a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000124e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001253:	75 09                	jne    c000125e <iALLOc+0x8c>
c0001255:	89 d0                	mov    eax,edx
c0001257:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125a:	31 f6                	xor    esi,esi
c000125c:	eb 3b                	jmp    c0001299 <iALLOc+0xc7>
c000125e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001260:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001268:	83 c0 0b             	add    eax,0xb
c000126b:	83 f8 0f             	cmp    eax,0xf
c000126e:	76 07                	jbe    c0001277 <iALLOc+0xa5>
c0001270:	83 e0 f8             	and    eax,0xfffffff8
c0001273:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001277:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000127b:	0f af f5             	imul   esi,ebp
c000127e:	eb 25                	jmp    c00012a5 <iALLOc+0xd3>
c0001280:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001282:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001285:	bb 10 00 00 00       	mov    ebx,0x10
c000128a:	83 f9 0f             	cmp    ecx,0xf
c000128d:	76 05                	jbe    c0001294 <iALLOc+0xc2>
c000128f:	83 e1 f8             	and    ecx,0xfffffff8
c0001292:	89 cb                	mov    ebx,ecx
c0001294:	01 de                	add    esi,ebx
c0001296:	83 c0 04             	add    eax,0x4
c0001299:	39 c7                	cmp    edi,eax
c000129b:	75 e3                	jne    c0001280 <iALLOc+0xae>
c000129d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012a9:	8b 1d b4 2d 02 c0    	mov    ebx,DWORD PTR ds:0xc0022db4
c00012af:	83 ec 0c             	sub    esp,0xc
c00012b2:	c7 05 b4 2d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022db4,0x0
c00012bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c0:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c4:	50                   	push   eax
c00012c5:	e8 7a fb ff ff       	call   c0000e44 <dlmalloc>
c00012ca:	83 c4 10             	add    esp,0x10
c00012cd:	89 1d b4 2d 02 c0    	mov    DWORD PTR ds:0xc0022db4,ebx
c00012d3:	85 c0                	test   eax,eax
c00012d5:	0f 84 92 00 00 00    	je     c000136d <iALLOc+0x19b>
c00012db:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012de:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e1:	83 e3 fc             	and    ebx,0xfffffffc
c00012e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012e8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012ed:	74 1e                	je     c000130d <iALLOc+0x13b>
c00012ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f3:	89 d9                	mov    ecx,ebx
c00012f5:	52                   	push   edx
c00012f6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012fa:	83 e9 04             	sub    ecx,0x4
c00012fd:	51                   	push   ecx
c00012fe:	6a 00                	push   0x0
c0001300:	50                   	push   eax
c0001301:	e8 02 f3 ff ff       	call   c0000608 <memset>
c0001306:	83 c4 10             	add    esp,0x10
c0001309:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000130d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001312:	75 14                	jne    c0001328 <iALLOc+0x156>
c0001314:	8d 04 37             	lea    eax,[edi+esi*1]
c0001317:	29 f3                	sub    ebx,esi
c0001319:	8d 48 08             	lea    ecx,[eax+0x8]
c000131c:	83 cb 01             	or     ebx,0x1
c000131f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001323:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001326:	89 f3                	mov    ebx,esi
c0001328:	31 c0                	xor    eax,eax
c000132a:	4d                   	dec    ebp
c000132b:	8d 4f 08             	lea    ecx,[edi+0x8]
c000132e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001332:	39 c5                	cmp    ebp,eax
c0001334:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001337:	74 2c                	je     c0001365 <iALLOc+0x193>
c0001339:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000133d:	85 c9                	test   ecx,ecx
c000133f:	75 15                	jne    c0001356 <iALLOc+0x184>
c0001341:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001344:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001347:	b9 10 00 00 00       	mov    ecx,0x10
c000134c:	83 fe 0f             	cmp    esi,0xf
c000134f:	76 05                	jbe    c0001356 <iALLOc+0x184>
c0001351:	83 e6 f8             	and    esi,0xfffffff8
c0001354:	89 f1                	mov    ecx,esi
c0001356:	89 ce                	mov    esi,ecx
c0001358:	29 cb                	sub    ebx,ecx
c000135a:	83 ce 01             	or     esi,0x1
c000135d:	40                   	inc    eax
c000135e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001361:	01 cf                	add    edi,ecx
c0001363:	eb c6                	jmp    c000132b <iALLOc+0x159>
c0001365:	83 cb 01             	or     ebx,0x1
c0001368:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000136b:	eb 08                	jmp    c0001375 <iALLOc+0x1a3>
c000136d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001379:	83 c4 2c             	add    esp,0x2c
c000137c:	5b                   	pop    ebx
c000137d:	5e                   	pop    esi
c000137e:	5f                   	pop    edi
c000137f:	5d                   	pop    ebp
c0001380:	c3                   	ret    

c0001381 <dlrealloc>:
c0001381:	55                   	push   ebp
c0001382:	57                   	push   edi
c0001383:	56                   	push   esi
c0001384:	53                   	push   ebx
c0001385:	83 ec 1c             	sub    esp,0x1c
c0001388:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000138c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001390:	85 db                	test   ebx,ebx
c0001392:	75 10                	jne    c00013a4 <dlrealloc+0x23>
c0001394:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001398:	83 c4 1c             	add    esp,0x1c
c000139b:	5b                   	pop    ebx
c000139c:	5e                   	pop    esi
c000139d:	5f                   	pop    edi
c000139e:	5d                   	pop    ebp
c000139f:	e9 a0 fa ff ff       	jmp    c0000e44 <dlmalloc>
c00013a4:	83 f8 df             	cmp    eax,0xffffffdf
c00013a7:	76 07                	jbe    c00013b0 <dlrealloc+0x2f>
c00013a9:	31 db                	xor    ebx,ebx
c00013ab:	e9 7c 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c00013b0:	83 c0 0b             	add    eax,0xb
c00013b3:	bf 10 00 00 00       	mov    edi,0x10
c00013b8:	83 f8 0f             	cmp    eax,0xf
c00013bb:	76 05                	jbe    c00013c2 <dlrealloc+0x41>
c00013bd:	83 e0 f8             	and    eax,0xfffffff8
c00013c0:	89 c7                	mov    edi,eax
c00013c2:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013c5:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00013c8:	89 c6                	mov    esi,eax
c00013ca:	83 e6 fc             	and    esi,0xfffffffc
c00013cd:	a8 02                	test   al,0x2
c00013cf:	75 d8                	jne    c00013a9 <dlrealloc+0x28>
c00013d1:	39 f7                	cmp    edi,esi
c00013d3:	0f 86 15 01 00 00    	jbe    c00014ee <dlrealloc+0x16d>
c00013d9:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00013dd:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013e0:	39 15 8c 2a 02 c0    	cmp    DWORD PTR ds:0xc0022a8c,edx
c00013e6:	75 33                	jne    c000141b <dlrealloc+0x9a>
c00013e8:	83 e1 fc             	and    ecx,0xfffffffc
c00013eb:	01 f1                	add    ecx,esi
c00013ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f1:	8d 4f 10             	lea    ecx,[edi+0x10]
c00013f4:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013f8:	77 49                	ja     c0001443 <dlrealloc+0xc2>
c00013fa:	01 fd                	add    ebp,edi
c00013fc:	83 e0 01             	and    eax,0x1
c00013ff:	09 f8                	or     eax,edi
c0001401:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001404:	89 2d 8c 2a 02 c0    	mov    DWORD PTR ds:0xc0022a8c,ebp
c000140a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000140e:	29 f8                	sub    eax,edi
c0001410:	83 c8 01             	or     eax,0x1
c0001413:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001416:	e9 11 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c000141b:	89 c8                	mov    eax,ecx
c000141d:	83 e0 fe             	and    eax,0xfffffffe
c0001420:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001425:	75 1c                	jne    c0001443 <dlrealloc+0xc2>
c0001427:	83 e1 fc             	and    ecx,0xfffffffc
c000142a:	01 f1                	add    ecx,esi
c000142c:	39 cf                	cmp    edi,ecx
c000142e:	77 13                	ja     c0001443 <dlrealloc+0xc2>
c0001430:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001433:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001436:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001439:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000143c:	89 ce                	mov    esi,ecx
c000143e:	e9 ab 00 00 00       	jmp    c00014ee <dlrealloc+0x16d>
c0001443:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001447:	8d 47 f9             	lea    eax,[edi-0x7]
c000144a:	83 ec 0c             	sub    esp,0xc
c000144d:	50                   	push   eax
c000144e:	e8 f1 f9 ff ff       	call   c0000e44 <dlmalloc>
c0001453:	83 c4 10             	add    esp,0x10
c0001456:	89 c1                	mov    ecx,eax
c0001458:	85 c0                	test   eax,eax
c000145a:	0f 84 49 ff ff ff    	je     c00013a9 <dlrealloc+0x28>
c0001460:	8d 40 f8             	lea    eax,[eax-0x8]
c0001463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001467:	39 c2                	cmp    edx,eax
c0001469:	75 0a                	jne    c0001475 <dlrealloc+0xf4>
c000146b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000146e:	83 e0 fc             	and    eax,0xfffffffc
c0001471:	01 c6                	add    esi,eax
c0001473:	eb 79                	jmp    c00014ee <dlrealloc+0x16d>
c0001475:	83 ee 04             	sub    esi,0x4
c0001478:	83 fe 27             	cmp    esi,0x27
c000147b:	76 16                	jbe    c0001493 <dlrealloc+0x112>
c000147d:	50                   	push   eax
c000147e:	56                   	push   esi
c000147f:	53                   	push   ebx
c0001480:	51                   	push   ecx
c0001481:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001485:	e8 48 f1 ff ff       	call   c00005d2 <memcpy>
c000148a:	83 c4 10             	add    esp,0x10
c000148d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001491:	eb 43                	jmp    c00014d6 <dlrealloc+0x155>
c0001493:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001495:	83 fe 13             	cmp    esi,0x13
c0001498:	89 01                	mov    DWORD PTR [ecx],eax
c000149a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000149d:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00014a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00014a3:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00014a6:	76 2e                	jbe    c00014d6 <dlrealloc+0x155>
c00014a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014ab:	83 fe 1b             	cmp    esi,0x1b
c00014ae:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00014b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00014b4:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00014b7:	76 1d                	jbe    c00014d6 <dlrealloc+0x155>
c00014b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00014bc:	83 fe 23             	cmp    esi,0x23
c00014bf:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00014c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00014c5:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00014c8:	76 0c                	jbe    c00014d6 <dlrealloc+0x155>
c00014ca:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00014cd:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00014d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00014d3:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00014d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014da:	83 ec 0c             	sub    esp,0xc
c00014dd:	53                   	push   ebx
c00014de:	e8 06 f6 ff ff       	call   c0000ae9 <dlfree>
c00014e3:	83 c4 10             	add    esp,0x10
c00014e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00014ea:	89 cb                	mov    ebx,ecx
c00014ec:	eb 3e                	jmp    c000152c <dlrealloc+0x1ab>
c00014ee:	89 f2                	mov    edx,esi
c00014f0:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014f3:	29 fa                	sub    edx,edi
c00014f5:	83 e1 01             	and    ecx,0x1
c00014f8:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00014fc:	83 fa 0f             	cmp    edx,0xf
c00014ff:	77 0b                	ja     c000150c <dlrealloc+0x18b>
c0001501:	09 ce                	or     esi,ecx
c0001503:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001506:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000150a:	eb 20                	jmp    c000152c <dlrealloc+0x1ab>
c000150c:	01 fd                	add    ebp,edi
c000150e:	83 ec 0c             	sub    esp,0xc
c0001511:	09 cf                	or     edi,ecx
c0001513:	83 ca 01             	or     edx,0x1
c0001516:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001519:	83 c5 08             	add    ebp,0x8
c000151c:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000151f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001523:	55                   	push   ebp
c0001524:	e8 c0 f5 ff ff       	call   c0000ae9 <dlfree>
c0001529:	83 c4 10             	add    esp,0x10
c000152c:	83 c4 1c             	add    esp,0x1c
c000152f:	89 d8                	mov    eax,ebx
c0001531:	5b                   	pop    ebx
c0001532:	5e                   	pop    esi
c0001533:	5f                   	pop    edi
c0001534:	5d                   	pop    ebp
c0001535:	c3                   	ret    

c0001536 <dlmemalign>:
c0001536:	55                   	push   ebp
c0001537:	57                   	push   edi
c0001538:	56                   	push   esi
c0001539:	53                   	push   ebx
c000153a:	83 ec 0c             	sub    esp,0xc
c000153d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001541:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001545:	83 fa 08             	cmp    edx,0x8
c0001548:	77 10                	ja     c000155a <dlmemalign+0x24>
c000154a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000154e:	83 c4 0c             	add    esp,0xc
c0001551:	5b                   	pop    ebx
c0001552:	5e                   	pop    esi
c0001553:	5f                   	pop    edi
c0001554:	5d                   	pop    ebp
c0001555:	e9 ea f8 ff ff       	jmp    c0000e44 <dlmalloc>
c000155a:	bf 10 00 00 00       	mov    edi,0x10
c000155f:	83 fa 0f             	cmp    edx,0xf
c0001562:	76 13                	jbe    c0001577 <dlmemalign+0x41>
c0001564:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001567:	85 d1                	test   ecx,edx
c0001569:	75 04                	jne    c000156f <dlmemalign+0x39>
c000156b:	89 d7                	mov    edi,edx
c000156d:	eb 08                	jmp    c0001577 <dlmemalign+0x41>
c000156f:	39 d7                	cmp    edi,edx
c0001571:	73 04                	jae    c0001577 <dlmemalign+0x41>
c0001573:	01 ff                	add    edi,edi
c0001575:	eb f8                	jmp    c000156f <dlmemalign+0x39>
c0001577:	83 f8 df             	cmp    eax,0xffffffdf
c000157a:	76 07                	jbe    c0001583 <dlmemalign+0x4d>
c000157c:	31 c0                	xor    eax,eax
c000157e:	e9 ce 00 00 00       	jmp    c0001651 <dlmemalign+0x11b>
c0001583:	83 c0 0b             	add    eax,0xb
c0001586:	bd 10 00 00 00       	mov    ebp,0x10
c000158b:	83 f8 0f             	cmp    eax,0xf
c000158e:	76 05                	jbe    c0001595 <dlmemalign+0x5f>
c0001590:	83 e0 f8             	and    eax,0xfffffff8
c0001593:	89 c5                	mov    ebp,eax
c0001595:	83 ec 0c             	sub    esp,0xc
c0001598:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000159c:	50                   	push   eax
c000159d:	e8 a2 f8 ff ff       	call   c0000e44 <dlmalloc>
c00015a2:	83 c4 10             	add    esp,0x10
c00015a5:	89 c1                	mov    ecx,eax
c00015a7:	85 c0                	test   eax,eax
c00015a9:	74 d1                	je     c000157c <dlmemalign+0x46>
c00015ab:	31 d2                	xor    edx,edx
c00015ad:	8d 70 f8             	lea    esi,[eax-0x8]
c00015b0:	f7 f7                	div    edi
c00015b2:	85 d2                	test   edx,edx
c00015b4:	74 62                	je     c0001618 <dlmemalign+0xe2>
c00015b6:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015ba:	89 f8                	mov    eax,edi
c00015bc:	f7 d8                	neg    eax
c00015be:	21 c3                	and    ebx,eax
c00015c0:	83 eb 08             	sub    ebx,0x8
c00015c3:	89 d8                	mov    eax,ebx
c00015c5:	29 f0                	sub    eax,esi
c00015c7:	83 f8 0f             	cmp    eax,0xf
c00015ca:	77 02                	ja     c00015ce <dlmemalign+0x98>
c00015cc:	01 fb                	add    ebx,edi
c00015ce:	89 d8                	mov    eax,ebx
c00015d0:	29 f0                	sub    eax,esi
c00015d2:	89 c6                	mov    esi,eax
c00015d4:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015d7:	89 c2                	mov    edx,eax
c00015d9:	83 e2 fc             	and    edx,0xfffffffc
c00015dc:	29 f2                	sub    edx,esi
c00015de:	a8 02                	test   al,0x2
c00015e0:	74 10                	je     c00015f2 <dlmemalign+0xbc>
c00015e2:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015e5:	83 ca 02             	or     edx,0x2
c00015e8:	8d 43 08             	lea    eax,[ebx+0x8]
c00015eb:	89 33                	mov    DWORD PTR [ebx],esi
c00015ed:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015f0:	eb 5f                	jmp    c0001651 <dlmemalign+0x11b>
c00015f2:	83 ec 0c             	sub    esp,0xc
c00015f5:	89 d0                	mov    eax,edx
c00015f7:	83 c8 01             	or     eax,0x1
c00015fa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015fd:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001602:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001605:	83 e0 01             	and    eax,0x1
c0001608:	09 f0                	or     eax,esi
c000160a:	89 de                	mov    esi,ebx
c000160c:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000160f:	51                   	push   ecx
c0001610:	e8 d4 f4 ff ff       	call   c0000ae9 <dlfree>
c0001615:	83 c4 10             	add    esp,0x10
c0001618:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000161b:	a8 02                	test   al,0x2
c000161d:	75 2f                	jne    c000164e <dlmemalign+0x118>
c000161f:	83 e0 fc             	and    eax,0xfffffffc
c0001622:	8d 55 10             	lea    edx,[ebp+0x10]
c0001625:	39 c2                	cmp    edx,eax
c0001627:	73 25                	jae    c000164e <dlmemalign+0x118>
c0001629:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000162c:	83 ec 0c             	sub    esp,0xc
c000162f:	29 e8                	sub    eax,ebp
c0001631:	83 c2 08             	add    edx,0x8
c0001634:	83 c8 01             	or     eax,0x1
c0001637:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000163a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000163d:	83 e0 01             	and    eax,0x1
c0001640:	09 c5                	or     ebp,eax
c0001642:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001645:	52                   	push   edx
c0001646:	e8 9e f4 ff ff       	call   c0000ae9 <dlfree>
c000164b:	83 c4 10             	add    esp,0x10
c000164e:	8d 46 08             	lea    eax,[esi+0x8]
c0001651:	83 c4 0c             	add    esp,0xc
c0001654:	5b                   	pop    ebx
c0001655:	5e                   	pop    esi
c0001656:	5f                   	pop    edi
c0001657:	5d                   	pop    ebp
c0001658:	c3                   	ret    

c0001659 <dlcalloc>:
c0001659:	53                   	push   ebx
c000165a:	83 ec 14             	sub    esp,0x14
c000165d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001661:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001666:	50                   	push   eax
c0001667:	e8 d8 f7 ff ff       	call   c0000e44 <dlmalloc>
c000166c:	83 c4 10             	add    esp,0x10
c000166f:	89 c3                	mov    ebx,eax
c0001671:	85 c0                	test   eax,eax
c0001673:	74 77                	je     c00016ec <dlcalloc+0x93>
c0001675:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 e0 fc             	and    eax,0xfffffffc
c000167d:	80 e2 02             	and    dl,0x2
c0001680:	75 5a                	jne    c00016dc <dlcalloc+0x83>
c0001682:	83 e8 04             	sub    eax,0x4
c0001685:	83 f8 27             	cmp    eax,0x27
c0001688:	76 03                	jbe    c000168d <dlcalloc+0x34>
c000168a:	51                   	push   ecx
c000168b:	eb 53                	jmp    c00016e0 <dlcalloc+0x87>
c000168d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001693:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000169a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00016a1:	83 f8 13             	cmp    eax,0x13
c00016a4:	76 46                	jbe    c00016ec <dlcalloc+0x93>
c00016a6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00016ad:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016b4:	83 f8 1b             	cmp    eax,0x1b
c00016b7:	76 33                	jbe    c00016ec <dlcalloc+0x93>
c00016b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016c7:	83 f8 23             	cmp    eax,0x23
c00016ca:	76 20                	jbe    c00016ec <dlcalloc+0x93>
c00016cc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016d3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016da:	eb 10                	jmp    c00016ec <dlcalloc+0x93>
c00016dc:	83 e8 08             	sub    eax,0x8
c00016df:	52                   	push   edx
c00016e0:	50                   	push   eax
c00016e1:	6a 00                	push   0x0
c00016e3:	53                   	push   ebx
c00016e4:	e8 1f ef ff ff       	call   c0000608 <memset>
c00016e9:	83 c4 10             	add    esp,0x10
c00016ec:	89 d8                	mov    eax,ebx
c00016ee:	83 c4 08             	add    esp,0x8
c00016f1:	5b                   	pop    ebx
c00016f2:	c3                   	ret    

c00016f3 <dlcfree>:
c00016f3:	e9 f1 f3 ff ff       	jmp    c0000ae9 <dlfree>

c00016f8 <dlindependent_calloc>:
c00016f8:	83 ec 28             	sub    esp,0x28
c00016fb:	b9 03 00 00 00       	mov    ecx,0x3
c0001700:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001704:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001708:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000170c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001710:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001714:	e8 b9 fa ff ff       	call   c00011d2 <iALLOc>
c0001719:	83 c4 2c             	add    esp,0x2c
c000171c:	c3                   	ret    

c000171d <dlindependent_comalloc>:
c000171d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001725:	31 c9                	xor    ecx,ecx
c0001727:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000172b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000172f:	e9 9e fa ff ff       	jmp    c00011d2 <iALLOc>

c0001734 <dlvalloc>:
c0001734:	83 ec 0c             	sub    esp,0xc
c0001737:	83 3d 60 2a 02 c0 00 	cmp    DWORD PTR ds:0xc0022a60,0x0
c000173e:	75 0a                	jne    c000174a <dlvalloc+0x16>
c0001740:	b8 60 2a 02 c0       	mov    eax,0xc0022a60
c0001745:	e8 b8 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000174a:	50                   	push   eax
c000174b:	50                   	push   eax
c000174c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001750:	ff 35 bc 2d 02 c0    	push   DWORD PTR ds:0xc0022dbc
c0001756:	e8 db fd ff ff       	call   c0001536 <dlmemalign>
c000175b:	83 c4 1c             	add    esp,0x1c
c000175e:	c3                   	ret    

c000175f <dlpvalloc>:
c000175f:	83 ec 0c             	sub    esp,0xc
c0001762:	83 3d 60 2a 02 c0 00 	cmp    DWORD PTR ds:0xc0022a60,0x0
c0001769:	75 0a                	jne    c0001775 <dlpvalloc+0x16>
c000176b:	b8 60 2a 02 c0       	mov    eax,0xc0022a60
c0001770:	e8 8d f2 ff ff       	call   c0000a02 <malloc_consolidate>
c0001775:	a1 bc 2d 02 c0       	mov    eax,ds:0xc0022dbc
c000177a:	89 c1                	mov    ecx,eax
c000177c:	52                   	push   edx
c000177d:	f7 d9                	neg    ecx
c000177f:	52                   	push   edx
c0001780:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001784:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001788:	21 ca                	and    edx,ecx
c000178a:	52                   	push   edx
c000178b:	50                   	push   eax
c000178c:	e8 a5 fd ff ff       	call   c0001536 <dlmemalign>
c0001791:	83 c4 1c             	add    esp,0x1c
c0001794:	c3                   	ret    

c0001795 <dlmalloc_trim>:
c0001795:	b8 60 2a 02 c0       	mov    eax,0xc0022a60
c000179a:	e8 63 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000179f:	31 c0                	xor    eax,eax
c00017a1:	c3                   	ret    

c00017a2 <dlmalloc_usable_size>:
c00017a2:	53                   	push   ebx
c00017a3:	31 c0                	xor    eax,eax
c00017a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00017a9:	85 c9                	test   ecx,ecx
c00017ab:	74 24                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017ad:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017b0:	f6 c2 02             	test   dl,0x2
c00017b3:	74 08                	je     c00017bd <dlmalloc_usable_size+0x1b>
c00017b5:	83 e2 fc             	and    edx,0xfffffffc
c00017b8:	8d 42 f8             	lea    eax,[edx-0x8]
c00017bb:	eb 14                	jmp    c00017d1 <dlmalloc_usable_size+0x2f>
c00017bd:	89 d3                	mov    ebx,edx
c00017bf:	31 c0                	xor    eax,eax
c00017c1:	83 e3 fe             	and    ebx,0xfffffffe
c00017c4:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017c9:	74 06                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017cb:	83 e2 fc             	and    edx,0xfffffffc
c00017ce:	8d 42 fc             	lea    eax,[edx-0x4]
c00017d1:	5b                   	pop    ebx
c00017d2:	c3                   	ret    

c00017d3 <dlmallinfo>:
c00017d3:	55                   	push   ebp
c00017d4:	57                   	push   edi
c00017d5:	56                   	push   esi
c00017d6:	53                   	push   ebx
c00017d7:	83 ec 08             	sub    esp,0x8
c00017da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017de:	83 3d 8c 2a 02 c0 00 	cmp    DWORD PTR ds:0xc0022a8c,0x0
c00017e5:	75 0a                	jne    c00017f1 <dlmallinfo+0x1e>
c00017e7:	b8 60 2a 02 c0       	mov    eax,0xc0022a60
c00017ec:	e8 11 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c00017f1:	a1 8c 2a 02 c0       	mov    eax,ds:0xc0022a8c
c00017f6:	31 ed                	xor    ebp,ebp
c00017f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00017fb:	31 c9                	xor    ecx,ecx
c00017fd:	83 e0 fc             	and    eax,0xfffffffc
c0001800:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001804:	31 c0                	xor    eax,eax
c0001806:	8b 14 85 64 2a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd59c]
c000180d:	85 d2                	test   edx,edx
c000180f:	74 0e                	je     c000181f <dlmallinfo+0x4c>
c0001811:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001814:	45                   	inc    ebp
c0001815:	83 e6 fc             	and    esi,0xfffffffc
c0001818:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000181b:	01 f1                	add    ecx,esi
c000181d:	eb ee                	jmp    c000180d <dlmallinfo+0x3a>
c000181f:	40                   	inc    eax
c0001820:	83 f8 0a             	cmp    eax,0xa
c0001823:	75 e1                	jne    c0001806 <dlmallinfo+0x33>
c0001825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001829:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001830:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001833:	b8 94 2a 02 c0       	mov    eax,0xc0022a94
c0001838:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000183b:	39 f0                	cmp    eax,esi
c000183d:	74 10                	je     c000184f <dlmallinfo+0x7c>
c000183f:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001842:	ff 04 24             	inc    DWORD PTR [esp]
c0001845:	83 e7 fc             	and    edi,0xfffffffc
c0001848:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000184b:	01 fa                	add    edx,edi
c000184d:	eb ec                	jmp    c000183b <dlmallinfo+0x68>
c000184f:	83 c0 08             	add    eax,0x8
c0001852:	3d 8c 2d 02 c0       	cmp    eax,0xc0022d8c
c0001857:	75 df                	jne    c0001838 <dlmallinfo+0x65>
c0001859:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000185c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000185f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001862:	a1 c8 2d 02 c0       	mov    eax,ds:0xc0022dc8
c0001867:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000186a:	89 03                	mov    DWORD PTR [ebx],eax
c000186c:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000186f:	8b 35 b0 2d 02 c0    	mov    esi,DWORD PTR ds:0xc0022db0
c0001875:	29 d0                	sub    eax,edx
c0001877:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000187a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000187d:	8b 35 c4 2d 02 c0    	mov    esi,DWORD PTR ds:0xc0022dc4
c0001883:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001887:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000188a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000188d:	8b 35 d4 2d 02 c0    	mov    esi,DWORD PTR ds:0xc0022dd4
c0001893:	89 d8                	mov    eax,ebx
c0001895:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001898:	83 c4 08             	add    esp,0x8
c000189b:	5b                   	pop    ebx
c000189c:	5e                   	pop    esi
c000189d:	5f                   	pop    edi
c000189e:	5d                   	pop    ebp
c000189f:	c2 04 00             	ret    0x4

c00018a2 <dlmalloc_stats>:
c00018a2:	83 ec 30             	sub    esp,0x30
c00018a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00018a9:	50                   	push   eax
c00018aa:	e8 24 ff ff ff       	call   c00017d3 <dlmallinfo>
c00018af:	83 c4 30             	add    esp,0x30
c00018b2:	c3                   	ret    

c00018b3 <dlmallopt>:
c00018b3:	56                   	push   esi
c00018b4:	b8 60 2a 02 c0       	mov    eax,0xc0022a60
c00018b9:	53                   	push   ebx
c00018ba:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018c2:	e8 3b f1 ff ff       	call   c0000a02 <malloc_consolidate>
c00018c7:	8d 46 04             	lea    eax,[esi+0x4]
c00018ca:	83 f8 05             	cmp    eax,0x5
c00018cd:	77 67                	ja     c0001936 <dlmallopt+0x83>
c00018cf:	ff 24 85 24 f0 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0fdc]
c00018d6:	83 fb 50             	cmp    ebx,0x50
c00018d9:	77 5b                	ja     c0001936 <dlmallopt+0x83>
c00018db:	ba 08 00 00 00       	mov    edx,0x8
c00018e0:	85 db                	test   ebx,ebx
c00018e2:	74 12                	je     c00018f6 <dlmallopt+0x43>
c00018e4:	83 c3 0b             	add    ebx,0xb
c00018e7:	ba 10 00 00 00       	mov    edx,0x10
c00018ec:	83 fb 0f             	cmp    ebx,0xf
c00018ef:	76 05                	jbe    c00018f6 <dlmallopt+0x43>
c00018f1:	89 da                	mov    edx,ebx
c00018f3:	83 e2 f8             	and    edx,0xfffffff8
c00018f6:	a1 60 2a 02 c0       	mov    eax,ds:0xc0022a60
c00018fb:	83 e0 03             	and    eax,0x3
c00018fe:	09 d0                	or     eax,edx
c0001900:	a3 60 2a 02 c0       	mov    ds:0xc0022a60,eax
c0001905:	eb 31                	jmp    c0001938 <dlmallopt+0x85>
c0001907:	89 1d a4 2d 02 c0    	mov    DWORD PTR ds:0xc0022da4,ebx
c000190d:	eb 06                	jmp    c0001915 <dlmallopt+0x62>
c000190f:	89 1d a8 2d 02 c0    	mov    DWORD PTR ds:0xc0022da8,ebx
c0001915:	be 01 00 00 00       	mov    esi,0x1
c000191a:	eb 1c                	jmp    c0001938 <dlmallopt+0x85>
c000191c:	89 1d ac 2d 02 c0    	mov    DWORD PTR ds:0xc0022dac,ebx
c0001922:	eb f1                	jmp    c0001915 <dlmallopt+0x62>
c0001924:	31 f6                	xor    esi,esi
c0001926:	85 db                	test   ebx,ebx
c0001928:	75 0e                	jne    c0001938 <dlmallopt+0x85>
c000192a:	c7 05 b4 2d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022db4,0x0
c0001934:	eb df                	jmp    c0001915 <dlmallopt+0x62>
c0001936:	31 f6                	xor    esi,esi
c0001938:	89 f0                	mov    eax,esi
c000193a:	5b                   	pop    ebx
c000193b:	5e                   	pop    esi
c000193c:	c3                   	ret    

c000193d <disk_status>:
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <disk_initialize>:
c0001940:	31 c0                	xor    eax,eax
c0001942:	c3                   	ret    

c0001943 <disk_read>:
c0001943:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001948:	0f b6 04 85 e0 42 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbd20]
c0001950:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001954:	e9 89 7b 01 00       	jmp    c00194e2 <fatWrapperReadDisk>

c0001959 <disk_write>:
c0001959:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000195e:	0f b6 04 85 e0 42 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbd20]
c0001966:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000196a:	e9 ba 7b 01 00       	jmp    c0019529 <fatWrapperWriteDisk>

c000196f <disk_ioctl>:
c000196f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001978:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000197d:	0f b6 04 85 e0 42 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbd20]
c0001985:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001989:	e9 e2 7b 01 00       	jmp    c0019570 <fatWrapperIoctl>

c000198e <ld_word>:
c000198e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001992:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001995:	c1 e2 08             	shl    edx,0x8
c0001998:	09 d0                	or     eax,edx
c000199a:	c3                   	ret    

c000199b <ld_dword>:
c000199b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c000199f:	89 d1                	mov    ecx,edx
c00019a1:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019a5:	c1 e1 08             	shl    ecx,0x8
c00019a8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019ab:	09 ca                	or     edx,ecx
c00019ad:	c1 e2 08             	shl    edx,0x8
c00019b0:	09 d0                	or     eax,edx
c00019b2:	c3                   	ret    

c00019b3 <ld_qword>:
c00019b3:	57                   	push   edi
c00019b4:	56                   	push   esi
c00019b5:	53                   	push   ebx
c00019b6:	31 db                	xor    ebx,ebx
c00019b8:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019bb:	89 df                	mov    edi,ebx
c00019bd:	89 ce                	mov    esi,ecx
c00019bf:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019c3:	0f a4 f7 08          	shld   edi,esi,0x8
c00019c7:	c1 e6 08             	shl    esi,0x8
c00019ca:	09 f2                	or     edx,esi
c00019cc:	89 d6                	mov    esi,edx
c00019ce:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019d2:	0f a4 f7 08          	shld   edi,esi,0x8
c00019d6:	c1 e6 08             	shl    esi,0x8
c00019d9:	09 f2                	or     edx,esi
c00019db:	89 d6                	mov    esi,edx
c00019dd:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019e1:	0f a4 f7 08          	shld   edi,esi,0x8
c00019e5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019e8:	c1 e6 08             	shl    esi,0x8
c00019eb:	89 fb                	mov    ebx,edi
c00019ed:	09 f2                	or     edx,esi
c00019ef:	89 d1                	mov    ecx,edx
c00019f1:	0f a4 cb 08          	shld   ebx,ecx,0x8
c00019f5:	c1 e1 08             	shl    ecx,0x8
c00019f8:	89 da                	mov    edx,ebx
c00019fa:	09 c8                	or     eax,ecx
c00019fc:	5b                   	pop    ebx
c00019fd:	5e                   	pop    esi
c00019fe:	5f                   	pop    edi
c00019ff:	c3                   	ret    

c0001a00 <st_word>:
c0001a00:	66 89 10             	mov    WORD PTR [eax],dx
c0001a03:	c3                   	ret    

c0001a04 <st_dword>:
c0001a04:	89 10                	mov    DWORD PTR [eax],edx
c0001a06:	c3                   	ret    

c0001a07 <st_qword>:
c0001a07:	89 10                	mov    DWORD PTR [eax],edx
c0001a09:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a0c:	c3                   	ret    

c0001a0d <mem_cpy>:
c0001a0d:	85 c9                	test   ecx,ecx
c0001a0f:	74 10                	je     c0001a21 <mem_cpy+0x14>
c0001a11:	57                   	push   edi
c0001a12:	01 c1                	add    ecx,eax
c0001a14:	56                   	push   esi
c0001a15:	89 c7                	mov    edi,eax
c0001a17:	89 d6                	mov    esi,edx
c0001a19:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a1a:	39 f9                	cmp    ecx,edi
c0001a1c:	75 fb                	jne    c0001a19 <mem_cpy+0xc>
c0001a1e:	5e                   	pop    esi
c0001a1f:	5f                   	pop    edi
c0001a20:	c3                   	ret    
c0001a21:	c3                   	ret    

c0001a22 <mem_set>:
c0001a22:	01 c1                	add    ecx,eax
c0001a24:	40                   	inc    eax
c0001a25:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a28:	39 c8                	cmp    eax,ecx
c0001a2a:	75 f8                	jne    c0001a24 <mem_set+0x2>
c0001a2c:	c3                   	ret    

c0001a2d <mem_cmp>:
c0001a2d:	57                   	push   edi
c0001a2e:	56                   	push   esi
c0001a2f:	89 c6                	mov    esi,eax
c0001a31:	53                   	push   ebx
c0001a32:	46                   	inc    esi
c0001a33:	42                   	inc    edx
c0001a34:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a38:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a3c:	29 fb                	sub    ebx,edi
c0001a3e:	89 cf                	mov    edi,ecx
c0001a40:	29 f7                	sub    edi,esi
c0001a42:	01 c7                	add    edi,eax
c0001a44:	74 04                	je     c0001a4a <mem_cmp+0x1d>
c0001a46:	85 db                	test   ebx,ebx
c0001a48:	74 e8                	je     c0001a32 <mem_cmp+0x5>
c0001a4a:	89 d8                	mov    eax,ebx
c0001a4c:	5b                   	pop    ebx
c0001a4d:	5e                   	pop    esi
c0001a4e:	5f                   	pop    edi
c0001a4f:	c3                   	ret    

c0001a50 <chk_chr>:
c0001a50:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a53:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a56:	74 07                	je     c0001a5f <chk_chr+0xf>
c0001a58:	39 d1                	cmp    ecx,edx
c0001a5a:	74 03                	je     c0001a5f <chk_chr+0xf>
c0001a5c:	40                   	inc    eax
c0001a5d:	eb f1                	jmp    c0001a50 <chk_chr>
c0001a5f:	89 c8                	mov    eax,ecx
c0001a61:	c3                   	ret    

c0001a62 <dbc_1st>:
c0001a62:	31 c0                	xor    eax,eax
c0001a64:	c3                   	ret    

c0001a65 <dbc_2nd>:
c0001a65:	31 c0                	xor    eax,eax
c0001a67:	c3                   	ret    

c0001a68 <tchar2uni>:
c0001a68:	57                   	push   edi
c0001a69:	89 c7                	mov    edi,eax
c0001a6b:	56                   	push   esi
c0001a6c:	53                   	push   ebx
c0001a6d:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a6f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a71:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a74:	84 c9                	test   cl,cl
c0001a76:	78 0a                	js     c0001a82 <tchar2uni+0x1a>
c0001a78:	0f b6 d1             	movzx  edx,cl
c0001a7b:	89 f3                	mov    ebx,esi
c0001a7d:	e9 9f 00 00 00       	jmp    c0001b21 <tchar2uni+0xb9>
c0001a82:	88 ca                	mov    dl,cl
c0001a84:	83 e2 e0             	and    edx,0xffffffe0
c0001a87:	80 fa c0             	cmp    dl,0xc0
c0001a8a:	75 0c                	jne    c0001a98 <tchar2uni+0x30>
c0001a8c:	89 ca                	mov    edx,ecx
c0001a8e:	b9 01 00 00 00       	mov    ecx,0x1
c0001a93:	83 e2 1f             	and    edx,0x1f
c0001a96:	eb 2e                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001a98:	88 ca                	mov    dl,cl
c0001a9a:	83 e2 f0             	and    edx,0xfffffff0
c0001a9d:	80 fa e0             	cmp    dl,0xe0
c0001aa0:	75 0c                	jne    c0001aae <tchar2uni+0x46>
c0001aa2:	89 ca                	mov    edx,ecx
c0001aa4:	b9 02 00 00 00       	mov    ecx,0x2
c0001aa9:	83 e2 0f             	and    edx,0xf
c0001aac:	eb 18                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001aae:	88 ca                	mov    dl,cl
c0001ab0:	83 e2 f8             	and    edx,0xfffffff8
c0001ab3:	88 d0                	mov    al,dl
c0001ab5:	83 ca ff             	or     edx,0xffffffff
c0001ab8:	3c f0                	cmp    al,0xf0
c0001aba:	75 6c                	jne    c0001b28 <tchar2uni+0xc0>
c0001abc:	89 ca                	mov    edx,ecx
c0001abe:	b9 03 00 00 00       	mov    ecx,0x3
c0001ac3:	83 e2 07             	and    edx,0x7
c0001ac6:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001aca:	46                   	inc    esi
c0001acb:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ace:	88 c8                	mov    al,cl
c0001ad0:	83 e0 c0             	and    eax,0xffffffc0
c0001ad3:	3c 80                	cmp    al,0x80
c0001ad5:	75 4e                	jne    c0001b25 <tchar2uni+0xbd>
c0001ad7:	c1 e2 06             	shl    edx,0x6
c0001ada:	83 e1 3f             	and    ecx,0x3f
c0001add:	09 ca                	or     edx,ecx
c0001adf:	39 de                	cmp    esi,ebx
c0001ae1:	75 e7                	jne    c0001aca <tchar2uni+0x62>
c0001ae3:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ae6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001aec:	77 37                	ja     c0001b25 <tchar2uni+0xbd>
c0001aee:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001af4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001afa:	76 29                	jbe    c0001b25 <tchar2uni+0xbd>
c0001afc:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b02:	76 1d                	jbe    c0001b21 <tchar2uni+0xb9>
c0001b04:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b0a:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b10:	c1 e1 06             	shl    ecx,0x6
c0001b13:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b19:	09 ca                	or     edx,ecx
c0001b1b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b21:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b23:	eb 03                	jmp    c0001b28 <tchar2uni+0xc0>
c0001b25:	83 ca ff             	or     edx,0xffffffff
c0001b28:	5b                   	pop    ebx
c0001b29:	89 d0                	mov    eax,edx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	c3                   	ret    

c0001b2e <put_utf>:
c0001b2e:	53                   	push   ebx
c0001b2f:	83 f8 7f             	cmp    eax,0x7f
c0001b32:	89 c3                	mov    ebx,eax
c0001b34:	b0 00                	mov    al,0x0
c0001b36:	77 11                	ja     c0001b49 <put_utf+0x1b>
c0001b38:	85 c9                	test   ecx,ecx
c0001b3a:	0f 84 e5 00 00 00    	je     c0001c25 <put_utf+0xf7>
c0001b40:	88 1a                	mov    BYTE PTR [edx],bl
c0001b42:	b0 01                	mov    al,0x1
c0001b44:	e9 dc 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b49:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b4f:	77 23                	ja     c0001b74 <put_utf+0x46>
c0001b51:	83 f9 01             	cmp    ecx,0x1
c0001b54:	0f 86 cb 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b5a:	89 d8                	mov    eax,ebx
c0001b5c:	83 e3 3f             	and    ebx,0x3f
c0001b5f:	c1 e8 06             	shr    eax,0x6
c0001b62:	83 cb 80             	or     ebx,0xffffff80
c0001b65:	83 c8 c0             	or     eax,0xffffffc0
c0001b68:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b6b:	88 02                	mov    BYTE PTR [edx],al
c0001b6d:	b0 02                	mov    al,0x2
c0001b6f:	e9 b1 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b74:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b7a:	77 40                	ja     c0001bbc <put_utf+0x8e>
c0001b7c:	83 f9 02             	cmp    ecx,0x2
c0001b7f:	0f 86 a0 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b85:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b8b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b91:	0f 86 8e 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b97:	89 d8                	mov    eax,ebx
c0001b99:	c1 e8 0c             	shr    eax,0xc
c0001b9c:	83 c8 e0             	or     eax,0xffffffe0
c0001b9f:	88 02                	mov    BYTE PTR [edx],al
c0001ba1:	89 d8                	mov    eax,ebx
c0001ba3:	83 e3 3f             	and    ebx,0x3f
c0001ba6:	c1 e8 06             	shr    eax,0x6
c0001ba9:	83 cb 80             	or     ebx,0xffffff80
c0001bac:	83 e0 3f             	and    eax,0x3f
c0001baf:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001bb2:	83 c8 80             	or     eax,0xffffff80
c0001bb5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bb8:	b0 03                	mov    al,0x3
c0001bba:	eb 69                	jmp    c0001c25 <put_utf+0xf7>
c0001bbc:	83 f9 03             	cmp    ecx,0x3
c0001bbf:	76 64                	jbe    c0001c25 <put_utf+0xf7>
c0001bc1:	89 d9                	mov    ecx,ebx
c0001bc3:	0f b7 c3             	movzx  eax,bx
c0001bc6:	66 31 c9             	xor    cx,cx
c0001bc9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bcf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001bd5:	c1 e9 06             	shr    ecx,0x6
c0001bd8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001bde:	77 43                	ja     c0001c23 <put_utf+0xf5>
c0001be0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001be6:	77 3b                	ja     c0001c23 <put_utf+0xf5>
c0001be8:	09 cb                	or     ebx,ecx
c0001bea:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001bf0:	89 d8                	mov    eax,ebx
c0001bf2:	c1 e8 12             	shr    eax,0x12
c0001bf5:	83 c8 f0             	or     eax,0xfffffff0
c0001bf8:	88 02                	mov    BYTE PTR [edx],al
c0001bfa:	89 d8                	mov    eax,ebx
c0001bfc:	c1 e8 0c             	shr    eax,0xc
c0001bff:	83 e0 3f             	and    eax,0x3f
c0001c02:	83 c8 80             	or     eax,0xffffff80
c0001c05:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c08:	89 d8                	mov    eax,ebx
c0001c0a:	83 e3 3f             	and    ebx,0x3f
c0001c0d:	c1 e8 06             	shr    eax,0x6
c0001c10:	83 cb 80             	or     ebx,0xffffff80
c0001c13:	83 e0 3f             	and    eax,0x3f
c0001c16:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c19:	83 c8 80             	or     eax,0xffffff80
c0001c1c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c1f:	b0 04                	mov    al,0x4
c0001c21:	eb 02                	jmp    c0001c25 <put_utf+0xf7>
c0001c23:	31 c0                	xor    eax,eax
c0001c25:	5b                   	pop    ebx
c0001c26:	c3                   	ret    

c0001c27 <clst2sect>:
c0001c27:	89 c1                	mov    ecx,eax
c0001c29:	83 ea 02             	sub    edx,0x2
c0001c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c2f:	83 e8 02             	sub    eax,0x2
c0001c32:	39 d0                	cmp    eax,edx
c0001c34:	76 0d                	jbe    c0001c43 <clst2sect+0x1c>
c0001c36:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c3a:	f7 e2                	mul    edx
c0001c3c:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c3f:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c42:	c3                   	ret    
c0001c43:	31 c0                	xor    eax,eax
c0001c45:	31 d2                	xor    edx,edx
c0001c47:	c3                   	ret    

c0001c48 <clmt_clust>:
c0001c48:	57                   	push   edi
c0001c49:	89 cf                	mov    edi,ecx
c0001c4b:	56                   	push   esi
c0001c4c:	89 d6                	mov    esi,edx
c0001c4e:	53                   	push   ebx
c0001c4f:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c53:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c56:	89 f2                	mov    edx,esi
c0001c58:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c5a:	c1 ef 09             	shr    edi,0x9
c0001c5d:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c61:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c64:	89 f9                	mov    ecx,edi
c0001c66:	31 ff                	xor    edi,edi
c0001c68:	57                   	push   edi
c0001c69:	56                   	push   esi
c0001c6a:	51                   	push   ecx
c0001c6b:	52                   	push   edx
c0001c6c:	e8 5b c4 01 00       	call   c001e0cc <__udivdi3>
c0001c71:	83 c4 10             	add    esp,0x10
c0001c74:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c76:	85 d2                	test   edx,edx
c0001c78:	74 10                	je     c0001c8a <clmt_clust+0x42>
c0001c7a:	39 d0                	cmp    eax,edx
c0001c7c:	72 07                	jb     c0001c85 <clmt_clust+0x3d>
c0001c7e:	29 d0                	sub    eax,edx
c0001c80:	83 c3 08             	add    ebx,0x8
c0001c83:	eb ef                	jmp    c0001c74 <clmt_clust+0x2c>
c0001c85:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c88:	89 c2                	mov    edx,eax
c0001c8a:	5b                   	pop    ebx
c0001c8b:	89 d0                	mov    eax,edx
c0001c8d:	5e                   	pop    esi
c0001c8e:	5f                   	pop    edi
c0001c8f:	c3                   	ret    

c0001c90 <pick_lfn>:
c0001c90:	55                   	push   ebp
c0001c91:	57                   	push   edi
c0001c92:	56                   	push   esi
c0001c93:	89 d6                	mov    esi,edx
c0001c95:	53                   	push   ebx
c0001c96:	89 c3                	mov    ebx,eax
c0001c98:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001c9b:	e8 ee fc ff ff       	call   c000198e <ld_word>
c0001ca0:	66 85 c0             	test   ax,ax
c0001ca3:	74 04                	je     c0001ca9 <pick_lfn+0x19>
c0001ca5:	31 c0                	xor    eax,eax
c0001ca7:	eb 5c                	jmp    c0001d05 <pick_lfn+0x75>
c0001ca9:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001cac:	bd 01 00 00 00       	mov    ebp,0x1
c0001cb1:	83 e1 bf             	and    ecx,0xffffffbf
c0001cb4:	31 ff                	xor    edi,edi
c0001cb6:	49                   	dec    ecx
c0001cb7:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cba:	0f b6 87 40 f1 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe0ec0]
c0001cc1:	01 f0                	add    eax,esi
c0001cc3:	e8 c6 fc ff ff       	call   c000198e <ld_word>
c0001cc8:	66 85 ed             	test   bp,bp
c0001ccb:	74 11                	je     c0001cde <pick_lfn+0x4e>
c0001ccd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cd3:	77 d0                	ja     c0001ca5 <pick_lfn+0x15>
c0001cd5:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001cd9:	89 c5                	mov    ebp,eax
c0001cdb:	41                   	inc    ecx
c0001cdc:	eb 04                	jmp    c0001ce2 <pick_lfn+0x52>
c0001cde:	66 40                	inc    ax
c0001ce0:	75 c3                	jne    c0001ca5 <pick_lfn+0x15>
c0001ce2:	47                   	inc    edi
c0001ce3:	83 ff 0d             	cmp    edi,0xd
c0001ce6:	75 d2                	jne    c0001cba <pick_lfn+0x2a>
c0001ce8:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ceb:	74 13                	je     c0001d00 <pick_lfn+0x70>
c0001ced:	66 85 ed             	test   bp,bp
c0001cf0:	74 0e                	je     c0001d00 <pick_lfn+0x70>
c0001cf2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cf8:	77 ab                	ja     c0001ca5 <pick_lfn+0x15>
c0001cfa:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d00:	b8 01 00 00 00       	mov    eax,0x1
c0001d05:	5b                   	pop    ebx
c0001d06:	5e                   	pop    esi
c0001d07:	5f                   	pop    edi
c0001d08:	5d                   	pop    ebp
c0001d09:	c3                   	ret    

c0001d0a <put_lfn>:
c0001d0a:	55                   	push   ebp
c0001d0b:	31 ed                	xor    ebp,ebp
c0001d0d:	57                   	push   edi
c0001d0e:	89 d7                	mov    edi,edx
c0001d10:	56                   	push   esi
c0001d11:	31 f6                	xor    esi,esi
c0001d13:	53                   	push   ebx
c0001d14:	83 ec 08             	sub    esp,0x8
c0001d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1a:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d22:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d28:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d2b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d2e:	31 d2                	xor    edx,edx
c0001d30:	e8 cb fc ff ff       	call   c0001a00 <st_word>
c0001d35:	0f b6 d9             	movzx  ebx,cl
c0001d38:	4b                   	dec    ebx
c0001d39:	6b db 0d             	imul   ebx,ebx,0xd
c0001d3c:	66 83 fe ff          	cmp    si,0xffff
c0001d40:	74 08                	je     c0001d4a <put_lfn+0x40>
c0001d42:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d45:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d49:	43                   	inc    ebx
c0001d4a:	0f b6 85 40 f1 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0ec0]
c0001d51:	0f b7 d6             	movzx  edx,si
c0001d54:	01 f8                	add    eax,edi
c0001d56:	e8 a5 fc ff ff       	call   c0001a00 <st_word>
c0001d5b:	66 85 f6             	test   si,si
c0001d5e:	75 03                	jne    c0001d63 <put_lfn+0x59>
c0001d60:	83 ce ff             	or     esi,0xffffffff
c0001d63:	45                   	inc    ebp
c0001d64:	83 fd 0d             	cmp    ebp,0xd
c0001d67:	75 d3                	jne    c0001d3c <put_lfn+0x32>
c0001d69:	66 46                	inc    si
c0001d6b:	74 0a                	je     c0001d77 <put_lfn+0x6d>
c0001d6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d75:	75 09                	jne    c0001d80 <put_lfn+0x76>
c0001d77:	88 c8                	mov    al,cl
c0001d79:	83 c8 40             	or     eax,0x40
c0001d7c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d80:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d84:	88 07                	mov    BYTE PTR [edi],al
c0001d86:	83 c4 08             	add    esp,0x8
c0001d89:	5b                   	pop    ebx
c0001d8a:	5e                   	pop    esi
c0001d8b:	5f                   	pop    edi
c0001d8c:	5d                   	pop    ebp
c0001d8d:	c3                   	ret    

c0001d8e <gen_numname>:
c0001d8e:	57                   	push   edi
c0001d8f:	89 cf                	mov    edi,ecx
c0001d91:	56                   	push   esi
c0001d92:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d97:	53                   	push   ebx
c0001d98:	89 c6                	mov    esi,eax
c0001d9a:	83 ec 10             	sub    esp,0x10
c0001d9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001da1:	e8 67 fc ff ff       	call   c0001a0d <mem_cpy>
c0001da6:	83 fb 05             	cmp    ebx,0x5
c0001da9:	76 2d                	jbe    c0001dd8 <gen_numname+0x4a>
c0001dab:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001dae:	66 85 c0             	test   ax,ax
c0001db1:	74 25                	je     c0001dd8 <gen_numname+0x4a>
c0001db3:	83 c7 02             	add    edi,0x2
c0001db6:	ba 10 00 00 00       	mov    edx,0x10
c0001dbb:	01 db                	add    ebx,ebx
c0001dbd:	89 c1                	mov    ecx,eax
c0001dbf:	66 d1 e8             	shr    ax,1
c0001dc2:	83 e1 01             	and    ecx,0x1
c0001dc5:	01 cb                	add    ebx,ecx
c0001dc7:	0f ba e3 10          	bt     ebx,0x10
c0001dcb:	73 06                	jae    c0001dd3 <gen_numname+0x45>
c0001dcd:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001dd3:	4a                   	dec    edx
c0001dd4:	75 e5                	jne    c0001dbb <gen_numname+0x2d>
c0001dd6:	eb d3                	jmp    c0001dab <gen_numname+0x1d>
c0001dd8:	b8 07 00 00 00       	mov    eax,0x7
c0001ddd:	88 d9                	mov    cl,bl
c0001ddf:	83 e1 0f             	and    ecx,0xf
c0001de2:	8d 51 30             	lea    edx,[ecx+0x30]
c0001de5:	80 fa 39             	cmp    dl,0x39
c0001de8:	76 03                	jbe    c0001ded <gen_numname+0x5f>
c0001dea:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ded:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001df0:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001df4:	89 da                	mov    edx,ebx
c0001df6:	c1 ea 04             	shr    edx,0x4
c0001df9:	83 fb 0f             	cmp    ebx,0xf
c0001dfc:	76 06                	jbe    c0001e04 <gen_numname+0x76>
c0001dfe:	89 c8                	mov    eax,ecx
c0001e00:	89 d3                	mov    ebx,edx
c0001e02:	eb d9                	jmp    c0001ddd <gen_numname+0x4f>
c0001e04:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e09:	31 d2                	xor    edx,edx
c0001e0b:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e0e:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e11:	39 ca                	cmp    edx,ecx
c0001e13:	73 18                	jae    c0001e2d <gen_numname+0x9f>
c0001e15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e18:	3c 20                	cmp    al,0x20
c0001e1a:	74 11                	je     c0001e2d <gen_numname+0x9f>
c0001e1c:	e8 41 fc ff ff       	call   c0001a62 <dbc_1st>
c0001e21:	85 c0                	test   eax,eax
c0001e23:	74 05                	je     c0001e2a <gen_numname+0x9c>
c0001e25:	39 d3                	cmp    ebx,edx
c0001e27:	74 04                	je     c0001e2d <gen_numname+0x9f>
c0001e29:	42                   	inc    edx
c0001e2a:	42                   	inc    edx
c0001e2b:	eb e1                	jmp    c0001e0e <gen_numname+0x80>
c0001e2d:	b0 20                	mov    al,0x20
c0001e2f:	83 f9 07             	cmp    ecx,0x7
c0001e32:	77 05                	ja     c0001e39 <gen_numname+0xab>
c0001e34:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e38:	41                   	inc    ecx
c0001e39:	42                   	inc    edx
c0001e3a:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e3e:	83 fa 07             	cmp    edx,0x7
c0001e41:	76 ea                	jbe    c0001e2d <gen_numname+0x9f>
c0001e43:	83 c4 10             	add    esp,0x10
c0001e46:	5b                   	pop    ebx
c0001e47:	5e                   	pop    esi
c0001e48:	5f                   	pop    edi
c0001e49:	c3                   	ret    

c0001e4a <sum_sfn>:
c0001e4a:	31 c9                	xor    ecx,ecx
c0001e4c:	31 d2                	xor    edx,edx
c0001e4e:	d0 ca                	ror    dl,1
c0001e50:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e53:	41                   	inc    ecx
c0001e54:	83 f9 0b             	cmp    ecx,0xb
c0001e57:	75 f5                	jne    c0001e4e <sum_sfn+0x4>
c0001e59:	88 d0                	mov    al,dl
c0001e5b:	c3                   	ret    

c0001e5c <xdir_sum>:
c0001e5c:	56                   	push   esi
c0001e5d:	31 c9                	xor    ecx,ecx
c0001e5f:	53                   	push   ebx
c0001e60:	31 d2                	xor    edx,edx
c0001e62:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e66:	43                   	inc    ebx
c0001e67:	c1 e3 05             	shl    ebx,0x5
c0001e6a:	83 fa 02             	cmp    edx,0x2
c0001e6d:	74 0b                	je     c0001e7a <xdir_sum+0x1e>
c0001e6f:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e73:	66 d1 c9             	ror    cx,1
c0001e76:	01 f1                	add    ecx,esi
c0001e78:	eb 05                	jmp    c0001e7f <xdir_sum+0x23>
c0001e7a:	ba 03 00 00 00       	mov    edx,0x3
c0001e7f:	42                   	inc    edx
c0001e80:	39 d3                	cmp    ebx,edx
c0001e82:	77 e6                	ja     c0001e6a <xdir_sum+0xe>
c0001e84:	89 c8                	mov    eax,ecx
c0001e86:	5b                   	pop    ebx
c0001e87:	5e                   	pop    esi
c0001e88:	c3                   	ret    

c0001e89 <xsum32>:
c0001e89:	d1 ca                	ror    edx,1
c0001e8b:	0f b6 c0             	movzx  eax,al
c0001e8e:	01 d0                	add    eax,edx
c0001e90:	c3                   	ret    

c0001e91 <get_xfileinfo>:
c0001e91:	55                   	push   ebp
c0001e92:	31 c9                	xor    ecx,ecx
c0001e94:	57                   	push   edi
c0001e95:	bd 40 00 00 00       	mov    ebp,0x40
c0001e9a:	56                   	push   esi
c0001e9b:	31 ff                	xor    edi,edi
c0001e9d:	53                   	push   ebx
c0001e9e:	89 c6                	mov    esi,eax
c0001ea0:	83 ec 0c             	sub    esp,0xc
c0001ea3:	89 d3                	mov    ebx,edx
c0001ea5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001eac:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001eb0:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001eb3:	76 6d                	jbe    c0001f22 <get_xfileinfo+0x91>
c0001eb5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001ebb:	76 0b                	jbe    c0001ec8 <get_xfileinfo+0x37>
c0001ebd:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001ec1:	bf 01 00 00 00       	mov    edi,0x1
c0001ec6:	eb 63                	jmp    c0001f2b <get_xfileinfo+0x9a>
c0001ec8:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001ece:	75 03                	jne    c0001ed3 <get_xfileinfo+0x42>
c0001ed0:	83 c5 02             	add    ebp,0x2
c0001ed3:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001ed6:	83 c5 02             	add    ebp,0x2
c0001ed9:	e8 b0 fa ff ff       	call   c000198e <ld_word>
c0001ede:	ff 04 24             	inc    DWORD PTR [esp]
c0001ee1:	66 85 c9             	test   cx,cx
c0001ee4:	75 0d                	jne    c0001ef3 <get_xfileinfo+0x62>
c0001ee6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001eec:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001ef1:	76 2b                	jbe    c0001f1e <get_xfileinfo+0x8d>
c0001ef3:	c1 e1 10             	shl    ecx,0x10
c0001ef6:	ba ff 00 00 00       	mov    edx,0xff
c0001efb:	0f b7 c0             	movzx  eax,ax
c0001efe:	29 fa                	sub    edx,edi
c0001f00:	09 c8                	or     eax,ecx
c0001f02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f06:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f0a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f0e:	e8 1b fc ff ff       	call   c0001b2e <put_utf>
c0001f13:	84 c0                	test   al,al
c0001f15:	74 a6                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f17:	0f b6 c0             	movzx  eax,al
c0001f1a:	01 c7                	add    edi,eax
c0001f1c:	31 c0                	xor    eax,eax
c0001f1e:	89 c1                	mov    ecx,eax
c0001f20:	eb 8a                	jmp    c0001eac <get_xfileinfo+0x1b>
c0001f22:	85 ff                	test   edi,edi
c0001f24:	74 97                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f26:	66 85 c9             	test   cx,cx
c0001f29:	75 92                	jne    c0001ebd <get_xfileinfo+0x2c>
c0001f2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f30:	31 c0                	xor    eax,eax
c0001f32:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f36:	31 d2                	xor    edx,edx
c0001f38:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f3b:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f3e:	80 e1 10             	and    cl,0x10
c0001f41:	75 08                	jne    c0001f4b <get_xfileinfo+0xba>
c0001f43:	8d 46 38             	lea    eax,[esi+0x38]
c0001f46:	e8 68 fa ff ff       	call   c00019b3 <ld_qword>
c0001f4b:	89 03                	mov    DWORD PTR [ebx],eax
c0001f4d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f50:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f53:	e8 36 fa ff ff       	call   c000198e <ld_word>
c0001f58:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f5c:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f5f:	e8 2a fa ff ff       	call   c000198e <ld_word>
c0001f64:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f68:	83 c4 0c             	add    esp,0xc
c0001f6b:	5b                   	pop    ebx
c0001f6c:	5e                   	pop    esi
c0001f6d:	5f                   	pop    edi
c0001f6e:	5d                   	pop    ebp
c0001f6f:	c3                   	ret    

c0001f70 <get_ldnumber>:
c0001f70:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f72:	85 d2                	test   edx,edx
c0001f74:	74 14                	je     c0001f8a <get_ldnumber+0x1a>
c0001f76:	56                   	push   esi
c0001f77:	53                   	push   ebx
c0001f78:	89 d3                	mov    ebx,edx
c0001f7a:	43                   	inc    ebx
c0001f7b:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f7e:	80 f9 1f             	cmp    cl,0x1f
c0001f81:	76 0d                	jbe    c0001f90 <get_ldnumber+0x20>
c0001f83:	80 f9 3a             	cmp    cl,0x3a
c0001f86:	75 f2                	jne    c0001f7a <get_ldnumber+0xa>
c0001f88:	eb 0a                	jmp    c0001f94 <get_ldnumber+0x24>
c0001f8a:	83 c9 ff             	or     ecx,0xffffffff
c0001f8d:	89 c8                	mov    eax,ecx
c0001f8f:	c3                   	ret    
c0001f90:	31 c9                	xor    ecx,ecx
c0001f92:	eb 24                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001f94:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001f97:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001f9a:	80 f9 09             	cmp    cl,0x9
c0001f9d:	77 16                	ja     c0001fb5 <get_ldnumber+0x45>
c0001f9f:	83 c2 02             	add    edx,0x2
c0001fa2:	83 c9 ff             	or     ecx,0xffffffff
c0001fa5:	39 d3                	cmp    ebx,edx
c0001fa7:	75 0f                	jne    c0001fb8 <get_ldnumber+0x48>
c0001fa9:	89 f2                	mov    edx,esi
c0001fab:	89 18                	mov    DWORD PTR [eax],ebx
c0001fad:	0f be ca             	movsx  ecx,dl
c0001fb0:	83 e9 30             	sub    ecx,0x30
c0001fb3:	eb 03                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001fb5:	83 c9 ff             	or     ecx,0xffffffff
c0001fb8:	89 c8                	mov    eax,ecx
c0001fba:	5b                   	pop    ebx
c0001fbb:	5e                   	pop    esi
c0001fbc:	c3                   	ret    

c0001fbd <crc32>:
c0001fbd:	56                   	push   esi
c0001fbe:	89 d6                	mov    esi,edx
c0001fc0:	53                   	push   ebx
c0001fc1:	b2 01                	mov    dl,0x1
c0001fc3:	bb 08 00 00 00       	mov    ebx,0x8
c0001fc8:	89 f1                	mov    ecx,esi
c0001fca:	84 d1                	test   cl,dl
c0001fcc:	0f 95 c1             	setne  cl
c0001fcf:	0f b6 c9             	movzx  ecx,cl
c0001fd2:	31 c1                	xor    ecx,eax
c0001fd4:	89 c8                	mov    eax,ecx
c0001fd6:	d1 e8                	shr    eax,1
c0001fd8:	80 e1 01             	and    cl,0x1
c0001fdb:	74 05                	je     c0001fe2 <crc32+0x25>
c0001fdd:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fe2:	d1 e2                	shl    edx,1
c0001fe4:	4b                   	dec    ebx
c0001fe5:	75 e1                	jne    c0001fc8 <crc32+0xb>
c0001fe7:	5b                   	pop    ebx
c0001fe8:	5e                   	pop    esi
c0001fe9:	c3                   	ret    

c0001fea <test_gpt_header>:
c0001fea:	55                   	push   ebp
c0001feb:	b9 10 00 00 00       	mov    ecx,0x10
c0001ff0:	57                   	push   edi
c0001ff1:	ba 40 f0 01 c0       	mov    edx,0xc001f040
c0001ff6:	56                   	push   esi
c0001ff7:	31 ff                	xor    edi,edi
c0001ff9:	53                   	push   ebx
c0001ffa:	89 c3                	mov    ebx,eax
c0001ffc:	e8 2c fa ff ff       	call   c0001a2d <mem_cmp>
c0002001:	85 c0                	test   eax,eax
c0002003:	75 55                	jne    c000205a <test_gpt_header+0x70>
c0002005:	89 c7                	mov    edi,eax
c0002007:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000200c:	83 ce ff             	or     esi,0xffffffff
c000200f:	31 d2                	xor    edx,edx
c0002011:	83 fd 03             	cmp    ebp,0x3
c0002014:	76 05                	jbe    c000201b <test_gpt_header+0x31>
c0002016:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000201b:	89 f0                	mov    eax,esi
c000201d:	45                   	inc    ebp
c000201e:	e8 9a ff ff ff       	call   c0001fbd <crc32>
c0002023:	83 fd 4c             	cmp    ebp,0x4c
c0002026:	89 c6                	mov    esi,eax
c0002028:	75 e5                	jne    c000200f <test_gpt_header+0x25>
c000202a:	8d 43 10             	lea    eax,[ebx+0x10]
c000202d:	f7 d6                	not    esi
c000202f:	e8 67 f9 ff ff       	call   c000199b <ld_dword>
c0002034:	39 c6                	cmp    esi,eax
c0002036:	75 22                	jne    c000205a <test_gpt_header+0x70>
c0002038:	8d 43 54             	lea    eax,[ebx+0x54]
c000203b:	e8 5b f9 ff ff       	call   c000199b <ld_dword>
c0002040:	83 c0 80             	add    eax,0xffffff80
c0002043:	75 15                	jne    c000205a <test_gpt_header+0x70>
c0002045:	8d 43 50             	lea    eax,[ebx+0x50]
c0002048:	e8 4e f9 ff ff       	call   c000199b <ld_dword>
c000204d:	3d 80 00 00 00       	cmp    eax,0x80
c0002052:	0f 96 c0             	setbe  al
c0002055:	0f b6 c0             	movzx  eax,al
c0002058:	89 c7                	mov    edi,eax
c000205a:	5b                   	pop    ebx
c000205b:	89 f8                	mov    eax,edi
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <make_rand>:
c0002061:	56                   	push   esi
c0002062:	85 c0                	test   eax,eax
c0002064:	53                   	push   ebx
c0002065:	75 05                	jne    c000206c <make_rand+0xb>
c0002067:	b8 01 00 00 00       	mov    eax,0x1
c000206c:	01 d1                	add    ecx,edx
c000206e:	bb 08 00 00 00       	mov    ebx,0x8
c0002073:	89 c6                	mov    esi,eax
c0002075:	d1 e8                	shr    eax,1
c0002077:	83 e6 01             	and    esi,0x1
c000207a:	85 f6                	test   esi,esi
c000207c:	74 05                	je     c0002083 <make_rand+0x22>
c000207e:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002083:	4b                   	dec    ebx
c0002084:	75 ed                	jne    c0002073 <make_rand+0x12>
c0002086:	42                   	inc    edx
c0002087:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000208a:	39 ca                	cmp    edx,ecx
c000208c:	75 e0                	jne    c000206e <make_rand+0xd>
c000208e:	5b                   	pop    ebx
c000208f:	5e                   	pop    esi
c0002090:	c3                   	ret    

c0002091 <validate>:
c0002091:	56                   	push   esi
c0002092:	53                   	push   ebx
c0002093:	89 d6                	mov    esi,edx
c0002095:	51                   	push   ecx
c0002096:	85 c0                	test   eax,eax
c0002098:	75 09                	jne    c00020a3 <validate+0x12>
c000209a:	b8 09 00 00 00       	mov    eax,0x9
c000209f:	31 c9                	xor    ecx,ecx
c00020a1:	eb 2f                	jmp    c00020d2 <validate+0x41>
c00020a3:	89 c3                	mov    ebx,eax
c00020a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00020a7:	85 c0                	test   eax,eax
c00020a9:	74 ef                	je     c000209a <validate+0x9>
c00020ab:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00020ae:	74 ea                	je     c000209a <validate+0x9>
c00020b0:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020b4:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020b8:	75 e0                	jne    c000209a <validate+0x9>
c00020ba:	83 ec 0c             	sub    esp,0xc
c00020bd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020c1:	50                   	push   eax
c00020c2:	e8 76 f8 ff ff       	call   c000193d <disk_status>
c00020c7:	83 c4 10             	add    esp,0x10
c00020ca:	a8 01                	test   al,0x1
c00020cc:	75 cc                	jne    c000209a <validate+0x9>
c00020ce:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020d0:	31 c0                	xor    eax,eax
c00020d2:	89 0e                	mov    DWORD PTR [esi],ecx
c00020d4:	5a                   	pop    edx
c00020d5:	5b                   	pop    ebx
c00020d6:	5e                   	pop    esi
c00020d7:	c3                   	ret    

c00020d8 <sync_window>:
c00020d8:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020dc:	0f 84 85 00 00 00    	je     c0002167 <sync_window+0x8f>
c00020e2:	55                   	push   ebp
c00020e3:	8d 68 54             	lea    ebp,[eax+0x54]
c00020e6:	57                   	push   edi
c00020e7:	56                   	push   esi
c00020e8:	53                   	push   ebx
c00020e9:	89 c3                	mov    ebx,eax
c00020eb:	83 ec 28             	sub    esp,0x28
c00020ee:	6a 01                	push   0x1
c00020f0:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00020f3:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00020f6:	55                   	push   ebp
c00020f7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020fb:	50                   	push   eax
c00020fc:	e8 58 f8 ff ff       	call   c0001959 <disk_write>
c0002101:	83 c4 20             	add    esp,0x20
c0002104:	ba 01 00 00 00       	mov    edx,0x1
c0002109:	85 c0                	test   eax,eax
c000210b:	75 50                	jne    c000215d <sync_window+0x85>
c000210d:	31 ff                	xor    edi,edi
c000210f:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002112:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002116:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000211a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000211d:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002120:	89 c6                	mov    esi,eax
c0002122:	89 d7                	mov    edi,edx
c0002124:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002127:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000212b:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000212e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002132:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002136:	73 23                	jae    c000215b <sync_window+0x83>
c0002138:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000213c:	75 1d                	jne    c000215b <sync_window+0x83>
c000213e:	83 ec 0c             	sub    esp,0xc
c0002141:	6a 01                	push   0x1
c0002143:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002147:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000214b:	52                   	push   edx
c000214c:	50                   	push   eax
c000214d:	55                   	push   ebp
c000214e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002152:	50                   	push   eax
c0002153:	e8 01 f8 ff ff       	call   c0001959 <disk_write>
c0002158:	83 c4 20             	add    esp,0x20
c000215b:	31 d2                	xor    edx,edx
c000215d:	83 c4 1c             	add    esp,0x1c
c0002160:	89 d0                	mov    eax,edx
c0002162:	5b                   	pop    ebx
c0002163:	5e                   	pop    esi
c0002164:	5f                   	pop    edi
c0002165:	5d                   	pop    ebp
c0002166:	c3                   	ret    
c0002167:	31 d2                	xor    edx,edx
c0002169:	89 d0                	mov    eax,edx
c000216b:	c3                   	ret    

c000216c <move_window>:
c000216c:	56                   	push   esi
c000216d:	53                   	push   ebx
c000216e:	89 c3                	mov    ebx,eax
c0002170:	83 ec 14             	sub    esp,0x14
c0002173:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002176:	75 07                	jne    c000217f <move_window+0x13>
c0002178:	31 f6                	xor    esi,esi
c000217a:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000217d:	74 59                	je     c00021d8 <move_window+0x6c>
c000217f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002183:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002187:	89 d8                	mov    eax,ebx
c0002189:	e8 4a ff ff ff       	call   c00020d8 <sync_window>
c000218e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002192:	89 c6                	mov    esi,eax
c0002194:	85 c0                	test   eax,eax
c0002196:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000219a:	75 3c                	jne    c00021d8 <move_window+0x6c>
c000219c:	83 ec 0c             	sub    esp,0xc
c000219f:	8d 43 54             	lea    eax,[ebx+0x54]
c00021a2:	6a 01                	push   0x1
c00021a4:	51                   	push   ecx
c00021a5:	52                   	push   edx
c00021a6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00021aa:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00021ae:	50                   	push   eax
c00021af:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021b3:	50                   	push   eax
c00021b4:	e8 8a f7 ff ff       	call   c0001943 <disk_read>
c00021b9:	83 c4 20             	add    esp,0x20
c00021bc:	85 c0                	test   eax,eax
c00021be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021c6:	74 0a                	je     c00021d2 <move_window+0x66>
c00021c8:	83 ca ff             	or     edx,0xffffffff
c00021cb:	be 01 00 00 00       	mov    esi,0x1
c00021d0:	89 d1                	mov    ecx,edx
c00021d2:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021d5:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021d8:	89 f0                	mov    eax,esi
c00021da:	83 c4 14             	add    esp,0x14
c00021dd:	5b                   	pop    ebx
c00021de:	5e                   	pop    esi
c00021df:	c3                   	ret    

c00021e0 <check_fs>:
c00021e0:	53                   	push   ebx
c00021e1:	89 c3                	mov    ebx,eax
c00021e3:	83 ec 08             	sub    esp,0x8
c00021e6:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021ea:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021f1:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00021f8:	e8 6f ff ff ff       	call   c000216c <move_window>
c00021fd:	ba 04 00 00 00       	mov    edx,0x4
c0002202:	85 c0                	test   eax,eax
c0002204:	0f 85 89 00 00 00    	jne    c0002293 <check_fs+0xb3>
c000220a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002210:	e8 79 f7 ff ff       	call   c000198e <ld_word>
c0002215:	ba 03 00 00 00       	mov    edx,0x3
c000221a:	66 3d 55 aa          	cmp    ax,0xaa55
c000221e:	75 73                	jne    c0002293 <check_fs+0xb3>
c0002220:	ba 60 f1 01 c0       	mov    edx,0xc001f160
c0002225:	8d 43 54             	lea    eax,[ebx+0x54]
c0002228:	b9 0b 00 00 00       	mov    ecx,0xb
c000222d:	e8 fb f7 ff ff       	call   c0001a2d <mem_cmp>
c0002232:	ba 01 00 00 00       	mov    edx,0x1
c0002237:	85 c0                	test   eax,eax
c0002239:	74 58                	je     c0002293 <check_fs+0xb3>
c000223b:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000223e:	8d 50 18             	lea    edx,[eax+0x18]
c0002241:	80 fa 01             	cmp    dl,0x1
c0002244:	76 09                	jbe    c000224f <check_fs+0x6f>
c0002246:	ba 02 00 00 00       	mov    edx,0x2
c000224b:	3c eb                	cmp    al,0xeb
c000224d:	75 44                	jne    c0002293 <check_fs+0xb3>
c000224f:	ba 74 19 02 c0       	mov    edx,0xc0021974
c0002254:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000225a:	b9 03 00 00 00       	mov    ecx,0x3
c000225f:	e8 c9 f7 ff ff       	call   c0001a2d <mem_cmp>
c0002264:	31 d2                	xor    edx,edx
c0002266:	85 c0                	test   eax,eax
c0002268:	74 29                	je     c0002293 <check_fs+0xb3>
c000226a:	ba 6c f1 01 c0       	mov    edx,0xc001f16c
c000226f:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002275:	b9 05 00 00 00       	mov    ecx,0x5
c000227a:	e8 ae f7 ff ff       	call   c0001a2d <mem_cmp>
c000227f:	31 d2                	xor    edx,edx
c0002281:	85 c0                	test   eax,eax
c0002283:	74 0e                	je     c0002293 <check_fs+0xb3>
c0002285:	31 d2                	xor    edx,edx
c0002287:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000228e:	0f 95 c2             	setne  dl
c0002291:	01 d2                	add    edx,edx
c0002293:	89 d0                	mov    eax,edx
c0002295:	83 c4 08             	add    esp,0x8
c0002298:	5b                   	pop    ebx
c0002299:	c3                   	ret    

c000229a <find_volume>:
c000229a:	55                   	push   ebp
c000229b:	31 c9                	xor    ecx,ecx
c000229d:	57                   	push   edi
c000229e:	56                   	push   esi
c000229f:	89 d6                	mov    esi,edx
c00022a1:	53                   	push   ebx
c00022a2:	31 d2                	xor    edx,edx
c00022a4:	83 ec 3c             	sub    esp,0x3c
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	e8 32 ff ff ff       	call   c00021e0 <check_fs>
c00022ae:	83 f8 02             	cmp    eax,0x2
c00022b1:	74 0e                	je     c00022c1 <find_volume+0x27>
c00022b3:	0f 87 5d 01 00 00    	ja     c0002416 <find_volume+0x17c>
c00022b9:	85 f6                	test   esi,esi
c00022bb:	0f 84 55 01 00 00    	je     c0002416 <find_volume+0x17c>
c00022c1:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022c8:	0f 85 dd 00 00 00    	jne    c00023ab <find_volume+0x111>
c00022ce:	31 c9                	xor    ecx,ecx
c00022d0:	ba 01 00 00 00       	mov    edx,0x1
c00022d5:	89 d8                	mov    eax,ebx
c00022d7:	e8 90 fe ff ff       	call   c000216c <move_window>
c00022dc:	85 c0                	test   eax,eax
c00022de:	74 0a                	je     c00022ea <find_volume+0x50>
c00022e0:	b8 04 00 00 00       	mov    eax,0x4
c00022e5:	e9 2c 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c00022ea:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022ed:	89 e8                	mov    eax,ebp
c00022ef:	e8 f6 fc ff ff       	call   c0001fea <test_gpt_header>
c00022f4:	85 c0                	test   eax,eax
c00022f6:	75 0a                	jne    c0002302 <find_volume+0x68>
c00022f8:	b8 03 00 00 00       	mov    eax,0x3
c00022fd:	e9 14 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c0002302:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002308:	e8 8e f6 ff ff       	call   c000199b <ld_dword>
c000230d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002311:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002317:	e8 97 f6 ff ff       	call   c00019b3 <ld_qword>
c000231c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002324:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000232c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002334:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002338:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000233c:	74 ba                	je     c00022f8 <find_volume+0x5e>
c000233e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002342:	31 c9                	xor    ecx,ecx
c0002344:	c1 e7 07             	shl    edi,0x7
c0002347:	89 d8                	mov    eax,ebx
c0002349:	89 fa                	mov    edx,edi
c000234b:	c1 ea 09             	shr    edx,0x9
c000234e:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002352:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002356:	e8 11 fe ff ff       	call   c000216c <move_window>
c000235b:	85 c0                	test   eax,eax
c000235d:	75 81                	jne    c00022e0 <find_volume+0x46>
c000235f:	81 e7 80 01 00 00    	and    edi,0x180
c0002365:	b9 10 00 00 00       	mov    ecx,0x10
c000236a:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000236e:	ba 50 f1 01 c0       	mov    edx,0xc001f150
c0002373:	e8 b5 f6 ff ff       	call   c0001a2d <mem_cmp>
c0002378:	85 c0                	test   eax,eax
c000237a:	75 29                	jne    c00023a5 <find_volume+0x10b>
c000237c:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002380:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002384:	e8 2a f6 ff ff       	call   c00019b3 <ld_qword>
c0002389:	89 d1                	mov    ecx,edx
c000238b:	89 c2                	mov    edx,eax
c000238d:	89 d8                	mov    eax,ebx
c000238f:	e8 4c fe ff ff       	call   c00021e0 <check_fs>
c0002394:	85 f6                	test   esi,esi
c0002396:	75 07                	jne    c000239f <find_volume+0x105>
c0002398:	83 f8 01             	cmp    eax,0x1
c000239b:	77 08                	ja     c00023a5 <find_volume+0x10b>
c000239d:	eb 77                	jmp    c0002416 <find_volume+0x17c>
c000239f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00023a3:	74 71                	je     c0002416 <find_volume+0x17c>
c00023a5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00023a9:	eb 89                	jmp    c0002334 <find_volume+0x9a>
c00023ab:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023af:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023b5:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023bf:	89 cd                	mov    ebp,ecx
c00023c1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023c5:	89 f8                	mov    eax,edi
c00023c7:	83 c7 10             	add    edi,0x10
c00023ca:	e8 cc f5 ff ff       	call   c000199b <ld_dword>
c00023cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023d3:	89 01                	mov    DWORD PTR [ecx],eax
c00023d5:	83 c1 04             	add    ecx,0x4
c00023d8:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023dc:	75 e3                	jne    c00023c1 <find_volume+0x127>
c00023de:	31 ff                	xor    edi,edi
c00023e0:	85 f6                	test   esi,esi
c00023e2:	74 03                	je     c00023e7 <find_volume+0x14d>
c00023e4:	8d 7e ff             	lea    edi,[esi-0x1]
c00023e7:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023eb:	85 d2                	test   edx,edx
c00023ed:	74 14                	je     c0002403 <find_volume+0x169>
c00023ef:	31 c9                	xor    ecx,ecx
c00023f1:	89 d8                	mov    eax,ebx
c00023f3:	e8 e8 fd ff ff       	call   c00021e0 <check_fs>
c00023f8:	83 f8 01             	cmp    eax,0x1
c00023fb:	76 19                	jbe    c0002416 <find_volume+0x17c>
c00023fd:	85 f6                	test   esi,esi
c00023ff:	74 0f                	je     c0002410 <find_volume+0x176>
c0002401:	eb 13                	jmp    c0002416 <find_volume+0x17c>
c0002403:	85 f6                	test   esi,esi
c0002405:	0f 85 ed fe ff ff    	jne    c00022f8 <find_volume+0x5e>
c000240b:	b8 03 00 00 00       	mov    eax,0x3
c0002410:	47                   	inc    edi
c0002411:	83 ff 03             	cmp    edi,0x3
c0002414:	76 d1                	jbe    c00023e7 <find_volume+0x14d>
c0002416:	83 c4 3c             	add    esp,0x3c
c0002419:	5b                   	pop    ebx
c000241a:	5e                   	pop    esi
c000241b:	5f                   	pop    edi
c000241c:	5d                   	pop    ebp
c000241d:	c3                   	ret    

c000241e <mount_volume>:
c000241e:	55                   	push   ebp
c000241f:	57                   	push   edi
c0002420:	89 cf                	mov    edi,ecx
c0002422:	56                   	push   esi
c0002423:	53                   	push   ebx
c0002424:	bb 0b 00 00 00       	mov    ebx,0xb
c0002429:	83 ec 3c             	sub    esp,0x3c
c000242c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002432:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002436:	e8 35 fb ff ff       	call   c0001f70 <get_ldnumber>
c000243b:	85 c0                	test   eax,eax
c000243d:	0f 88 3a 05 00 00    	js     c000297d <mount_volume+0x55f>
c0002443:	8b 2c 85 00 2e 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdd200]
c000244a:	89 c6                	mov    esi,eax
c000244c:	bb 0c 00 00 00       	mov    ebx,0xc
c0002451:	85 ed                	test   ebp,ebp
c0002453:	0f 84 24 05 00 00    	je     c000297d <mount_volume+0x55f>
c0002459:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245d:	83 e7 fe             	and    edi,0xfffffffe
c0002460:	89 2a                	mov    DWORD PTR [edx],ebp
c0002462:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002466:	74 32                	je     c000249a <mount_volume+0x7c>
c0002468:	83 ec 0c             	sub    esp,0xc
c000246b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000246f:	50                   	push   eax
c0002470:	e8 c8 f4 ff ff       	call   c000193d <disk_status>
c0002475:	83 c4 10             	add    esp,0x10
c0002478:	a8 01                	test   al,0x1
c000247a:	75 1e                	jne    c000249a <mount_volume+0x7c>
c000247c:	31 db                	xor    ebx,ebx
c000247e:	89 f9                	mov    ecx,edi
c0002480:	84 c9                	test   cl,cl
c0002482:	0f 84 f5 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002488:	a8 04                	test   al,0x4
c000248a:	0f 84 ed 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002490:	bb 0a 00 00 00       	mov    ebx,0xa
c0002495:	e9 e3 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c000249a:	83 ec 0c             	sub    esp,0xc
c000249d:	89 f0                	mov    eax,esi
c000249f:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00024a3:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c00024a6:	0f b6 f0             	movzx  esi,al
c00024a9:	bb 03 00 00 00       	mov    ebx,0x3
c00024ae:	56                   	push   esi
c00024af:	e8 8c f4 ff ff       	call   c0001940 <disk_initialize>
c00024b4:	83 c4 10             	add    esp,0x10
c00024b7:	a8 01                	test   al,0x1
c00024b9:	0f 85 be 04 00 00    	jne    c000297d <mount_volume+0x55f>
c00024bf:	89 f9                	mov    ecx,edi
c00024c1:	84 c9                	test   cl,cl
c00024c3:	74 04                	je     c00024c9 <mount_volume+0xab>
c00024c5:	a8 04                	test   al,0x4
c00024c7:	75 c7                	jne    c0002490 <mount_volume+0x72>
c00024c9:	31 d2                	xor    edx,edx
c00024cb:	89 e8                	mov    eax,ebp
c00024cd:	e8 c8 fd ff ff       	call   c000229a <find_volume>
c00024d2:	83 f8 04             	cmp    eax,0x4
c00024d5:	75 0a                	jne    c00024e1 <mount_volume+0xc3>
c00024d7:	bb 01 00 00 00       	mov    ebx,0x1
c00024dc:	e9 9c 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024e1:	83 f8 01             	cmp    eax,0x1
c00024e4:	76 0a                	jbe    c00024f0 <mount_volume+0xd2>
c00024e6:	bb 0d 00 00 00       	mov    ebx,0xd
c00024eb:	e9 8d 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024f0:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00024f3:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00024f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00024fe:	75 17                	jne    c0002517 <mount_volume+0xf9>
c0002500:	b8 0b 00 00 00       	mov    eax,0xb
c0002505:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000250a:	75 da                	jne    c00024e6 <mount_volume+0xc8>
c000250c:	40                   	inc    eax
c000250d:	83 f8 40             	cmp    eax,0x40
c0002510:	75 f3                	jne    c0002505 <mount_volume+0xe7>
c0002512:	e9 5a 02 00 00       	jmp    c0002771 <mount_volume+0x353>
c0002517:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000251a:	e8 6f f4 ff ff       	call   c000198e <ld_word>
c000251f:	66 3d 00 02          	cmp    ax,0x200
c0002523:	75 c1                	jne    c00024e6 <mount_volume+0xc8>
c0002525:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002528:	e8 61 f4 ff ff       	call   c000198e <ld_word>
c000252d:	0f b7 c0             	movzx  eax,ax
c0002530:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002534:	85 c0                	test   eax,eax
c0002536:	75 0c                	jne    c0002544 <mount_volume+0x126>
c0002538:	8d 45 78             	lea    eax,[ebp+0x78]
c000253b:	e8 5b f4 ff ff       	call   c000199b <ld_dword>
c0002540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002548:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000254b:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000254e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002552:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002555:	48                   	dec    eax
c0002556:	3c 01                	cmp    al,0x1
c0002558:	77 8c                	ja     c00024e6 <mount_volume+0xc8>
c000255a:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000255e:	89 c3                	mov    ebx,eax
c0002560:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002564:	66 85 c0             	test   ax,ax
c0002567:	0f 84 79 ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c000256d:	8d 40 ff             	lea    eax,[eax-0x1]
c0002570:	85 d8                	test   eax,ebx
c0002572:	0f 85 6e ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002578:	8d 45 65             	lea    eax,[ebp+0x65]
c000257b:	e8 0e f4 ff ff       	call   c000198e <ld_word>
c0002580:	89 c7                	mov    edi,eax
c0002582:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002586:	a8 0f                	test   al,0xf
c0002588:	0f 85 58 ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c000258e:	8d 45 67             	lea    eax,[ebp+0x67]
c0002591:	e8 f8 f3 ff ff       	call   c000198e <ld_word>
c0002596:	0f b7 f0             	movzx  esi,ax
c0002599:	85 f6                	test   esi,esi
c000259b:	75 0a                	jne    c00025a7 <mount_volume+0x189>
c000259d:	8d 45 74             	lea    eax,[ebp+0x74]
c00025a0:	e8 f6 f3 ff ff       	call   c000199b <ld_dword>
c00025a5:	89 c6                	mov    esi,eax
c00025a7:	8d 45 62             	lea    eax,[ebp+0x62]
c00025aa:	e8 df f3 ff ff       	call   c000198e <ld_word>
c00025af:	66 85 c0             	test   ax,ax
c00025b2:	0f 84 2e ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c00025b8:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025bd:	0f b7 c8             	movzx  ecx,ax
c00025c0:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025c9:	89 fa                	mov    edx,edi
c00025cb:	66 c1 ea 04          	shr    dx,0x4
c00025cf:	0f b7 d2             	movzx  edx,dx
c00025d2:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025d6:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025dd:	39 c6                	cmp    esi,eax
c00025df:	0f 82 01 ff ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025e5:	29 c6                	sub    esi,eax
c00025e7:	31 d2                	xor    edx,edx
c00025e9:	89 f0                	mov    eax,esi
c00025eb:	f7 f3                	div    ebx
c00025ed:	39 de                	cmp    esi,ebx
c00025ef:	0f 82 f1 fe ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025f5:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025fa:	0f 87 e6 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c0002600:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002605:	0f 86 63 03 00 00    	jbe    c000296e <mount_volume+0x550>
c000260b:	bb 03 00 00 00       	mov    ebx,0x3
c0002610:	8d 70 02             	lea    esi,[eax+0x2]
c0002613:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000261b:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000261e:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002621:	31 d2                	xor    edx,edx
c0002623:	89 c8                	mov    eax,ecx
c0002625:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002628:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000262c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002630:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002634:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002638:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000263b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000263e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002642:	31 d2                	xor    edx,edx
c0002644:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002648:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000264c:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000264f:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002652:	83 fb 03             	cmp    ebx,0x3
c0002655:	75 2b                	jne    c0002682 <mount_volume+0x264>
c0002657:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000265a:	e8 2f f3 ff ff       	call   c000198e <ld_word>
c000265f:	66 09 c7             	or     di,ax
c0002662:	0f 85 7e fe ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002668:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000266e:	c1 e6 02             	shl    esi,0x2
c0002671:	e8 25 f3 ff ff       	call   c000199b <ld_dword>
c0002676:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000267d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002680:	eb 30                	jmp    c00026b2 <mount_volume+0x294>
c0002682:	66 85 ff             	test   di,di
c0002685:	0f 84 5b fe ff ff    	je     c00024e6 <mount_volume+0xc8>
c000268b:	31 d2                	xor    edx,edx
c000268d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002691:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002695:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002699:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000269c:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000269f:	83 fb 02             	cmp    ebx,0x2
c00026a2:	75 04                	jne    c00026a8 <mount_volume+0x28a>
c00026a4:	01 f6                	add    esi,esi
c00026a6:	eb 0a                	jmp    c00026b2 <mount_volume+0x294>
c00026a8:	8d 04 76             	lea    eax,[esi+esi*2]
c00026ab:	83 e6 01             	and    esi,0x1
c00026ae:	d1 e8                	shr    eax,1
c00026b0:	01 c6                	add    esi,eax
c00026b2:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026b8:	c1 ee 09             	shr    esi,0x9
c00026bb:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026bf:	0f 87 21 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00026c5:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026cc:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026d3:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026d7:	83 fb 03             	cmp    ebx,0x3
c00026da:	75 7a                	jne    c0002756 <mount_volume+0x338>
c00026dc:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026e2:	e8 a7 f2 ff ff       	call   c000198e <ld_word>
c00026e7:	66 48                	dec    ax
c00026e9:	75 6b                	jne    c0002756 <mount_volume+0x338>
c00026eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026f3:	83 c2 01             	add    edx,0x1
c00026f6:	89 e8                	mov    eax,ebp
c00026f8:	83 d1 00             	adc    ecx,0x0
c00026fb:	e8 6c fa ff ff       	call   c000216c <move_window>
c0002700:	85 c0                	test   eax,eax
c0002702:	75 52                	jne    c0002756 <mount_volume+0x338>
c0002704:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0002708:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c000270e:	e8 7b f2 ff ff       	call   c000198e <ld_word>
c0002713:	66 3d 55 aa          	cmp    ax,0xaa55
c0002717:	75 3d                	jne    c0002756 <mount_volume+0x338>
c0002719:	8d 45 54             	lea    eax,[ebp+0x54]
c000271c:	e8 7a f2 ff ff       	call   c000199b <ld_dword>
c0002721:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002726:	75 2e                	jne    c0002756 <mount_volume+0x338>
c0002728:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000272e:	e8 68 f2 ff ff       	call   c000199b <ld_dword>
c0002733:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002738:	75 1c                	jne    c0002756 <mount_volume+0x338>
c000273a:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002740:	e8 56 f2 ff ff       	call   c000199b <ld_dword>
c0002745:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002748:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000274e:	e8 48 f2 ff ff       	call   c000199b <ld_dword>
c0002753:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002756:	66 a1 e0 2d 02 c0    	mov    ax,ds:0xc0022de0
c000275c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000275f:	40                   	inc    eax
c0002760:	31 db                	xor    ebx,ebx
c0002762:	66 a3 e0 2d 02 c0    	mov    ds:0xc0022de0,ax
c0002768:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000276c:	e9 0c 02 00 00       	jmp    c000297d <mount_volume+0x55f>
c0002771:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002777:	e8 12 f2 ff ff       	call   c000198e <ld_word>
c000277c:	66 3d 00 01          	cmp    ax,0x100
c0002780:	0f 85 60 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002786:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000278d:	0f 85 53 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002793:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002799:	e8 15 f2 ff ff       	call   c00019b3 <ld_qword>
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00027a6:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c00027ac:	e8 ea f1 ff ff       	call   c000199b <ld_dword>
c00027b1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027b4:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027ba:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027bd:	fe c8                	dec    al
c00027bf:	0f 85 21 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c00027c5:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027cc:	bb 01 00 00 00       	mov    ebx,0x1
c00027d1:	d3 e3                	shl    ebx,cl
c00027d3:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027d7:	66 85 db             	test   bx,bx
c00027da:	0f 84 06 fd ff ff    	je     c00024e6 <mount_volume+0xc8>
c00027e0:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027e6:	e8 b0 f1 ff ff       	call   c000199b <ld_dword>
c00027eb:	89 c6                	mov    esi,eax
c00027ed:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027f2:	0f 87 ee fc ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00027f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027fc:	8d 40 02             	lea    eax,[eax+0x2]
c00027ff:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002802:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002805:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002809:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000280c:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002812:	e8 84 f1 ff ff       	call   c000199b <ld_dword>
c0002817:	31 d2                	xor    edx,edx
c0002819:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000281d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002821:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002825:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002829:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000282c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000282f:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002835:	e8 61 f1 ff ff       	call   c000199b <ld_dword>
c000283a:	31 d2                	xor    edx,edx
c000283c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002840:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002844:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002848:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000284b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000284e:	0f b7 c3             	movzx  eax,bx
c0002851:	31 d2                	xor    edx,edx
c0002853:	0f af f0             	imul   esi,eax
c0002856:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000285a:	89 f0                	mov    eax,esi
c000285c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002860:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002864:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002868:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000286c:	39 c1                	cmp    ecx,eax
c000286e:	89 df                	mov    edi,ebx
c0002870:	19 d7                	sbb    edi,edx
c0002872:	0f 82 6e fc ff ff    	jb     c00024e6 <mount_volume+0xc8>
c0002878:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000287e:	31 db                	xor    ebx,ebx
c0002880:	e8 16 f1 ff ff       	call   c000199b <ld_dword>
c0002885:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000288c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000288f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002897:	85 db                	test   ebx,ebx
c0002899:	75 39                	jne    c00028d4 <mount_volume+0x4b6>
c000289b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000289f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00028a3:	0f 86 3d fc ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028a9:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c00028ac:	31 ff                	xor    edi,edi
c00028ae:	89 e8                	mov    eax,ebp
c00028b0:	e8 72 f3 ff ff       	call   c0001c27 <clst2sect>
c00028b5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028b9:	01 c6                	add    esi,eax
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	11 d7                	adc    edi,edx
c00028bf:	89 f2                	mov    edx,esi
c00028c1:	89 f9                	mov    ecx,edi
c00028c3:	e8 a4 f8 ff ff       	call   c000216c <move_window>
c00028c8:	85 c0                	test   eax,eax
c00028ca:	0f 85 07 fc ff ff    	jne    c00024d7 <mount_volume+0xb9>
c00028d0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028d4:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028d9:	74 0b                	je     c00028e6 <mount_volume+0x4c8>
c00028db:	83 c3 20             	add    ebx,0x20
c00028de:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028e4:	eb b1                	jmp    c0002897 <mount_volume+0x479>
c00028e6:	8d 75 54             	lea    esi,[ebp+0x54]
c00028e9:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028ed:	e8 a9 f0 ff ff       	call   c000199b <ld_dword>
c00028f2:	89 c3                	mov    ebx,eax
c00028f4:	83 f8 01             	cmp    eax,0x1
c00028f7:	0f 86 e9 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028fd:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002900:	0f 86 e0 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c0002906:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002909:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000290d:	0f af c2             	imul   eax,edx
c0002910:	31 d2                	xor    edx,edx
c0002912:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002915:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002918:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000291b:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c000291e:	31 c9                	xor    ecx,ecx
c0002920:	89 da                	mov    edx,ebx
c0002922:	89 e8                	mov    eax,ebp
c0002924:	c1 ea 07             	shr    edx,0x7
c0002927:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000292a:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c000292d:	e8 3a f8 ff ff       	call   c000216c <move_window>
c0002932:	85 c0                	test   eax,eax
c0002934:	0f 85 9d fb ff ff    	jne    c00024d7 <mount_volume+0xb9>
c000293a:	89 d8                	mov    eax,ebx
c000293c:	83 e0 7f             	and    eax,0x7f
c000293f:	8d 04 86             	lea    eax,[esi+eax*4]
c0002942:	e8 54 f0 ff ff       	call   c000199b <ld_dword>
c0002947:	83 f8 ff             	cmp    eax,0xffffffff
c000294a:	74 0a                	je     c0002956 <mount_volume+0x538>
c000294c:	43                   	inc    ebx
c000294d:	39 d8                	cmp    eax,ebx
c000294f:	74 cd                	je     c000291e <mount_volume+0x500>
c0002951:	e9 90 fb ff ff       	jmp    c00024e6 <mount_volume+0xc8>
c0002956:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000295d:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002964:	bb 04 00 00 00       	mov    ebx,0x4
c0002969:	e9 e8 fd ff ff       	jmp    c0002756 <mount_volume+0x338>
c000296e:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002973:	19 db                	sbb    ebx,ebx
c0002975:	83 c3 02             	add    ebx,0x2
c0002978:	e9 93 fc ff ff       	jmp    c0002610 <mount_volume+0x1f2>
c000297d:	83 c4 3c             	add    esp,0x3c
c0002980:	89 d8                	mov    eax,ebx
c0002982:	5b                   	pop    ebx
c0002983:	5e                   	pop    esi
c0002984:	5f                   	pop    edi
c0002985:	5d                   	pop    ebp
c0002986:	c3                   	ret    

c0002987 <find_bitmap>:
c0002987:	55                   	push   ebp
c0002988:	57                   	push   edi
c0002989:	89 c7                	mov    edi,eax
c000298b:	56                   	push   esi
c000298c:	8d 72 fe             	lea    esi,[edx-0x2]
c000298f:	53                   	push   ebx
c0002990:	83 ec 1c             	sub    esp,0x1c
c0002993:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002996:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000299a:	83 e8 02             	sub    eax,0x2
c000299d:	39 f0                	cmp    eax,esi
c000299f:	77 02                	ja     c00029a3 <find_bitmap+0x1c>
c00029a1:	31 f6                	xor    esi,esi
c00029a3:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00029a7:	89 f3                	mov    ebx,esi
c00029a9:	31 ed                	xor    ebp,ebp
c00029ab:	31 c9                	xor    ecx,ecx
c00029ad:	89 da                	mov    edx,ebx
c00029af:	89 f8                	mov    eax,edi
c00029b1:	c1 ea 0c             	shr    edx,0xc
c00029b4:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029b7:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029ba:	e8 ad f7 ff ff       	call   c000216c <move_window>
c00029bf:	85 c0                	test   eax,eax
c00029c1:	75 68                	jne    c0002a2b <find_bitmap+0xa4>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	89 d9                	mov    ecx,ebx
c00029c7:	c1 ea 03             	shr    edx,0x3
c00029ca:	83 e1 07             	and    ecx,0x7
c00029cd:	b8 01 00 00 00       	mov    eax,0x1
c00029d2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029d8:	d3 e0                	shl    eax,cl
c00029da:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029dd:	83 e9 02             	sub    ecx,0x2
c00029e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029e4:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029e8:	43                   	inc    ebx
c00029e9:	21 c1                	and    ecx,eax
c00029eb:	d1 e0                	shl    eax,1
c00029ed:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029f1:	77 09                	ja     c00029fc <find_bitmap+0x75>
c00029f3:	31 db                	xor    ebx,ebx
c00029f5:	ba 00 02 00 00       	mov    edx,0x200
c00029fa:	31 c0                	xor    eax,eax
c00029fc:	84 c9                	test   cl,cl
c00029fe:	75 10                	jne    c0002a10 <find_bitmap+0x89>
c0002a00:	45                   	inc    ebp
c0002a01:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a05:	75 0f                	jne    c0002a16 <find_bitmap+0x8f>
c0002a07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a0b:	83 c0 02             	add    eax,0x2
c0002a0e:	eb 22                	jmp    c0002a32 <find_bitmap+0xab>
c0002a10:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a14:	31 ed                	xor    ebp,ebp
c0002a16:	39 de                	cmp    esi,ebx
c0002a18:	74 16                	je     c0002a30 <find_bitmap+0xa9>
c0002a1a:	84 c0                	test   al,al
c0002a1c:	75 c6                	jne    c00029e4 <find_bitmap+0x5d>
c0002a1e:	42                   	inc    edx
c0002a1f:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a25:	77 84                	ja     c00029ab <find_bitmap+0x24>
c0002a27:	b0 01                	mov    al,0x1
c0002a29:	eb b9                	jmp    c00029e4 <find_bitmap+0x5d>
c0002a2b:	83 c8 ff             	or     eax,0xffffffff
c0002a2e:	eb 02                	jmp    c0002a32 <find_bitmap+0xab>
c0002a30:	31 c0                	xor    eax,eax
c0002a32:	83 c4 1c             	add    esp,0x1c
c0002a35:	5b                   	pop    ebx
c0002a36:	5e                   	pop    esi
c0002a37:	5f                   	pop    edi
c0002a38:	5d                   	pop    ebp
c0002a39:	c3                   	ret    

c0002a3a <change_bitmap>:
c0002a3a:	55                   	push   ebp
c0002a3b:	89 cd                	mov    ebp,ecx
c0002a3d:	57                   	push   edi
c0002a3e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a41:	56                   	push   esi
c0002a42:	89 c7                	mov    edi,eax
c0002a44:	53                   	push   ebx
c0002a45:	89 c8                	mov    eax,ecx
c0002a47:	83 ec 1c             	sub    esp,0x1c
c0002a4a:	31 d2                	xor    edx,edx
c0002a4c:	89 ce                	mov    esi,ecx
c0002a4e:	c1 e8 0c             	shr    eax,0xc
c0002a51:	bb 01 00 00 00       	mov    ebx,0x1
c0002a56:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a59:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a5c:	c1 ee 03             	shr    esi,0x3
c0002a5f:	83 e1 07             	and    ecx,0x7
c0002a62:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a68:	d3 e3                	shl    ebx,cl
c0002a6a:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a6e:	89 c1                	mov    ecx,eax
c0002a70:	89 d3                	mov    ebx,edx
c0002a72:	83 c1 01             	add    ecx,0x1
c0002a75:	83 d3 00             	adc    ebx,0x0
c0002a78:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a7c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a80:	89 d1                	mov    ecx,edx
c0002a82:	89 c2                	mov    edx,eax
c0002a84:	89 f8                	mov    eax,edi
c0002a86:	e8 e1 f6 ff ff       	call   c000216c <move_window>
c0002a8b:	89 c1                	mov    ecx,eax
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	75 48                	jne    c0002ad9 <change_bitmap+0x9f>
c0002a91:	31 d2                	xor    edx,edx
c0002a93:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002a97:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002a9b:	0f 95 c2             	setne  dl
c0002a9e:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002aa2:	74 3c                	je     c0002ae0 <change_bitmap+0xa6>
c0002aa4:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002aa8:	4d                   	dec    ebp
c0002aa9:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002ab1:	74 32                	je     c0002ae5 <change_bitmap+0xab>
c0002ab3:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002ab7:	75 d8                	jne    c0002a91 <change_bitmap+0x57>
c0002ab9:	8d 46 01             	lea    eax,[esi+0x1]
c0002abc:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ac1:	89 c3                	mov    ebx,eax
c0002ac3:	31 f6                	xor    esi,esi
c0002ac5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ac9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acd:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ad3:	74 99                	je     c0002a6e <change_bitmap+0x34>
c0002ad5:	89 de                	mov    esi,ebx
c0002ad7:	eb b8                	jmp    c0002a91 <change_bitmap+0x57>
c0002ad9:	b9 01 00 00 00       	mov    ecx,0x1
c0002ade:	eb 05                	jmp    c0002ae5 <change_bitmap+0xab>
c0002ae0:	b9 02 00 00 00       	mov    ecx,0x2
c0002ae5:	83 c4 1c             	add    esp,0x1c
c0002ae8:	89 c8                	mov    eax,ecx
c0002aea:	5b                   	pop    ebx
c0002aeb:	5e                   	pop    esi
c0002aec:	5f                   	pop    edi
c0002aed:	5d                   	pop    ebp
c0002aee:	c3                   	ret    

c0002aef <put_fat>:
c0002aef:	83 fa 01             	cmp    edx,0x1
c0002af2:	0f 86 7b 01 00 00    	jbe    c0002c73 <put_fat+0x184>
c0002af8:	55                   	push   ebp
c0002af9:	57                   	push   edi
c0002afa:	89 cf                	mov    edi,ecx
c0002afc:	56                   	push   esi
c0002afd:	b9 02 00 00 00       	mov    ecx,0x2
c0002b02:	53                   	push   ebx
c0002b03:	89 c6                	mov    esi,eax
c0002b05:	83 ec 1c             	sub    esp,0x1c
c0002b08:	89 d3                	mov    ebx,edx
c0002b0a:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b0d:	0f 86 68 01 00 00    	jbe    c0002c7b <put_fat+0x18c>
c0002b13:	8a 00                	mov    al,BYTE PTR [eax]
c0002b15:	3c 02                	cmp    al,0x2
c0002b17:	0f 84 c7 00 00 00    	je     c0002be4 <put_fat+0xf5>
c0002b1d:	77 09                	ja     c0002b28 <put_fat+0x39>
c0002b1f:	fe c8                	dec    al
c0002b21:	74 17                	je     c0002b3a <put_fat+0x4b>
c0002b23:	e9 53 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b28:	b9 02 00 00 00       	mov    ecx,0x2
c0002b2d:	3c 04                	cmp    al,0x4
c0002b2f:	0f 86 e1 00 00 00    	jbe    c0002c16 <put_fat+0x127>
c0002b35:	e9 41 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b3a:	89 d5                	mov    ebp,edx
c0002b3c:	31 c9                	xor    ecx,ecx
c0002b3e:	d1 ed                	shr    ebp,1
c0002b40:	89 f0                	mov    eax,esi
c0002b42:	01 d5                	add    ebp,edx
c0002b44:	89 ea                	mov    edx,ebp
c0002b46:	c1 ea 09             	shr    edx,0x9
c0002b49:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b4c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b4f:	e8 18 f6 ff ff       	call   c000216c <move_window>
c0002b54:	89 c1                	mov    ecx,eax
c0002b56:	85 c0                	test   eax,eax
c0002b58:	0f 85 1d 01 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002b5e:	8d 46 54             	lea    eax,[esi+0x54]
c0002b61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b65:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b68:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b72:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b76:	89 f8                	mov    eax,edi
c0002b78:	83 e3 01             	and    ebx,0x1
c0002b7b:	74 0d                	je     c0002b8a <put_fat+0x9b>
c0002b7d:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b80:	89 fa                	mov    edx,edi
c0002b82:	83 e0 0f             	and    eax,0xf
c0002b85:	c1 e2 04             	shl    edx,0x4
c0002b88:	09 d0                	or     eax,edx
c0002b8a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b91:	31 c9                	xor    ecx,ecx
c0002b93:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b97:	c1 ea 09             	shr    edx,0x9
c0002b9a:	89 f0                	mov    eax,esi
c0002b9c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b9f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ba2:	e8 c5 f5 ff ff       	call   c000216c <move_window>
c0002ba7:	89 c1                	mov    ecx,eax
c0002ba9:	85 c0                	test   eax,eax
c0002bab:	0f 85 ca 00 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002bb1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002bb5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bbb:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bbf:	85 db                	test   ebx,ebx
c0002bc1:	74 07                	je     c0002bca <put_fat+0xdb>
c0002bc3:	c1 ef 04             	shr    edi,0x4
c0002bc6:	89 fa                	mov    edx,edi
c0002bc8:	eb 0e                	jmp    c0002bd8 <put_fat+0xe9>
c0002bca:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bcd:	c1 ef 08             	shr    edi,0x8
c0002bd0:	83 e2 f0             	and    edx,0xfffffff0
c0002bd3:	83 e7 0f             	and    edi,0xf
c0002bd6:	09 fa                	or     edx,edi
c0002bd8:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002bdb:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bdf:	e9 97 00 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002be4:	31 c9                	xor    ecx,ecx
c0002be6:	c1 ea 08             	shr    edx,0x8
c0002be9:	89 f0                	mov    eax,esi
c0002beb:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bee:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bf1:	e8 76 f5 ff ff       	call   c000216c <move_window>
c0002bf6:	89 c1                	mov    ecx,eax
c0002bf8:	85 c0                	test   eax,eax
c0002bfa:	75 7f                	jne    c0002c7b <put_fat+0x18c>
c0002bfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c00:	01 db                	add    ebx,ebx
c0002c02:	0f b7 d7             	movzx  edx,di
c0002c05:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c0b:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c0f:	e8 ec ed ff ff       	call   c0001a00 <st_word>
c0002c14:	eb 53                	jmp    c0002c69 <put_fat+0x17a>
c0002c16:	31 c9                	xor    ecx,ecx
c0002c18:	c1 ea 07             	shr    edx,0x7
c0002c1b:	89 f0                	mov    eax,esi
c0002c1d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c20:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c23:	e8 44 f5 ff ff       	call   c000216c <move_window>
c0002c28:	89 c1                	mov    ecx,eax
c0002c2a:	85 c0                	test   eax,eax
c0002c2c:	75 4d                	jne    c0002c7b <put_fat+0x18c>
c0002c2e:	c1 e3 02             	shl    ebx,0x2
c0002c31:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c37:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c3a:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c3e:	74 1c                	je     c0002c5c <put_fat+0x16d>
c0002c40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c44:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c4a:	89 d8                	mov    eax,ebx
c0002c4c:	e8 4a ed ff ff       	call   c000199b <ld_dword>
c0002c51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c55:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c5a:	09 c7                	or     edi,eax
c0002c5c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c60:	89 fa                	mov    edx,edi
c0002c62:	89 d8                	mov    eax,ebx
c0002c64:	e8 9b ed ff ff       	call   c0001a04 <st_dword>
c0002c69:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c71:	eb 08                	jmp    c0002c7b <put_fat+0x18c>
c0002c73:	b9 02 00 00 00       	mov    ecx,0x2
c0002c78:	89 c8                	mov    eax,ecx
c0002c7a:	c3                   	ret    
c0002c7b:	83 c4 1c             	add    esp,0x1c
c0002c7e:	89 c8                	mov    eax,ecx
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <fill_last_frag>:
c0002c85:	57                   	push   edi
c0002c86:	89 cf                	mov    edi,ecx
c0002c88:	56                   	push   esi
c0002c89:	89 d6                	mov    esi,edx
c0002c8b:	53                   	push   ebx
c0002c8c:	89 c3                	mov    ebx,eax
c0002c8e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c91:	85 c0                	test   eax,eax
c0002c93:	74 21                	je     c0002cb6 <fill_last_frag+0x31>
c0002c95:	89 f9                	mov    ecx,edi
c0002c97:	83 f8 01             	cmp    eax,0x1
c0002c9a:	76 05                	jbe    c0002ca1 <fill_last_frag+0x1c>
c0002c9c:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002c9f:	29 c1                	sub    ecx,eax
c0002ca1:	8d 56 01             	lea    edx,[esi+0x1]
c0002ca4:	29 c2                	sub    edx,eax
c0002ca6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ca8:	e8 42 fe ff ff       	call   c0002aef <put_fat>
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 05                	jne    c0002cb6 <fill_last_frag+0x31>
c0002cb1:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002cb4:	eb d8                	jmp    c0002c8e <fill_last_frag+0x9>
c0002cb6:	5b                   	pop    ebx
c0002cb7:	5e                   	pop    esi
c0002cb8:	5f                   	pop    edi
c0002cb9:	c3                   	ret    

c0002cba <fill_first_frag>:
c0002cba:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002cbe:	75 2d                	jne    c0002ced <fill_first_frag+0x33>
c0002cc0:	57                   	push   edi
c0002cc1:	56                   	push   esi
c0002cc2:	53                   	push   ebx
c0002cc3:	89 c3                	mov    ebx,eax
c0002cc5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cc8:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002ccb:	01 d7                	add    edi,edx
c0002ccd:	39 fa                	cmp    edx,edi
c0002ccf:	74 14                	je     c0002ce5 <fill_first_frag+0x2b>
c0002cd1:	8d 72 01             	lea    esi,[edx+0x1]
c0002cd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cd6:	89 f1                	mov    ecx,esi
c0002cd8:	e8 12 fe ff ff       	call   c0002aef <put_fat>
c0002cdd:	89 f2                	mov    edx,esi
c0002cdf:	85 c0                	test   eax,eax
c0002ce1:	74 ea                	je     c0002ccd <fill_first_frag+0x13>
c0002ce3:	eb 0b                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ce5:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ce9:	31 c0                	xor    eax,eax
c0002ceb:	eb 03                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ced:	31 c0                	xor    eax,eax
c0002cef:	c3                   	ret    
c0002cf0:	5b                   	pop    ebx
c0002cf1:	5e                   	pop    esi
c0002cf2:	5f                   	pop    edi
c0002cf3:	c3                   	ret    

c0002cf4 <get_fat>:
c0002cf4:	83 fa 01             	cmp    edx,0x1
c0002cf7:	0f 86 db 01 00 00    	jbe    c0002ed8 <get_fat+0x1e4>
c0002cfd:	55                   	push   ebp
c0002cfe:	b9 01 00 00 00       	mov    ecx,0x1
c0002d03:	57                   	push   edi
c0002d04:	56                   	push   esi
c0002d05:	53                   	push   ebx
c0002d06:	83 ec 1c             	sub    esp,0x1c
c0002d09:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d0b:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d0e:	0f 86 cc 01 00 00    	jbe    c0002ee0 <get_fat+0x1ec>
c0002d14:	89 c3                	mov    ebx,eax
c0002d16:	89 d6                	mov    esi,edx
c0002d18:	8a 07                	mov    al,BYTE PTR [edi]
c0002d1a:	3c 02                	cmp    al,0x2
c0002d1c:	0f 84 99 00 00 00    	je     c0002dbb <get_fat+0xc7>
c0002d22:	77 09                	ja     c0002d2d <get_fat+0x39>
c0002d24:	fe c8                	dec    al
c0002d26:	74 1a                	je     c0002d42 <get_fat+0x4e>
c0002d28:	e9 b3 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d2d:	3c 03                	cmp    al,0x3
c0002d2f:	0f 84 b5 00 00 00    	je     c0002dea <get_fat+0xf6>
c0002d35:	3c 04                	cmp    al,0x4
c0002d37:	0f 84 e3 00 00 00    	je     c0002e20 <get_fat+0x12c>
c0002d3d:	e9 9e 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d42:	89 d3                	mov    ebx,edx
c0002d44:	31 c9                	xor    ecx,ecx
c0002d46:	d1 eb                	shr    ebx,1
c0002d48:	89 f8                	mov    eax,edi
c0002d4a:	01 d3                	add    ebx,edx
c0002d4c:	89 da                	mov    edx,ebx
c0002d4e:	c1 ea 09             	shr    edx,0x9
c0002d51:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d54:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d57:	e8 10 f4 ff ff       	call   c000216c <move_window>
c0002d5c:	85 c0                	test   eax,eax
c0002d5e:	74 08                	je     c0002d68 <get_fat+0x74>
c0002d60:	83 c9 ff             	or     ecx,0xffffffff
c0002d63:	e9 78 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d68:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d6b:	31 c9                	xor    ecx,ecx
c0002d6d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d73:	89 ea                	mov    edx,ebp
c0002d75:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d79:	c1 ea 09             	shr    edx,0x9
c0002d7c:	89 f8                	mov    eax,edi
c0002d7e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d81:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d84:	e8 e3 f3 ff ff       	call   c000216c <move_window>
c0002d89:	85 c0                	test   eax,eax
c0002d8b:	75 d3                	jne    c0002d60 <get_fat+0x6c>
c0002d8d:	0f b6 c3             	movzx  eax,bl
c0002d90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d96:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002d9b:	c1 e3 08             	shl    ebx,0x8
c0002d9e:	09 c3                	or     ebx,eax
c0002da0:	89 d9                	mov    ecx,ebx
c0002da2:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002da8:	83 e6 01             	and    esi,0x1
c0002dab:	0f 84 2f 01 00 00    	je     c0002ee0 <get_fat+0x1ec>
c0002db1:	89 d9                	mov    ecx,ebx
c0002db3:	c1 e9 04             	shr    ecx,0x4
c0002db6:	e9 25 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dbb:	31 c9                	xor    ecx,ecx
c0002dbd:	c1 ea 08             	shr    edx,0x8
c0002dc0:	89 f8                	mov    eax,edi
c0002dc2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dc8:	e8 9f f3 ff ff       	call   c000216c <move_window>
c0002dcd:	85 c0                	test   eax,eax
c0002dcf:	75 8f                	jne    c0002d60 <get_fat+0x6c>
c0002dd1:	01 f6                	add    esi,esi
c0002dd3:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002dd9:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ddd:	e8 ac eb ff ff       	call   c000198e <ld_word>
c0002de2:	0f b7 c8             	movzx  ecx,ax
c0002de5:	e9 f6 00 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dea:	31 c9                	xor    ecx,ecx
c0002dec:	c1 ea 07             	shr    edx,0x7
c0002def:	89 f8                	mov    eax,edi
c0002df1:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df4:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df7:	e8 70 f3 ff ff       	call   c000216c <move_window>
c0002dfc:	85 c0                	test   eax,eax
c0002dfe:	0f 85 5c ff ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002e04:	c1 e6 02             	shl    esi,0x2
c0002e07:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e0d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e11:	e8 85 eb ff ff       	call   c000199b <ld_dword>
c0002e16:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e1b:	e9 b4 00 00 00       	jmp    c0002ed4 <get_fat+0x1e0>
c0002e20:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e23:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e26:	89 d1                	mov    ecx,edx
c0002e28:	09 c1                	or     ecx,eax
c0002e2a:	74 06                	je     c0002e32 <get_fat+0x13e>
c0002e2c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e30:	75 0f                	jne    c0002e41 <get_fat+0x14d>
c0002e32:	b9 01 00 00 00       	mov    ecx,0x1
c0002e37:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e3b:	0f 85 9f 00 00 00    	jne    c0002ee0 <get_fat+0x1ec>
c0002e41:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e45:	89 f5                	mov    ebp,esi
c0002e47:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e4c:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e4f:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e52:	80 f9 02             	cmp    cl,0x2
c0002e55:	75 35                	jne    c0002e8c <get_fat+0x198>
c0002e57:	83 c0 ff             	add    eax,0xffffffff
c0002e5a:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e5f:	83 d2 ff             	adc    edx,0xffffffff
c0002e62:	31 db                	xor    ebx,ebx
c0002e64:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e68:	53                   	push   ebx
c0002e69:	c1 ea 09             	shr    edx,0x9
c0002e6c:	51                   	push   ecx
c0002e6d:	52                   	push   edx
c0002e6e:	50                   	push   eax
c0002e6f:	e8 58 b2 01 00       	call   c001e0cc <__udivdi3>
c0002e74:	83 c4 10             	add    esp,0x10
c0002e77:	b9 01 00 00 00       	mov    ecx,0x1
c0002e7c:	39 c5                	cmp    ebp,eax
c0002e7e:	77 60                	ja     c0002ee0 <get_fat+0x1ec>
c0002e80:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e85:	74 59                	je     c0002ee0 <get_fat+0x1ec>
c0002e87:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e8a:	eb 54                	jmp    c0002ee0 <get_fat+0x1ec>
c0002e8c:	80 f9 03             	cmp    cl,0x3
c0002e8f:	75 05                	jne    c0002e96 <get_fat+0x1a2>
c0002e91:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002e94:	77 f1                	ja     c0002e87 <get_fat+0x193>
c0002e96:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e9b:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002e9f:	75 3f                	jne    c0002ee0 <get_fat+0x1ec>
c0002ea1:	31 c9                	xor    ecx,ecx
c0002ea3:	89 f2                	mov    edx,esi
c0002ea5:	89 f8                	mov    eax,edi
c0002ea7:	c1 ea 07             	shr    edx,0x7
c0002eaa:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ead:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb0:	e8 b7 f2 ff ff       	call   c000216c <move_window>
c0002eb5:	85 c0                	test   eax,eax
c0002eb7:	0f 85 a3 fe ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002ebd:	c1 e6 02             	shl    esi,0x2
c0002ec0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002eca:	e8 cc ea ff ff       	call   c000199b <ld_dword>
c0002ecf:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ed4:	89 c1                	mov    ecx,eax
c0002ed6:	eb 08                	jmp    c0002ee0 <get_fat+0x1ec>
c0002ed8:	b9 01 00 00 00       	mov    ecx,0x1
c0002edd:	89 c8                	mov    eax,ecx
c0002edf:	c3                   	ret    
c0002ee0:	83 c4 1c             	add    esp,0x1c
c0002ee3:	89 c8                	mov    eax,ecx
c0002ee5:	5b                   	pop    ebx
c0002ee6:	5e                   	pop    esi
c0002ee7:	5f                   	pop    edi
c0002ee8:	5d                   	pop    ebp
c0002ee9:	c3                   	ret    

c0002eea <dir_sdi>:
c0002eea:	55                   	push   ebp
c0002eeb:	57                   	push   edi
c0002eec:	56                   	push   esi
c0002eed:	53                   	push   ebx
c0002eee:	89 c3                	mov    ebx,eax
c0002ef0:	83 ec 1c             	sub    esp,0x1c
c0002ef3:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ef5:	31 c0                	xor    eax,eax
c0002ef7:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002efa:	0f 94 c0             	sete   al
c0002efd:	48                   	dec    eax
c0002efe:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f03:	05 00 00 00 10       	add    eax,0x10000000
c0002f08:	39 d0                	cmp    eax,edx
c0002f0a:	77 0a                	ja     c0002f16 <dir_sdi+0x2c>
c0002f0c:	b8 02 00 00 00       	mov    eax,0x2
c0002f11:	e9 c4 00 00 00       	jmp    c0002fda <dir_sdi+0xf0>
c0002f16:	89 d6                	mov    esi,edx
c0002f18:	f6 c2 1f             	test   dl,0x1f
c0002f1b:	75 ef                	jne    c0002f0c <dir_sdi+0x22>
c0002f1d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f20:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f23:	85 c9                	test   ecx,ecx
c0002f25:	75 2d                	jne    c0002f54 <dir_sdi+0x6a>
c0002f27:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f2a:	77 1b                	ja     c0002f47 <dir_sdi+0x5d>
c0002f2c:	89 f2                	mov    edx,esi
c0002f2e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f32:	c1 ea 05             	shr    edx,0x5
c0002f35:	39 c2                	cmp    edx,eax
c0002f37:	73 d3                	jae    c0002f0c <dir_sdi+0x22>
c0002f39:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f3c:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f3f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f42:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f45:	eb 4b                	jmp    c0002f92 <dir_sdi+0xa8>
c0002f47:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f4a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	74 da                	je     c0002f2c <dir_sdi+0x42>
c0002f52:	89 c1                	mov    ecx,eax
c0002f54:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f58:	c1 e5 09             	shl    ebp,0x9
c0002f5b:	89 ca                	mov    edx,ecx
c0002f5d:	39 ee                	cmp    esi,ebp
c0002f5f:	72 1c                	jb     c0002f7d <dir_sdi+0x93>
c0002f61:	89 d8                	mov    eax,ebx
c0002f63:	e8 8c fd ff ff       	call   c0002cf4 <get_fat>
c0002f68:	89 c1                	mov    ecx,eax
c0002f6a:	83 f8 ff             	cmp    eax,0xffffffff
c0002f6d:	74 66                	je     c0002fd5 <dir_sdi+0xeb>
c0002f6f:	83 f8 01             	cmp    eax,0x1
c0002f72:	76 98                	jbe    c0002f0c <dir_sdi+0x22>
c0002f74:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f77:	76 93                	jbe    c0002f0c <dir_sdi+0x22>
c0002f79:	29 ee                	sub    esi,ebp
c0002f7b:	eb de                	jmp    c0002f5b <dir_sdi+0x71>
c0002f7d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f81:	89 f8                	mov    eax,edi
c0002f83:	e8 9f ec ff ff       	call   c0001c27 <clst2sect>
c0002f88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f8c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f8f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f92:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002f95:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002f98:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002f9b:	89 d1                	mov    ecx,edx
c0002f9d:	09 c1                	or     ecx,eax
c0002f9f:	0f 84 67 ff ff ff    	je     c0002f0c <dir_sdi+0x22>
c0002fa5:	89 f1                	mov    ecx,esi
c0002fa7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002faf:	c1 e9 09             	shr    ecx,0x9
c0002fb2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fb6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fba:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002fbe:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fc7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fce:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fd1:	31 c0                	xor    eax,eax
c0002fd3:	eb 05                	jmp    c0002fda <dir_sdi+0xf0>
c0002fd5:	b8 01 00 00 00       	mov    eax,0x1
c0002fda:	83 c4 1c             	add    esp,0x1c
c0002fdd:	5b                   	pop    ebx
c0002fde:	5e                   	pop    esi
c0002fdf:	5f                   	pop    edi
c0002fe0:	5d                   	pop    ebp
c0002fe1:	c3                   	ret    

c0002fe2 <create_chain>:
c0002fe2:	55                   	push   ebp
c0002fe3:	89 c5                	mov    ebp,eax
c0002fe5:	57                   	push   edi
c0002fe6:	56                   	push   esi
c0002fe7:	53                   	push   ebx
c0002fe8:	83 ec 1c             	sub    esp,0x1c
c0002feb:	85 d2                	test   edx,edx
c0002fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002ff1:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ff3:	75 0e                	jne    c0003003 <create_chain+0x21>
c0002ff5:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002ff8:	85 ff                	test   edi,edi
c0002ffa:	74 39                	je     c0003035 <create_chain+0x53>
c0002ffc:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002fff:	77 39                	ja     c000303a <create_chain+0x58>
c0003001:	eb 32                	jmp    c0003035 <create_chain+0x53>
c0003003:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003007:	e8 e8 fc ff ff       	call   c0002cf4 <get_fat>
c000300c:	89 c3                	mov    ebx,eax
c000300e:	83 f8 01             	cmp    eax,0x1
c0003011:	77 0a                	ja     c000301d <create_chain+0x3b>
c0003013:	bb 01 00 00 00       	mov    ebx,0x1
c0003018:	e9 ba 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c000301d:	83 f8 ff             	cmp    eax,0xffffffff
c0003020:	0f 84 62 01 00 00    	je     c0003188 <create_chain+0x1a6>
c0003026:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003029:	0f 87 a8 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c000302f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003033:	eb 05                	jmp    c000303a <create_chain+0x58>
c0003035:	bf 01 00 00 00       	mov    edi,0x1
c000303a:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000303e:	75 07                	jne    c0003047 <create_chain+0x65>
c0003040:	31 db                	xor    ebx,ebx
c0003042:	e9 90 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c0003047:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000304a:	75 74                	jne    c00030c0 <create_chain+0xde>
c000304c:	b9 01 00 00 00       	mov    ecx,0x1
c0003051:	89 fa                	mov    edx,edi
c0003053:	89 f0                	mov    eax,esi
c0003055:	e8 2d f9 ff ff       	call   c0002987 <find_bitmap>
c000305a:	89 c3                	mov    ebx,eax
c000305c:	8d 40 ff             	lea    eax,[eax-0x1]
c000305f:	83 f8 fd             	cmp    eax,0xfffffffd
c0003062:	0f 87 6f 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c0003068:	83 ec 0c             	sub    esp,0xc
c000306b:	b9 01 00 00 00       	mov    ecx,0x1
c0003070:	6a 01                	push   0x1
c0003072:	89 da                	mov    edx,ebx
c0003074:	89 f0                	mov    eax,esi
c0003076:	e8 bf f9 ff ff       	call   c0002a3a <change_bitmap>
c000307b:	83 c4 10             	add    esp,0x10
c000307e:	83 f8 02             	cmp    eax,0x2
c0003081:	74 90                	je     c0003013 <create_chain+0x31>
c0003083:	83 f8 01             	cmp    eax,0x1
c0003086:	0f 84 fc 00 00 00    	je     c0003188 <create_chain+0x1a6>
c000308c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003091:	75 09                	jne    c000309c <create_chain+0xba>
c0003093:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003097:	e9 0c 01 00 00       	jmp    c00031a8 <create_chain+0x1c6>
c000309c:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00030a0:	0f 85 e7 00 00 00    	jne    c000318d <create_chain+0x1ab>
c00030a6:	8d 57 01             	lea    edx,[edi+0x1]
c00030a9:	39 da                	cmp    edx,ebx
c00030ab:	0f 84 f7 00 00 00    	je     c00031a8 <create_chain+0x1c6>
c00030b1:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030b4:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030b8:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030bb:	e9 cd 00 00 00       	jmp    c000318d <create_chain+0x1ab>
c00030c0:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030c4:	75 41                	jne    c0003107 <create_chain+0x125>
c00030c6:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030c9:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030cc:	77 05                	ja     c00030d3 <create_chain+0xf1>
c00030ce:	bb 02 00 00 00       	mov    ebx,0x2
c00030d3:	89 da                	mov    edx,ebx
c00030d5:	89 e8                	mov    eax,ebp
c00030d7:	e8 18 fc ff ff       	call   c0002cf4 <get_fat>
c00030dc:	83 f8 01             	cmp    eax,0x1
c00030df:	0f 84 2e ff ff ff    	je     c0003013 <create_chain+0x31>
c00030e5:	83 f8 ff             	cmp    eax,0xffffffff
c00030e8:	0f 84 9a 00 00 00    	je     c0003188 <create_chain+0x1a6>
c00030ee:	85 c0                	test   eax,eax
c00030f0:	74 11                	je     c0003103 <create_chain+0x121>
c00030f2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00030f5:	83 f8 01             	cmp    eax,0x1
c00030f8:	76 0d                	jbe    c0003107 <create_chain+0x125>
c00030fa:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030fd:	76 08                	jbe    c0003107 <create_chain+0x125>
c00030ff:	89 c7                	mov    edi,eax
c0003101:	eb 04                	jmp    c0003107 <create_chain+0x125>
c0003103:	85 db                	test   ebx,ebx
c0003105:	75 38                	jne    c000313f <create_chain+0x15d>
c0003107:	89 fb                	mov    ebx,edi
c0003109:	43                   	inc    ebx
c000310a:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000310d:	77 0e                	ja     c000311d <create_chain+0x13b>
c000310f:	83 ff 01             	cmp    edi,0x1
c0003112:	0f 86 28 ff ff ff    	jbe    c0003040 <create_chain+0x5e>
c0003118:	bb 02 00 00 00       	mov    ebx,0x2
c000311d:	89 da                	mov    edx,ebx
c000311f:	89 e8                	mov    eax,ebp
c0003121:	e8 ce fb ff ff       	call   c0002cf4 <get_fat>
c0003126:	85 c0                	test   eax,eax
c0003128:	74 15                	je     c000313f <create_chain+0x15d>
c000312a:	83 f8 01             	cmp    eax,0x1
c000312d:	0f 84 e0 fe ff ff    	je     c0003013 <create_chain+0x31>
c0003133:	40                   	inc    eax
c0003134:	74 52                	je     c0003188 <create_chain+0x1a6>
c0003136:	39 fb                	cmp    ebx,edi
c0003138:	75 cf                	jne    c0003109 <create_chain+0x127>
c000313a:	e9 01 ff ff ff       	jmp    c0003040 <create_chain+0x5e>
c000313f:	83 c9 ff             	or     ecx,0xffffffff
c0003142:	89 da                	mov    edx,ebx
c0003144:	89 f0                	mov    eax,esi
c0003146:	e8 a4 f9 ff ff       	call   c0002aef <put_fat>
c000314b:	85 c0                	test   eax,eax
c000314d:	75 32                	jne    c0003181 <create_chain+0x19f>
c000314f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003154:	74 11                	je     c0003167 <create_chain+0x185>
c0003156:	89 d9                	mov    ecx,ebx
c0003158:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000315c:	89 f0                	mov    eax,esi
c000315e:	e8 8c f9 ff ff       	call   c0002aef <put_fat>
c0003163:	85 c0                	test   eax,eax
c0003165:	75 1a                	jne    c0003181 <create_chain+0x19f>
c0003167:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000316a:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000316d:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003170:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003173:	39 d0                	cmp    eax,edx
c0003175:	77 04                	ja     c000317b <create_chain+0x199>
c0003177:	48                   	dec    eax
c0003178:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000317b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000317f:	eb 56                	jmp    c00031d7 <create_chain+0x1f5>
c0003181:	48                   	dec    eax
c0003182:	0f 85 8b fe ff ff    	jne    c0003013 <create_chain+0x31>
c0003188:	83 cb ff             	or     ebx,0xffffffff
c000318b:	eb 4a                	jmp    c00031d7 <create_chain+0x1f5>
c000318d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003191:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003194:	41                   	inc    ecx
c0003195:	39 d9                	cmp    ecx,ebx
c0003197:	75 19                	jne    c00031b2 <create_chain+0x1d0>
c0003199:	b9 02 00 00 00       	mov    ecx,0x2
c000319e:	85 d2                	test   edx,edx
c00031a0:	74 03                	je     c00031a5 <create_chain+0x1c3>
c00031a2:	8d 4a 01             	lea    ecx,[edx+0x1]
c00031a5:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00031a8:	85 c0                	test   eax,eax
c00031aa:	0f 85 63 fe ff ff    	jne    c0003013 <create_chain+0x31>
c00031b0:	eb b5                	jmp    c0003167 <create_chain+0x185>
c00031b2:	85 d2                	test   edx,edx
c00031b4:	75 07                	jne    c00031bd <create_chain+0x1db>
c00031b6:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031c3:	89 e8                	mov    eax,ebp
c00031c5:	e8 bb fa ff ff       	call   c0002c85 <fill_last_frag>
c00031ca:	85 c0                	test   eax,eax
c00031cc:	75 b3                	jne    c0003181 <create_chain+0x19f>
c00031ce:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031d5:	eb 90                	jmp    c0003167 <create_chain+0x185>
c00031d7:	83 c4 1c             	add    esp,0x1c
c00031da:	89 d8                	mov    eax,ebx
c00031dc:	5b                   	pop    ebx
c00031dd:	5e                   	pop    esi
c00031de:	5f                   	pop    edi
c00031df:	5d                   	pop    ebp
c00031e0:	c3                   	ret    

c00031e1 <remove_chain>:
c00031e1:	55                   	push   ebp
c00031e2:	57                   	push   edi
c00031e3:	56                   	push   esi
c00031e4:	53                   	push   ebx
c00031e5:	83 ec 1c             	sub    esp,0x1c
c00031e8:	83 fa 01             	cmp    edx,0x1
c00031eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031ef:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031f1:	77 0a                	ja     c00031fd <remove_chain+0x1c>
c00031f3:	b8 02 00 00 00       	mov    eax,0x2
c00031f8:	e9 24 01 00 00       	jmp    c0003321 <remove_chain+0x140>
c00031fd:	89 d6                	mov    esi,edx
c00031ff:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003202:	76 ef                	jbe    c00031f3 <remove_chain+0x12>
c0003204:	89 c7                	mov    edi,eax
c0003206:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000320b:	75 06                	jne    c0003213 <remove_chain+0x32>
c000320d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003211:	eb 54                	jmp    c0003267 <remove_chain+0x86>
c0003213:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003216:	75 06                	jne    c000321e <remove_chain+0x3d>
c0003218:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000321c:	74 ef                	je     c000320d <remove_chain+0x2c>
c000321e:	83 c9 ff             	or     ecx,0xffffffff
c0003221:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003225:	89 d8                	mov    eax,ebx
c0003227:	e8 c3 f8 ff ff       	call   c0002aef <put_fat>
c000322c:	85 c0                	test   eax,eax
c000322e:	74 dd                	je     c000320d <remove_chain+0x2c>
c0003230:	e9 ec 00 00 00       	jmp    c0003321 <remove_chain+0x140>
c0003235:	83 f8 01             	cmp    eax,0x1
c0003238:	74 b9                	je     c00031f3 <remove_chain+0x12>
c000323a:	83 f8 ff             	cmp    eax,0xffffffff
c000323d:	74 6d                	je     c00032ac <remove_chain+0xcb>
c000323f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003242:	75 6f                	jne    c00032b3 <remove_chain+0xd2>
c0003244:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003247:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000324a:	8d 51 fe             	lea    edx,[ecx-0x2]
c000324d:	39 d0                	cmp    eax,edx
c000324f:	73 08                	jae    c0003259 <remove_chain+0x78>
c0003251:	40                   	inc    eax
c0003252:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003256:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003259:	8d 4e 01             	lea    ecx,[esi+0x1]
c000325c:	39 e9                	cmp    ecx,ebp
c000325e:	75 64                	jne    c00032c4 <remove_chain+0xe3>
c0003260:	89 ee                	mov    esi,ebp
c0003262:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003265:	76 0f                	jbe    c0003276 <remove_chain+0x95>
c0003267:	89 f2                	mov    edx,esi
c0003269:	89 f8                	mov    eax,edi
c000326b:	e8 84 fa ff ff       	call   c0002cf4 <get_fat>
c0003270:	89 c5                	mov    ebp,eax
c0003272:	85 c0                	test   eax,eax
c0003274:	75 bf                	jne    c0003235 <remove_chain+0x54>
c0003276:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003279:	0f 85 a0 00 00 00    	jne    c000331f <remove_chain+0x13e>
c000327f:	eb 6c                	jmp    c00032ed <remove_chain+0x10c>
c0003281:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003284:	84 c0                	test   al,al
c0003286:	75 7d                	jne    c0003305 <remove_chain+0x124>
c0003288:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000328b:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000328f:	0f 84 86 00 00 00    	je     c000331b <remove_chain+0x13a>
c0003295:	89 da                	mov    edx,ebx
c0003297:	89 f8                	mov    eax,edi
c0003299:	e8 56 fa ff ff       	call   c0002cf4 <get_fat>
c000329e:	83 f8 01             	cmp    eax,0x1
c00032a1:	0f 86 4c ff ff ff    	jbe    c00031f3 <remove_chain+0x12>
c00032a7:	83 f8 ff             	cmp    eax,0xffffffff
c00032aa:	75 4e                	jne    c00032fa <remove_chain+0x119>
c00032ac:	b8 01 00 00 00       	mov    eax,0x1
c00032b1:	eb 6e                	jmp    c0003321 <remove_chain+0x140>
c00032b3:	31 c9                	xor    ecx,ecx
c00032b5:	89 f2                	mov    edx,esi
c00032b7:	89 d8                	mov    eax,ebx
c00032b9:	e8 31 f8 ff ff       	call   c0002aef <put_fat>
c00032be:	85 c0                	test   eax,eax
c00032c0:	74 82                	je     c0003244 <remove_chain+0x63>
c00032c2:	eb 5d                	jmp    c0003321 <remove_chain+0x140>
c00032c4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c7:	75 1b                	jne    c00032e4 <remove_chain+0x103>
c00032c9:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	83 ec 0c             	sub    esp,0xc
c00032d2:	6a 00                	push   0x0
c00032d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032d8:	e8 5d f7 ff ff       	call   c0002a3a <change_bitmap>
c00032dd:	83 c4 10             	add    esp,0x10
c00032e0:	85 c0                	test   eax,eax
c00032e2:	75 3d                	jne    c0003321 <remove_chain+0x140>
c00032e4:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032e8:	e9 73 ff ff ff       	jmp    c0003260 <remove_chain+0x7f>
c00032ed:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032f2:	75 8d                	jne    c0003281 <remove_chain+0xa0>
c00032f4:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00032f8:	eb 25                	jmp    c000331f <remove_chain+0x13e>
c00032fa:	8d 53 01             	lea    edx,[ebx+0x1]
c00032fd:	89 c3                	mov    ebx,eax
c00032ff:	39 c2                	cmp    edx,eax
c0003301:	74 88                	je     c000328b <remove_chain+0xaa>
c0003303:	eb 1a                	jmp    c000331f <remove_chain+0x13e>
c0003305:	3c 03                	cmp    al,0x3
c0003307:	75 16                	jne    c000331f <remove_chain+0x13e>
c0003309:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000330c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003310:	77 0d                	ja     c000331f <remove_chain+0x13e>
c0003312:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003315:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003319:	72 04                	jb     c000331f <remove_chain+0x13e>
c000331b:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000331f:	31 c0                	xor    eax,eax
c0003321:	83 c4 1c             	add    esp,0x1c
c0003324:	5b                   	pop    ebx
c0003325:	5e                   	pop    esi
c0003326:	5f                   	pop    edi
c0003327:	5d                   	pop    ebp
c0003328:	c3                   	ret    

c0003329 <dir_clear>:
c0003329:	55                   	push   ebp
c000332a:	57                   	push   edi
c000332b:	56                   	push   esi
c000332c:	89 c6                	mov    esi,eax
c000332e:	53                   	push   ebx
c000332f:	83 ec 1c             	sub    esp,0x1c
c0003332:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003336:	e8 9d ed ff ff       	call   c00020d8 <sync_window>
c000333b:	85 c0                	test   eax,eax
c000333d:	0f 85 de 00 00 00    	jne    c0003421 <dir_clear+0xf8>
c0003343:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003347:	89 f0                	mov    eax,esi
c0003349:	8d 6e 54             	lea    ebp,[esi+0x54]
c000334c:	e8 d6 e8 ff ff       	call   c0001c27 <clst2sect>
c0003351:	b9 00 02 00 00       	mov    ecx,0x200
c0003356:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000335a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000335e:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003361:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003364:	89 e8                	mov    eax,ebp
c0003366:	31 d2                	xor    edx,edx
c0003368:	e8 b5 e6 ff ff       	call   c0001a22 <mem_set>
c000336d:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003371:	c1 e3 09             	shl    ebx,0x9
c0003374:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000337a:	76 1f                	jbe    c000339b <dir_clear+0x72>
c000337c:	bb 00 80 00 00       	mov    ebx,0x8000
c0003381:	eb 18                	jmp    c000339b <dir_clear+0x72>
c0003383:	83 ec 0c             	sub    esp,0xc
c0003386:	53                   	push   ebx
c0003387:	e8 35 4e 00 00       	call   c00081c1 <ff_memalloc>
c000338c:	83 c4 10             	add    esp,0x10
c000338f:	89 c7                	mov    edi,eax
c0003391:	85 c0                	test   eax,eax
c0003393:	0f 85 8f 00 00 00    	jne    c0003428 <dir_clear+0xff>
c0003399:	d1 eb                	shr    ebx,1
c000339b:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00033a1:	77 e0                	ja     c0003383 <dir_clear+0x5a>
c00033a3:	31 db                	xor    ebx,ebx
c00033a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033a9:	39 d8                	cmp    eax,ebx
c00033ab:	76 66                	jbe    c0003413 <dir_clear+0xea>
c00033ad:	83 ec 0c             	sub    esp,0xc
c00033b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033b4:	6a 01                	push   0x1
c00033b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033be:	55                   	push   ebp
c00033bf:	50                   	push   eax
c00033c0:	e8 94 e5 ff ff       	call   c0001959 <disk_write>
c00033c5:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033ca:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033cf:	83 c4 20             	add    esp,0x20
c00033d2:	85 c0                	test   eax,eax
c00033d4:	75 3d                	jne    c0003413 <dir_clear+0xea>
c00033d6:	43                   	inc    ebx
c00033d7:	eb cc                	jmp    c00033a5 <dir_clear+0x7c>
c00033d9:	83 ec 0c             	sub    esp,0xc
c00033dc:	31 d2                	xor    edx,edx
c00033de:	55                   	push   ebp
c00033df:	89 d8                	mov    eax,ebx
c00033e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033e5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033e9:	52                   	push   edx
c00033ea:	50                   	push   eax
c00033eb:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033ef:	57                   	push   edi
c00033f0:	50                   	push   eax
c00033f1:	e8 63 e5 ff ff       	call   c0001959 <disk_write>
c00033f6:	83 c4 20             	add    esp,0x20
c00033f9:	85 c0                	test   eax,eax
c00033fb:	75 0a                	jne    c0003407 <dir_clear+0xde>
c00033fd:	01 eb                	add    ebx,ebp
c00033ff:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003403:	39 d8                	cmp    eax,ebx
c0003405:	77 d2                	ja     c00033d9 <dir_clear+0xb0>
c0003407:	83 ec 0c             	sub    esp,0xc
c000340a:	57                   	push   edi
c000340b:	e8 c7 4d 00 00       	call   c00081d7 <ff_memfree>
c0003410:	83 c4 10             	add    esp,0x10
c0003413:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003417:	39 d8                	cmp    eax,ebx
c0003419:	0f 95 c0             	setne  al
c000341c:	0f b6 c0             	movzx  eax,al
c000341f:	eb 19                	jmp    c000343a <dir_clear+0x111>
c0003421:	b8 01 00 00 00       	mov    eax,0x1
c0003426:	eb 12                	jmp    c000343a <dir_clear+0x111>
c0003428:	89 d9                	mov    ecx,ebx
c000342a:	31 d2                	xor    edx,edx
c000342c:	c1 eb 09             	shr    ebx,0x9
c000342f:	e8 ee e5 ff ff       	call   c0001a22 <mem_set>
c0003434:	89 dd                	mov    ebp,ebx
c0003436:	31 db                	xor    ebx,ebx
c0003438:	eb c5                	jmp    c00033ff <dir_clear+0xd6>
c000343a:	83 c4 1c             	add    esp,0x1c
c000343d:	5b                   	pop    ebx
c000343e:	5e                   	pop    esi
c000343f:	5f                   	pop    edi
c0003440:	5d                   	pop    ebp
c0003441:	c3                   	ret    

c0003442 <dir_next>:
c0003442:	55                   	push   ebp
c0003443:	57                   	push   edi
c0003444:	56                   	push   esi
c0003445:	53                   	push   ebx
c0003446:	89 c3                	mov    ebx,eax
c0003448:	83 ec 1c             	sub    esp,0x1c
c000344b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000344d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003451:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003454:	8d 78 20             	lea    edi,[eax+0x20]
c0003457:	31 c0                	xor    eax,eax
c0003459:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000345d:	0f 94 c0             	sete   al
c0003460:	48                   	dec    eax
c0003461:	25 00 00 20 f0       	and    eax,0xf0200000
c0003466:	05 00 00 00 10       	add    eax,0x10000000
c000346b:	39 f8                	cmp    eax,edi
c000346d:	77 0e                	ja     c000347d <dir_next+0x3b>
c000346f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003476:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000347d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003480:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003483:	b8 04 00 00 00       	mov    eax,0x4
c0003488:	89 ce                	mov    esi,ecx
c000348a:	09 d6                	or     esi,edx
c000348c:	0f 84 da 00 00 00    	je     c000356c <dir_next+0x12a>
c0003492:	89 f8                	mov    eax,edi
c0003494:	25 ff 01 00 00       	and    eax,0x1ff
c0003499:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000349d:	0f 85 b9 00 00 00    	jne    c000355c <dir_next+0x11a>
c00034a3:	83 c2 01             	add    edx,0x1
c00034a6:	83 d1 00             	adc    ecx,0x0
c00034a9:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00034ac:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034af:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034b2:	85 d2                	test   edx,edx
c00034b4:	75 29                	jne    c00034df <dir_next+0x9d>
c00034b6:	89 fa                	mov    edx,edi
c00034b8:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034bc:	c1 ea 05             	shr    edx,0x5
c00034bf:	39 c2                	cmp    edx,eax
c00034c1:	0f 82 95 00 00 00    	jb     c000355c <dir_next+0x11a>
c00034c7:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034ce:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034d5:	b8 04 00 00 00       	mov    eax,0x4
c00034da:	e9 8d 00 00 00       	jmp    c000356c <dir_next+0x12a>
c00034df:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034e3:	89 f9                	mov    ecx,edi
c00034e5:	48                   	dec    eax
c00034e6:	c1 e9 09             	shr    ecx,0x9
c00034e9:	85 c8                	test   eax,ecx
c00034eb:	75 6f                	jne    c000355c <dir_next+0x11a>
c00034ed:	89 d8                	mov    eax,ebx
c00034ef:	e8 00 f8 ff ff       	call   c0002cf4 <get_fat>
c00034f4:	89 c6                	mov    esi,eax
c00034f6:	83 f8 01             	cmp    eax,0x1
c00034f9:	77 07                	ja     c0003502 <dir_next+0xc0>
c00034fb:	b8 02 00 00 00       	mov    eax,0x2
c0003500:	eb 6a                	jmp    c000356c <dir_next+0x12a>
c0003502:	83 f8 ff             	cmp    eax,0xffffffff
c0003505:	75 07                	jne    c000350e <dir_next+0xcc>
c0003507:	b8 01 00 00 00       	mov    eax,0x1
c000350c:	eb 5e                	jmp    c000356c <dir_next+0x12a>
c000350e:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003511:	77 37                	ja     c000354a <dir_next+0x108>
c0003513:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003518:	74 ad                	je     c00034c7 <dir_next+0x85>
c000351a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000351d:	89 d8                	mov    eax,ebx
c000351f:	e8 be fa ff ff       	call   c0002fe2 <create_chain>
c0003524:	89 c6                	mov    esi,eax
c0003526:	b8 07 00 00 00       	mov    eax,0x7
c000352b:	85 f6                	test   esi,esi
c000352d:	74 3d                	je     c000356c <dir_next+0x12a>
c000352f:	83 fe 01             	cmp    esi,0x1
c0003532:	74 c7                	je     c00034fb <dir_next+0xb9>
c0003534:	83 fe ff             	cmp    esi,0xffffffff
c0003537:	74 ce                	je     c0003507 <dir_next+0xc5>
c0003539:	89 f2                	mov    edx,esi
c000353b:	89 e8                	mov    eax,ebp
c000353d:	e8 e7 fd ff ff       	call   c0003329 <dir_clear>
c0003542:	85 c0                	test   eax,eax
c0003544:	75 c1                	jne    c0003507 <dir_next+0xc5>
c0003546:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000354a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000354d:	89 f2                	mov    edx,esi
c000354f:	89 e8                	mov    eax,ebp
c0003551:	e8 d1 e6 ff ff       	call   c0001c27 <clst2sect>
c0003556:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003559:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000355c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003560:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003563:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003567:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000356a:	31 c0                	xor    eax,eax
c000356c:	83 c4 1c             	add    esp,0x1c
c000356f:	5b                   	pop    ebx
c0003570:	5e                   	pop    esi
c0003571:	5f                   	pop    edi
c0003572:	5d                   	pop    ebp
c0003573:	c3                   	ret    

c0003574 <load_xdir>:
c0003574:	55                   	push   ebp
c0003575:	57                   	push   edi
c0003576:	56                   	push   esi
c0003577:	89 c6                	mov    esi,eax
c0003579:	53                   	push   ebx
c000357a:	83 ec 1c             	sub    esp,0x1c
c000357d:	8b 00                	mov    eax,DWORD PTR [eax]
c000357f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003582:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003585:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003588:	e8 df eb ff ff       	call   c000216c <move_window>
c000358d:	89 c3                	mov    ebx,eax
c000358f:	85 c0                	test   eax,eax
c0003591:	0f 85 0c 01 00 00    	jne    c00036a3 <load_xdir+0x12f>
c0003597:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000359a:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000359d:	0f 85 fb 00 00 00    	jne    c000369e <load_xdir+0x12a>
c00035a3:	89 f8                	mov    eax,edi
c00035a5:	b9 20 00 00 00       	mov    ecx,0x20
c00035aa:	e8 5e e4 ff ff       	call   c0001a0d <mem_cpy>
c00035af:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035b3:	40                   	inc    eax
c00035b4:	c1 e0 05             	shl    eax,0x5
c00035b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035bb:	83 e8 60             	sub    eax,0x60
c00035be:	3d 00 02 00 00       	cmp    eax,0x200
c00035c3:	0f 87 d5 00 00 00    	ja     c000369e <load_xdir+0x12a>
c00035c9:	31 d2                	xor    edx,edx
c00035cb:	89 f0                	mov    eax,esi
c00035cd:	e8 70 fe ff ff       	call   c0003442 <dir_next>
c00035d2:	89 c3                	mov    ebx,eax
c00035d4:	83 f8 04             	cmp    eax,0x4
c00035d7:	0f 84 c1 00 00 00    	je     c000369e <load_xdir+0x12a>
c00035dd:	85 c0                	test   eax,eax
c00035df:	0f 85 be 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035e5:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035e8:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00035ed:	e8 7a eb ff ff       	call   c000216c <move_window>
c00035f2:	89 c3                	mov    ebx,eax
c00035f4:	85 c0                	test   eax,eax
c00035f6:	0f 85 a7 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035fc:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035ff:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003602:	0f 85 96 00 00 00    	jne    c000369e <load_xdir+0x12a>
c0003608:	8d 47 20             	lea    eax,[edi+0x20]
c000360b:	b9 20 00 00 00       	mov    ecx,0x20
c0003610:	e8 f8 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003615:	31 d2                	xor    edx,edx
c0003617:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000361b:	b9 0f 00 00 00       	mov    ecx,0xf
c0003620:	83 c0 2c             	add    eax,0x2c
c0003623:	f7 f1                	div    ecx
c0003625:	c1 e0 05             	shl    eax,0x5
c0003628:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000362c:	77 70                	ja     c000369e <load_xdir+0x12a>
c000362e:	bd 40 00 00 00       	mov    ebp,0x40
c0003633:	31 d2                	xor    edx,edx
c0003635:	89 f0                	mov    eax,esi
c0003637:	e8 06 fe ff ff       	call   c0003442 <dir_next>
c000363c:	89 c3                	mov    ebx,eax
c000363e:	83 f8 04             	cmp    eax,0x4
c0003641:	74 5b                	je     c000369e <load_xdir+0x12a>
c0003643:	85 c0                	test   eax,eax
c0003645:	75 5c                	jne    c00036a3 <load_xdir+0x12f>
c0003647:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000364a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000364d:	8b 06                	mov    eax,DWORD PTR [esi]
c000364f:	e8 18 eb ff ff       	call   c000216c <move_window>
c0003654:	89 c3                	mov    ebx,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	75 49                	jne    c00036a3 <load_xdir+0x12f>
c000365a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000365d:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003660:	75 3c                	jne    c000369e <load_xdir+0x12a>
c0003662:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003668:	77 0d                	ja     c0003677 <load_xdir+0x103>
c000366a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000366d:	b9 20 00 00 00       	mov    ecx,0x20
c0003672:	e8 96 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003677:	83 c5 20             	add    ebp,0x20
c000367a:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000367e:	77 b3                	ja     c0003633 <load_xdir+0xbf>
c0003680:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003686:	77 1b                	ja     c00036a3 <load_xdir+0x12f>
c0003688:	89 f8                	mov    eax,edi
c000368a:	e8 cd e7 ff ff       	call   c0001e5c <xdir_sum>
c000368f:	89 c1                	mov    ecx,eax
c0003691:	8d 47 02             	lea    eax,[edi+0x2]
c0003694:	e8 f5 e2 ff ff       	call   c000198e <ld_word>
c0003699:	66 39 c1             	cmp    cx,ax
c000369c:	74 05                	je     c00036a3 <load_xdir+0x12f>
c000369e:	bb 02 00 00 00       	mov    ebx,0x2
c00036a3:	83 c4 1c             	add    esp,0x1c
c00036a6:	89 d8                	mov    eax,ebx
c00036a8:	5b                   	pop    ebx
c00036a9:	5e                   	pop    esi
c00036aa:	5f                   	pop    edi
c00036ab:	5d                   	pop    ebp
c00036ac:	c3                   	ret    

c00036ad <load_obj_xdir>:
c00036ad:	53                   	push   ebx
c00036ae:	89 c3                	mov    ebx,eax
c00036b0:	83 ec 08             	sub    esp,0x8
c00036b3:	8b 02                	mov    eax,DWORD PTR [edx]
c00036b5:	89 03                	mov    DWORD PTR [ebx],eax
c00036b7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036ba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036bd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c0:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036c3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036cd:	30 c0                	xor    al,al
c00036cf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036d6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036d9:	89 d8                	mov    eax,ebx
c00036db:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036de:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036e1:	e8 04 f8 ff ff       	call   c0002eea <dir_sdi>
c00036e6:	85 c0                	test   eax,eax
c00036e8:	75 0b                	jne    c00036f5 <load_obj_xdir+0x48>
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	83 c4 08             	add    esp,0x8
c00036ef:	5b                   	pop    ebx
c00036f0:	e9 7f fe ff ff       	jmp    c0003574 <load_xdir>
c00036f5:	83 c4 08             	add    esp,0x8
c00036f8:	5b                   	pop    ebx
c00036f9:	c3                   	ret    

c00036fa <dir_read>:
c00036fa:	55                   	push   ebp
c00036fb:	bd 04 00 00 00       	mov    ebp,0x4
c0003700:	57                   	push   edi
c0003701:	56                   	push   esi
c0003702:	be ff ff ff ff       	mov    esi,0xffffffff
c0003707:	53                   	push   ebx
c0003708:	89 c3                	mov    ebx,eax
c000370a:	83 ec 1c             	sub    esp,0x1c
c000370d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003711:	8b 38                	mov    edi,DWORD PTR [eax]
c0003713:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003718:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000371b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371e:	89 c8                	mov    eax,ecx
c0003720:	09 d0                	or     eax,edx
c0003722:	0f 84 25 01 00 00    	je     c000384d <dir_read+0x153>
c0003728:	89 f8                	mov    eax,edi
c000372a:	e8 3d ea ff ff       	call   c000216c <move_window>
c000372f:	89 c5                	mov    ebp,eax
c0003731:	85 c0                	test   eax,eax
c0003733:	0f 85 23 01 00 00    	jne    c000385c <dir_read+0x162>
c0003739:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000373c:	8a 0a                	mov    cl,BYTE PTR [edx]
c000373e:	84 c9                	test   cl,cl
c0003740:	0f 84 11 01 00 00    	je     c0003857 <dir_read+0x15d>
c0003746:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003749:	75 48                	jne    c0003793 <dir_read+0x99>
c000374b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003750:	74 10                	je     c0003762 <dir_read+0x68>
c0003752:	80 f9 83             	cmp    cl,0x83
c0003755:	0f 85 dd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000375b:	31 ed                	xor    ebp,ebp
c000375d:	e9 08 01 00 00       	jmp    c000386a <dir_read+0x170>
c0003762:	80 f9 85             	cmp    cl,0x85
c0003765:	0f 85 cd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000376b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000376e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003771:	89 d8                	mov    eax,ebx
c0003773:	e8 fc fd ff ff       	call   c0003574 <load_xdir>
c0003778:	89 c5                	mov    ebp,eax
c000377a:	85 c0                	test   eax,eax
c000377c:	0f 85 da 00 00 00    	jne    c000385c <dir_read+0x162>
c0003782:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003785:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003788:	83 e0 3f             	and    eax,0x3f
c000378b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000378e:	e9 d7 00 00 00       	jmp    c000386a <dir_read+0x170>
c0003793:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003796:	83 e0 3f             	and    eax,0x3f
c0003799:	80 f9 2e             	cmp    cl,0x2e
c000379c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00037a0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037a3:	0f 84 8a 00 00 00    	je     c0003833 <dir_read+0x139>
c00037a9:	80 f9 e5             	cmp    cl,0xe5
c00037ac:	0f 84 81 00 00 00    	je     c0003833 <dir_read+0x139>
c00037b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037b6:	83 e0 1f             	and    eax,0x1f
c00037b9:	83 f8 08             	cmp    eax,0x8
c00037bc:	0f 94 c0             	sete   al
c00037bf:	0f b6 c0             	movzx  eax,al
c00037c2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037c6:	75 6b                	jne    c0003833 <dir_read+0x139>
c00037c8:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037cd:	75 44                	jne    c0003813 <dir_read+0x119>
c00037cf:	f6 c1 40             	test   cl,0x40
c00037d2:	74 12                	je     c00037e6 <dir_read+0xec>
c00037d4:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037d7:	83 e1 bf             	and    ecx,0xffffffbf
c00037da:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037de:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e4:	eb 06                	jmp    c00037ec <dir_read+0xf2>
c00037e6:	89 f0                	mov    eax,esi
c00037e8:	38 c8                	cmp    al,cl
c00037ea:	75 47                	jne    c0003833 <dir_read+0x139>
c00037ec:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037f0:	be ff ff ff ff       	mov    esi,0xffffffff
c00037f5:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00037f8:	75 3e                	jne    c0003838 <dir_read+0x13e>
c00037fa:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00037fe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003801:	e8 8a e4 ff ff       	call   c0001c90 <pick_lfn>
c0003806:	85 c0                	test   eax,eax
c0003808:	74 2e                	je     c0003838 <dir_read+0x13e>
c000380a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000380e:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003811:	eb 25                	jmp    c0003838 <dir_read+0x13e>
c0003813:	89 f0                	mov    eax,esi
c0003815:	84 c0                	test   al,al
c0003817:	75 11                	jne    c000382a <dir_read+0x130>
c0003819:	89 d0                	mov    eax,edx
c000381b:	e8 2a e6 ff ff       	call   c0001e4a <sum_sfn>
c0003820:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003824:	0f 84 31 ff ff ff    	je     c000375b <dir_read+0x61>
c000382a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003831:	eb 37                	jmp    c000386a <dir_read+0x170>
c0003833:	be ff ff ff ff       	mov    esi,0xffffffff
c0003838:	31 d2                	xor    edx,edx
c000383a:	89 d8                	mov    eax,ebx
c000383c:	e8 01 fc ff ff       	call   c0003442 <dir_next>
c0003841:	89 c5                	mov    ebp,eax
c0003843:	85 c0                	test   eax,eax
c0003845:	0f 84 cd fe ff ff    	je     c0003718 <dir_read+0x1e>
c000384b:	eb 0f                	jmp    c000385c <dir_read+0x162>
c000384d:	85 ed                	test   ebp,ebp
c000384f:	0f 84 06 ff ff ff    	je     c000375b <dir_read+0x61>
c0003855:	eb 05                	jmp    c000385c <dir_read+0x162>
c0003857:	bd 04 00 00 00       	mov    ebp,0x4
c000385c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003863:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000386a:	83 c4 1c             	add    esp,0x1c
c000386d:	89 e8                	mov    eax,ebp
c000386f:	5b                   	pop    ebx
c0003870:	5e                   	pop    esi
c0003871:	5f                   	pop    edi
c0003872:	5d                   	pop    ebp
c0003873:	c3                   	ret    

c0003874 <dir_alloc>:
c0003874:	55                   	push   ebp
c0003875:	89 d5                	mov    ebp,edx
c0003877:	57                   	push   edi
c0003878:	31 d2                	xor    edx,edx
c000387a:	56                   	push   esi
c000387b:	53                   	push   ebx
c000387c:	89 c3                	mov    ebx,eax
c000387e:	83 ec 0c             	sub    esp,0xc
c0003881:	8b 38                	mov    edi,DWORD PTR [eax]
c0003883:	e8 62 f6 ff ff       	call   c0002eea <dir_sdi>
c0003888:	85 c0                	test   eax,eax
c000388a:	75 4e                	jne    c00038da <dir_alloc+0x66>
c000388c:	31 f6                	xor    esi,esi
c000388e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003891:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003894:	89 f8                	mov    eax,edi
c0003896:	e8 d1 e8 ff ff       	call   c000216c <move_window>
c000389b:	85 c0                	test   eax,eax
c000389d:	75 3b                	jne    c00038da <dir_alloc+0x66>
c000389f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00038a2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00038a5:	8a 12                	mov    dl,BYTE PTR [edx]
c00038a7:	75 07                	jne    c00038b0 <dir_alloc+0x3c>
c00038a9:	f7 d2                	not    edx
c00038ab:	c0 ea 07             	shr    dl,0x7
c00038ae:	eb 0d                	jmp    c00038bd <dir_alloc+0x49>
c00038b0:	84 d2                	test   dl,dl
c00038b2:	0f 94 c1             	sete   cl
c00038b5:	80 fa e5             	cmp    dl,0xe5
c00038b8:	0f 94 c2             	sete   dl
c00038bb:	09 ca                	or     edx,ecx
c00038bd:	84 d2                	test   dl,dl
c00038bf:	74 07                	je     c00038c8 <dir_alloc+0x54>
c00038c1:	46                   	inc    esi
c00038c2:	39 ee                	cmp    esi,ebp
c00038c4:	75 04                	jne    c00038ca <dir_alloc+0x56>
c00038c6:	eb 1c                	jmp    c00038e4 <dir_alloc+0x70>
c00038c8:	31 f6                	xor    esi,esi
c00038ca:	ba 01 00 00 00       	mov    edx,0x1
c00038cf:	89 d8                	mov    eax,ebx
c00038d1:	e8 6c fb ff ff       	call   c0003442 <dir_next>
c00038d6:	85 c0                	test   eax,eax
c00038d8:	74 b4                	je     c000388e <dir_alloc+0x1a>
c00038da:	83 f8 04             	cmp    eax,0x4
c00038dd:	75 05                	jne    c00038e4 <dir_alloc+0x70>
c00038df:	b8 07 00 00 00       	mov    eax,0x7
c00038e4:	83 c4 0c             	add    esp,0xc
c00038e7:	5b                   	pop    ebx
c00038e8:	5e                   	pop    esi
c00038e9:	5f                   	pop    edi
c00038ea:	5d                   	pop    ebp
c00038eb:	c3                   	ret    

c00038ec <store_xdir>:
c00038ec:	55                   	push   ebp
c00038ed:	57                   	push   edi
c00038ee:	89 c7                	mov    edi,eax
c00038f0:	56                   	push   esi
c00038f1:	53                   	push   ebx
c00038f2:	83 ec 0c             	sub    esp,0xc
c00038f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00038f7:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00038fa:	89 e8                	mov    eax,ebp
c00038fc:	e8 5b e5 ff ff       	call   c0001e5c <xdir_sum>
c0003901:	0f b7 d0             	movzx  edx,ax
c0003904:	8d 45 02             	lea    eax,[ebp+0x2]
c0003907:	e8 f4 e0 ff ff       	call   c0001a00 <st_word>
c000390c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003910:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003913:	89 f8                	mov    eax,edi
c0003915:	e8 d0 f5 ff ff       	call   c0002eea <dir_sdi>
c000391a:	89 c6                	mov    esi,eax
c000391c:	85 f6                	test   esi,esi
c000391e:	75 3d                	jne    c000395d <store_xdir+0x71>
c0003920:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003923:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003926:	8b 07                	mov    eax,DWORD PTR [edi]
c0003928:	e8 3f e8 ff ff       	call   c000216c <move_window>
c000392d:	89 c6                	mov    esi,eax
c000392f:	85 c0                	test   eax,eax
c0003931:	75 2a                	jne    c000395d <store_xdir+0x71>
c0003933:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003936:	b9 20 00 00 00       	mov    ecx,0x20
c000393b:	89 ea                	mov    edx,ebp
c000393d:	e8 cb e0 ff ff       	call   c0001a0d <mem_cpy>
c0003942:	8b 07                	mov    eax,DWORD PTR [edi]
c0003944:	85 db                	test   ebx,ebx
c0003946:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000394a:	74 11                	je     c000395d <store_xdir+0x71>
c000394c:	31 d2                	xor    edx,edx
c000394e:	89 f8                	mov    eax,edi
c0003950:	83 c5 20             	add    ebp,0x20
c0003953:	e8 ea fa ff ff       	call   c0003442 <dir_next>
c0003958:	4b                   	dec    ebx
c0003959:	89 c6                	mov    esi,eax
c000395b:	eb bf                	jmp    c000391c <store_xdir+0x30>
c000395d:	89 f0                	mov    eax,esi
c000395f:	83 fe 02             	cmp    esi,0x2
c0003962:	76 05                	jbe    c0003969 <store_xdir+0x7d>
c0003964:	b8 02 00 00 00       	mov    eax,0x2
c0003969:	83 c4 0c             	add    esp,0xc
c000396c:	5b                   	pop    ebx
c000396d:	5e                   	pop    esi
c000396e:	5f                   	pop    edi
c000396f:	5d                   	pop    ebp
c0003970:	c3                   	ret    

c0003971 <dir_remove>:
c0003971:	57                   	push   edi
c0003972:	56                   	push   esi
c0003973:	53                   	push   ebx
c0003974:	89 c3                	mov    ebx,eax
c0003976:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003979:	8b 30                	mov    esi,DWORD PTR [eax]
c000397b:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c000397e:	83 fa ff             	cmp    edx,0xffffffff
c0003981:	74 09                	je     c000398c <dir_remove+0x1b>
c0003983:	e8 62 f5 ff ff       	call   c0002eea <dir_sdi>
c0003988:	85 c0                	test   eax,eax
c000398a:	75 41                	jne    c00039cd <dir_remove+0x5c>
c000398c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000398f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003992:	89 f0                	mov    eax,esi
c0003994:	e8 d3 e7 ff ff       	call   c000216c <move_window>
c0003999:	85 c0                	test   eax,eax
c000399b:	75 26                	jne    c00039c3 <dir_remove+0x52>
c000399d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039a0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00039a3:	75 05                	jne    c00039aa <dir_remove+0x39>
c00039a5:	80 22 7f             	and    BYTE PTR [edx],0x7f
c00039a8:	eb 03                	jmp    c00039ad <dir_remove+0x3c>
c00039aa:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00039ad:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039b1:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039b4:	73 17                	jae    c00039cd <dir_remove+0x5c>
c00039b6:	31 d2                	xor    edx,edx
c00039b8:	89 d8                	mov    eax,ebx
c00039ba:	e8 83 fa ff ff       	call   c0003442 <dir_next>
c00039bf:	85 c0                	test   eax,eax
c00039c1:	74 c9                	je     c000398c <dir_remove+0x1b>
c00039c3:	83 f8 04             	cmp    eax,0x4
c00039c6:	75 05                	jne    c00039cd <dir_remove+0x5c>
c00039c8:	b8 02 00 00 00       	mov    eax,0x2
c00039cd:	5b                   	pop    ebx
c00039ce:	5e                   	pop    esi
c00039cf:	5f                   	pop    edi
c00039d0:	c3                   	ret    

c00039d1 <create_name>:
c00039d1:	55                   	push   ebp
c00039d2:	89 d5                	mov    ebp,edx
c00039d4:	57                   	push   edi
c00039d5:	89 c7                	mov    edi,eax
c00039d7:	56                   	push   esi
c00039d8:	31 f6                	xor    esi,esi
c00039da:	53                   	push   ebx
c00039db:	83 ec 3c             	sub    esp,0x3c
c00039de:	8b 02                	mov    eax,DWORD PTR [edx]
c00039e0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039e4:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00039ed:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039f1:	e8 72 e0 ff ff       	call   c0001a68 <tchar2uni>
c00039f6:	89 c3                	mov    ebx,eax
c00039f8:	83 f8 ff             	cmp    eax,0xffffffff
c00039fb:	75 0a                	jne    c0003a07 <create_name+0x36>
c00039fd:	b8 06 00 00 00       	mov    eax,0x6
c0003a02:	e9 9e 02 00 00       	jmp    c0003ca5 <create_name+0x2d4>
c0003a07:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a0c:	76 0c                	jbe    c0003a1a <create_name+0x49>
c0003a0e:	c1 e8 10             	shr    eax,0x10
c0003a11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a15:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a19:	46                   	inc    esi
c0003a1a:	66 83 fb 1f          	cmp    bx,0x1f
c0003a1e:	76 4f                	jbe    c0003a6f <create_name+0x9e>
c0003a20:	66 83 fb 5c          	cmp    bx,0x5c
c0003a24:	74 35                	je     c0003a5b <create_name+0x8a>
c0003a26:	66 83 fb 2f          	cmp    bx,0x2f
c0003a2a:	74 2f                	je     c0003a5b <create_name+0x8a>
c0003a2c:	66 83 fb 7f          	cmp    bx,0x7f
c0003a30:	77 11                	ja     c0003a43 <create_name+0x72>
c0003a32:	0f b7 d3             	movzx  edx,bx
c0003a35:	b8 72 f1 01 c0       	mov    eax,0xc001f172
c0003a3a:	e8 11 e0 ff ff       	call   c0001a50 <chk_chr>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 ba                	jne    c00039fd <create_name+0x2c>
c0003a43:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a49:	77 b2                	ja     c00039fd <create_name+0x2c>
c0003a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a4f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a53:	46                   	inc    esi
c0003a54:	eb 97                	jmp    c00039ed <create_name+0x1c>
c0003a56:	40                   	inc    eax
c0003a57:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a5f:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a61:	80 fa 2f             	cmp    dl,0x2f
c0003a64:	74 f0                	je     c0003a56 <create_name+0x85>
c0003a66:	80 fa 5c             	cmp    dl,0x5c
c0003a69:	74 eb                	je     c0003a56 <create_name+0x85>
c0003a6b:	31 db                	xor    ebx,ebx
c0003a6d:	eb 02                	jmp    c0003a71 <create_name+0xa0>
c0003a6f:	b3 04                	mov    bl,0x4
c0003a71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a78:	85 f6                	test   esi,esi
c0003a7a:	74 18                	je     c0003a94 <create_name+0xc3>
c0003a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a80:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a85:	66 83 f8 20          	cmp    ax,0x20
c0003a89:	74 06                	je     c0003a91 <create_name+0xc0>
c0003a8b:	66 83 f8 2e          	cmp    ax,0x2e
c0003a8f:	75 03                	jne    c0003a94 <create_name+0xc3>
c0003a91:	4e                   	dec    esi
c0003a92:	eb e4                	jmp    c0003a78 <create_name+0xa7>
c0003a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a98:	31 ed                	xor    ebp,ebp
c0003a9a:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003aa0:	85 f6                	test   esi,esi
c0003aa2:	0f 84 55 ff ff ff    	je     c00039fd <create_name+0x2c>
c0003aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003aac:	8d 55 01             	lea    edx,[ebp+0x1]
c0003aaf:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003ab3:	66 83 f8 20          	cmp    ax,0x20
c0003ab7:	75 04                	jne    c0003abd <create_name+0xec>
c0003ab9:	89 d5                	mov    ebp,edx
c0003abb:	eb eb                	jmp    c0003aa8 <create_name+0xd7>
c0003abd:	85 ed                	test   ebp,ebp
c0003abf:	75 06                	jne    c0003ac7 <create_name+0xf6>
c0003ac1:	66 83 f8 2e          	cmp    ax,0x2e
c0003ac5:	75 08                	jne    c0003acf <create_name+0xfe>
c0003ac7:	83 cb 03             	or     ebx,0x3
c0003aca:	eb 03                	jmp    c0003acf <create_name+0xfe>
c0003acc:	4e                   	dec    esi
c0003acd:	74 0c                	je     c0003adb <create_name+0x10a>
c0003acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad3:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ad9:	75 f1                	jne    c0003acc <create_name+0xfb>
c0003adb:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ae0:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ae3:	ba 20 00 00 00       	mov    edx,0x20
c0003ae8:	e8 35 df ff ff       	call   c0001a22 <mem_set>
c0003aed:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003af5:	31 c9                	xor    ecx,ecx
c0003af7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003afc:	8d 45 01             	lea    eax,[ebp+0x1]
c0003aff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b07:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b0b:	66 85 ed             	test   bp,bp
c0003b0e:	0f 84 30 01 00 00    	je     c0003c44 <create_name+0x273>
c0003b14:	66 83 fd 20          	cmp    bp,0x20
c0003b18:	74 10                	je     c0003b2a <create_name+0x159>
c0003b1a:	66 83 fd 2e          	cmp    bp,0x2e
c0003b1e:	75 13                	jne    c0003b33 <create_name+0x162>
c0003b20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b24:	0f 84 6b 01 00 00    	je     c0003c95 <create_name+0x2c4>
c0003b2a:	83 cb 03             	or     ebx,0x3
c0003b2d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003b31:	eb c9                	jmp    c0003afc <create_name+0x12b>
c0003b33:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003b37:	73 0b                	jae    c0003b44 <create_name+0x173>
c0003b39:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b3d:	75 47                	jne    c0003b86 <create_name+0x1b5>
c0003b3f:	e9 51 01 00 00       	jmp    c0003c95 <create_name+0x2c4>
c0003b44:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003b49:	75 10                	jne    c0003b5b <create_name+0x18a>
c0003b4b:	83 cb 03             	or     ebx,0x3
c0003b4e:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b56:	e9 e9 00 00 00       	jmp    c0003c44 <create_name+0x273>
c0003b5b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b5f:	74 0d                	je     c0003b6e <create_name+0x19d>
c0003b61:	83 cb 03             	or     ebx,0x3
c0003b64:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b68:	0f 87 d6 00 00 00    	ja     c0003c44 <create_name+0x273>
c0003b6e:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003b73:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003b77:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b7f:	b9 08 00 00 00       	mov    ecx,0x8
c0003b84:	eb a7                	jmp    c0003b2d <create_name+0x15c>
c0003b86:	66 83 fd 7f          	cmp    bp,0x7f
c0003b8a:	76 68                	jbe    c0003bf4 <create_name+0x223>
c0003b8c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b90:	88 da                	mov    dl,bl
c0003b92:	83 ca 02             	or     edx,0x2
c0003b95:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003b99:	50                   	push   eax
c0003b9a:	50                   	push   eax
c0003b9b:	68 b5 01 00 00       	push   0x1b5
c0003ba0:	55                   	push   ebp
c0003ba1:	e8 48 46 00 00       	call   c00081ee <ff_uni2oem>
c0003ba6:	83 c4 10             	add    esp,0x10
c0003ba9:	89 c5                	mov    ebp,eax
c0003bab:	a8 80                	test   al,0x80
c0003bad:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003bb1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003bb5:	74 0c                	je     c0003bc3 <create_name+0x1f2>
c0003bb7:	83 e5 7f             	and    ebp,0x7f
c0003bba:	0f b6 ad c0 f0 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe0f40]
c0003bc1:	eb 2a                	jmp    c0003bed <create_name+0x21c>
c0003bc3:	66 3d ff 00          	cmp    ax,0xff
c0003bc7:	76 24                	jbe    c0003bed <create_name+0x21c>
c0003bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bcd:	48                   	dec    eax
c0003bce:	39 c8                	cmp    eax,ecx
c0003bd0:	77 0c                	ja     c0003bde <create_name+0x20d>
c0003bd2:	83 cb 03             	or     ebx,0x3
c0003bd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003bd9:	e9 4f ff ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003bde:	89 e8                	mov    eax,ebp
c0003be0:	88 d3                	mov    bl,dl
c0003be2:	66 c1 e8 08          	shr    ax,0x8
c0003be6:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bea:	41                   	inc    ecx
c0003beb:	eb 4b                	jmp    c0003c38 <create_name+0x267>
c0003bed:	88 d3                	mov    bl,dl
c0003bef:	66 85 ed             	test   bp,bp
c0003bf2:	74 19                	je     c0003c0d <create_name+0x23c>
c0003bf4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003bf8:	0f b7 d5             	movzx  edx,bp
c0003bfb:	b8 7b f1 01 c0       	mov    eax,0xc001f17b
c0003c00:	e8 4b de ff ff       	call   c0001a50 <chk_chr>
c0003c05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c09:	85 c0                	test   eax,eax
c0003c0b:	74 0a                	je     c0003c17 <create_name+0x246>
c0003c0d:	83 cb 03             	or     ebx,0x3
c0003c10:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c15:	eb 21                	jmp    c0003c38 <create_name+0x267>
c0003c17:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c1a:	66 83 f8 19          	cmp    ax,0x19
c0003c1e:	77 07                	ja     c0003c27 <create_name+0x256>
c0003c20:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c25:	eb 11                	jmp    c0003c38 <create_name+0x267>
c0003c27:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c2a:	66 83 f8 19          	cmp    ax,0x19
c0003c2e:	77 08                	ja     c0003c38 <create_name+0x267>
c0003c30:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003c35:	83 ed 20             	sub    ebp,0x20
c0003c38:	89 e8                	mov    eax,ebp
c0003c3a:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c3e:	41                   	inc    ecx
c0003c3f:	e9 e9 fe ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003c44:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c48:	75 04                	jne    c0003c4e <create_name+0x27d>
c0003c4a:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c4e:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003c53:	75 05                	jne    c0003c5a <create_name+0x289>
c0003c55:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c5a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c5e:	83 e0 0c             	and    eax,0xc
c0003c61:	3c 0c                	cmp    al,0xc
c0003c63:	74 0b                	je     c0003c70 <create_name+0x29f>
c0003c65:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c69:	83 e0 03             	and    eax,0x3
c0003c6c:	3c 03                	cmp    al,0x3
c0003c6e:	75 05                	jne    c0003c75 <create_name+0x2a4>
c0003c70:	83 cb 02             	or     ebx,0x2
c0003c73:	eb 19                	jmp    c0003c8e <create_name+0x2bd>
c0003c75:	f6 c3 02             	test   bl,0x2
c0003c78:	75 14                	jne    c0003c8e <create_name+0x2bd>
c0003c7a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003c7f:	74 03                	je     c0003c84 <create_name+0x2b3>
c0003c81:	83 cb 10             	or     ebx,0x10
c0003c84:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003c89:	74 03                	je     c0003c8e <create_name+0x2bd>
c0003c8b:	83 cb 08             	or     ebx,0x8
c0003c8e:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c91:	31 c0                	xor    eax,eax
c0003c93:	eb 10                	jmp    c0003ca5 <create_name+0x2d4>
c0003c95:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c9a:	0f 85 ce fe ff ff    	jne    c0003b6e <create_name+0x19d>
c0003ca0:	e9 a6 fe ff ff       	jmp    c0003b4b <create_name+0x17a>
c0003ca5:	83 c4 3c             	add    esp,0x3c
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	5d                   	pop    ebp
c0003cac:	c3                   	ret    

c0003cad <xname_sum>:
c0003cad:	56                   	push   esi
c0003cae:	53                   	push   ebx
c0003caf:	89 c6                	mov    esi,eax
c0003cb1:	51                   	push   ecx
c0003cb2:	31 db                	xor    ebx,ebx
c0003cb4:	83 c6 02             	add    esi,0x2
c0003cb7:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003cbb:	66 85 c0             	test   ax,ax
c0003cbe:	74 1f                	je     c0003cdf <xname_sum+0x32>
c0003cc0:	83 ec 0c             	sub    esp,0xc
c0003cc3:	66 d1 cb             	ror    bx,1
c0003cc6:	50                   	push   eax
c0003cc7:	e8 1e 46 00 00       	call   c00082ea <ff_wtoupper>
c0003ccc:	83 c4 10             	add    esp,0x10
c0003ccf:	0f b6 d0             	movzx  edx,al
c0003cd2:	66 c1 e8 08          	shr    ax,0x8
c0003cd6:	01 d3                	add    ebx,edx
c0003cd8:	66 d1 cb             	ror    bx,1
c0003cdb:	01 c3                	add    ebx,eax
c0003cdd:	eb d5                	jmp    c0003cb4 <xname_sum+0x7>
c0003cdf:	89 d8                	mov    eax,ebx
c0003ce1:	5a                   	pop    edx
c0003ce2:	5b                   	pop    ebx
c0003ce3:	5e                   	pop    esi
c0003ce4:	c3                   	ret    

c0003ce5 <create_xdir>:
c0003ce5:	55                   	push   ebp
c0003ce6:	b9 40 00 00 00       	mov    ecx,0x40
c0003ceb:	57                   	push   edi
c0003cec:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf1:	56                   	push   esi
c0003cf2:	31 ff                	xor    edi,edi
c0003cf4:	53                   	push   ebx
c0003cf5:	be 40 00 00 00       	mov    esi,0x40
c0003cfa:	89 c3                	mov    ebx,eax
c0003cfc:	83 ec 1c             	sub    esp,0x1c
c0003cff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d03:	31 d2                	xor    edx,edx
c0003d05:	e8 18 dd ff ff       	call   c0001a22 <mem_set>
c0003d0a:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d0d:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d11:	31 c9                	xor    ecx,ecx
c0003d13:	8d 46 01             	lea    eax,[esi+0x1]
c0003d16:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d1a:	83 c6 02             	add    esi,0x2
c0003d1d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d21:	66 85 ed             	test   bp,bp
c0003d24:	74 12                	je     c0003d38 <create_xdir+0x53>
c0003d26:	0f b6 c1             	movzx  eax,cl
c0003d29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d2d:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d31:	66 83 fd 01          	cmp    bp,0x1
c0003d35:	80 d9 ff             	sbb    cl,0xff
c0003d38:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d3b:	0f b7 d5             	movzx  edx,bp
c0003d3e:	83 c6 02             	add    esi,0x2
c0003d41:	e8 ba dc ff ff       	call   c0001a00 <st_word>
c0003d46:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d4c:	75 d3                	jne    c0003d21 <create_xdir+0x3c>
c0003d4e:	8d 47 01             	lea    eax,[edi+0x1]
c0003d51:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d55:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d59:	0f b6 c1             	movzx  eax,cl
c0003d5c:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d61:	74 07                	je     c0003d6a <create_xdir+0x85>
c0003d63:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d68:	eb a9                	jmp    c0003d13 <create_xdir+0x2e>
c0003d6a:	8d 47 02             	lea    eax,[edi+0x2]
c0003d6d:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d70:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d73:	89 d0                	mov    eax,edx
c0003d75:	e8 33 ff ff ff       	call   c0003cad <xname_sum>
c0003d7a:	83 c4 1c             	add    esp,0x1c
c0003d7d:	0f b7 d0             	movzx  edx,ax
c0003d80:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d83:	5b                   	pop    ebx
c0003d84:	5e                   	pop    esi
c0003d85:	5f                   	pop    edi
c0003d86:	5d                   	pop    ebp
c0003d87:	e9 74 dc ff ff       	jmp    c0001a00 <st_word>

c0003d8c <cmp_lfn>:
c0003d8c:	55                   	push   ebp
c0003d8d:	57                   	push   edi
c0003d8e:	89 d7                	mov    edi,edx
c0003d90:	56                   	push   esi
c0003d91:	53                   	push   ebx
c0003d92:	83 ec 1c             	sub    esp,0x1c
c0003d95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d99:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003d9c:	e8 ed db ff ff       	call   c000198e <ld_word>
c0003da1:	66 85 c0             	test   ax,ax
c0003da4:	74 07                	je     c0003dad <cmp_lfn+0x21>
c0003da6:	31 c0                	xor    eax,eax
c0003da8:	e9 9a 00 00 00       	jmp    c0003e47 <cmp_lfn+0xbb>
c0003dad:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003daf:	bd 01 00 00 00       	mov    ebp,0x1
c0003db4:	83 e3 3f             	and    ebx,0x3f
c0003db7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003dbf:	4b                   	dec    ebx
c0003dc0:	6b db 0d             	imul   ebx,ebx,0xd
c0003dc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dc7:	0f b6 80 40 f1 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0ec0]
c0003dce:	01 f8                	add    eax,edi
c0003dd0:	e8 b9 db ff ff       	call   c000198e <ld_word>
c0003dd5:	66 85 ed             	test   bp,bp
c0003dd8:	89 c6                	mov    esi,eax
c0003dda:	74 3c                	je     c0003e18 <cmp_lfn+0x8c>
c0003ddc:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003de2:	77 c2                	ja     c0003da6 <cmp_lfn+0x1a>
c0003de4:	83 ec 0c             	sub    esp,0xc
c0003de7:	0f b7 c0             	movzx  eax,ax
c0003dea:	50                   	push   eax
c0003deb:	e8 fa 44 00 00       	call   c00082ea <ff_wtoupper>
c0003df0:	89 c5                	mov    ebp,eax
c0003df2:	8d 43 01             	lea    eax,[ebx+0x1]
c0003df5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003df9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003dfd:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e01:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e04:	e8 e1 44 00 00       	call   c00082ea <ff_wtoupper>
c0003e09:	83 c4 10             	add    esp,0x10
c0003e0c:	39 c5                	cmp    ebp,eax
c0003e0e:	75 96                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e10:	89 f5                	mov    ebp,esi
c0003e12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e16:	eb 04                	jmp    c0003e1c <cmp_lfn+0x90>
c0003e18:	66 46                	inc    si
c0003e1a:	75 8a                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e1c:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e20:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e25:	75 9c                	jne    c0003dc3 <cmp_lfn+0x37>
c0003e27:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e2a:	74 16                	je     c0003e42 <cmp_lfn+0xb6>
c0003e2c:	66 85 ed             	test   bp,bp
c0003e2f:	74 11                	je     c0003e42 <cmp_lfn+0xb6>
c0003e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e3a:	0f 94 c0             	sete   al
c0003e3d:	0f b6 c0             	movzx  eax,al
c0003e40:	eb 05                	jmp    c0003e47 <cmp_lfn+0xbb>
c0003e42:	b8 01 00 00 00       	mov    eax,0x1
c0003e47:	83 c4 1c             	add    esp,0x1c
c0003e4a:	5b                   	pop    ebx
c0003e4b:	5e                   	pop    esi
c0003e4c:	5f                   	pop    edi
c0003e4d:	5d                   	pop    ebp
c0003e4e:	c3                   	ret    

c0003e4f <dir_find>:
c0003e4f:	55                   	push   ebp
c0003e50:	31 d2                	xor    edx,edx
c0003e52:	57                   	push   edi
c0003e53:	56                   	push   esi
c0003e54:	53                   	push   ebx
c0003e55:	89 c3                	mov    ebx,eax
c0003e57:	83 ec 1c             	sub    esp,0x1c
c0003e5a:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e5c:	e8 89 f0 ff ff       	call   c0002eea <dir_sdi>
c0003e61:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e64:	85 c0                	test   eax,eax
c0003e66:	0f 85 9e 01 00 00    	jne    c000400a <dir_find+0x1bb>
c0003e6c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e6f:	0f 85 8d 00 00 00    	jne    c0003f02 <dir_find+0xb3>
c0003e75:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e78:	e8 30 fe ff ff       	call   c0003cad <xname_sum>
c0003e7d:	89 c7                	mov    edi,eax
c0003e7f:	31 d2                	xor    edx,edx
c0003e81:	89 d8                	mov    eax,ebx
c0003e83:	e8 72 f8 ff ff       	call   c00036fa <dir_read>
c0003e88:	85 c0                	test   eax,eax
c0003e8a:	0f 85 5e 01 00 00    	jne    c0003fee <dir_find+0x19f>
c0003e90:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003e93:	8d 41 24             	lea    eax,[ecx+0x24]
c0003e96:	e8 f3 da ff ff       	call   c000198e <ld_word>
c0003e9b:	66 39 f8             	cmp    ax,di
c0003e9e:	75 df                	jne    c0003e7f <dir_find+0x30>
c0003ea0:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003ea3:	31 ed                	xor    ebp,ebp
c0003ea5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003ea9:	ba 40 00 00 00       	mov    edx,0x40
c0003eae:	89 e9                	mov    ecx,ebp
c0003eb0:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003eb4:	0f 84 42 01 00 00    	je     c0003ffc <dir_find+0x1ad>
c0003eba:	f6 c2 1f             	test   dl,0x1f
c0003ebd:	75 03                	jne    c0003ec2 <dir_find+0x73>
c0003ebf:	83 c2 02             	add    edx,0x2
c0003ec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003ec6:	89 d0                	mov    eax,edx
c0003ec8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ecb:	e8 be da ff ff       	call   c000198e <ld_word>
c0003ed0:	83 ec 0c             	sub    esp,0xc
c0003ed3:	0f b7 c0             	movzx  eax,ax
c0003ed6:	50                   	push   eax
c0003ed7:	e8 0e 44 00 00       	call   c00082ea <ff_wtoupper>
c0003edc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ee0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ee3:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003ee7:	89 04 24             	mov    DWORD PTR [esp],eax
c0003eea:	e8 fb 43 00 00       	call   c00082ea <ff_wtoupper>
c0003eef:	83 c4 10             	add    esp,0x10
c0003ef2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003ef6:	75 87                	jne    c0003e7f <dir_find+0x30>
c0003ef8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003efc:	45                   	inc    ebp
c0003efd:	83 c2 02             	add    edx,0x2
c0003f00:	eb ac                	jmp    c0003eae <dir_find+0x5f>
c0003f02:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f09:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f0e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f13:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f16:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f19:	89 f0                	mov    eax,esi
c0003f1b:	e8 4c e2 ff ff       	call   c000216c <move_window>
c0003f20:	85 c0                	test   eax,eax
c0003f22:	0f 85 c6 00 00 00    	jne    c0003fee <dir_find+0x19f>
c0003f28:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f2b:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f2e:	84 c9                	test   cl,cl
c0003f30:	0f 84 bd 00 00 00    	je     c0003ff3 <dir_find+0x1a4>
c0003f36:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f39:	88 d0                	mov    al,dl
c0003f3b:	83 e0 3f             	and    eax,0x3f
c0003f3e:	80 f9 e5             	cmp    cl,0xe5
c0003f41:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f44:	0f 84 87 00 00 00    	je     c0003fd1 <dir_find+0x182>
c0003f4a:	80 e2 08             	and    dl,0x8
c0003f4d:	74 06                	je     c0003f55 <dir_find+0x106>
c0003f4f:	3c 0f                	cmp    al,0xf
c0003f51:	75 7e                	jne    c0003fd1 <dir_find+0x182>
c0003f53:	eb 04                	jmp    c0003f59 <dir_find+0x10a>
c0003f55:	3c 0f                	cmp    al,0xf
c0003f57:	75 4c                	jne    c0003fa5 <dir_find+0x156>
c0003f59:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f5d:	75 7e                	jne    c0003fdd <dir_find+0x18e>
c0003f5f:	f6 c1 40             	test   cl,0x40
c0003f62:	74 12                	je     c0003f76 <dir_find+0x127>
c0003f64:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f67:	83 e1 bf             	and    ecx,0xffffffbf
c0003f6a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f6e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f71:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f74:	eb 06                	jmp    c0003f7c <dir_find+0x12d>
c0003f76:	89 f8                	mov    eax,edi
c0003f78:	38 c8                	cmp    al,cl
c0003f7a:	75 5c                	jne    c0003fd8 <dir_find+0x189>
c0003f7c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f80:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f85:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f88:	75 53                	jne    c0003fdd <dir_find+0x18e>
c0003f8a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0003f8e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f91:	89 ea                	mov    edx,ebp
c0003f93:	e8 f4 fd ff ff       	call   c0003d8c <cmp_lfn>
c0003f98:	85 c0                	test   eax,eax
c0003f9a:	74 41                	je     c0003fdd <dir_find+0x18e>
c0003f9c:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0003fa0:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003fa3:	eb 38                	jmp    c0003fdd <dir_find+0x18e>
c0003fa5:	89 f8                	mov    eax,edi
c0003fa7:	84 c0                	test   al,al
c0003fa9:	75 0d                	jne    c0003fb8 <dir_find+0x169>
c0003fab:	89 e8                	mov    eax,ebp
c0003fad:	e8 98 de ff ff       	call   c0001e4a <sum_sfn>
c0003fb2:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003fb6:	74 52                	je     c000400a <dir_find+0x1bb>
c0003fb8:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003fbc:	75 13                	jne    c0003fd1 <dir_find+0x182>
c0003fbe:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fc1:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fc6:	89 e8                	mov    eax,ebp
c0003fc8:	e8 60 da ff ff       	call   c0001a2d <mem_cmp>
c0003fcd:	85 c0                	test   eax,eax
c0003fcf:	74 39                	je     c000400a <dir_find+0x1bb>
c0003fd1:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fd8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fdd:	31 d2                	xor    edx,edx
c0003fdf:	89 d8                	mov    eax,ebx
c0003fe1:	e8 5c f4 ff ff       	call   c0003442 <dir_next>
c0003fe6:	85 c0                	test   eax,eax
c0003fe8:	0f 84 25 ff ff ff    	je     c0003f13 <dir_find+0xc4>
c0003fee:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ff1:	eb 17                	jmp    c000400a <dir_find+0x1bb>
c0003ff3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0003ffa:	eb 0e                	jmp    c000400a <dir_find+0x1bb>
c0003ffc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fff:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004004:	0f 85 75 fe ff ff    	jne    c0003e7f <dir_find+0x30>
c000400a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000400d:	83 c4 1c             	add    esp,0x1c
c0004010:	5b                   	pop    ebx
c0004011:	5e                   	pop    esi
c0004012:	5f                   	pop    edi
c0004013:	5d                   	pop    ebp
c0004014:	c3                   	ret    

c0004015 <dir_register>:
c0004015:	55                   	push   ebp
c0004016:	57                   	push   edi
c0004017:	56                   	push   esi
c0004018:	be 06 00 00 00       	mov    esi,0x6
c000401d:	53                   	push   ebx
c000401e:	83 ec 6c             	sub    esp,0x6c
c0004021:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004025:	0f 85 62 02 00 00    	jne    c000428d <dir_register+0x278>
c000402b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000402d:	31 ff                	xor    edi,edi
c000402f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004032:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004037:	74 03                	je     c000403c <dir_register+0x27>
c0004039:	47                   	inc    edi
c000403a:	eb f6                	jmp    c0004032 <dir_register+0x1d>
c000403c:	89 c3                	mov    ebx,eax
c000403e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004042:	0f 85 e1 00 00 00    	jne    c0004129 <dir_register+0x114>
c0004048:	83 c7 0e             	add    edi,0xe
c000404b:	b9 0f 00 00 00       	mov    ecx,0xf
c0004050:	89 f8                	mov    eax,edi
c0004052:	31 d2                	xor    edx,edx
c0004054:	f7 f1                	div    ecx
c0004056:	8d 50 02             	lea    edx,[eax+0x2]
c0004059:	89 c7                	mov    edi,eax
c000405b:	89 d8                	mov    eax,ebx
c000405d:	e8 12 f8 ff ff       	call   c0003874 <dir_alloc>
c0004062:	89 c6                	mov    esi,eax
c0004064:	85 c0                	test   eax,eax
c0004066:	0f 85 21 02 00 00    	jne    c000428d <dir_register+0x278>
c000406c:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004072:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004075:	c1 e7 05             	shl    edi,0x5
c0004078:	29 f8                	sub    eax,edi
c000407a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000407d:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004080:	a8 04                	test   al,0x4
c0004082:	0f 84 91 00 00 00    	je     c0004119 <dir_register+0x104>
c0004088:	83 e0 fb             	and    eax,0xfffffffb
c000408b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000408e:	89 d8                	mov    eax,ebx
c0004090:	e8 25 ec ff ff       	call   c0002cba <fill_first_frag>
c0004095:	85 c0                	test   eax,eax
c0004097:	0f 85 ee 01 00 00    	jne    c000428b <dir_register+0x276>
c000409d:	83 c9 ff             	or     ecx,0xffffffff
c00040a0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00040a3:	89 d8                	mov    eax,ebx
c00040a5:	e8 db eb ff ff       	call   c0002c85 <fill_last_frag>
c00040aa:	85 c0                	test   eax,eax
c00040ac:	0f 85 d9 01 00 00    	jne    c000428b <dir_register+0x276>
c00040b2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00040b6:	74 61                	je     c0004119 <dir_register+0x104>
c00040b8:	89 da                	mov    edx,ebx
c00040ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040be:	e8 ea f5 ff ff       	call   c00036ad <load_obj_xdir>
c00040c3:	85 c0                	test   eax,eax
c00040c5:	0f 85 c0 01 00 00    	jne    c000428b <dir_register+0x276>
c00040cb:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040cf:	31 c9                	xor    ecx,ecx
c00040d1:	c1 e2 09             	shl    edx,0x9
c00040d4:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040d7:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040da:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040dd:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040e3:	83 c0 38             	add    eax,0x38
c00040e6:	e8 1c d9 ff ff       	call   c0001a07 <st_qword>
c00040eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040ee:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040f1:	83 c0 28             	add    eax,0x28
c00040f4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00040f7:	e8 0b d9 ff ff       	call   c0001a07 <st_qword>
c00040fc:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040ff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004102:	83 c8 01             	or     eax,0x1
c0004105:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004108:	8d 44 24 14          	lea    eax,[esp+0x14]
c000410c:	e8 db f7 ff ff       	call   c00038ec <store_xdir>
c0004111:	85 c0                	test   eax,eax
c0004113:	0f 85 72 01 00 00    	jne    c000428b <dir_register+0x276>
c0004119:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000411c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000411f:	e8 c1 fb ff ff       	call   c0003ce5 <create_xdir>
c0004124:	e9 64 01 00 00       	jmp    c000428d <dir_register+0x278>
c0004129:	8d 40 3c             	lea    eax,[eax+0x3c]
c000412c:	b9 0c 00 00 00       	mov    ecx,0xc
c0004131:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004135:	89 c2                	mov    edx,eax
c0004137:	8d 44 24 14          	lea    eax,[esp+0x14]
c000413b:	e8 cd d8 ff ff       	call   c0001a0d <mem_cpy>
c0004140:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004145:	74 58                	je     c000419f <dir_register+0x18a>
c0004147:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000414b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004153:	83 ec 0c             	sub    esp,0xc
c0004156:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004159:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000415d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004161:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004165:	e8 24 dc ff ff       	call   c0001d8e <gen_numname>
c000416a:	89 d8                	mov    eax,ebx
c000416c:	e8 de fc ff ff       	call   c0003e4f <dir_find>
c0004171:	83 c4 10             	add    esp,0x10
c0004174:	89 c6                	mov    esi,eax
c0004176:	85 c0                	test   eax,eax
c0004178:	75 15                	jne    c000418f <dir_register+0x17a>
c000417a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000417e:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004183:	75 ce                	jne    c0004153 <dir_register+0x13e>
c0004185:	be 07 00 00 00       	mov    esi,0x7
c000418a:	e9 fe 00 00 00       	jmp    c000428d <dir_register+0x278>
c000418f:	83 f8 04             	cmp    eax,0x4
c0004192:	0f 85 f5 00 00 00    	jne    c000428d <dir_register+0x278>
c0004198:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000419c:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000419f:	b9 01 00 00 00       	mov    ecx,0x1
c00041a4:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00041a9:	74 0f                	je     c00041ba <dir_register+0x1a5>
c00041ab:	b9 0d 00 00 00       	mov    ecx,0xd
c00041b0:	8d 47 0c             	lea    eax,[edi+0xc]
c00041b3:	31 d2                	xor    edx,edx
c00041b5:	f7 f1                	div    ecx
c00041b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00041ba:	89 ca                	mov    edx,ecx
c00041bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041c0:	89 d8                	mov    eax,ebx
c00041c2:	e8 ad f6 ff ff       	call   c0003874 <dir_alloc>
c00041c7:	89 c6                	mov    esi,eax
c00041c9:	85 c0                	test   eax,eax
c00041cb:	0f 85 bc 00 00 00    	jne    c000428d <dir_register+0x278>
c00041d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041d5:	49                   	dec    ecx
c00041d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041da:	74 6a                	je     c0004246 <dir_register+0x231>
c00041dc:	89 c8                	mov    eax,ecx
c00041de:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041e1:	c1 e0 05             	shl    eax,0x5
c00041e4:	29 c2                	sub    edx,eax
c00041e6:	89 d8                	mov    eax,ebx
c00041e8:	e8 fd ec ff ff       	call   c0002eea <dir_sdi>
c00041ed:	89 c6                	mov    esi,eax
c00041ef:	85 c0                	test   eax,eax
c00041f1:	0f 85 96 00 00 00    	jne    c000428d <dir_register+0x278>
c00041f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00041fb:	e8 4a dc ff ff       	call   c0001e4a <sum_sfn>
c0004200:	0f b6 f8             	movzx  edi,al
c0004203:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004206:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004209:	89 e8                	mov    eax,ebp
c000420b:	e8 5c df ff ff       	call   c000216c <move_window>
c0004210:	89 c6                	mov    esi,eax
c0004212:	85 c0                	test   eax,eax
c0004214:	75 77                	jne    c000428d <dir_register+0x278>
c0004216:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000421b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000421e:	83 ec 0c             	sub    esp,0xc
c0004221:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004224:	57                   	push   edi
c0004225:	e8 e0 da ff ff       	call   c0001d0a <put_lfn>
c000422a:	31 d2                	xor    edx,edx
c000422c:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004230:	89 d8                	mov    eax,ebx
c0004232:	e8 0b f2 ff ff       	call   c0003442 <dir_next>
c0004237:	83 c4 10             	add    esp,0x10
c000423a:	89 c6                	mov    esi,eax
c000423c:	85 c0                	test   eax,eax
c000423e:	75 4d                	jne    c000428d <dir_register+0x278>
c0004240:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004244:	75 bd                	jne    c0004203 <dir_register+0x1ee>
c0004246:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004249:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000424c:	89 e8                	mov    eax,ebp
c000424e:	e8 19 df ff ff       	call   c000216c <move_window>
c0004253:	89 c6                	mov    esi,eax
c0004255:	85 c0                	test   eax,eax
c0004257:	75 34                	jne    c000428d <dir_register+0x278>
c0004259:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000425c:	b9 20 00 00 00       	mov    ecx,0x20
c0004261:	31 d2                	xor    edx,edx
c0004263:	e8 ba d7 ff ff       	call   c0001a22 <mem_set>
c0004268:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000426b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000426f:	b9 0b 00 00 00       	mov    ecx,0xb
c0004274:	e8 94 d7 ff ff       	call   c0001a0d <mem_cpy>
c0004279:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000427c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000427f:	83 e0 18             	and    eax,0x18
c0004282:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004285:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004289:	eb 02                	jmp    c000428d <dir_register+0x278>
c000428b:	89 c6                	mov    esi,eax
c000428d:	83 c4 6c             	add    esp,0x6c
c0004290:	89 f0                	mov    eax,esi
c0004292:	5b                   	pop    ebx
c0004293:	5e                   	pop    esi
c0004294:	5f                   	pop    edi
c0004295:	5d                   	pop    ebp
c0004296:	c3                   	ret    

c0004297 <sync_fs>:
c0004297:	56                   	push   esi
c0004298:	53                   	push   ebx
c0004299:	53                   	push   ebx
c000429a:	89 c3                	mov    ebx,eax
c000429c:	e8 37 de ff ff       	call   c00020d8 <sync_window>
c00042a1:	85 c0                	test   eax,eax
c00042a3:	0f 85 b1 00 00 00    	jne    c000435a <sync_fs+0xc3>
c00042a9:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00042ac:	0f 85 8e 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042b2:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00042b6:	0f 85 84 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042bc:	b9 00 02 00 00       	mov    ecx,0x200
c00042c1:	8d 73 54             	lea    esi,[ebx+0x54]
c00042c4:	31 d2                	xor    edx,edx
c00042c6:	89 f0                	mov    eax,esi
c00042c8:	e8 55 d7 ff ff       	call   c0001a22 <mem_set>
c00042cd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042d3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042d8:	e8 23 d7 ff ff       	call   c0001a00 <st_word>
c00042dd:	ba 52 52 61 41       	mov    edx,0x41615252
c00042e2:	89 f0                	mov    eax,esi
c00042e4:	e8 1b d7 ff ff       	call   c0001a04 <st_dword>
c00042e9:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042ef:	ba 72 72 41 61       	mov    edx,0x61417272
c00042f4:	e8 0b d7 ff ff       	call   c0001a04 <st_dword>
c00042f9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042fc:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004302:	e8 fd d6 ff ff       	call   c0001a04 <st_dword>
c0004307:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000430a:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004310:	e8 ef d6 ff ff       	call   c0001a04 <st_dword>
c0004315:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004318:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000431b:	83 c0 01             	add    eax,0x1
c000431e:	83 d2 00             	adc    edx,0x0
c0004321:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004324:	83 ec 0c             	sub    esp,0xc
c0004327:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000432a:	6a 01                	push   0x1
c000432c:	52                   	push   edx
c000432d:	50                   	push   eax
c000432e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004332:	56                   	push   esi
c0004333:	50                   	push   eax
c0004334:	e8 20 d6 ff ff       	call   c0001959 <disk_write>
c0004339:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000433d:	83 c4 20             	add    esp,0x20
c0004340:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004344:	51                   	push   ecx
c0004345:	6a 00                	push   0x0
c0004347:	6a 00                	push   0x0
c0004349:	50                   	push   eax
c000434a:	e8 20 d6 ff ff       	call   c000196f <disk_ioctl>
c000434f:	83 c4 10             	add    esp,0x10
c0004352:	85 c0                	test   eax,eax
c0004354:	0f 95 c0             	setne  al
c0004357:	0f b6 c0             	movzx  eax,al
c000435a:	5a                   	pop    edx
c000435b:	5b                   	pop    ebx
c000435c:	5e                   	pop    esi
c000435d:	c3                   	ret    

c000435e <create_partition>:
c000435e:	55                   	push   ebp
c000435f:	0f b6 c0             	movzx  eax,al
c0004362:	57                   	push   edi
c0004363:	56                   	push   esi
c0004364:	53                   	push   ebx
c0004365:	83 ec 60             	sub    esp,0x60
c0004368:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000436c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004370:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004374:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004378:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000437c:	50                   	push   eax
c000437d:	6a 01                	push   0x1
c000437f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004383:	e8 e7 d5 ff ff       	call   c000196f <disk_ioctl>
c0004388:	83 c4 10             	add    esp,0x10
c000438b:	85 c0                	test   eax,eax
c000438d:	74 0a                	je     c0004399 <create_partition+0x3b>
c000438f:	b8 01 00 00 00       	mov    eax,0x1
c0004394:	e9 67 05 00 00       	jmp    c0004900 <create_partition+0x5a2>
c0004399:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000439d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00043a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00043a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00043a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00043ae:	0f 86 ed 03 00 00    	jbe    c00047a1 <create_partition+0x443>
c00043b4:	83 c0 df             	add    eax,0xffffffdf
c00043b7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043bf:	83 d2 ff             	adc    edx,0xffffffff
c00043c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043d2:	83 c0 bd             	add    eax,0xffffffbd
c00043d5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043dc:	83 d2 ff             	adc    edx,0xffffffff
c00043df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043e3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043ef:	be 22 00 00 00       	mov    esi,0x22
c00043f4:	31 ff                	xor    edi,edi
c00043f6:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00043fe:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004406:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000440e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004412:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004418:	75 0e                	jne    c0004428 <create_partition+0xca>
c000441a:	b9 00 02 00 00       	mov    ecx,0x200
c000441f:	31 d2                	xor    edx,edx
c0004421:	89 d8                	mov    eax,ebx
c0004423:	e8 fa d5 ff ff       	call   c0001a22 <mem_set>
c0004428:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000442c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004434:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004437:	0f 84 23 01 00 00    	je     c0004560 <create_partition+0x202>
c000443d:	89 f0                	mov    eax,esi
c000443f:	89 fa                	mov    edx,edi
c0004441:	05 ff 07 00 00       	add    eax,0x7ff
c0004446:	83 d2 00             	adc    edx,0x0
c0004449:	89 c1                	mov    ecx,eax
c000444b:	89 d7                	mov    edi,edx
c000444d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004453:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004457:	89 ce                	mov    esi,ecx
c0004459:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000445d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004461:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004465:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004468:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000446c:	89 04 24             	mov    DWORD PTR [esp],eax
c000446f:	b8 64 00 00 00       	mov    eax,0x64
c0004474:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004477:	b8 00 00 00 00       	mov    eax,0x0
c000447c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004480:	72 41                	jb     c00044c3 <create_partition+0x165>
c0004482:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000448a:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000448e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004493:	01 c1                	add    ecx,eax
c0004495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004499:	f7 24 24             	mul    DWORD PTR [esp]
c000449c:	6a 00                	push   0x0
c000449e:	01 ca                	add    edx,ecx
c00044a0:	6a 64                	push   0x64
c00044a2:	52                   	push   edx
c00044a3:	50                   	push   eax
c00044a4:	e8 23 9c 01 00       	call   c001e0cc <__udivdi3>
c00044a9:	83 c4 10             	add    esp,0x10
c00044ac:	05 ff 07 00 00       	add    eax,0x7ff
c00044b1:	83 d2 00             	adc    edx,0x0
c00044b4:	89 c1                	mov    ecx,eax
c00044b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ba:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044ca:	01 f0                	add    eax,esi
c00044cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044d0:	11 fa                	adc    edx,edi
c00044d2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044d6:	19 d1                	sbb    ecx,edx
c00044d8:	73 2e                	jae    c0004508 <create_partition+0x1aa>
c00044da:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044de:	89 f8                	mov    eax,edi
c00044e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044e7:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044f3:	73 6b                	jae    c0004560 <create_partition+0x202>
c00044f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00044f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044fd:	29 f0                	sub    eax,esi
c00044ff:	19 fa                	sbb    edx,edi
c0004501:	89 04 24             	mov    DWORD PTR [esp],eax
c0004504:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450c:	0b 04 24             	or     eax,DWORD PTR [esp]
c000450f:	74 4f                	je     c0004560 <create_partition+0x202>
c0004511:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004514:	b9 10 00 00 00       	mov    ecx,0x10
c0004519:	ba 50 f1 01 c0       	mov    edx,0xc001f150
c000451e:	e8 ea d4 ff ff       	call   c0001a0d <mem_cpy>
c0004523:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004527:	b9 10 00 00 00       	mov    ecx,0x10
c000452c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004530:	e8 2c db ff ff       	call   c0002061 <make_rand>
c0004535:	89 f2                	mov    edx,esi
c0004537:	89 f9                	mov    ecx,edi
c0004539:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000453d:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004541:	e8 c1 d4 ff ff       	call   c0001a07 <st_qword>
c0004546:	03 34 24             	add    esi,DWORD PTR [esp]
c0004549:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000454d:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004551:	89 f2                	mov    edx,esi
c0004553:	89 f9                	mov    ecx,edi
c0004555:	83 c2 ff             	add    edx,0xffffffff
c0004558:	83 d1 ff             	adc    ecx,0xffffffff
c000455b:	e8 a7 d4 ff ff       	call   c0001a07 <st_qword>
c0004560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004564:	83 e8 80             	sub    eax,0xffffff80
c0004567:	89 c5                	mov    ebp,eax
c0004569:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000456d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004573:	75 6b                	jne    c00045e0 <create_partition+0x282>
c0004575:	45                   	inc    ebp
c0004576:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000457a:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000457f:	e8 39 da ff ff       	call   c0001fbd <crc32>
c0004584:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000458a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000458e:	75 e5                	jne    c0004575 <create_partition+0x217>
c0004590:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004594:	31 d2                	xor    edx,edx
c0004596:	83 ec 0c             	sub    esp,0xc
c0004599:	c1 ed 09             	shr    ebp,0x9
c000459c:	6a 01                	push   0x1
c000459e:	8d 45 02             	lea    eax,[ebp+0x2]
c00045a1:	52                   	push   edx
c00045a2:	50                   	push   eax
c00045a3:	53                   	push   ebx
c00045a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045a8:	e8 ac d3 ff ff       	call   c0001959 <disk_write>
c00045ad:	83 c4 20             	add    esp,0x20
c00045b0:	85 c0                	test   eax,eax
c00045b2:	0f 85 d7 fd ff ff    	jne    c000438f <create_partition+0x31>
c00045b8:	83 ec 0c             	sub    esp,0xc
c00045bb:	31 d2                	xor    edx,edx
c00045bd:	6a 01                	push   0x1
c00045bf:	89 e8                	mov    eax,ebp
c00045c1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045c5:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045c9:	52                   	push   edx
c00045ca:	50                   	push   eax
c00045cb:	53                   	push   ebx
c00045cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045d0:	e8 84 d3 ff ff       	call   c0001959 <disk_write>
c00045d5:	83 c4 20             	add    esp,0x20
c00045d8:	85 c0                	test   eax,eax
c00045da:	0f 85 af fd ff ff    	jne    c000438f <create_partition+0x31>
c00045e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045e8:	3d 00 40 00 00       	cmp    eax,0x4000
c00045ed:	74 0d                	je     c00045fc <create_partition+0x29e>
c00045ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00045f3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f7:	e9 12 fe ff ff       	jmp    c000440e <create_partition+0xb0>
c00045fc:	31 d2                	xor    edx,edx
c00045fe:	b9 00 02 00 00       	mov    ecx,0x200
c0004603:	89 d8                	mov    eax,ebx
c0004605:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004608:	e8 15 d4 ff ff       	call   c0001a22 <mem_set>
c000460d:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004610:	b9 10 00 00 00       	mov    ecx,0x10
c0004615:	ba 40 f0 01 c0       	mov    edx,0xc001f040
c000461a:	89 d8                	mov    eax,ebx
c000461c:	e8 ec d3 ff ff       	call   c0001a0d <mem_cpy>
c0004621:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004625:	8d 43 58             	lea    eax,[ebx+0x58]
c0004628:	f7 d2                	not    edx
c000462a:	e8 d5 d3 ff ff       	call   c0001a04 <st_dword>
c000462f:	8d 43 18             	lea    eax,[ebx+0x18]
c0004632:	31 c9                	xor    ecx,ecx
c0004634:	89 04 24             	mov    DWORD PTR [esp],eax
c0004637:	ba 01 00 00 00       	mov    edx,0x1
c000463c:	e8 c6 d3 ff ff       	call   c0001a07 <st_qword>
c0004641:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004645:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004649:	83 c2 ff             	add    edx,0xffffffff
c000464c:	89 e8                	mov    eax,ebp
c000464e:	83 d1 ff             	adc    ecx,0xffffffff
c0004651:	e8 b1 d3 ff ff       	call   c0001a07 <st_qword>
c0004656:	31 c9                	xor    ecx,ecx
c0004658:	8d 43 28             	lea    eax,[ebx+0x28]
c000465b:	ba 22 00 00 00       	mov    edx,0x22
c0004660:	e8 a2 d3 ff ff       	call   c0001a07 <st_qword>
c0004665:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004669:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000466d:	83 c2 de             	add    edx,0xffffffde
c0004670:	8d 43 30             	lea    eax,[ebx+0x30]
c0004673:	83 d1 ff             	adc    ecx,0xffffffff
c0004676:	31 f6                	xor    esi,esi
c0004678:	e8 8a d3 ff ff       	call   c0001a07 <st_qword>
c000467d:	8d 43 54             	lea    eax,[ebx+0x54]
c0004680:	ba 80 00 00 00       	mov    edx,0x80
c0004685:	e8 7a d3 ff ff       	call   c0001a04 <st_dword>
c000468a:	8d 43 50             	lea    eax,[ebx+0x50]
c000468d:	ba 80 00 00 00       	mov    edx,0x80
c0004692:	e8 6d d3 ff ff       	call   c0001a04 <st_dword>
c0004697:	ba 02 00 00 00       	mov    edx,0x2
c000469c:	89 f8                	mov    eax,edi
c000469e:	e8 61 d3 ff ff       	call   c0001a04 <st_dword>
c00046a3:	8d 53 38             	lea    edx,[ebx+0x38]
c00046a6:	b9 10 00 00 00       	mov    ecx,0x10
c00046ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046af:	e8 ad d9 ff ff       	call   c0002061 <make_rand>
c00046b4:	83 c8 ff             	or     eax,0xffffffff
c00046b7:	46                   	inc    esi
c00046b8:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00046bd:	e8 fb d8 ff ff       	call   c0001fbd <crc32>
c00046c2:	83 fe 5c             	cmp    esi,0x5c
c00046c5:	75 f0                	jne    c00046b7 <create_partition+0x359>
c00046c7:	f7 d0                	not    eax
c00046c9:	8d 73 10             	lea    esi,[ebx+0x10]
c00046cc:	89 c2                	mov    edx,eax
c00046ce:	89 f0                	mov    eax,esi
c00046d0:	e8 2f d3 ff ff       	call   c0001a04 <st_dword>
c00046d5:	83 ec 0c             	sub    esp,0xc
c00046d8:	6a 01                	push   0x1
c00046da:	6a 00                	push   0x0
c00046dc:	6a 01                	push   0x1
c00046de:	53                   	push   ebx
c00046df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046e3:	e8 71 d2 ff ff       	call   c0001959 <disk_write>
c00046e8:	83 c4 20             	add    esp,0x20
c00046eb:	85 c0                	test   eax,eax
c00046ed:	0f 85 9c fc ff ff    	jne    c000438f <create_partition+0x31>
c00046f3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046f7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046fb:	83 c2 ff             	add    edx,0xffffffff
c00046fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004701:	83 d1 ff             	adc    ecx,0xffffffff
c0004704:	e8 fe d2 ff ff       	call   c0001a07 <st_qword>
c0004709:	ba 01 00 00 00       	mov    edx,0x1
c000470e:	31 c9                	xor    ecx,ecx
c0004710:	89 e8                	mov    eax,ebp
c0004712:	e8 f0 d2 ff ff       	call   c0001a07 <st_qword>
c0004717:	89 f8                	mov    eax,edi
c0004719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000471d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004721:	31 ff                	xor    edi,edi
c0004723:	e8 df d2 ff ff       	call   c0001a07 <st_qword>
c0004728:	89 f0                	mov    eax,esi
c000472a:	31 d2                	xor    edx,edx
c000472c:	e8 d3 d2 ff ff       	call   c0001a04 <st_dword>
c0004731:	83 c8 ff             	or     eax,0xffffffff
c0004734:	47                   	inc    edi
c0004735:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000473a:	e8 7e d8 ff ff       	call   c0001fbd <crc32>
c000473f:	83 ff 5c             	cmp    edi,0x5c
c0004742:	75 f0                	jne    c0004734 <create_partition+0x3d6>
c0004744:	f7 d0                	not    eax
c0004746:	89 c2                	mov    edx,eax
c0004748:	89 f0                	mov    eax,esi
c000474a:	e8 b5 d2 ff ff       	call   c0001a04 <st_dword>
c000474f:	83 ec 0c             	sub    esp,0xc
c0004752:	6a 01                	push   0x1
c0004754:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004758:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000475c:	83 c0 ff             	add    eax,0xffffffff
c000475f:	83 d2 ff             	adc    edx,0xffffffff
c0004762:	52                   	push   edx
c0004763:	50                   	push   eax
c0004764:	53                   	push   ebx
c0004765:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004769:	e8 eb d1 ff ff       	call   c0001959 <disk_write>
c000476e:	83 c4 20             	add    esp,0x20
c0004771:	85 c0                	test   eax,eax
c0004773:	0f 85 16 fc ff ff    	jne    c000438f <create_partition+0x31>
c0004779:	31 d2                	xor    edx,edx
c000477b:	89 d8                	mov    eax,ebx
c000477d:	b9 00 02 00 00       	mov    ecx,0x200
c0004782:	e8 9b d2 ff ff       	call   c0001a22 <mem_set>
c0004787:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000478d:	b9 10 00 00 00       	mov    ecx,0x10
c0004792:	ba 50 f0 01 c0       	mov    edx,0xc001f050
c0004797:	e8 71 d2 ff ff       	call   c0001a0d <mem_cpy>
c000479c:	e9 21 01 00 00       	jmp    c00048c2 <create_partition+0x564>
c00047a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00047a5:	b9 05 00 00 00       	mov    ecx,0x5
c00047aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00047ad:	bf 08 00 00 00       	mov    edi,0x8
c00047b2:	89 f8                	mov    eax,edi
c00047b4:	31 d2                	xor    edx,edx
c00047b6:	0f b6 f0             	movzx  esi,al
c00047b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bc:	f7 f6                	div    esi
c00047be:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047c3:	76 0a                	jbe    c00047cf <create_partition+0x471>
c00047c5:	d1 e7                	shl    edi,1
c00047c7:	49                   	dec    ecx
c00047c8:	75 e8                	jne    c00047b2 <create_partition+0x454>
c00047ca:	bf ff ff ff ff       	mov    edi,0xffffffff
c00047cf:	b9 00 02 00 00       	mov    ecx,0x200
c00047d4:	31 d2                	xor    edx,edx
c00047d6:	89 d8                	mov    eax,ebx
c00047d8:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00047de:	e8 3f d2 ff ff       	call   c0001a22 <mem_set>
c00047e3:	b9 64 00 00 00       	mov    ecx,0x64
c00047e8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047eb:	31 d2                	xor    edx,edx
c00047ed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00047f5:	f7 f1                	div    ecx
c00047f7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00047fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004800:	89 f8                	mov    eax,edi
c0004802:	0f b6 c0             	movzx  eax,al
c0004805:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004809:	e9 80 00 00 00       	jmp    c000488e <create_partition+0x530>
c000480e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004811:	29 cf                	sub    edi,ecx
c0004813:	89 ca                	mov    edx,ecx
c0004815:	89 f0                	mov    eax,esi
c0004817:	bd 3f 00 00 00       	mov    ebp,0x3f
c000481c:	e8 e3 d1 ff ff       	call   c0001a04 <st_dword>
c0004821:	8d 46 04             	lea    eax,[esi+0x4]
c0004824:	89 fa                	mov    edx,edi
c0004826:	83 c6 10             	add    esi,0x10
c0004829:	e8 d6 d1 ff ff       	call   c0001a04 <st_dword>
c000482e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004832:	31 d2                	xor    edx,edx
c0004834:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004837:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000483b:	89 c8                	mov    eax,ecx
c000483d:	01 f9                	add    ecx,edi
c000483f:	f7 f5                	div    ebp
c0004841:	89 d5                	mov    ebp,edx
c0004843:	31 d2                	xor    edx,edx
c0004845:	45                   	inc    ebp
c0004846:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000484a:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000484d:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004850:	89 c2                	mov    edx,eax
c0004852:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004855:	c1 ea 02             	shr    edx,0x2
c0004858:	83 e2 c0             	and    edx,0xffffffc0
c000485b:	09 ea                	or     edx,ebp
c000485d:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004862:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004865:	31 d2                	xor    edx,edx
c0004867:	f7 f5                	div    ebp
c0004869:	89 d7                	mov    edi,edx
c000486b:	31 d2                	xor    edx,edx
c000486d:	47                   	inc    edi
c000486e:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004872:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004875:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004878:	89 c5                	mov    ebp,eax
c000487a:	c1 ed 02             	shr    ebp,0x2
c000487d:	83 e5 c0             	and    ebp,0xffffffc0
c0004880:	09 ef                	or     edi,ebp
c0004882:	89 fa                	mov    edx,edi
c0004884:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004887:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000488c:	74 34                	je     c00048c2 <create_partition+0x564>
c000488e:	85 c9                	test   ecx,ecx
c0004890:	74 30                	je     c00048c2 <create_partition+0x564>
c0004892:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004895:	76 2b                	jbe    c00048c2 <create_partition+0x564>
c0004897:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000489b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000489f:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c00048a2:	83 ff 64             	cmp    edi,0x64
c00048a5:	76 4b                	jbe    c00048f2 <create_partition+0x594>
c00048a7:	89 f8                	mov    eax,edi
c00048a9:	01 c8                	add    eax,ecx
c00048ab:	0f 82 5d ff ff ff    	jb     c000480e <create_partition+0x4b0>
c00048b1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048b4:	0f 87 54 ff ff ff    	ja     c000480e <create_partition+0x4b0>
c00048ba:	85 ff                	test   edi,edi
c00048bc:	0f 85 51 ff ff ff    	jne    c0004813 <create_partition+0x4b5>
c00048c2:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048c8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048cd:	e8 2e d1 ff ff       	call   c0001a00 <st_word>
c00048d2:	83 ec 0c             	sub    esp,0xc
c00048d5:	6a 01                	push   0x1
c00048d7:	6a 00                	push   0x0
c00048d9:	6a 00                	push   0x0
c00048db:	53                   	push   ebx
c00048dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048e0:	e8 74 d0 ff ff       	call   c0001959 <disk_write>
c00048e5:	83 c4 20             	add    esp,0x20
c00048e8:	85 c0                	test   eax,eax
c00048ea:	0f 95 c0             	setne  al
c00048ed:	0f b6 c0             	movzx  eax,al
c00048f0:	eb 0e                	jmp    c0004900 <create_partition+0x5a2>
c00048f2:	74 07                	je     c00048fb <create_partition+0x59d>
c00048f4:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00048f9:	eb ac                	jmp    c00048a7 <create_partition+0x549>
c00048fb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048fe:	eb a7                	jmp    c00048a7 <create_partition+0x549>
c0004900:	83 c4 5c             	add    esp,0x5c
c0004903:	5b                   	pop    ebx
c0004904:	5e                   	pop    esi
c0004905:	5f                   	pop    edi
c0004906:	5d                   	pop    ebp
c0004907:	c3                   	ret    

c0004908 <get_fileinfo>:
c0004908:	55                   	push   ebp
c0004909:	57                   	push   edi
c000490a:	56                   	push   esi
c000490b:	53                   	push   ebx
c000490c:	83 ec 1c             	sub    esp,0x1c
c000490f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004911:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004915:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004919:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000491c:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c000491f:	0f 84 dc 01 00 00    	je     c0004b01 <get_fileinfo+0x1f9>
c0004925:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004928:	75 0f                	jne    c0004939 <get_fileinfo+0x31>
c000492a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000492d:	83 c4 1c             	add    esp,0x1c
c0004930:	5b                   	pop    ebx
c0004931:	5e                   	pop    esi
c0004932:	5f                   	pop    edi
c0004933:	5d                   	pop    ebp
c0004934:	e9 58 d5 ff ff       	jmp    c0001e91 <get_xfileinfo>
c0004939:	89 d3                	mov    ebx,edx
c000493b:	89 c6                	mov    esi,eax
c000493d:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004941:	74 6a                	je     c00049ad <get_fileinfo+0xa5>
c0004943:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000494b:	31 ed                	xor    ebp,ebp
c000494d:	31 ff                	xor    edi,edi
c000494f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004953:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004957:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000495a:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000495e:	66 85 d2             	test   dx,dx
c0004961:	74 3e                	je     c00049a1 <get_fileinfo+0x99>
c0004963:	66 85 ed             	test   bp,bp
c0004966:	75 0c                	jne    c0004974 <get_fileinfo+0x6c>
c0004968:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000496e:	66 3d ff 07          	cmp    ax,0x7ff
c0004972:	76 22                	jbe    c0004996 <get_fileinfo+0x8e>
c0004974:	b9 ff 00 00 00       	mov    ecx,0xff
c0004979:	89 e8                	mov    eax,ebp
c000497b:	29 f9                	sub    ecx,edi
c000497d:	c1 e0 10             	shl    eax,0x10
c0004980:	09 d0                	or     eax,edx
c0004982:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004986:	e8 a3 d1 ff ff       	call   c0001b2e <put_utf>
c000498b:	84 c0                	test   al,al
c000498d:	74 10                	je     c000499f <get_fileinfo+0x97>
c000498f:	0f b6 c0             	movzx  eax,al
c0004992:	31 d2                	xor    edx,edx
c0004994:	01 c7                	add    edi,eax
c0004996:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c000499b:	89 d5                	mov    ebp,edx
c000499d:	eb b0                	jmp    c000494f <get_fileinfo+0x47>
c000499f:	31 ff                	xor    edi,edi
c00049a1:	66 85 ed             	test   bp,bp
c00049a4:	74 02                	je     c00049a8 <get_fileinfo+0xa0>
c00049a6:	31 ff                	xor    edi,edi
c00049a8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00049ad:	31 ff                	xor    edi,edi
c00049af:	31 c9                	xor    ecx,ecx
c00049b1:	83 f9 0a             	cmp    ecx,0xa
c00049b4:	0f 87 ad 00 00 00    	ja     c0004a67 <get_fileinfo+0x15f>
c00049ba:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049bd:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049c0:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049c4:	66 83 fa 20          	cmp    dx,0x20
c00049c8:	0f 84 92 00 00 00    	je     c0004a60 <get_fileinfo+0x158>
c00049ce:	66 83 fa 05          	cmp    dx,0x5
c00049d2:	75 05                	jne    c00049d9 <get_fileinfo+0xd1>
c00049d4:	ba e5 00 00 00       	mov    edx,0xe5
c00049d9:	83 ff 0b             	cmp    edi,0xb
c00049dc:	77 0b                	ja     c00049e9 <get_fileinfo+0xe1>
c00049de:	83 fd 09             	cmp    ebp,0x9
c00049e1:	75 06                	jne    c00049e9 <get_fileinfo+0xe1>
c00049e3:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049e8:	47                   	inc    edi
c00049e9:	0f b7 c2             	movzx  eax,dx
c00049ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049f0:	e8 6d d0 ff ff       	call   c0001a62 <dbc_1st>
c00049f5:	85 c0                	test   eax,eax
c00049f7:	74 2f                	je     c0004a28 <get_fileinfo+0x120>
c00049f9:	83 fd 08             	cmp    ebp,0x8
c00049fc:	74 2a                	je     c0004a28 <get_fileinfo+0x120>
c00049fe:	83 fd 0b             	cmp    ebp,0xb
c0004a01:	74 25                	je     c0004a28 <get_fileinfo+0x120>
c0004a03:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a06:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a0a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a0e:	e8 52 d0 ff ff       	call   c0001a65 <dbc_2nd>
c0004a13:	85 c0                	test   eax,eax
c0004a15:	74 11                	je     c0004a28 <get_fileinfo+0x120>
c0004a17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a1b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a20:	c1 e2 08             	shl    edx,0x8
c0004a23:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a26:	09 c2                	or     edx,eax
c0004a28:	0f b7 d2             	movzx  edx,dx
c0004a2b:	50                   	push   eax
c0004a2c:	50                   	push   eax
c0004a2d:	68 b5 01 00 00       	push   0x1b5
c0004a32:	52                   	push   edx
c0004a33:	e8 46 38 00 00       	call   c000827e <ff_oem2uni>
c0004a38:	83 c4 10             	add    esp,0x10
c0004a3b:	66 85 c0             	test   ax,ax
c0004a3e:	75 04                	jne    c0004a44 <get_fileinfo+0x13c>
c0004a40:	31 ff                	xor    edi,edi
c0004a42:	eb 23                	jmp    c0004a67 <get_fileinfo+0x15f>
c0004a44:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a49:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a4d:	29 f9                	sub    ecx,edi
c0004a4f:	0f b7 c0             	movzx  eax,ax
c0004a52:	e8 d7 d0 ff ff       	call   c0001b2e <put_utf>
c0004a57:	84 c0                	test   al,al
c0004a59:	74 e5                	je     c0004a40 <get_fileinfo+0x138>
c0004a5b:	0f b6 c0             	movzx  eax,al
c0004a5e:	01 c7                	add    edi,eax
c0004a60:	89 e9                	mov    ecx,ebp
c0004a62:	e9 4a ff ff ff       	jmp    c00049b1 <get_fileinfo+0xa9>
c0004a67:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a6c:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a70:	75 54                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004a72:	85 ff                	test   edi,edi
c0004a74:	75 0b                	jne    c0004a81 <get_fileinfo+0x179>
c0004a76:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a7a:	ba 01 00 00 00       	mov    edx,0x1
c0004a7f:	eb 33                	jmp    c0004ab4 <get_fileinfo+0x1ac>
c0004a81:	b1 08                	mov    cl,0x8
c0004a83:	31 d2                	xor    edx,edx
c0004a85:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a8b:	84 c0                	test   al,al
c0004a8d:	74 25                	je     c0004ab4 <get_fileinfo+0x1ac>
c0004a8f:	66 83 f8 2e          	cmp    ax,0x2e
c0004a93:	74 16                	je     c0004aab <get_fileinfo+0x1a3>
c0004a95:	8d 78 bf             	lea    edi,[eax-0x41]
c0004a98:	66 83 ff 19          	cmp    di,0x19
c0004a9c:	77 0f                	ja     c0004aad <get_fileinfo+0x1a5>
c0004a9e:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004aa1:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004aa4:	74 07                	je     c0004aad <get_fileinfo+0x1a5>
c0004aa6:	83 c0 20             	add    eax,0x20
c0004aa9:	eb 02                	jmp    c0004aad <get_fileinfo+0x1a5>
c0004aab:	b1 10                	mov    cl,0x10
c0004aad:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004ab1:	42                   	inc    edx
c0004ab2:	eb d1                	jmp    c0004a85 <get_fileinfo+0x17d>
c0004ab4:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004ab9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004abc:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ac0:	75 04                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004ac2:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ac6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac9:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004acc:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004acf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad2:	83 c0 1c             	add    eax,0x1c
c0004ad5:	e8 c1 ce ff ff       	call   c000199b <ld_dword>
c0004ada:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ae1:	89 03                	mov    DWORD PTR [ebx],eax
c0004ae3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae6:	83 c0 16             	add    eax,0x16
c0004ae9:	e8 a0 ce ff ff       	call   c000198e <ld_word>
c0004aee:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004af2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004af5:	83 c0 18             	add    eax,0x18
c0004af8:	e8 91 ce ff ff       	call   c000198e <ld_word>
c0004afd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b01:	83 c4 1c             	add    esp,0x1c
c0004b04:	5b                   	pop    ebx
c0004b05:	5e                   	pop    esi
c0004b06:	5f                   	pop    edi
c0004b07:	5d                   	pop    ebp
c0004b08:	c3                   	ret    

c0004b09 <ld_clust.isra.0>:
c0004b09:	56                   	push   esi
c0004b0a:	89 c6                	mov    esi,eax
c0004b0c:	53                   	push   ebx
c0004b0d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b10:	89 d3                	mov    ebx,edx
c0004b12:	e8 77 ce ff ff       	call   c000198e <ld_word>
c0004b17:	0f b7 c8             	movzx  ecx,ax
c0004b1a:	89 f0                	mov    eax,esi
c0004b1c:	3c 03                	cmp    al,0x3
c0004b1e:	75 0d                	jne    c0004b2d <ld_clust.isra.0+0x24>
c0004b20:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b23:	e8 66 ce ff ff       	call   c000198e <ld_word>
c0004b28:	c1 e0 10             	shl    eax,0x10
c0004b2b:	09 c1                	or     ecx,eax
c0004b2d:	89 c8                	mov    eax,ecx
c0004b2f:	5b                   	pop    ebx
c0004b30:	5e                   	pop    esi
c0004b31:	c3                   	ret    

c0004b32 <st_clust.isra.1>:
c0004b32:	56                   	push   esi
c0004b33:	89 c6                	mov    esi,eax
c0004b35:	53                   	push   ebx
c0004b36:	89 d3                	mov    ebx,edx
c0004b38:	0f b7 d1             	movzx  edx,cx
c0004b3b:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b3e:	e8 bd ce ff ff       	call   c0001a00 <st_word>
c0004b43:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b46:	75 0f                	jne    c0004b57 <st_clust.isra.1+0x25>
c0004b48:	c1 e9 10             	shr    ecx,0x10
c0004b4b:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b4e:	89 ca                	mov    edx,ecx
c0004b50:	5b                   	pop    ebx
c0004b51:	5e                   	pop    esi
c0004b52:	e9 a9 ce ff ff       	jmp    c0001a00 <st_word>
c0004b57:	5b                   	pop    ebx
c0004b58:	5e                   	pop    esi
c0004b59:	c3                   	ret    

c0004b5a <init_alloc_info.isra.2>:
c0004b5a:	56                   	push   esi
c0004b5b:	53                   	push   ebx
c0004b5c:	89 c6                	mov    esi,eax
c0004b5e:	89 d3                	mov    ebx,edx
c0004b60:	51                   	push   ecx
c0004b61:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b63:	83 c0 34             	add    eax,0x34
c0004b66:	e8 30 ce ff ff       	call   c000199b <ld_dword>
c0004b6b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b6e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b70:	83 c0 38             	add    eax,0x38
c0004b73:	e8 3b ce ff ff       	call   c00019b3 <ld_qword>
c0004b78:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b7b:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b7e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b80:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b83:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b8a:	83 e0 02             	and    eax,0x2
c0004b8d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b90:	5b                   	pop    ebx
c0004b91:	5b                   	pop    ebx
c0004b92:	5e                   	pop    esi
c0004b93:	c3                   	ret    

c0004b94 <follow_path>:
c0004b94:	56                   	push   esi
c0004b95:	53                   	push   ebx
c0004b96:	89 c3                	mov    ebx,eax
c0004b98:	83 ec 14             	sub    esp,0x14
c0004b9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004b9f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ba1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ba5:	8a 10                	mov    dl,BYTE PTR [eax]
c0004ba7:	80 fa 5c             	cmp    dl,0x5c
c0004baa:	75 07                	jne    c0004bb3 <follow_path+0x1f>
c0004bac:	40                   	inc    eax
c0004bad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb1:	eb ee                	jmp    c0004ba1 <follow_path+0xd>
c0004bb3:	80 fa 2f             	cmp    dl,0x2f
c0004bb6:	74 f4                	je     c0004bac <follow_path+0x18>
c0004bb8:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bbf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bc6:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bc9:	77 52                	ja     c0004c1d <follow_path+0x89>
c0004bcb:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bcf:	31 d2                	xor    edx,edx
c0004bd1:	89 d8                	mov    eax,ebx
c0004bd3:	e8 12 e3 ff ff       	call   c0002eea <dir_sdi>
c0004bd8:	eb 7c                	jmp    c0004c56 <follow_path+0xc2>
c0004bda:	89 d8                	mov    eax,ebx
c0004bdc:	e8 6e f2 ff ff       	call   c0003e4f <dir_find>
c0004be1:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004be4:	85 c0                	test   eax,eax
c0004be6:	75 46                	jne    c0004c2e <follow_path+0x9a>
c0004be8:	80 e2 04             	and    dl,0x4
c0004beb:	75 69                	jne    c0004c56 <follow_path+0xc2>
c0004bed:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004bf1:	74 5e                	je     c0004c51 <follow_path+0xbd>
c0004bf3:	8a 06                	mov    al,BYTE PTR [esi]
c0004bf5:	3c 04                	cmp    al,0x4
c0004bf7:	75 41                	jne    c0004c3a <follow_path+0xa6>
c0004bf9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004bfc:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c00:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c03:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c06:	30 c0                	xor    al,al
c0004c08:	09 d0                	or     eax,edx
c0004c0a:	89 da                	mov    edx,ebx
c0004c0c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c0f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c12:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c15:	8d 46 10             	lea    eax,[esi+0x10]
c0004c18:	e8 3d ff ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004c1d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c21:	89 d8                	mov    eax,ebx
c0004c23:	e8 a9 ed ff ff       	call   c00039d1 <create_name>
c0004c28:	85 c0                	test   eax,eax
c0004c2a:	74 ae                	je     c0004bda <follow_path+0x46>
c0004c2c:	eb 28                	jmp    c0004c56 <follow_path+0xc2>
c0004c2e:	83 f8 04             	cmp    eax,0x4
c0004c31:	75 23                	jne    c0004c56 <follow_path+0xc2>
c0004c33:	80 e2 04             	and    dl,0x4
c0004c36:	74 19                	je     c0004c51 <follow_path+0xbd>
c0004c38:	eb 1c                	jmp    c0004c56 <follow_path+0xc2>
c0004c3a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c3d:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c43:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c47:	e8 bd fe ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004c4c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c4f:	eb cc                	jmp    c0004c1d <follow_path+0x89>
c0004c51:	b8 05 00 00 00       	mov    eax,0x5
c0004c56:	83 c4 14             	add    esp,0x14
c0004c59:	5b                   	pop    ebx
c0004c5a:	5e                   	pop    esi
c0004c5b:	c3                   	ret    

c0004c5c <f_mount>:
c0004c5c:	53                   	push   ebx
c0004c5d:	83 ec 18             	sub    esp,0x18
c0004c60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c64:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c70:	e8 fb d2 ff ff       	call   c0001f70 <get_ldnumber>
c0004c75:	89 c2                	mov    edx,eax
c0004c77:	b8 0b 00 00 00       	mov    eax,0xb
c0004c7c:	85 d2                	test   edx,edx
c0004c7e:	78 39                	js     c0004cb9 <f_mount+0x5d>
c0004c80:	8b 04 95 00 2e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd200]
c0004c87:	85 c0                	test   eax,eax
c0004c89:	74 03                	je     c0004c8e <f_mount+0x32>
c0004c8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c92:	85 c0                	test   eax,eax
c0004c94:	74 03                	je     c0004c99 <f_mount+0x3d>
c0004c96:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c9d:	89 04 95 00 2e 02 c0 	mov    DWORD PTR [edx*4-0x3ffdd200],eax
c0004ca4:	31 c0                	xor    eax,eax
c0004ca6:	84 db                	test   bl,bl
c0004ca8:	74 0f                	je     c0004cb9 <f_mount+0x5d>
c0004caa:	31 c9                	xor    ecx,ecx
c0004cac:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cb0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004cb4:	e8 65 d7 ff ff       	call   c000241e <mount_volume>
c0004cb9:	83 c4 18             	add    esp,0x18
c0004cbc:	5b                   	pop    ebx
c0004cbd:	c3                   	ret    

c0004cbe <f_open>:
c0004cbe:	55                   	push   ebp
c0004cbf:	bd 09 00 00 00       	mov    ebp,0x9
c0004cc4:	57                   	push   edi
c0004cc5:	56                   	push   esi
c0004cc6:	53                   	push   ebx
c0004cc7:	83 ec 7c             	sub    esp,0x7c
c0004cca:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cd1:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004cd8:	85 db                	test   ebx,ebx
c0004cda:	0f 84 10 04 00 00    	je     c00050f0 <f_open+0x432>
c0004ce0:	89 fe                	mov    esi,edi
c0004ce2:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ce6:	83 e6 3f             	and    esi,0x3f
c0004ce9:	89 f0                	mov    eax,esi
c0004ceb:	0f b6 c8             	movzx  ecx,al
c0004cee:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004cf5:	e8 24 d7 ff ff       	call   c000241e <mount_volume>
c0004cfa:	89 c5                	mov    ebp,eax
c0004cfc:	85 c0                	test   eax,eax
c0004cfe:	0f 85 e6 03 00 00    	jne    c00050ea <f_open+0x42c>
c0004d04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d08:	bd 11 00 00 00       	mov    ebp,0x11
c0004d0d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	68 60 04 00 00       	push   0x460
c0004d19:	e8 a3 34 00 00       	call   c00081c1 <ff_memalloc>
c0004d1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d2a:	0f 84 c0 03 00 00    	je     c00050f0 <f_open+0x432>
c0004d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d38:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d3e:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d41:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d44:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d4b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d4f:	e8 40 fe ff ff       	call   c0004b94 <follow_path>
c0004d54:	89 c5                	mov    ebp,eax
c0004d56:	85 c0                	test   eax,eax
c0004d58:	75 0c                	jne    c0004d66 <f_open+0xa8>
c0004d5a:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d5f:	79 05                	jns    c0004d66 <f_open+0xa8>
c0004d61:	bd 06 00 00 00       	mov    ebp,0x6
c0004d66:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d6c:	0f 84 84 01 00 00    	je     c0004ef6 <f_open+0x238>
c0004d72:	85 ed                	test   ebp,ebp
c0004d74:	74 20                	je     c0004d96 <f_open+0xd8>
c0004d76:	83 fd 04             	cmp    ebp,0x4
c0004d79:	0f 85 58 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004d7f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d83:	83 ce 08             	or     esi,0x8
c0004d86:	e8 8a f2 ff ff       	call   c0004015 <dir_register>
c0004d8b:	89 c5                	mov    ebp,eax
c0004d8d:	85 c0                	test   eax,eax
c0004d8f:	74 2f                	je     c0004dc0 <f_open+0x102>
c0004d91:	e9 41 03 00 00       	jmp    c00050d7 <f_open+0x419>
c0004d96:	bd 07 00 00 00       	mov    ebp,0x7
c0004d9b:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004da0:	0f 85 31 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004da6:	bd 08 00 00 00       	mov    ebp,0x8
c0004dab:	f7 c7 04 00 00 00    	test   edi,0x4
c0004db1:	0f 85 20 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004db7:	83 e7 08             	and    edi,0x8
c0004dba:	0f 84 65 01 00 00    	je     c0004f25 <f_open+0x267>
c0004dc0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004dc4:	8a 02                	mov    al,BYTE PTR [edx]
c0004dc6:	3c 04                	cmp    al,0x4
c0004dc8:	0f 85 97 00 00 00    	jne    c0004e65 <f_open+0x1a7>
c0004dce:	8d 42 10             	lea    eax,[edx+0x10]
c0004dd1:	89 13                	mov    DWORD PTR [ebx],edx
c0004dd3:	89 da                	mov    edx,ebx
c0004dd5:	e8 80 fd ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004dda:	31 d2                	xor    edx,edx
c0004ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de0:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004de5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004de8:	83 c0 02             	add    eax,0x2
c0004deb:	e8 32 cc ff ff       	call   c0001a22 <mem_set>
c0004df0:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004df5:	31 d2                	xor    edx,edx
c0004df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dfb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dfe:	83 c0 26             	add    eax,0x26
c0004e01:	e8 1c cc ff ff       	call   c0001a22 <mem_set>
c0004e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e0a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e0d:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e11:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e19:	83 c0 08             	add    eax,0x8
c0004e1c:	e8 e3 cb ff ff       	call   c0001a04 <st_dword>
c0004e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e28:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e2c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e30:	e8 b7 ea ff ff       	call   c00038ec <store_xdir>
c0004e35:	89 c5                	mov    ebp,eax
c0004e37:	85 c0                	test   eax,eax
c0004e39:	0f 85 98 02 00 00    	jne    c00050d7 <f_open+0x419>
c0004e3f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e42:	85 d2                	test   edx,edx
c0004e44:	0f 84 db 00 00 00    	je     c0004f25 <f_open+0x267>
c0004e4a:	31 c9                	xor    ecx,ecx
c0004e4c:	89 d8                	mov    eax,ebx
c0004e4e:	e8 8e e3 ff ff       	call   c00031e1 <remove_chain>
c0004e53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e57:	89 c5                	mov    ebp,eax
c0004e59:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e5c:	48                   	dec    eax
c0004e5d:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e60:	e9 b8 00 00 00       	jmp    c0004f1d <f_open+0x25f>
c0004e65:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e69:	89 ea                	mov    edx,ebp
c0004e6b:	e8 99 fc ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004e70:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e75:	89 c7                	mov    edi,eax
c0004e77:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e7a:	e8 85 cb ff ff       	call   c0001a04 <st_dword>
c0004e7f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e83:	31 c9                	xor    ecx,ecx
c0004e85:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e91:	e8 9c fc ff ff       	call   c0004b32 <st_clust.isra.1>
c0004e96:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e9a:	31 d2                	xor    edx,edx
c0004e9c:	83 c0 1c             	add    eax,0x1c
c0004e9f:	e8 60 cb ff ff       	call   c0001a04 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	85 ff                	test   edi,edi
c0004eaa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004eae:	74 75                	je     c0004f25 <f_open+0x267>
c0004eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb4:	31 c9                	xor    ecx,ecx
c0004eb6:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004eb9:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ec4:	89 fa                	mov    edx,edi
c0004ec6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eca:	e8 12 e3 ff ff       	call   c00031e1 <remove_chain>
c0004ecf:	89 c5                	mov    ebp,eax
c0004ed1:	85 c0                	test   eax,eax
c0004ed3:	0f 85 fe 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004ed9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004edd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee5:	4f                   	dec    edi
c0004ee6:	e8 81 d2 ff ff       	call   c000216c <move_window>
c0004eeb:	89 c5                	mov    ebp,eax
c0004eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef1:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004ef4:	eb 27                	jmp    c0004f1d <f_open+0x25f>
c0004ef6:	85 ed                	test   ebp,ebp
c0004ef8:	0f 85 d9 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004efe:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f02:	bd 04 00 00 00       	mov    ebp,0x4
c0004f07:	a8 10                	test   al,0x10
c0004f09:	0f 85 c8 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f0f:	83 e7 02             	and    edi,0x2
c0004f12:	74 11                	je     c0004f25 <f_open+0x267>
c0004f14:	bd 07 00 00 00       	mov    ebp,0x7
c0004f19:	a8 01                	test   al,0x1
c0004f1b:	eb 02                	jmp    c0004f1f <f_open+0x261>
c0004f1d:	85 ed                	test   ebp,ebp
c0004f1f:	0f 85 b2 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f25:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f2b:	74 03                	je     c0004f30 <f_open+0x272>
c0004f2d:	83 ce 40             	or     esi,0x40
c0004f30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f34:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f37:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f3a:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f3d:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f40:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f44:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f47:	8a 02                	mov    al,BYTE PTR [edx]
c0004f49:	3c 04                	cmp    al,0x4
c0004f4b:	75 2a                	jne    c0004f77 <f_open+0x2b9>
c0004f4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f51:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f56:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f5d:	30 c0                	xor    al,al
c0004f5f:	09 c8                	or     eax,ecx
c0004f61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f64:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f68:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f6b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f6e:	89 da                	mov    edx,ebx
c0004f70:	e8 e5 fb ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004f75:	eb 1c                	jmp    c0004f93 <f_open+0x2d5>
c0004f77:	89 fa                	mov    edx,edi
c0004f79:	e8 8b fb ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004f7e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f81:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f84:	e8 12 ca ff ff       	call   c000199b <ld_dword>
c0004f89:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f90:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f97:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004f9e:	89 03                	mov    DWORD PTR [ebx],eax
c0004fa0:	31 d2                	xor    edx,edx
c0004fa2:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004fa6:	b9 00 02 00 00       	mov    ecx,0x200
c0004fab:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004faf:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fb3:	89 f0                	mov    eax,esi
c0004fb5:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004fbc:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fbf:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fc6:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fc9:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fd0:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fdb:	e8 42 ca ff ff       	call   c0001a22 <mem_set>
c0004fe0:	83 e6 20             	and    esi,0x20
c0004fe3:	75 07                	jne    c0004fec <f_open+0x32e>
c0004fe5:	31 ed                	xor    ebp,ebp
c0004fe7:	e9 eb 00 00 00       	jmp    c00050d7 <f_open+0x419>
c0004fec:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004fef:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004ff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ff6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ffe:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005002:	74 e1                	je     c0004fe5 <f_open+0x327>
c0005004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005008:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000500c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000500f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005016:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005019:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000501d:	31 ff                	xor    edi,edi
c000501f:	c1 e5 09             	shl    ebp,0x9
c0005022:	89 ee                	mov    esi,ebp
c0005024:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005028:	89 f8                	mov    eax,edi
c000502a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000502e:	73 22                	jae    c0005052 <f_open+0x394>
c0005030:	89 d8                	mov    eax,ebx
c0005032:	e8 bd dc ff ff       	call   c0002cf4 <get_fat>
c0005037:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000503b:	89 c2                	mov    edx,eax
c000503d:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005041:	83 f8 01             	cmp    eax,0x1
c0005044:	76 10                	jbe    c0005056 <f_open+0x398>
c0005046:	83 f8 ff             	cmp    eax,0xffffffff
c0005049:	75 d9                	jne    c0005024 <f_open+0x366>
c000504b:	bd 01 00 00 00       	mov    ebp,0x1
c0005050:	eb 09                	jmp    c000505b <f_open+0x39d>
c0005052:	31 ed                	xor    ebp,ebp
c0005054:	eb 05                	jmp    c000505b <f_open+0x39d>
c0005056:	bd 02 00 00 00       	mov    ebp,0x2
c000505b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000505e:	85 ed                	test   ebp,ebp
c0005060:	75 75                	jne    c00050d7 <f_open+0x419>
c0005062:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005066:	25 ff 01 00 00       	and    eax,0x1ff
c000506b:	0f 84 74 ff ff ff    	je     c0004fe5 <f_open+0x327>
c0005071:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005075:	bd 02 00 00 00       	mov    ebp,0x2
c000507a:	89 c8                	mov    eax,ecx
c000507c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005080:	e8 a2 cb ff ff       	call   c0001c27 <clst2sect>
c0005085:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005089:	89 d7                	mov    edi,edx
c000508b:	09 c7                	or     edi,eax
c000508d:	74 48                	je     c00050d7 <f_open+0x419>
c000508f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005093:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005097:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000509f:	0f ac fe 09          	shrd   esi,edi,0x9
c00050a3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00050a7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00050ab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00050ae:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00050b2:	83 ec 0c             	sub    esp,0xc
c00050b5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050b8:	6a 01                	push   0x1
c00050ba:	52                   	push   edx
c00050bb:	50                   	push   eax
c00050bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050c4:	50                   	push   eax
c00050c5:	e8 79 c8 ff ff       	call   c0001943 <disk_read>
c00050ca:	83 c4 20             	add    esp,0x20
c00050cd:	85 c0                	test   eax,eax
c00050cf:	0f 95 c0             	setne  al
c00050d2:	0f b6 c0             	movzx  eax,al
c00050d5:	89 c5                	mov    ebp,eax
c00050d7:	83 ec 0c             	sub    esp,0xc
c00050da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050de:	e8 f4 30 00 00       	call   c00081d7 <ff_memfree>
c00050e3:	83 c4 10             	add    esp,0x10
c00050e6:	85 ed                	test   ebp,ebp
c00050e8:	74 06                	je     c00050f0 <f_open+0x432>
c00050ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050f0:	83 c4 7c             	add    esp,0x7c
c00050f3:	89 e8                	mov    eax,ebp
c00050f5:	5b                   	pop    ebx
c00050f6:	5e                   	pop    esi
c00050f7:	5f                   	pop    edi
c00050f8:	5d                   	pop    ebp
c00050f9:	c3                   	ret    

c00050fa <f_read>:
c00050fa:	55                   	push   ebp
c00050fb:	57                   	push   edi
c00050fc:	56                   	push   esi
c00050fd:	53                   	push   ebx
c00050fe:	83 ec 2c             	sub    esp,0x2c
c0005101:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005105:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005109:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000510f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005113:	89 d8                	mov    eax,ebx
c0005115:	e8 77 cf ff ff       	call   c0002091 <validate>
c000511a:	89 c5                	mov    ebp,eax
c000511c:	85 c0                	test   eax,eax
c000511e:	0f 85 4c 02 00 00    	jne    c0005370 <f_read+0x276>
c0005124:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005128:	85 ed                	test   ebp,ebp
c000512a:	0f 85 40 02 00 00    	jne    c0005370 <f_read+0x276>
c0005130:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005134:	0f 84 31 02 00 00    	je     c000536b <f_read+0x271>
c000513a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000513d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005140:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005143:	bf 00 00 00 00       	mov    edi,0x0
c0005148:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000514b:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000514f:	89 d1                	mov    ecx,edx
c0005151:	19 f9                	sbb    ecx,edi
c0005153:	0f 83 cf 00 00 00    	jae    c0005228 <f_read+0x12e>
c0005159:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000515d:	e9 c6 00 00 00       	jmp    c0005228 <f_read+0x12e>
c0005162:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005165:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005168:	89 d0                	mov    eax,edx
c000516a:	25 ff 01 00 00       	and    eax,0x1ff
c000516f:	0f 85 c9 01 00 00    	jne    c000533e <f_read+0x244>
c0005175:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005179:	89 d6                	mov    esi,edx
c000517b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000517f:	89 cf                	mov    edi,ecx
c0005181:	48                   	dec    eax
c0005182:	0f ac fe 09          	shrd   esi,edi,0x9
c0005186:	21 f0                	and    eax,esi
c0005188:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000518c:	0f 84 a6 00 00 00    	je     c0005238 <f_read+0x13e>
c0005192:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005196:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005199:	89 c8                	mov    eax,ecx
c000519b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000519e:	e8 84 ca ff ff       	call   c0001c27 <clst2sect>
c00051a3:	89 d7                	mov    edi,edx
c00051a5:	09 c7                	or     edi,eax
c00051a7:	0f 84 b4 00 00 00    	je     c0005261 <f_read+0x167>
c00051ad:	31 ff                	xor    edi,edi
c00051af:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00051b3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051b6:	01 c6                	add    esi,eax
c00051b8:	11 d7                	adc    edi,edx
c00051ba:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051c2:	0f 86 fd 00 00 00    	jbe    c00052c5 <f_read+0x1cb>
c00051c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d0:	c1 e8 09             	shr    eax,0x9
c00051d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00051d6:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051da:	03 14 24             	add    edx,DWORD PTR [esp]
c00051dd:	39 c2                	cmp    edx,eax
c00051df:	76 07                	jbe    c00051e8 <f_read+0xee>
c00051e1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00051e8:	83 ec 0c             	sub    esp,0xc
c00051eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051ef:	57                   	push   edi
c00051f0:	56                   	push   esi
c00051f1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00051f5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051f9:	50                   	push   eax
c00051fa:	e8 44 c7 ff ff       	call   c0001943 <disk_read>
c00051ff:	83 c4 20             	add    esp,0x20
c0005202:	85 c0                	test   eax,eax
c0005204:	75 6e                	jne    c0005274 <f_read+0x17a>
c0005206:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000520a:	78 7e                	js     c000528a <f_read+0x190>
c000520c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000520f:	c1 e6 09             	shl    esi,0x9
c0005212:	31 ff                	xor    edi,edi
c0005214:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005218:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000521c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005220:	01 30                	add    DWORD PTR [eax],esi
c0005222:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005225:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005228:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000522d:	0f 85 2f ff ff ff    	jne    c0005162 <f_read+0x68>
c0005233:	e9 38 01 00 00       	jmp    c0005370 <f_read+0x276>
c0005238:	89 c8                	mov    eax,ecx
c000523a:	09 d0                	or     eax,edx
c000523c:	75 05                	jne    c0005243 <f_read+0x149>
c000523e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005241:	eb 19                	jmp    c000525c <f_read+0x162>
c0005243:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005247:	74 09                	je     c0005252 <f_read+0x158>
c0005249:	89 d8                	mov    eax,ebx
c000524b:	e8 f8 c9 ff ff       	call   c0001c48 <clmt_clust>
c0005250:	eb 0a                	jmp    c000525c <f_read+0x162>
c0005252:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005255:	89 d8                	mov    eax,ebx
c0005257:	e8 98 da ff ff       	call   c0002cf4 <get_fat>
c000525c:	83 f8 01             	cmp    eax,0x1
c000525f:	77 0e                	ja     c000526f <f_read+0x175>
c0005261:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005265:	bd 02 00 00 00       	mov    ebp,0x2
c000526a:	e9 01 01 00 00       	jmp    c0005370 <f_read+0x276>
c000526f:	83 f8 ff             	cmp    eax,0xffffffff
c0005272:	75 0e                	jne    c0005282 <f_read+0x188>
c0005274:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005278:	bd 01 00 00 00       	mov    ebp,0x1
c000527d:	e9 ee 00 00 00       	jmp    c0005370 <f_read+0x276>
c0005282:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005285:	e9 08 ff ff ff       	jmp    c0005192 <f_read+0x98>
c000528a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000528d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005290:	29 f0                	sub    eax,esi
c0005292:	19 fa                	sbb    edx,edi
c0005294:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005297:	89 d7                	mov    edi,edx
c0005299:	ba 00 00 00 00       	mov    edx,0x0
c000529e:	89 f9                	mov    ecx,edi
c00052a0:	19 d1                	sbb    ecx,edx
c00052a2:	0f 83 64 ff ff ff    	jae    c000520c <f_read+0x112>
c00052a8:	89 c7                	mov    edi,eax
c00052aa:	8d 53 50             	lea    edx,[ebx+0x50]
c00052ad:	c1 e7 09             	shl    edi,0x9
c00052b0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052b4:	b9 00 02 00 00       	mov    ecx,0x200
c00052b9:	01 f8                	add    eax,edi
c00052bb:	e8 4d c7 ff ff       	call   c0001a0d <mem_cpy>
c00052c0:	e9 47 ff ff ff       	jmp    c000520c <f_read+0x112>
c00052c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052c8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00052ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052d2:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052d6:	75 05                	jne    c00052dd <f_read+0x1e3>
c00052d8:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052db:	74 5b                	je     c0005338 <f_read+0x23e>
c00052dd:	8d 43 50             	lea    eax,[ebx+0x50]
c00052e0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052e8:	79 2a                	jns    c0005314 <f_read+0x21a>
c00052ea:	83 ec 0c             	sub    esp,0xc
c00052ed:	6a 01                	push   0x1
c00052ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00052fb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052ff:	50                   	push   eax
c0005300:	e8 54 c6 ff ff       	call   c0001959 <disk_write>
c0005305:	83 c4 20             	add    esp,0x20
c0005308:	85 c0                	test   eax,eax
c000530a:	0f 85 64 ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005310:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005314:	83 ec 0c             	sub    esp,0xc
c0005317:	6a 01                	push   0x1
c0005319:	57                   	push   edi
c000531a:	56                   	push   esi
c000531b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000531f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005323:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005327:	50                   	push   eax
c0005328:	e8 16 c6 ff ff       	call   c0001943 <disk_read>
c000532d:	83 c4 20             	add    esp,0x20
c0005330:	85 c0                	test   eax,eax
c0005332:	0f 85 3c ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005338:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000533b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000533e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005341:	ba 00 02 00 00       	mov    edx,0x200
c0005346:	25 ff 01 00 00       	and    eax,0x1ff
c000534b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000534f:	29 c2                	sub    edx,eax
c0005351:	39 d6                	cmp    esi,edx
c0005353:	76 02                	jbe    c0005357 <f_read+0x25d>
c0005355:	89 d6                	mov    esi,edx
c0005357:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000535b:	89 f1                	mov    ecx,esi
c000535d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005361:	e8 a7 c6 ff ff       	call   c0001a0d <mem_cpy>
c0005366:	e9 a7 fe ff ff       	jmp    c0005212 <f_read+0x118>
c000536b:	bd 07 00 00 00       	mov    ebp,0x7
c0005370:	83 c4 2c             	add    esp,0x2c
c0005373:	89 e8                	mov    eax,ebp
c0005375:	5b                   	pop    ebx
c0005376:	5e                   	pop    esi
c0005377:	5f                   	pop    edi
c0005378:	5d                   	pop    ebp
c0005379:	c3                   	ret    

c000537a <f_write>:
c000537a:	55                   	push   ebp
c000537b:	57                   	push   edi
c000537c:	56                   	push   esi
c000537d:	53                   	push   ebx
c000537e:	83 ec 2c             	sub    esp,0x2c
c0005381:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005385:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005389:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000538f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005393:	89 d8                	mov    eax,ebx
c0005395:	e8 f7 cc ff ff       	call   c0002091 <validate>
c000539a:	89 c5                	mov    ebp,eax
c000539c:	85 c0                	test   eax,eax
c000539e:	0f 85 86 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053a4:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053a8:	85 ed                	test   ebp,ebp
c00053aa:	0f 85 7a 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053b0:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053b4:	0f 84 6b 02 00 00    	je     c0005625 <f_write+0x2ab>
c00053ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053be:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053c1:	0f 84 43 01 00 00    	je     c000550a <f_write+0x190>
c00053c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053ca:	89 c1                	mov    ecx,eax
c00053cc:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053d0:	0f 83 34 01 00 00    	jae    c000550a <f_write+0x190>
c00053d6:	f7 d0                	not    eax
c00053d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053dc:	e9 29 01 00 00       	jmp    c000550a <f_write+0x190>
c00053e1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053e4:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053e7:	89 d0                	mov    eax,edx
c00053e9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ee:	0f 85 00 02 00 00    	jne    c00055f4 <f_write+0x27a>
c00053f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053f8:	89 d6                	mov    esi,edx
c00053fa:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00053fe:	89 cf                	mov    edi,ecx
c0005400:	48                   	dec    eax
c0005401:	0f ac fe 09          	shrd   esi,edi,0x9
c0005405:	21 f0                	and    eax,esi
c0005407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000540b:	0f 84 06 01 00 00    	je     c0005517 <f_write+0x19d>
c0005411:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005415:	0f 88 6e 01 00 00    	js     c0005589 <f_write+0x20f>
c000541b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 c8                	mov    eax,ecx
c0005424:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005428:	e8 fa c7 ff ff       	call   c0001c27 <clst2sect>
c000542d:	89 d1                	mov    ecx,edx
c000542f:	09 c1                	or     ecx,eax
c0005431:	0f 84 1c 01 00 00    	je     c0005553 <f_write+0x1d9>
c0005437:	31 ff                	xor    edi,edi
c0005439:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000543d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005441:	01 c6                	add    esi,eax
c0005443:	11 d7                	adc    edi,edx
c0005445:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000544d:	0f 86 63 01 00 00    	jbe    c00055b6 <f_write+0x23c>
c0005453:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000545b:	c1 e8 09             	shr    eax,0x9
c000545e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005462:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005466:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000546a:	39 c2                	cmp    edx,eax
c000546c:	76 08                	jbe    c0005476 <f_write+0xfc>
c000546e:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005472:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005476:	83 ec 0c             	sub    esp,0xc
c0005479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000547d:	57                   	push   edi
c000547e:	56                   	push   esi
c000547f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005483:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005487:	50                   	push   eax
c0005488:	e8 cc c4 ff ff       	call   c0001959 <disk_write>
c000548d:	83 c4 20             	add    esp,0x20
c0005490:	85 c0                	test   eax,eax
c0005492:	0f 85 ce 00 00 00    	jne    c0005566 <f_write+0x1ec>
c0005498:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000549b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000549e:	29 f0                	sub    eax,esi
c00054a0:	19 fa                	sbb    edx,edi
c00054a2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00054a6:	89 d7                	mov    edi,edx
c00054a8:	ba 00 00 00 00       	mov    edx,0x0
c00054ad:	89 f9                	mov    ecx,edi
c00054af:	19 d1                	sbb    ecx,edx
c00054b1:	73 1c                	jae    c00054cf <f_write+0x155>
c00054b3:	89 c7                	mov    edi,eax
c00054b5:	b9 00 02 00 00       	mov    ecx,0x200
c00054ba:	c1 e7 09             	shl    edi,0x9
c00054bd:	8d 43 50             	lea    eax,[ebx+0x50]
c00054c0:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054c4:	89 fa                	mov    edx,edi
c00054c6:	e8 42 c5 ff ff       	call   c0001a0d <mem_cpy>
c00054cb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054cf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054d3:	c1 e6 09             	shl    esi,0x9
c00054d6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054da:	31 ff                	xor    edi,edi
c00054dc:	01 30                	add    DWORD PTR [eax],esi
c00054de:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054e2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054e6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054e9:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054ef:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054f2:	89 c1                	mov    ecx,eax
c00054f4:	39 f2                	cmp    edx,esi
c00054f6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00054f9:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00054fc:	19 f9                	sbb    ecx,edi
c00054fe:	73 04                	jae    c0005504 <f_write+0x18a>
c0005500:	89 f2                	mov    edx,esi
c0005502:	89 f8                	mov    eax,edi
c0005504:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0005507:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000550a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000550f:	0f 85 cc fe ff ff    	jne    c00053e1 <f_write+0x67>
c0005515:	eb 2e                	jmp    c0005545 <f_write+0x1cb>
c0005517:	89 c8                	mov    eax,ecx
c0005519:	09 d0                	or     eax,edx
c000551b:	75 0b                	jne    c0005528 <f_write+0x1ae>
c000551d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005520:	31 d2                	xor    edx,edx
c0005522:	85 c0                	test   eax,eax
c0005524:	75 28                	jne    c000554e <f_write+0x1d4>
c0005526:	eb 12                	jmp    c000553a <f_write+0x1c0>
c0005528:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000552c:	74 09                	je     c0005537 <f_write+0x1bd>
c000552e:	89 d8                	mov    eax,ebx
c0005530:	e8 13 c7 ff ff       	call   c0001c48 <clmt_clust>
c0005535:	eb 0a                	jmp    c0005541 <f_write+0x1c7>
c0005537:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000553a:	89 d8                	mov    eax,ebx
c000553c:	e8 a1 da ff ff       	call   c0002fe2 <create_chain>
c0005541:	85 c0                	test   eax,eax
c0005543:	75 09                	jne    c000554e <f_write+0x1d4>
c0005545:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005549:	e9 dc 00 00 00       	jmp    c000562a <f_write+0x2b0>
c000554e:	83 f8 01             	cmp    eax,0x1
c0005551:	75 0e                	jne    c0005561 <f_write+0x1e7>
c0005553:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005557:	bd 02 00 00 00       	mov    ebp,0x2
c000555c:	e9 c9 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005561:	83 f8 ff             	cmp    eax,0xffffffff
c0005564:	75 0e                	jne    c0005574 <f_write+0x1fa>
c0005566:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000556a:	bd 01 00 00 00       	mov    ebp,0x1
c000556f:	e9 b6 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005574:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005577:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000557b:	0f 85 90 fe ff ff    	jne    c0005411 <f_write+0x97>
c0005581:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005584:	e9 88 fe ff ff       	jmp    c0005411 <f_write+0x97>
c0005589:	83 ec 0c             	sub    esp,0xc
c000558c:	8d 43 50             	lea    eax,[ebx+0x50]
c000558f:	6a 01                	push   0x1
c0005591:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005594:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005597:	50                   	push   eax
c0005598:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000559c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055a0:	50                   	push   eax
c00055a1:	e8 b3 c3 ff ff       	call   c0001959 <disk_write>
c00055a6:	83 c4 20             	add    esp,0x20
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 b9                	jne    c0005566 <f_write+0x1ec>
c00055ad:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055b1:	e9 65 fe ff ff       	jmp    c000541b <f_write+0xa1>
c00055b6:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055b9:	75 05                	jne    c00055c0 <f_write+0x246>
c00055bb:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055be:	74 2e                	je     c00055ee <f_write+0x274>
c00055c0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055c3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055c6:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055c9:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055cc:	73 20                	jae    c00055ee <f_write+0x274>
c00055ce:	83 ec 0c             	sub    esp,0xc
c00055d1:	8d 43 50             	lea    eax,[ebx+0x50]
c00055d4:	6a 01                	push   0x1
c00055d6:	57                   	push   edi
c00055d7:	56                   	push   esi
c00055d8:	50                   	push   eax
c00055d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055dd:	50                   	push   eax
c00055de:	e8 60 c3 ff ff       	call   c0001943 <disk_read>
c00055e3:	83 c4 20             	add    esp,0x20
c00055e6:	85 c0                	test   eax,eax
c00055e8:	0f 85 78 ff ff ff    	jne    c0005566 <f_write+0x1ec>
c00055ee:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055f1:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055f4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055f7:	ba 00 02 00 00       	mov    edx,0x200
c00055fc:	25 ff 01 00 00       	and    eax,0x1ff
c0005601:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005605:	29 c2                	sub    edx,eax
c0005607:	39 d6                	cmp    esi,edx
c0005609:	76 02                	jbe    c000560d <f_write+0x293>
c000560b:	89 d6                	mov    esi,edx
c000560d:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005611:	89 f1                	mov    ecx,esi
c0005613:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005617:	e8 f1 c3 ff ff       	call   c0001a0d <mem_cpy>
c000561c:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005620:	e9 b1 fe ff ff       	jmp    c00054d6 <f_write+0x15c>
c0005625:	bd 07 00 00 00       	mov    ebp,0x7
c000562a:	83 c4 2c             	add    esp,0x2c
c000562d:	89 e8                	mov    eax,ebp
c000562f:	5b                   	pop    ebx
c0005630:	5e                   	pop    esi
c0005631:	5f                   	pop    edi
c0005632:	5d                   	pop    ebp
c0005633:	c3                   	ret    

c0005634 <f_sync>:
c0005634:	56                   	push   esi
c0005635:	53                   	push   ebx
c0005636:	83 ec 64             	sub    esp,0x64
c0005639:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000563d:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005641:	89 d8                	mov    eax,ebx
c0005643:	e8 49 ca ff ff       	call   c0002091 <validate>
c0005648:	85 c0                	test   eax,eax
c000564a:	0f 85 ba 01 00 00    	jne    c000580a <f_sync+0x1d6>
c0005650:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005653:	f6 c2 40             	test   dl,0x40
c0005656:	0f 84 ae 01 00 00    	je     c000580a <f_sync+0x1d6>
c000565c:	84 d2                	test   dl,dl
c000565e:	79 33                	jns    c0005693 <f_sync+0x5f>
c0005660:	83 ec 0c             	sub    esp,0xc
c0005663:	8d 43 50             	lea    eax,[ebx+0x50]
c0005666:	6a 01                	push   0x1
c0005668:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000566b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000566e:	50                   	push   eax
c000566f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005673:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005677:	50                   	push   eax
c0005678:	e8 dc c2 ff ff       	call   c0001959 <disk_write>
c000567d:	83 c4 20             	add    esp,0x20
c0005680:	89 c2                	mov    edx,eax
c0005682:	b8 01 00 00 00       	mov    eax,0x1
c0005687:	85 d2                	test   edx,edx
c0005689:	0f 85 7b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c000568f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005697:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569a:	0f 85 11 01 00 00    	jne    c00057b1 <f_sync+0x17d>
c00056a0:	89 d8                	mov    eax,ebx
c00056a2:	e8 13 d6 ff ff       	call   c0002cba <fill_first_frag>
c00056a7:	85 c0                	test   eax,eax
c00056a9:	0f 85 5b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056af:	83 c9 ff             	or     ecx,0xffffffff
c00056b2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056b5:	89 d8                	mov    eax,ebx
c00056b7:	e8 c9 d5 ff ff       	call   c0002c85 <fill_last_frag>
c00056bc:	85 c0                	test   eax,eax
c00056be:	0f 85 46 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056c4:	83 ec 0c             	sub    esp,0xc
c00056c7:	68 60 04 00 00       	push   0x460
c00056cc:	e8 f0 2a 00 00       	call   c00081c1 <ff_memalloc>
c00056d1:	83 c4 10             	add    esp,0x10
c00056d4:	89 c6                	mov    esi,eax
c00056d6:	b8 11 00 00 00       	mov    eax,0x11
c00056db:	85 f6                	test   esi,esi
c00056dd:	0f 84 27 01 00 00    	je     c000580a <f_sync+0x1d6>
c00056e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056e7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00056f3:	89 da                	mov    edx,ebx
c00056f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00056f9:	e8 af df ff ff       	call   c00036ad <load_obj_xdir>
c00056fe:	85 c0                	test   eax,eax
c0005700:	0f 85 95 00 00 00    	jne    c000579b <f_sync+0x167>
c0005706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000570d:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005711:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005714:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005717:	83 ca 01             	or     edx,0x1
c000571a:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000571d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005720:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005723:	83 c0 34             	add    eax,0x34
c0005726:	e8 d9 c2 ff ff       	call   c0001a04 <st_dword>
c000572b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000572f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005732:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005735:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005738:	83 c0 38             	add    eax,0x38
c000573b:	e8 c7 c2 ff ff       	call   c0001a07 <st_qword>
c0005740:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005747:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000574a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000574d:	83 c0 28             	add    eax,0x28
c0005750:	e8 b2 c2 ff ff       	call   c0001a07 <st_qword>
c0005755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005759:	ba 00 00 21 50       	mov    edx,0x50210000
c000575e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005761:	83 c0 0c             	add    eax,0xc
c0005764:	e8 9b c2 ff ff       	call   c0001a04 <st_dword>
c0005769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005770:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005774:	31 d2                	xor    edx,edx
c0005776:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005779:	83 c0 10             	add    eax,0x10
c000577c:	e8 83 c2 ff ff       	call   c0001a04 <st_dword>
c0005781:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005785:	e8 62 e1 ff ff       	call   c00038ec <store_xdir>
c000578a:	85 c0                	test   eax,eax
c000578c:	75 0d                	jne    c000579b <f_sync+0x167>
c000578e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005792:	e8 00 eb ff ff       	call   c0004297 <sync_fs>
c0005797:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000579b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000579f:	83 ec 0c             	sub    esp,0xc
c00057a2:	56                   	push   esi
c00057a3:	e8 2f 2a 00 00       	call   c00081d7 <ff_memfree>
c00057a8:	83 c4 10             	add    esp,0x10
c00057ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057af:	eb 59                	jmp    c000580a <f_sync+0x1d6>
c00057b1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057b4:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057b7:	e8 b0 c9 ff ff       	call   c000216c <move_window>
c00057bc:	85 c0                	test   eax,eax
c00057be:	75 4a                	jne    c000580a <f_sync+0x1d6>
c00057c0:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057c3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057c7:	89 f2                	mov    edx,esi
c00057c9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057ce:	e8 5f f3 ff ff       	call   c0004b32 <st_clust.isra.1>
c00057d3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057d6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057d9:	e8 26 c2 ff ff       	call   c0001a04 <st_dword>
c00057de:	8d 46 16             	lea    eax,[esi+0x16]
c00057e1:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e6:	e8 19 c2 ff ff       	call   c0001a04 <st_dword>
c00057eb:	8d 46 12             	lea    eax,[esi+0x12]
c00057ee:	31 d2                	xor    edx,edx
c00057f0:	e8 0b c2 ff ff       	call   c0001a00 <st_word>
c00057f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00057fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005801:	e8 91 ea ff ff       	call   c0004297 <sync_fs>
c0005806:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000580a:	83 c4 64             	add    esp,0x64
c000580d:	5b                   	pop    ebx
c000580e:	5e                   	pop    esi
c000580f:	c3                   	ret    

c0005810 <f_close>:
c0005810:	53                   	push   ebx
c0005811:	83 ec 24             	sub    esp,0x24
c0005814:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005818:	53                   	push   ebx
c0005819:	e8 16 fe ff ff       	call   c0005634 <f_sync>
c000581e:	83 c4 10             	add    esp,0x10
c0005821:	85 c0                	test   eax,eax
c0005823:	75 15                	jne    c000583a <f_close+0x2a>
c0005825:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005829:	89 d8                	mov    eax,ebx
c000582b:	e8 61 c8 ff ff       	call   c0002091 <validate>
c0005830:	85 c0                	test   eax,eax
c0005832:	75 06                	jne    c000583a <f_close+0x2a>
c0005834:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000583a:	83 c4 18             	add    esp,0x18
c000583d:	5b                   	pop    ebx
c000583e:	c3                   	ret    

c000583f <f_lseek>:
c000583f:	55                   	push   ebp
c0005840:	57                   	push   edi
c0005841:	56                   	push   esi
c0005842:	53                   	push   ebx
c0005843:	83 ec 3c             	sub    esp,0x3c
c0005846:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000584a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000584e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005852:	89 04 24             	mov    DWORD PTR [esp],eax
c0005855:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005859:	89 d8                	mov    eax,ebx
c000585b:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000585f:	e8 2d c8 ff ff       	call   c0002091 <validate>
c0005864:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005868:	85 c0                	test   eax,eax
c000586a:	0f 85 7a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005870:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005874:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005878:	85 c0                	test   eax,eax
c000587a:	0f 85 6a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005880:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005884:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005887:	74 0c                	je     c0005895 <f_lseek+0x56>
c0005889:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000588c:	85 c0                	test   eax,eax
c000588e:	75 1f                	jne    c00058af <f_lseek+0x70>
c0005890:	e9 b5 01 00 00       	jmp    c0005a4a <f_lseek+0x20b>
c0005895:	83 c9 ff             	or     ecx,0xffffffff
c0005898:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000589b:	89 d8                	mov    eax,ebx
c000589d:	e8 e3 d3 ff ff       	call   c0002c85 <fill_last_frag>
c00058a2:	85 c0                	test   eax,eax
c00058a4:	74 e3                	je     c0005889 <f_lseek+0x4a>
c00058a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058aa:	e9 3b 04 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c00058af:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058b4:	0f 85 ac 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058ba:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058be:	0f 85 a2 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058c4:	8d 78 04             	lea    edi,[eax+0x4]
c00058c7:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00058cc:	be 02 00 00 00       	mov    esi,0x2
c00058d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058d5:	85 ed                	test   ebp,ebp
c00058d7:	74 73                	je     c000594c <f_lseek+0x10d>
c00058d9:	89 e9                	mov    ecx,ebp
c00058db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058e2:	ff 04 24             	inc    DWORD PTR [esp]
c00058e5:	89 ca                	mov    edx,ecx
c00058e7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058eb:	89 d8                	mov    eax,ebx
c00058ed:	e8 02 d4 ff ff       	call   c0002cf4 <get_fat>
c00058f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00058f6:	83 f8 01             	cmp    eax,0x1
c00058f9:	77 11                	ja     c000590c <f_lseek+0xcd>
c00058fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00058ff:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005907:	e9 de 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c000590c:	83 f8 ff             	cmp    eax,0xffffffff
c000590f:	75 11                	jne    c0005922 <f_lseek+0xe3>
c0005911:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005915:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000591d:	e9 c8 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005922:	8d 51 01             	lea    edx,[ecx+0x1]
c0005925:	89 c1                	mov    ecx,eax
c0005927:	39 c2                	cmp    edx,eax
c0005929:	74 b7                	je     c00058e2 <f_lseek+0xa3>
c000592b:	83 c6 02             	add    esi,0x2
c000592e:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005932:	72 0b                	jb     c000593f <f_lseek+0x100>
c0005934:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005937:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c000593a:	89 0f                	mov    DWORD PTR [edi],ecx
c000593c:	83 c7 08             	add    edi,0x8
c000593f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005943:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005946:	76 04                	jbe    c000594c <f_lseek+0x10d>
c0005948:	89 c5                	mov    ebp,eax
c000594a:	eb 8d                	jmp    c00058d9 <f_lseek+0x9a>
c000594c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000594f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005953:	89 30                	mov    DWORD PTR [eax],esi
c0005955:	0f 87 87 03 00 00    	ja     c0005ce2 <f_lseek+0x4a3>
c000595b:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005961:	e9 84 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005966:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005969:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000596c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005970:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005974:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005978:	39 04 24             	cmp    DWORD PTR [esp],eax
c000597b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000597f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005983:	73 0f                	jae    c0005994 <f_lseek+0x155>
c0005985:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005988:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000598c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005990:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005998:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000599c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000599f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00059a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00059a6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00059aa:	0f 84 3a 03 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00059b4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00059b8:	83 c6 ff             	add    esi,0xffffffff
c00059bb:	89 d8                	mov    eax,ebx
c00059bd:	83 d7 ff             	adc    edi,0xffffffff
c00059c0:	89 f2                	mov    edx,esi
c00059c2:	89 f9                	mov    ecx,edi
c00059c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00059c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00059cb:	e8 78 c2 ff ff       	call   c0001c48 <clmt_clust>
c00059d0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00059d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00059d7:	89 c2                	mov    edx,eax
c00059d9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059dd:	89 c8                	mov    eax,ecx
c00059df:	e8 43 c2 ff ff       	call   c0001c27 <clst2sect>
c00059e4:	89 d7                	mov    edi,edx
c00059e6:	09 c7                	or     edi,eax
c00059e8:	0f 84 0d ff ff ff    	je     c00058fb <f_lseek+0xbc>
c00059ee:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00059f2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00059f8:	0f 84 ec 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059fe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a06:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a09:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a0d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a11:	4d                   	dec    ebp
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	21 ee                	and    esi,ebp
c0005a16:	01 c6                	add    esi,eax
c0005a18:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a1b:	11 d7                	adc    edi,edx
c0005a1d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a20:	39 fa                	cmp    edx,edi
c0005a22:	75 08                	jne    c0005a2c <f_lseek+0x1ed>
c0005a24:	39 f0                	cmp    eax,esi
c0005a26:	0f 84 be 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c0005a2c:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005a2f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005a33:	0f 89 80 02 00 00    	jns    c0005cb9 <f_lseek+0x47a>
c0005a39:	83 ec 0c             	sub    esp,0xc
c0005a3c:	6a 01                	push   0x1
c0005a3e:	52                   	push   edx
c0005a3f:	50                   	push   eax
c0005a40:	55                   	push   ebp
c0005a41:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a45:	e9 5a 02 00 00       	jmp    c0005ca4 <f_lseek+0x465>
c0005a4a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a4e:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a51:	74 16                	je     c0005a69 <f_lseek+0x22a>
c0005a53:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a58:	76 0f                	jbe    c0005a69 <f_lseek+0x22a>
c0005a5a:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a61:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a69:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a6f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a72:	89 c7                	mov    edi,eax
c0005a74:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a78:	73 0d                	jae    c0005a87 <f_lseek+0x248>
c0005a7a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a7e:	75 07                	jne    c0005a87 <f_lseek+0x248>
c0005a80:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a87:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a8a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a8d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a91:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005a98:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005a9f:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005aa2:	75 09                	jne    c0005aad <f_lseek+0x26e>
c0005aa4:	31 f6                	xor    esi,esi
c0005aa6:	31 ff                	xor    edi,edi
c0005aa8:	e9 af 01 00 00       	jmp    c0005c5c <f_lseek+0x41d>
c0005aad:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005ab1:	89 d7                	mov    edi,edx
c0005ab3:	c1 e1 09             	shl    ecx,0x9
c0005ab6:	09 c7                	or     edi,eax
c0005ab8:	89 cd                	mov    ebp,ecx
c0005aba:	74 6d                	je     c0005b29 <f_lseek+0x2ea>
c0005abc:	83 c0 ff             	add    eax,0xffffffff
c0005abf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ac3:	83 d2 ff             	adc    edx,0xffffffff
c0005ac6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ac9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005acd:	83 c0 ff             	add    eax,0xffffffff
c0005ad0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ad4:	83 d2 ff             	adc    edx,0xffffffff
c0005ad7:	31 ff                	xor    edi,edi
c0005ad9:	57                   	push   edi
c0005ada:	51                   	push   ecx
c0005adb:	52                   	push   edx
c0005adc:	50                   	push   eax
c0005add:	e8 ea 85 01 00       	call   c001e0cc <__udivdi3>
c0005ae2:	83 c4 10             	add    esp,0x10
c0005ae5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005aed:	57                   	push   edi
c0005aee:	55                   	push   ebp
c0005aef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af7:	e8 d0 85 01 00       	call   c001e0cc <__udivdi3>
c0005afc:	83 c4 10             	add    esp,0x10
c0005aff:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b03:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b07:	19 d1                	sbb    ecx,edx
c0005b09:	72 1e                	jb     c0005b29 <f_lseek+0x2ea>
c0005b0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b0f:	89 e9                	mov    ecx,ebp
c0005b11:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b14:	f7 d9                	neg    ecx
c0005b16:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b19:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b1d:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b20:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b23:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b27:	eb 28                	jmp    c0005b51 <f_lseek+0x312>
c0005b29:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b2c:	85 c0                	test   eax,eax
c0005b2e:	75 1e                	jne    c0005b4e <f_lseek+0x30f>
c0005b30:	31 d2                	xor    edx,edx
c0005b32:	89 d8                	mov    eax,ebx
c0005b34:	e8 a9 d4 ff ff       	call   c0002fe2 <create_chain>
c0005b39:	83 f8 01             	cmp    eax,0x1
c0005b3c:	0f 84 b9 fd ff ff    	je     c00058fb <f_lseek+0xbc>
c0005b42:	83 f8 ff             	cmp    eax,0xffffffff
c0005b45:	0f 84 c6 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005b4b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b4e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b51:	85 c0                	test   eax,eax
c0005b53:	0f 84 4b ff ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005b59:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005b5d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005b65:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b68:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b6c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b6f:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b72:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b76:	0f 83 9d 00 00 00    	jae    c0005c19 <f_lseek+0x3da>
c0005b7c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b80:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b84:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b87:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b8b:	01 f2                	add    edx,esi
c0005b8d:	11 f9                	adc    ecx,edi
c0005b8f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005b93:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005b97:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005b9a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005b9d:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005ba0:	f6 c1 02             	test   cl,0x2
c0005ba3:	74 35                	je     c0005bda <f_lseek+0x39b>
c0005ba5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005ba9:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005bac:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005baf:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005bb3:	73 16                	jae    c0005bcb <f_lseek+0x38c>
c0005bb5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005bb9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005bbd:	88 ca                	mov    dl,cl
c0005bbf:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005bc2:	83 ca 40             	or     edx,0x40
c0005bc5:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005bc8:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005bcb:	89 c2                	mov    edx,eax
c0005bcd:	89 d8                	mov    eax,ebx
c0005bcf:	e8 0e d4 ff ff       	call   c0002fe2 <create_chain>
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	75 0b                	jne    c0005be3 <f_lseek+0x3a4>
c0005bd8:	eb 30                	jmp    c0005c0a <f_lseek+0x3cb>
c0005bda:	89 c2                	mov    edx,eax
c0005bdc:	89 d8                	mov    eax,ebx
c0005bde:	e8 11 d1 ff ff       	call   c0002cf4 <get_fat>
c0005be3:	83 f8 ff             	cmp    eax,0xffffffff
c0005be6:	0f 84 25 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005bec:	83 f8 01             	cmp    eax,0x1
c0005bef:	0f 86 06 fd ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005bf5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bf9:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bfc:	0f 86 f9 fc ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005c02:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c05:	e9 5b ff ff ff       	jmp    c0005b65 <f_lseek+0x326>
c0005c0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c19:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c1c:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c20:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c23:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c26:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c29:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c2f:	0f 84 6f fe ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005c35:	89 c2                	mov    edx,eax
c0005c37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c3b:	e8 e7 bf ff ff       	call   c0001c27 <clst2sect>
c0005c40:	89 d7                	mov    edi,edx
c0005c42:	09 c7                	or     edi,eax
c0005c44:	0f 84 b1 fc ff ff    	je     c00058fb <f_lseek+0xbc>
c0005c4a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c4e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c51:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c55:	c1 ef 09             	shr    edi,0x9
c0005c58:	01 c6                	add    esi,eax
c0005c5a:	11 d7                	adc    edi,edx
c0005c5c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c62:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c65:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c68:	19 d1                	sbb    ecx,edx
c0005c6a:	73 0a                	jae    c0005c76 <f_lseek+0x437>
c0005c6c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c6f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c72:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c76:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c7b:	74 6d                	je     c0005cea <f_lseek+0x4ab>
c0005c7d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c80:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c83:	39 fa                	cmp    edx,edi
c0005c85:	75 04                	jne    c0005c8b <f_lseek+0x44c>
c0005c87:	39 f0                	cmp    eax,esi
c0005c89:	74 5f                	je     c0005cea <f_lseek+0x4ab>
c0005c8b:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c8e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c92:	79 25                	jns    c0005cb9 <f_lseek+0x47a>
c0005c94:	83 ec 0c             	sub    esp,0xc
c0005c97:	6a 01                	push   0x1
c0005c99:	52                   	push   edx
c0005c9a:	50                   	push   eax
c0005c9b:	55                   	push   ebp
c0005c9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ca0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005ca4:	50                   	push   eax
c0005ca5:	e8 af bc ff ff       	call   c0001959 <disk_write>
c0005caa:	83 c4 20             	add    esp,0x20
c0005cad:	85 c0                	test   eax,eax
c0005caf:	0f 85 5c fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cb5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005cb9:	83 ec 0c             	sub    esp,0xc
c0005cbc:	6a 01                	push   0x1
c0005cbe:	57                   	push   edi
c0005cbf:	56                   	push   esi
c0005cc0:	55                   	push   ebp
c0005cc1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cc5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cc9:	50                   	push   eax
c0005cca:	e8 74 bc ff ff       	call   c0001943 <disk_read>
c0005ccf:	83 c4 20             	add    esp,0x20
c0005cd2:	85 c0                	test   eax,eax
c0005cd4:	0f 85 37 fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cda:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005cdd:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ce0:	eb 08                	jmp    c0005cea <f_lseek+0x4ab>
c0005ce2:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005cea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005cee:	83 c4 3c             	add    esp,0x3c
c0005cf1:	5b                   	pop    ebx
c0005cf2:	5e                   	pop    esi
c0005cf3:	5f                   	pop    edi
c0005cf4:	5d                   	pop    ebp
c0005cf5:	c3                   	ret    

c0005cf6 <f_opendir>:
c0005cf6:	56                   	push   esi
c0005cf7:	b8 09 00 00 00       	mov    eax,0x9
c0005cfc:	53                   	push   ebx
c0005cfd:	83 ec 24             	sub    esp,0x24
c0005d00:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d04:	85 db                	test   ebx,ebx
c0005d06:	0f 84 e6 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d0c:	31 c9                	xor    ecx,ecx
c0005d0e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d12:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d16:	e8 03 c7 ff ff       	call   c000241e <mount_volume>
c0005d1b:	85 c0                	test   eax,eax
c0005d1d:	0f 85 c9 00 00 00    	jne    c0005dec <f_opendir+0xf6>
c0005d23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d27:	83 ec 0c             	sub    esp,0xc
c0005d2a:	89 03                	mov    DWORD PTR [ebx],eax
c0005d2c:	68 60 04 00 00       	push   0x460
c0005d31:	e8 8b 24 00 00       	call   c00081c1 <ff_memalloc>
c0005d36:	83 c4 10             	add    esp,0x10
c0005d39:	89 c6                	mov    esi,eax
c0005d3b:	b8 11 00 00 00       	mov    eax,0x11
c0005d40:	85 f6                	test   esi,esi
c0005d42:	0f 84 aa 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d4c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d52:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005d55:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005d58:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005d5c:	89 d8                	mov    eax,ebx
c0005d5e:	e8 31 ee ff ff       	call   c0004b94 <follow_path>
c0005d63:	85 c0                	test   eax,eax
c0005d65:	75 61                	jne    c0005dc8 <f_opendir+0xd2>
c0005d67:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d6b:	78 46                	js     c0005db3 <f_opendir+0xbd>
c0005d6d:	b8 05 00 00 00       	mov    eax,0x5
c0005d72:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d76:	74 50                	je     c0005dc8 <f_opendir+0xd2>
c0005d78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d7c:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d7e:	3c 04                	cmp    al,0x4
c0005d80:	75 26                	jne    c0005da8 <f_opendir+0xb2>
c0005d82:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d85:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d88:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d8b:	30 d2                	xor    dl,dl
c0005d8d:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d91:	09 c2                	or     edx,eax
c0005d93:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005d96:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005d99:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005d9c:	89 da                	mov    edx,ebx
c0005d9e:	8d 41 10             	lea    eax,[ecx+0x10]
c0005da1:	e8 b4 ed ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0005da6:	eb 0b                	jmp    c0005db3 <f_opendir+0xbd>
c0005da8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005dab:	e8 59 ed ff ff       	call   c0004b09 <ld_clust.isra.0>
c0005db0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005db3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005db7:	31 d2                	xor    edx,edx
c0005db9:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005dbd:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005dc1:	89 d8                	mov    eax,ebx
c0005dc3:	e8 22 d1 ff ff       	call   c0002eea <dir_sdi>
c0005dc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dcc:	83 ec 0c             	sub    esp,0xc
c0005dcf:	56                   	push   esi
c0005dd0:	e8 02 24 00 00       	call   c00081d7 <ff_memfree>
c0005dd5:	83 c4 10             	add    esp,0x10
c0005dd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ddc:	83 f8 04             	cmp    eax,0x4
c0005ddf:	74 06                	je     c0005de7 <f_opendir+0xf1>
c0005de1:	85 c0                	test   eax,eax
c0005de3:	74 0d                	je     c0005df2 <f_opendir+0xfc>
c0005de5:	eb 05                	jmp    c0005dec <f_opendir+0xf6>
c0005de7:	b8 05 00 00 00       	mov    eax,0x5
c0005dec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005df2:	83 c4 24             	add    esp,0x24
c0005df5:	5b                   	pop    ebx
c0005df6:	5e                   	pop    esi
c0005df7:	c3                   	ret    

c0005df8 <f_closedir>:
c0005df8:	53                   	push   ebx
c0005df9:	83 ec 18             	sub    esp,0x18
c0005dfc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e04:	89 d8                	mov    eax,ebx
c0005e06:	e8 86 c2 ff ff       	call   c0002091 <validate>
c0005e0b:	85 c0                	test   eax,eax
c0005e0d:	75 06                	jne    c0005e15 <f_closedir+0x1d>
c0005e0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e15:	83 c4 18             	add    esp,0x18
c0005e18:	5b                   	pop    ebx
c0005e19:	c3                   	ret    

c0005e1a <f_readdir>:
c0005e1a:	57                   	push   edi
c0005e1b:	56                   	push   esi
c0005e1c:	53                   	push   ebx
c0005e1d:	83 ec 20             	sub    esp,0x20
c0005e20:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e24:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e28:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e2c:	89 d8                	mov    eax,ebx
c0005e2e:	e8 5e c2 ff ff       	call   c0002091 <validate>
c0005e33:	85 c0                	test   eax,eax
c0005e35:	75 77                	jne    c0005eae <f_readdir+0x94>
c0005e37:	85 ff                	test   edi,edi
c0005e39:	75 0b                	jne    c0005e46 <f_readdir+0x2c>
c0005e3b:	31 d2                	xor    edx,edx
c0005e3d:	89 d8                	mov    eax,ebx
c0005e3f:	e8 a6 d0 ff ff       	call   c0002eea <dir_sdi>
c0005e44:	eb 68                	jmp    c0005eae <f_readdir+0x94>
c0005e46:	83 ec 0c             	sub    esp,0xc
c0005e49:	68 60 04 00 00       	push   0x460
c0005e4e:	e8 6e 23 00 00       	call   c00081c1 <ff_memalloc>
c0005e53:	83 c4 10             	add    esp,0x10
c0005e56:	89 c6                	mov    esi,eax
c0005e58:	b8 11 00 00 00       	mov    eax,0x11
c0005e5d:	85 f6                	test   esi,esi
c0005e5f:	74 4d                	je     c0005eae <f_readdir+0x94>
c0005e61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e65:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e6b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e71:	31 d2                	xor    edx,edx
c0005e73:	89 d8                	mov    eax,ebx
c0005e75:	e8 80 d8 ff ff       	call   c00036fa <dir_read>
c0005e7a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e7f:	75 19                	jne    c0005e9a <f_readdir+0x80>
c0005e81:	89 fa                	mov    edx,edi
c0005e83:	89 d8                	mov    eax,ebx
c0005e85:	e8 7e ea ff ff       	call   c0004908 <get_fileinfo>
c0005e8a:	31 d2                	xor    edx,edx
c0005e8c:	89 d8                	mov    eax,ebx
c0005e8e:	e8 af d5 ff ff       	call   c0003442 <dir_next>
c0005e93:	83 f8 04             	cmp    eax,0x4
c0005e96:	75 02                	jne    c0005e9a <f_readdir+0x80>
c0005e98:	31 c0                	xor    eax,eax
c0005e9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e9e:	83 ec 0c             	sub    esp,0xc
c0005ea1:	56                   	push   esi
c0005ea2:	e8 30 23 00 00       	call   c00081d7 <ff_memfree>
c0005ea7:	83 c4 10             	add    esp,0x10
c0005eaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eae:	83 c4 20             	add    esp,0x20
c0005eb1:	5b                   	pop    ebx
c0005eb2:	5e                   	pop    esi
c0005eb3:	5f                   	pop    edi
c0005eb4:	c3                   	ret    

c0005eb5 <f_stat>:
c0005eb5:	57                   	push   edi
c0005eb6:	31 c9                	xor    ecx,ecx
c0005eb8:	56                   	push   esi
c0005eb9:	53                   	push   ebx
c0005eba:	83 ec 50             	sub    esp,0x50
c0005ebd:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005ec1:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005ec5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005ec9:	e8 50 c5 ff ff       	call   c000241e <mount_volume>
c0005ece:	89 c3                	mov    ebx,eax
c0005ed0:	85 c0                	test   eax,eax
c0005ed2:	75 67                	jne    c0005f3b <f_stat+0x86>
c0005ed4:	83 ec 0c             	sub    esp,0xc
c0005ed7:	bb 11 00 00 00       	mov    ebx,0x11
c0005edc:	68 60 04 00 00       	push   0x460
c0005ee1:	e8 db 22 00 00       	call   c00081c1 <ff_memalloc>
c0005ee6:	83 c4 10             	add    esp,0x10
c0005ee9:	89 c6                	mov    esi,eax
c0005eeb:	85 c0                	test   eax,eax
c0005eed:	74 4c                	je     c0005f3b <f_stat+0x86>
c0005eef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ef3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ef9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005efc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005eff:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f03:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f07:	e8 88 ec ff ff       	call   c0004b94 <follow_path>
c0005f0c:	89 c3                	mov    ebx,eax
c0005f0e:	85 c0                	test   eax,eax
c0005f10:	75 1d                	jne    c0005f2f <f_stat+0x7a>
c0005f12:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f17:	78 11                	js     c0005f2a <f_stat+0x75>
c0005f19:	85 ff                	test   edi,edi
c0005f1b:	74 12                	je     c0005f2f <f_stat+0x7a>
c0005f1d:	89 fa                	mov    edx,edi
c0005f1f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f23:	e8 e0 e9 ff ff       	call   c0004908 <get_fileinfo>
c0005f28:	eb 05                	jmp    c0005f2f <f_stat+0x7a>
c0005f2a:	bb 06 00 00 00       	mov    ebx,0x6
c0005f2f:	83 ec 0c             	sub    esp,0xc
c0005f32:	56                   	push   esi
c0005f33:	e8 9f 22 00 00       	call   c00081d7 <ff_memfree>
c0005f38:	83 c4 10             	add    esp,0x10
c0005f3b:	83 c4 50             	add    esp,0x50
c0005f3e:	89 d8                	mov    eax,ebx
c0005f40:	5b                   	pop    ebx
c0005f41:	5e                   	pop    esi
c0005f42:	5f                   	pop    edi
c0005f43:	c3                   	ret    

c0005f44 <f_getfree>:
c0005f44:	55                   	push   ebp
c0005f45:	31 c9                	xor    ecx,ecx
c0005f47:	57                   	push   edi
c0005f48:	56                   	push   esi
c0005f49:	53                   	push   ebx
c0005f4a:	83 ec 5c             	sub    esp,0x5c
c0005f4d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f51:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005f55:	e8 c4 c4 ff ff       	call   c000241e <mount_volume>
c0005f5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5e:	85 c0                	test   eax,eax
c0005f60:	0f 85 9d 01 00 00    	jne    c0006103 <f_getfree+0x1bf>
c0005f66:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f6a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f6e:	89 02                	mov    DWORD PTR [edx],eax
c0005f70:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005f73:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f76:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005f79:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005f7d:	39 f2                	cmp    edx,esi
c0005f7f:	77 0b                	ja     c0005f8c <f_getfree+0x48>
c0005f81:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f85:	89 10                	mov    DWORD PTR [eax],edx
c0005f87:	e9 77 01 00 00       	jmp    c0006103 <f_getfree+0x1bf>
c0005f8c:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f8e:	80 fa 01             	cmp    dl,0x1
c0005f91:	75 3a                	jne    c0005fcd <f_getfree+0x89>
c0005f93:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005f97:	be 02 00 00 00       	mov    esi,0x2
c0005f9c:	31 db                	xor    ebx,ebx
c0005f9e:	89 f2                	mov    edx,esi
c0005fa0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fa4:	e8 4b cd ff ff       	call   c0002cf4 <get_fat>
c0005fa9:	83 f8 ff             	cmp    eax,0xffffffff
c0005fac:	0f 84 28 01 00 00    	je     c00060da <f_getfree+0x196>
c0005fb2:	83 f8 01             	cmp    eax,0x1
c0005fb5:	0f 84 29 01 00 00    	je     c00060e4 <f_getfree+0x1a0>
c0005fbb:	83 d3 00             	adc    ebx,0x0
c0005fbe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fc2:	46                   	inc    esi
c0005fc3:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005fc6:	77 d6                	ja     c0005f9e <f_getfree+0x5a>
c0005fc8:	e9 25 01 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c0005fcd:	80 fa 04             	cmp    dl,0x4
c0005fd0:	0f 85 88 00 00 00    	jne    c000605e <f_getfree+0x11a>
c0005fd6:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005fd9:	31 ed                	xor    ebp,ebp
c0005fdb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005fde:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005fe2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005fe6:	31 db                	xor    ebx,ebx
c0005fe8:	85 ed                	test   ebp,ebp
c0005fea:	75 3f                	jne    c000602b <f_getfree+0xe7>
c0005fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ff0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ff4:	83 c0 01             	add    eax,0x1
c0005ff7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005ffb:	83 d2 00             	adc    edx,0x0
c0005ffe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006002:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006006:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000600a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000600e:	e8 59 c1 ff ff       	call   c000216c <move_window>
c0006013:	85 c0                	test   eax,eax
c0006015:	0f 85 d3 00 00 00    	jne    c00060ee <f_getfree+0x1aa>
c000601b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000601f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006023:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006027:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000602b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000602f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006032:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006036:	89 cf                	mov    edi,ecx
c0006038:	85 f6                	test   esi,esi
c000603a:	74 12                	je     c000604e <f_getfree+0x10a>
c000603c:	88 c1                	mov    cl,al
c000603e:	83 e1 01             	and    ecx,0x1
c0006041:	80 f9 01             	cmp    cl,0x1
c0006044:	83 d3 00             	adc    ebx,0x0
c0006047:	d0 e8                	shr    al,1
c0006049:	4e                   	dec    esi
c000604a:	39 fe                	cmp    esi,edi
c000604c:	75 ea                	jne    c0006038 <f_getfree+0xf4>
c000604e:	45                   	inc    ebp
c000604f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006055:	85 f6                	test   esi,esi
c0006057:	75 8f                	jne    c0005fe8 <f_getfree+0xa4>
c0006059:	e9 94 00 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c000605e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006061:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006064:	31 f6                	xor    esi,esi
c0006066:	31 db                	xor    ebx,ebx
c0006068:	85 f6                	test   esi,esi
c000606a:	75 1b                	jne    c0006087 <f_getfree+0x143>
c000606c:	89 d7                	mov    edi,edx
c000606e:	89 cd                	mov    ebp,ecx
c0006070:	83 c7 01             	add    edi,0x1
c0006073:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006077:	83 d5 00             	adc    ebp,0x0
c000607a:	e8 ed c0 ff ff       	call   c000216c <move_window>
c000607f:	85 c0                	test   eax,eax
c0006081:	75 6b                	jne    c00060ee <f_getfree+0x1aa>
c0006083:	89 fa                	mov    edx,edi
c0006085:	89 e9                	mov    ecx,ebp
c0006087:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000608f:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006093:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006096:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000609a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000609e:	75 11                	jne    c00060b1 <f_getfree+0x16d>
c00060a0:	e8 e9 b8 ff ff       	call   c000198e <ld_word>
c00060a5:	66 83 f8 01          	cmp    ax,0x1
c00060a9:	83 d3 00             	adc    ebx,0x0
c00060ac:	83 c6 02             	add    esi,0x2
c00060af:	eb 13                	jmp    c00060c4 <f_getfree+0x180>
c00060b1:	e8 e5 b8 ff ff       	call   c000199b <ld_dword>
c00060b6:	25 ff ff ff 0f       	and    eax,0xfffffff
c00060bb:	83 f8 01             	cmp    eax,0x1
c00060be:	83 d3 00             	adc    ebx,0x0
c00060c1:	83 c6 04             	add    esi,0x4
c00060c4:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00060ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00060ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00060d2:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00060d6:	75 90                	jne    c0006068 <f_getfree+0x124>
c00060d8:	eb 18                	jmp    c00060f2 <f_getfree+0x1ae>
c00060da:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00060e2:	eb 0e                	jmp    c00060f2 <f_getfree+0x1ae>
c00060e4:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00060ec:	eb 04                	jmp    c00060f2 <f_getfree+0x1ae>
c00060ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060f2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060f6:	89 18                	mov    DWORD PTR [eax],ebx
c00060f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fc:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00060ff:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006103:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006107:	83 c4 5c             	add    esp,0x5c
c000610a:	5b                   	pop    ebx
c000610b:	5e                   	pop    esi
c000610c:	5f                   	pop    edi
c000610d:	5d                   	pop    ebp
c000610e:	c3                   	ret    

c000610f <f_truncate>:
c000610f:	56                   	push   esi
c0006110:	53                   	push   ebx
c0006111:	83 ec 14             	sub    esp,0x14
c0006114:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006118:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 6e bf ff ff       	call   c0002091 <validate>
c0006123:	89 c6                	mov    esi,eax
c0006125:	85 c0                	test   eax,eax
c0006127:	0f 85 d2 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c000612d:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006131:	85 f6                	test   esi,esi
c0006133:	0f 85 c6 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c0006139:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000613d:	0f 84 b7 00 00 00    	je     c00061fa <f_truncate+0xeb>
c0006143:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006146:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006149:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000614c:	89 d1                	mov    ecx,edx
c000614e:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006151:	0f 83 a8 00 00 00    	jae    c00061ff <f_truncate+0xf0>
c0006157:	09 c2                	or     edx,eax
c0006159:	75 15                	jne    c0006170 <f_truncate+0x61>
c000615b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000615e:	31 c9                	xor    ecx,ecx
c0006160:	89 d8                	mov    eax,ebx
c0006162:	e8 7a d0 ff ff       	call   c00031e1 <remove_chain>
c0006167:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000616e:	eb 35                	jmp    c00061a5 <f_truncate+0x96>
c0006170:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006173:	89 d8                	mov    eax,ebx
c0006175:	e8 7a cb ff ff       	call   c0002cf4 <get_fat>
c000617a:	89 c2                	mov    edx,eax
c000617c:	b8 01 00 00 00       	mov    eax,0x1
c0006181:	83 fa ff             	cmp    edx,0xffffffff
c0006184:	74 1f                	je     c00061a5 <f_truncate+0x96>
c0006186:	b8 02 00 00 00       	mov    eax,0x2
c000618b:	83 fa 01             	cmp    edx,0x1
c000618e:	74 15                	je     c00061a5 <f_truncate+0x96>
c0006190:	31 c0                	xor    eax,eax
c0006192:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006196:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006199:	76 0a                	jbe    c00061a5 <f_truncate+0x96>
c000619b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000619e:	89 d8                	mov    eax,ebx
c00061a0:	e8 3c d0 ff ff       	call   c00031e1 <remove_chain>
c00061a5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00061a8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00061ab:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00061ae:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00061b1:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00061b4:	83 ca 40             	or     edx,0x40
c00061b7:	85 c0                	test   eax,eax
c00061b9:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00061bc:	75 35                	jne    c00061f3 <f_truncate+0xe4>
c00061be:	84 d2                	test   dl,dl
c00061c0:	79 3d                	jns    c00061ff <f_truncate+0xf0>
c00061c2:	83 ec 0c             	sub    esp,0xc
c00061c5:	8d 43 50             	lea    eax,[ebx+0x50]
c00061c8:	6a 01                	push   0x1
c00061ca:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00061cd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00061d0:	50                   	push   eax
c00061d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00061d5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00061d9:	50                   	push   eax
c00061da:	e8 7a b7 ff ff       	call   c0001959 <disk_write>
c00061df:	83 c4 20             	add    esp,0x20
c00061e2:	85 c0                	test   eax,eax
c00061e4:	75 08                	jne    c00061ee <f_truncate+0xdf>
c00061e6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061ea:	31 f6                	xor    esi,esi
c00061ec:	eb 11                	jmp    c00061ff <f_truncate+0xf0>
c00061ee:	b8 01 00 00 00       	mov    eax,0x1
c00061f3:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00061f6:	89 c6                	mov    esi,eax
c00061f8:	eb 05                	jmp    c00061ff <f_truncate+0xf0>
c00061fa:	be 07 00 00 00       	mov    esi,0x7
c00061ff:	89 f0                	mov    eax,esi
c0006201:	83 c4 14             	add    esp,0x14
c0006204:	5b                   	pop    ebx
c0006205:	5e                   	pop    esi
c0006206:	c3                   	ret    

c0006207 <f_unlink>:
c0006207:	56                   	push   esi
c0006208:	b9 02 00 00 00       	mov    ecx,0x2
c000620d:	53                   	push   ebx
c000620e:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006214:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006218:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000621f:	e8 fa c1 ff ff       	call   c000241e <mount_volume>
c0006224:	85 c0                	test   eax,eax
c0006226:	0f 85 55 01 00 00    	jne    c0006381 <f_unlink+0x17a>
c000622c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006230:	83 ec 0c             	sub    esp,0xc
c0006233:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006237:	68 60 04 00 00       	push   0x460
c000623c:	e8 80 1f 00 00       	call   c00081c1 <ff_memalloc>
c0006241:	83 c4 10             	add    esp,0x10
c0006244:	89 c3                	mov    ebx,eax
c0006246:	b8 11 00 00 00       	mov    eax,0x11
c000624b:	85 db                	test   ebx,ebx
c000624d:	0f 84 2e 01 00 00    	je     c0006381 <f_unlink+0x17a>
c0006253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006257:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000625d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006260:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006263:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000626a:	8d 44 24 48          	lea    eax,[esp+0x48]
c000626e:	e8 21 e9 ff ff       	call   c0004b94 <follow_path>
c0006273:	85 c0                	test   eax,eax
c0006275:	0f 85 f2 00 00 00    	jne    c000636d <f_unlink+0x166>
c000627b:	b8 06 00 00 00       	mov    eax,0x6
c0006280:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006288:	0f 88 df 00 00 00    	js     c000636d <f_unlink+0x166>
c000628e:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006293:	74 0a                	je     c000629f <f_unlink+0x98>
c0006295:	b8 07 00 00 00       	mov    eax,0x7
c000629a:	e9 ce 00 00 00       	jmp    c000636d <f_unlink+0x166>
c000629f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00062a7:	8a 02                	mov    al,BYTE PTR [edx]
c00062a9:	3c 04                	cmp    al,0x4
c00062ab:	75 12                	jne    c00062bf <f_unlink+0xb8>
c00062ad:	8d 42 10             	lea    eax,[edx+0x10]
c00062b0:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062b4:	e8 a1 e8 ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c00062b9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00062bd:	eb 0e                	jmp    c00062cd <f_unlink+0xc6>
c00062bf:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00062c6:	e8 3e e8 ff ff       	call   c0004b09 <ld_clust.isra.0>
c00062cb:	89 c6                	mov    esi,eax
c00062cd:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00062d2:	75 12                	jne    c00062e6 <f_unlink+0xdf>
c00062d4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062d8:	e8 94 d6 ff ff       	call   c0003971 <dir_remove>
c00062dd:	85 c0                	test   eax,eax
c00062df:	74 6c                	je     c000634d <f_unlink+0x146>
c00062e1:	e9 87 00 00 00       	jmp    c000636d <f_unlink+0x166>
c00062e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ea:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062f1:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00062f8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00062fb:	75 21                	jne    c000631e <f_unlink+0x117>
c00062fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006301:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006305:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000630c:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006313:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006317:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000631e:	31 d2                	xor    edx,edx
c0006320:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006327:	e8 be cb ff ff       	call   c0002eea <dir_sdi>
c000632c:	85 c0                	test   eax,eax
c000632e:	75 3d                	jne    c000636d <f_unlink+0x166>
c0006330:	31 d2                	xor    edx,edx
c0006332:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006339:	e8 bc d3 ff ff       	call   c00036fa <dir_read>
c000633e:	85 c0                	test   eax,eax
c0006340:	0f 84 4f ff ff ff    	je     c0006295 <f_unlink+0x8e>
c0006346:	83 f8 04             	cmp    eax,0x4
c0006349:	75 22                	jne    c000636d <f_unlink+0x166>
c000634b:	eb 87                	jmp    c00062d4 <f_unlink+0xcd>
c000634d:	85 f6                	test   esi,esi
c000634f:	75 0b                	jne    c000635c <f_unlink+0x155>
c0006351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006355:	e8 3d df ff ff       	call   c0004297 <sync_fs>
c000635a:	eb 11                	jmp    c000636d <f_unlink+0x166>
c000635c:	31 c9                	xor    ecx,ecx
c000635e:	89 f2                	mov    edx,esi
c0006360:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006364:	e8 78 ce ff ff       	call   c00031e1 <remove_chain>
c0006369:	85 c0                	test   eax,eax
c000636b:	74 e4                	je     c0006351 <f_unlink+0x14a>
c000636d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006371:	83 ec 0c             	sub    esp,0xc
c0006374:	53                   	push   ebx
c0006375:	e8 5d 1e 00 00       	call   c00081d7 <ff_memfree>
c000637a:	83 c4 10             	add    esp,0x10
c000637d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006381:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006387:	5b                   	pop    ebx
c0006388:	5e                   	pop    esi
c0006389:	c3                   	ret    

c000638a <f_mkdir>:
c000638a:	57                   	push   edi
c000638b:	b9 02 00 00 00       	mov    ecx,0x2
c0006390:	56                   	push   esi
c0006391:	53                   	push   ebx
c0006392:	83 c4 80             	add    esp,0xffffff80
c0006395:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006399:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c00063a0:	e8 79 c0 ff ff       	call   c000241e <mount_volume>
c00063a5:	89 c3                	mov    ebx,eax
c00063a7:	85 c0                	test   eax,eax
c00063a9:	0f 85 fe 01 00 00    	jne    c00065ad <f_mkdir+0x223>
c00063af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063b3:	bb 11 00 00 00       	mov    ebx,0x11
c00063b8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00063bc:	83 ec 0c             	sub    esp,0xc
c00063bf:	68 60 04 00 00       	push   0x460
c00063c4:	e8 f8 1d 00 00       	call   c00081c1 <ff_memalloc>
c00063c9:	83 c4 10             	add    esp,0x10
c00063cc:	89 c7                	mov    edi,eax
c00063ce:	85 c0                	test   eax,eax
c00063d0:	0f 84 d7 01 00 00    	je     c00065ad <f_mkdir+0x223>
c00063d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063da:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00063e0:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00063e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00063e6:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063ed:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063f1:	e8 9e e7 ff ff       	call   c0004b94 <follow_path>
c00063f6:	89 c3                	mov    ebx,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	74 3e                	je     c000643a <f_mkdir+0xb0>
c00063fc:	83 f8 04             	cmp    eax,0x4
c00063ff:	75 3e                	jne    c000643f <f_mkdir+0xb5>
c0006401:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006405:	31 d2                	xor    edx,edx
c0006407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000640b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000640f:	e8 ce cb ff ff       	call   c0002fe2 <create_chain>
c0006414:	89 c6                	mov    esi,eax
c0006416:	85 c0                	test   eax,eax
c0006418:	74 0c                	je     c0006426 <f_mkdir+0x9c>
c000641a:	bb 02 00 00 00       	mov    ebx,0x2
c000641f:	83 f8 01             	cmp    eax,0x1
c0006422:	74 07                	je     c000642b <f_mkdir+0xa1>
c0006424:	eb 2a                	jmp    c0006450 <f_mkdir+0xc6>
c0006426:	bb 07 00 00 00       	mov    ebx,0x7
c000642b:	31 c9                	xor    ecx,ecx
c000642d:	89 f2                	mov    edx,esi
c000642f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006433:	e8 a9 cd ff ff       	call   c00031e1 <remove_chain>
c0006438:	eb 05                	jmp    c000643f <f_mkdir+0xb5>
c000643a:	bb 08 00 00 00       	mov    ebx,0x8
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	57                   	push   edi
c0006443:	e8 8f 1d 00 00       	call   c00081d7 <ff_memfree>
c0006448:	83 c4 10             	add    esp,0x10
c000644b:	e9 5d 01 00 00       	jmp    c00065ad <f_mkdir+0x223>
c0006450:	bb 01 00 00 00       	mov    ebx,0x1
c0006455:	83 f8 ff             	cmp    eax,0xffffffff
c0006458:	74 d1                	je     c000642b <f_mkdir+0xa1>
c000645a:	89 f2                	mov    edx,esi
c000645c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006460:	e8 c4 ce ff ff       	call   c0003329 <dir_clear>
c0006465:	89 c3                	mov    ebx,eax
c0006467:	85 c0                	test   eax,eax
c0006469:	75 c0                	jne    c000642b <f_mkdir+0xa1>
c000646b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006472:	74 69                	je     c00064dd <f_mkdir+0x153>
c0006474:	b9 0b 00 00 00       	mov    ecx,0xb
c0006479:	83 c0 54             	add    eax,0x54
c000647c:	ba 20 00 00 00       	mov    edx,0x20
c0006481:	e8 9c b5 ff ff       	call   c0001a22 <mem_set>
c0006486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000648a:	ba 00 00 21 50       	mov    edx,0x50210000
c000648f:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006493:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006497:	83 c0 6a             	add    eax,0x6a
c000649a:	e8 65 b5 ff ff       	call   c0001a04 <st_dword>
c000649f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064a3:	89 f1                	mov    ecx,esi
c00064a5:	8d 50 54             	lea    edx,[eax+0x54]
c00064a8:	e8 85 e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b1:	b9 20 00 00 00       	mov    ecx,0x20
c00064b6:	8d 50 54             	lea    edx,[eax+0x54]
c00064b9:	83 c0 74             	add    eax,0x74
c00064bc:	e8 4c b5 ff ff       	call   c0001a0d <mem_cpy>
c00064c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00064c9:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00064cd:	8d 50 74             	lea    edx,[eax+0x74]
c00064d0:	e8 5d e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00064dd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064e1:	e8 2f db ff ff       	call   c0004015 <dir_register>
c00064e6:	89 c3                	mov    ebx,eax
c00064e8:	85 c0                	test   eax,eax
c00064ea:	0f 85 3b ff ff ff    	jne    c000642b <f_mkdir+0xa1>
c00064f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f7:	75 74                	jne    c000656d <f_mkdir+0x1e3>
c00064f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064fc:	ba 00 00 21 50       	mov    edx,0x50210000
c0006501:	83 c0 0c             	add    eax,0xc
c0006504:	e8 fb b4 ff ff       	call   c0001a04 <st_dword>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	89 f2                	mov    edx,esi
c000650f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006512:	83 c0 34             	add    eax,0x34
c0006515:	e8 ea b4 ff ff       	call   c0001a04 <st_dword>
c000651a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651e:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006522:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006525:	c1 e2 09             	shl    edx,0x9
c0006528:	83 c0 38             	add    eax,0x38
c000652b:	e8 d4 b4 ff ff       	call   c0001a04 <st_dword>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006538:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000653b:	c1 e2 09             	shl    edx,0x9
c000653e:	83 c0 28             	add    eax,0x28
c0006541:	e8 be b4 ff ff       	call   c0001a04 <st_dword>
c0006546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000654d:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006551:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006554:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006558:	8d 44 24 34          	lea    eax,[esp+0x34]
c000655c:	e8 8b d3 ff ff       	call   c00038ec <store_xdir>
c0006561:	89 c3                	mov    ebx,eax
c0006563:	85 c0                	test   eax,eax
c0006565:	0f 85 d4 fe ff ff    	jne    c000643f <f_mkdir+0xb5>
c000656b:	eb 30                	jmp    c000659d <f_mkdir+0x213>
c000656d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006571:	ba 00 00 21 50       	mov    edx,0x50210000
c0006576:	83 c0 16             	add    eax,0x16
c0006579:	e8 86 b4 ff ff       	call   c0001a04 <st_dword>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	89 f1                	mov    ecx,esi
c0006584:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006588:	e8 a5 e5 ff ff       	call   c0004b32 <st_clust.isra.1>
c000658d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006591:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006595:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006599:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	e8 f1 dc ff ff       	call   c0004297 <sync_fs>
c00065a6:	89 c3                	mov    ebx,eax
c00065a8:	e9 92 fe ff ff       	jmp    c000643f <f_mkdir+0xb5>
c00065ad:	83 ec 80             	sub    esp,0xffffff80
c00065b0:	89 d8                	mov    eax,ebx
c00065b2:	5b                   	pop    ebx
c00065b3:	5e                   	pop    esi
c00065b4:	5f                   	pop    edi
c00065b5:	c3                   	ret    

c00065b6 <f_rename>:
c00065b6:	55                   	push   ebp
c00065b7:	57                   	push   edi
c00065b8:	56                   	push   esi
c00065b9:	53                   	push   ebx
c00065ba:	81 ec fc 00 00 00    	sub    esp,0xfc
c00065c0:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00065c7:	e8 a4 b9 ff ff       	call   c0001f70 <get_ldnumber>
c00065cc:	b9 02 00 00 00       	mov    ecx,0x2
c00065d1:	8d 54 24 14          	lea    edx,[esp+0x14]
c00065d5:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00065dc:	e8 3d be ff ff       	call   c000241e <mount_volume>
c00065e1:	85 c0                	test   eax,eax
c00065e3:	0f 85 b5 02 00 00    	jne    c000689e <f_rename+0x2e8>
c00065e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065ed:	83 ec 0c             	sub    esp,0xc
c00065f0:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00065f4:	68 60 04 00 00       	push   0x460
c00065f9:	e8 c3 1b 00 00       	call   c00081c1 <ff_memalloc>
c00065fe:	83 c4 10             	add    esp,0x10
c0006601:	89 c3                	mov    ebx,eax
c0006603:	b8 11 00 00 00       	mov    eax,0x11
c0006608:	85 db                	test   ebx,ebx
c000660a:	0f 84 8e 02 00 00    	je     c000689e <f_rename+0x2e8>
c0006610:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006614:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000661a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000661d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006620:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006627:	8d 44 24 58          	lea    eax,[esp+0x58]
c000662b:	e8 64 e5 ff ff       	call   c0004b94 <follow_path>
c0006630:	85 c0                	test   eax,eax
c0006632:	0f 85 52 02 00 00    	jne    c000688a <f_rename+0x2d4>
c0006638:	b8 06 00 00 00       	mov    eax,0x6
c000663d:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006645:	0f 85 3f 02 00 00    	jne    c000688a <f_rename+0x2d4>
c000664b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000664f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006652:	0f 85 05 01 00 00    	jne    c000675d <f_rename+0x1a7>
c0006658:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000665b:	b9 40 00 00 00       	mov    ecx,0x40
c0006660:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006664:	e8 a4 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006669:	b9 4c 00 00 00       	mov    ecx,0x4c
c000666e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006672:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006679:	e8 8f b3 ff ff       	call   c0001a0d <mem_cpy>
c000667e:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006685:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000668c:	e8 03 e5 ff ff       	call   c0004b94 <follow_path>
c0006691:	85 c0                	test   eax,eax
c0006693:	75 29                	jne    c00066be <f_rename+0x108>
c0006695:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006699:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00066a0:	74 0a                	je     c00066ac <f_rename+0xf6>
c00066a2:	b8 08 00 00 00       	mov    eax,0x8
c00066a7:	e9 de 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c00066ac:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00066b3:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00066ba:	75 e6                	jne    c00066a2 <f_rename+0xec>
c00066bc:	eb 09                	jmp    c00066c7 <f_rename+0x111>
c00066be:	83 f8 04             	cmp    eax,0x4
c00066c1:	0f 85 c3 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ce:	e8 42 d9 ff ff       	call   c0004015 <dir_register>
c00066d3:	85 c0                	test   eax,eax
c00066d5:	0f 85 af 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066df:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00066e2:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00066e5:	89 c5                	mov    ebp,eax
c00066e7:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066ea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066ee:	8d 46 24             	lea    eax,[esi+0x24]
c00066f1:	e8 98 b2 ff ff       	call   c000198e <ld_word>
c00066f6:	b9 40 00 00 00       	mov    ecx,0x40
c00066fb:	89 c7                	mov    edi,eax
c00066fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006701:	89 f0                	mov    eax,esi
c0006703:	e8 05 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006708:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670c:	89 e9                	mov    ecx,ebp
c000670e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006711:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006714:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000671c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671f:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006722:	0f b7 d7             	movzx  edx,di
c0006725:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006728:	83 c0 24             	add    eax,0x24
c000672b:	e8 d0 b2 ff ff       	call   c0001a00 <st_word>
c0006730:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006734:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006737:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000673a:	a8 10                	test   al,0x10
c000673c:	75 06                	jne    c0006744 <f_rename+0x18e>
c000673e:	83 c8 20             	or     eax,0x20
c0006741:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006744:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000674b:	e8 9c d1 ff ff       	call   c00038ec <store_xdir>
c0006750:	85 c0                	test   eax,eax
c0006752:	0f 84 1c 01 00 00    	je     c0006874 <f_rename+0x2be>
c0006758:	e9 2d 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c000675d:	b9 20 00 00 00       	mov    ecx,0x20
c0006762:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006769:	8d 44 24 18          	lea    eax,[esp+0x18]
c000676d:	e8 9b b2 ff ff       	call   c0001a0d <mem_cpy>
c0006772:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006777:	8d 54 24 58          	lea    edx,[esp+0x58]
c000677b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006782:	e8 86 b2 ff ff       	call   c0001a0d <mem_cpy>
c0006787:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000678e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006795:	e8 fa e3 ff ff       	call   c0004b94 <follow_path>
c000679a:	85 c0                	test   eax,eax
c000679c:	75 27                	jne    c00067c5 <f_rename+0x20f>
c000679e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00067a2:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00067a9:	0f 85 f3 fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067af:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00067b6:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00067bd:	0f 85 df fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067c3:	eb 09                	jmp    c00067ce <f_rename+0x218>
c00067c5:	83 f8 04             	cmp    eax,0x4
c00067c8:	0f 85 bc 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067ce:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067d5:	e8 3b d8 ff ff       	call   c0004015 <dir_register>
c00067da:	85 c0                	test   eax,eax
c00067dc:	0f 85 a8 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067e2:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00067e9:	b9 13 00 00 00       	mov    ecx,0x13
c00067ee:	8d 46 0d             	lea    eax,[esi+0xd]
c00067f1:	8d 54 24 25          	lea    edx,[esp+0x25]
c00067f5:	e8 13 b2 ff ff       	call   c0001a0d <mem_cpy>
c00067fa:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00067fe:	a8 10                	test   al,0x10
c0006800:	75 03                	jne    c0006805 <f_rename+0x24f>
c0006802:	83 c8 20             	or     eax,0x20
c0006805:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006808:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000680c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006810:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006814:	74 5e                	je     c0006874 <f_rename+0x2be>
c0006816:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000681d:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006821:	74 51                	je     c0006874 <f_rename+0x2be>
c0006823:	89 f2                	mov    edx,esi
c0006825:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006829:	8a 07                	mov    al,BYTE PTR [edi]
c000682b:	e8 d9 e2 ff ff       	call   c0004b09 <ld_clust.isra.0>
c0006830:	89 c2                	mov    edx,eax
c0006832:	89 f8                	mov    eax,edi
c0006834:	e8 ee b3 ff ff       	call   c0001c27 <clst2sect>
c0006839:	89 c6                	mov    esi,eax
c000683b:	89 d1                	mov    ecx,edx
c000683d:	b8 02 00 00 00       	mov    eax,0x2
c0006842:	09 f2                	or     edx,esi
c0006844:	74 44                	je     c000688a <f_rename+0x2d4>
c0006846:	89 f2                	mov    edx,esi
c0006848:	89 f8                	mov    eax,edi
c000684a:	e8 1d b9 ff ff       	call   c000216c <move_window>
c000684f:	85 c0                	test   eax,eax
c0006851:	75 37                	jne    c000688a <f_rename+0x2d4>
c0006853:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006857:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000685b:	75 17                	jne    c0006874 <f_rename+0x2be>
c000685d:	8d 50 74             	lea    edx,[eax+0x74]
c0006860:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006867:	e8 c6 e2 ff ff       	call   c0004b32 <st_clust.isra.1>
c000686c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006870:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006874:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006878:	e8 f4 d0 ff ff       	call   c0003971 <dir_remove>
c000687d:	85 c0                	test   eax,eax
c000687f:	75 09                	jne    c000688a <f_rename+0x2d4>
c0006881:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006885:	e8 0d da ff ff       	call   c0004297 <sync_fs>
c000688a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000688e:	83 ec 0c             	sub    esp,0xc
c0006891:	53                   	push   ebx
c0006892:	e8 40 19 00 00       	call   c00081d7 <ff_memfree>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000689e:	81 c4 fc 00 00 00    	add    esp,0xfc
c00068a4:	5b                   	pop    ebx
c00068a5:	5e                   	pop    esi
c00068a6:	5f                   	pop    edi
c00068a7:	5d                   	pop    ebp
c00068a8:	c3                   	ret    

c00068a9 <f_chmod>:
c00068a9:	57                   	push   edi
c00068aa:	b9 02 00 00 00       	mov    ecx,0x2
c00068af:	56                   	push   esi
c00068b0:	53                   	push   ebx
c00068b1:	83 ec 60             	sub    esp,0x60
c00068b4:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00068b8:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00068bc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00068c0:	8d 44 24 70          	lea    eax,[esp+0x70]
c00068c4:	e8 55 bb ff ff       	call   c000241e <mount_volume>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 af 00 00 00    	jne    c0006980 <f_chmod+0xd7>
c00068d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068d5:	83 ec 0c             	sub    esp,0xc
c00068d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00068dc:	68 60 04 00 00       	push   0x460
c00068e1:	e8 db 18 00 00       	call   c00081c1 <ff_memalloc>
c00068e6:	83 c4 10             	add    esp,0x10
c00068e9:	89 c6                	mov    esi,eax
c00068eb:	b8 11 00 00 00       	mov    eax,0x11
c00068f0:	85 f6                	test   esi,esi
c00068f2:	0f 84 88 00 00 00    	je     c0006980 <f_chmod+0xd7>
c00068f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068fc:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006902:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006905:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006908:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000690c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006910:	e8 7f e2 ff ff       	call   c0004b94 <follow_path>
c0006915:	85 c0                	test   eax,eax
c0006917:	75 53                	jne    c000696c <f_chmod+0xc3>
c0006919:	b8 06 00 00 00       	mov    eax,0x6
c000691e:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006923:	75 47                	jne    c000696c <f_chmod+0xc3>
c0006925:	89 f9                	mov    ecx,edi
c0006927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000692b:	83 e1 27             	and    ecx,0x27
c000692e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006931:	75 1d                	jne    c0006950 <f_chmod+0xa7>
c0006933:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006936:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006939:	21 cb                	and    ebx,ecx
c000693b:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000693e:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006941:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006945:	e8 a2 cf ff ff       	call   c00038ec <store_xdir>
c000694a:	85 c0                	test   eax,eax
c000694c:	75 1e                	jne    c000696c <f_chmod+0xc3>
c000694e:	eb 13                	jmp    c0006963 <f_chmod+0xba>
c0006950:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006954:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006957:	21 cb                	and    ebx,ecx
c0006959:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c000695c:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c000695f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006967:	e8 2b d9 ff ff       	call   c0004297 <sync_fs>
c000696c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006970:	83 ec 0c             	sub    esp,0xc
c0006973:	56                   	push   esi
c0006974:	e8 5e 18 00 00       	call   c00081d7 <ff_memfree>
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006980:	83 c4 60             	add    esp,0x60
c0006983:	5b                   	pop    ebx
c0006984:	5e                   	pop    esi
c0006985:	5f                   	pop    edi
c0006986:	c3                   	ret    

c0006987 <f_utime>:
c0006987:	56                   	push   esi
c0006988:	b9 02 00 00 00       	mov    ecx,0x2
c000698d:	53                   	push   ebx
c000698e:	83 ec 64             	sub    esp,0x64
c0006991:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006995:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006999:	8d 44 24 70          	lea    eax,[esp+0x70]
c000699d:	e8 7c ba ff ff       	call   c000241e <mount_volume>
c00069a2:	85 c0                	test   eax,eax
c00069a4:	0f 85 b5 00 00 00    	jne    c0006a5f <f_utime+0xd8>
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 ec 0c             	sub    esp,0xc
c00069b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069b5:	68 60 04 00 00       	push   0x460
c00069ba:	e8 02 18 00 00       	call   c00081c1 <ff_memalloc>
c00069bf:	83 c4 10             	add    esp,0x10
c00069c2:	89 c3                	mov    ebx,eax
c00069c4:	b8 11 00 00 00       	mov    eax,0x11
c00069c9:	85 db                	test   ebx,ebx
c00069cb:	0f 84 8e 00 00 00    	je     c0006a5f <f_utime+0xd8>
c00069d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069d5:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00069db:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00069de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069e1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069e9:	e8 a6 e1 ff ff       	call   c0004b94 <follow_path>
c00069ee:	85 c0                	test   eax,eax
c00069f0:	75 59                	jne    c0006a4b <f_utime+0xc4>
c00069f2:	b8 06 00 00 00       	mov    eax,0x6
c00069f7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069fc:	75 4d                	jne    c0006a4b <f_utime+0xc4>
c00069fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a02:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a06:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a0a:	c1 e2 10             	shl    edx,0x10
c0006a0d:	09 ca                	or     edx,ecx
c0006a0f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a12:	75 1a                	jne    c0006a2e <f_utime+0xa7>
c0006a14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a17:	83 c0 0c             	add    eax,0xc
c0006a1a:	e8 e5 af ff ff       	call   c0001a04 <st_dword>
c0006a1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a23:	e8 c4 ce ff ff       	call   c00038ec <store_xdir>
c0006a28:	85 c0                	test   eax,eax
c0006a2a:	75 1f                	jne    c0006a4b <f_utime+0xc4>
c0006a2c:	eb 14                	jmp    c0006a42 <f_utime+0xbb>
c0006a2e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a32:	83 c0 16             	add    eax,0x16
c0006a35:	e8 ca af ff ff       	call   c0001a04 <st_dword>
c0006a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a3e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a46:	e8 4c d8 ff ff       	call   c0004297 <sync_fs>
c0006a4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a4f:	83 ec 0c             	sub    esp,0xc
c0006a52:	53                   	push   ebx
c0006a53:	e8 7f 17 00 00       	call   c00081d7 <ff_memfree>
c0006a58:	83 c4 10             	add    esp,0x10
c0006a5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a5f:	83 c4 64             	add    esp,0x64
c0006a62:	5b                   	pop    ebx
c0006a63:	5e                   	pop    esi
c0006a64:	c3                   	ret    

c0006a65 <f_getlabel>:
c0006a65:	55                   	push   ebp
c0006a66:	31 c9                	xor    ecx,ecx
c0006a68:	57                   	push   edi
c0006a69:	56                   	push   esi
c0006a6a:	53                   	push   ebx
c0006a6b:	83 ec 6c             	sub    esp,0x6c
c0006a6e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a72:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a79:	e8 a0 b9 ff ff       	call   c000241e <mount_volume>
c0006a7e:	89 c6                	mov    esi,eax
c0006a80:	85 c0                	test   eax,eax
c0006a82:	0f 85 c1 01 00 00    	jne    c0006c49 <f_getlabel+0x1e4>
c0006a88:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a90:	0f 84 5f 01 00 00    	je     c0006bf5 <f_getlabel+0x190>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	31 d2                	xor    edx,edx
c0006a9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006aa0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006aa8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aac:	e8 39 c4 ff ff       	call   c0002eea <dir_sdi>
c0006ab1:	85 c0                	test   eax,eax
c0006ab3:	0f 85 2d 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006ab9:	ba 01 00 00 00       	mov    edx,0x1
c0006abe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ac2:	e8 33 cc ff ff       	call   c00036fa <dir_read>
c0006ac7:	85 c0                	test   eax,eax
c0006ac9:	0f 85 17 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ad3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ad6:	74 09                	je     c0006ae1 <f_getlabel+0x7c>
c0006ad8:	31 db                	xor    ebx,ebx
c0006ada:	31 c9                	xor    ecx,ecx
c0006adc:	e9 c8 00 00 00       	jmp    c0006ba9 <f_getlabel+0x144>
c0006ae1:	31 ed                	xor    ebp,ebp
c0006ae3:	31 db                	xor    ebx,ebx
c0006ae5:	31 ff                	xor    edi,edi
c0006ae7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aeb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006aef:	39 fa                	cmp    edx,edi
c0006af1:	76 4b                	jbe    c0006b3e <f_getlabel+0xd9>
c0006af3:	47                   	inc    edi
c0006af4:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006af7:	01 d0                	add    eax,edx
c0006af9:	e8 90 ae ff ff       	call   c000198e <ld_word>
c0006afe:	66 85 ed             	test   bp,bp
c0006b01:	75 0d                	jne    c0006b10 <f_getlabel+0xab>
c0006b03:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b09:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b0e:	76 28                	jbe    c0006b38 <f_getlabel+0xd3>
c0006b10:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b17:	89 e9                	mov    ecx,ebp
c0006b19:	01 da                	add    edx,ebx
c0006b1b:	c1 e1 10             	shl    ecx,0x10
c0006b1e:	0f b7 c0             	movzx  eax,ax
c0006b21:	09 c8                	or     eax,ecx
c0006b23:	b9 04 00 00 00       	mov    ecx,0x4
c0006b28:	e8 01 b0 ff ff       	call   c0001b2e <put_utf>
c0006b2d:	84 c0                	test   al,al
c0006b2f:	74 0b                	je     c0006b3c <f_getlabel+0xd7>
c0006b31:	0f b6 c0             	movzx  eax,al
c0006b34:	01 c3                	add    ebx,eax
c0006b36:	31 c0                	xor    eax,eax
c0006b38:	89 c5                	mov    ebp,eax
c0006b3a:	eb ab                	jmp    c0006ae7 <f_getlabel+0x82>
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	66 85 ed             	test   bp,bp
c0006b41:	74 02                	je     c0006b45 <f_getlabel+0xe0>
c0006b43:	31 db                	xor    ebx,ebx
c0006b45:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b4c:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006b50:	e9 a0 00 00 00       	jmp    c0006bf5 <f_getlabel+0x190>
c0006b55:	83 ff 0b             	cmp    edi,0xb
c0006b58:	74 11                	je     c0006b6b <f_getlabel+0x106>
c0006b5a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b63:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b66:	c1 e0 08             	shl    eax,0x8
c0006b69:	09 c2                	or     edx,eax
c0006b6b:	0f b7 d2             	movzx  edx,dx
c0006b6e:	50                   	push   eax
c0006b6f:	50                   	push   eax
c0006b70:	68 b5 01 00 00       	push   0x1b5
c0006b75:	52                   	push   edx
c0006b76:	e8 03 17 00 00       	call   c000827e <ff_oem2uni>
c0006b7b:	83 c4 10             	add    esp,0x10
c0006b7e:	66 85 c0             	test   ax,ax
c0006b81:	74 46                	je     c0006bc9 <f_getlabel+0x164>
c0006b83:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8a:	0f b7 c0             	movzx  eax,ax
c0006b8d:	01 da                	add    edx,ebx
c0006b8f:	b9 04 00 00 00       	mov    ecx,0x4
c0006b94:	e8 95 af ff ff       	call   c0001b2e <put_utf>
c0006b99:	84 c0                	test   al,al
c0006b9b:	74 2c                	je     c0006bc9 <f_getlabel+0x164>
c0006b9d:	0f b6 c0             	movzx  eax,al
c0006ba0:	01 c3                	add    ebx,eax
c0006ba2:	83 ff 0b             	cmp    edi,0xb
c0006ba5:	74 24                	je     c0006bcb <f_getlabel+0x166>
c0006ba7:	89 f9                	mov    ecx,edi
c0006ba9:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006bad:	8d 79 01             	lea    edi,[ecx+0x1]
c0006bb0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006bb5:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006bba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bbe:	e8 9f ae ff ff       	call   c0001a62 <dbc_1st>
c0006bc3:	85 c0                	test   eax,eax
c0006bc5:	74 a4                	je     c0006b6b <f_getlabel+0x106>
c0006bc7:	eb 8c                	jmp    c0006b55 <f_getlabel+0xf0>
c0006bc9:	31 db                	xor    ebx,ebx
c0006bcb:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006bd2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006bd5:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006bdc:	74 17                	je     c0006bf5 <f_getlabel+0x190>
c0006bde:	4b                   	dec    ebx
c0006bdf:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006be2:	74 ee                	je     c0006bd2 <f_getlabel+0x16d>
c0006be4:	eb 0f                	jmp    c0006bf5 <f_getlabel+0x190>
c0006be6:	83 f8 04             	cmp    eax,0x4
c0006be9:	75 5c                	jne    c0006c47 <f_getlabel+0x1e2>
c0006beb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bf2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006bf5:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006bfd:	74 4a                	je     c0006c49 <f_getlabel+0x1e4>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c06:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c09:	e8 5e b5 ff ff       	call   c000216c <move_window>
c0006c0e:	89 c6                	mov    esi,eax
c0006c10:	85 c0                	test   eax,eax
c0006c12:	75 35                	jne    c0006c49 <f_getlabel+0x1e4>
c0006c14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c18:	b8 43 00 00 00       	mov    eax,0x43
c0006c1d:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c1f:	80 f9 03             	cmp    cl,0x3
c0006c22:	74 0f                	je     c0006c33 <f_getlabel+0x1ce>
c0006c24:	31 c0                	xor    eax,eax
c0006c26:	80 f9 04             	cmp    cl,0x4
c0006c29:	0f 94 c0             	sete   al
c0006c2c:	48                   	dec    eax
c0006c2d:	83 e0 c3             	and    eax,0xffffffc3
c0006c30:	83 c0 64             	add    eax,0x64
c0006c33:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006c37:	e8 5f ad ff ff       	call   c000199b <ld_dword>
c0006c3c:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c43:	89 07                	mov    DWORD PTR [edi],eax
c0006c45:	eb 02                	jmp    c0006c49 <f_getlabel+0x1e4>
c0006c47:	89 c6                	mov    esi,eax
c0006c49:	83 c4 6c             	add    esp,0x6c
c0006c4c:	89 f0                	mov    eax,esi
c0006c4e:	5b                   	pop    ebx
c0006c4f:	5e                   	pop    esi
c0006c50:	5f                   	pop    edi
c0006c51:	5d                   	pop    ebp
c0006c52:	c3                   	ret    

c0006c53 <f_setlabel>:
c0006c53:	56                   	push   esi
c0006c54:	b9 02 00 00 00       	mov    ecx,0x2
c0006c59:	53                   	push   ebx
c0006c5a:	83 ec 74             	sub    esp,0x74
c0006c5d:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c61:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c68:	e8 b1 b7 ff ff       	call   c000241e <mount_volume>
c0006c6d:	89 c6                	mov    esi,eax
c0006c6f:	85 c0                	test   eax,eax
c0006c71:	0f 85 41 02 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006c77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c7b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c7e:	0f 85 8e 00 00 00    	jne    c0006d12 <f_setlabel+0xbf>
c0006c84:	b9 16 00 00 00       	mov    ecx,0x16
c0006c89:	31 d2                	xor    edx,edx
c0006c8b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c8f:	31 db                	xor    ebx,ebx
c0006c91:	e8 8c ad ff ff       	call   c0001a22 <mem_set>
c0006c96:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006c9d:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ca0:	0f 86 0a 01 00 00    	jbe    c0006db0 <f_setlabel+0x15d>
c0006ca6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cad:	e8 b6 ad ff ff       	call   c0001a68 <tchar2uni>
c0006cb2:	89 c6                	mov    esi,eax
c0006cb4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006cb9:	76 2a                	jbe    c0006ce5 <f_setlabel+0x92>
c0006cbb:	83 f8 ff             	cmp    eax,0xffffffff
c0006cbe:	74 05                	je     c0006cc5 <f_setlabel+0x72>
c0006cc0:	83 fb 09             	cmp    ebx,0x9
c0006cc3:	76 0a                	jbe    c0006ccf <f_setlabel+0x7c>
c0006cc5:	be 06 00 00 00       	mov    esi,0x6
c0006cca:	e9 e9 01 00 00       	jmp    c0006eb8 <f_setlabel+0x265>
c0006ccf:	89 c2                	mov    edx,eax
c0006cd1:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cd5:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cd8:	c1 ea 10             	shr    edx,0x10
c0006cdb:	01 c8                	add    eax,ecx
c0006cdd:	43                   	inc    ebx
c0006cde:	e8 1d ad ff ff       	call   c0001a00 <st_word>
c0006ce3:	eb 04                	jmp    c0006ce9 <f_setlabel+0x96>
c0006ce5:	85 c0                	test   eax,eax
c0006ce7:	74 dc                	je     c0006cc5 <f_setlabel+0x72>
c0006ce9:	89 f2                	mov    edx,esi
c0006ceb:	b8 97 f0 01 c0       	mov    eax,0xc001f097
c0006cf0:	e8 5b ad ff ff       	call   c0001a50 <chk_chr>
c0006cf5:	85 c0                	test   eax,eax
c0006cf7:	75 cc                	jne    c0006cc5 <f_setlabel+0x72>
c0006cf9:	83 fb 0a             	cmp    ebx,0xa
c0006cfc:	77 c7                	ja     c0006cc5 <f_setlabel+0x72>
c0006cfe:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d01:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d05:	0f b7 d6             	movzx  edx,si
c0006d08:	01 c8                	add    eax,ecx
c0006d0a:	43                   	inc    ebx
c0006d0b:	e8 f0 ac ff ff       	call   c0001a00 <st_word>
c0006d10:	eb 84                	jmp    c0006c96 <f_setlabel+0x43>
c0006d12:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d17:	ba 20 00 00 00       	mov    edx,0x20
c0006d1c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d20:	31 db                	xor    ebx,ebx
c0006d22:	e8 fb ac ff ff       	call   c0001a22 <mem_set>
c0006d27:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d2e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d31:	76 60                	jbe    c0006d93 <f_setlabel+0x140>
c0006d33:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d3a:	e8 29 ad ff ff       	call   c0001a68 <tchar2uni>
c0006d3f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d44:	0f 87 7b ff ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006d4a:	83 ec 0c             	sub    esp,0xc
c0006d4d:	50                   	push   eax
c0006d4e:	e8 97 15 00 00       	call   c00082ea <ff_wtoupper>
c0006d53:	5a                   	pop    edx
c0006d54:	59                   	pop    ecx
c0006d55:	68 b5 01 00 00       	push   0x1b5
c0006d5a:	50                   	push   eax
c0006d5b:	e8 8e 14 00 00       	call   c00081ee <ff_uni2oem>
c0006d60:	83 c4 10             	add    esp,0x10
c0006d63:	89 c6                	mov    esi,eax
c0006d65:	66 85 c0             	test   ax,ax
c0006d68:	0f 84 57 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d6e:	0f b7 d0             	movzx  edx,ax
c0006d71:	b8 90 f0 01 c0       	mov    eax,0xc001f090
c0006d76:	e8 d5 ac ff ff       	call   c0001a50 <chk_chr>
c0006d7b:	85 c0                	test   eax,eax
c0006d7d:	0f 85 42 ff ff ff    	jne    c0006cc5 <f_setlabel+0x72>
c0006d83:	66 81 fe ff 00       	cmp    si,0xff
c0006d88:	0f 87 14 01 00 00    	ja     c0006ea2 <f_setlabel+0x24f>
c0006d8e:	e9 fa 00 00 00       	jmp    c0006e8d <f_setlabel+0x23a>
c0006d93:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006d98:	0f 84 27 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d9e:	85 db                	test   ebx,ebx
c0006da0:	74 0e                	je     c0006db0 <f_setlabel+0x15d>
c0006da2:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006da5:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006daa:	75 04                	jne    c0006db0 <f_setlabel+0x15d>
c0006dac:	89 c3                	mov    ebx,eax
c0006dae:	eb ee                	jmp    c0006d9e <f_setlabel+0x14b>
c0006db0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006db4:	31 d2                	xor    edx,edx
c0006db6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006dba:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006dc2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dc6:	e8 1f c1 ff ff       	call   c0002eea <dir_sdi>
c0006dcb:	89 c6                	mov    esi,eax
c0006dcd:	85 c0                	test   eax,eax
c0006dcf:	0f 85 e3 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006dd5:	ba 01 00 00 00       	mov    edx,0x1
c0006dda:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dde:	e8 17 c9 ff ff       	call   c00036fa <dir_read>
c0006de3:	85 c0                	test   eax,eax
c0006de5:	75 21                	jne    c0006e08 <f_setlabel+0x1b5>
c0006de7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006deb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006def:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006df2:	74 5d                	je     c0006e51 <f_setlabel+0x1fe>
c0006df4:	85 db                	test   ebx,ebx
c0006df6:	74 0b                	je     c0006e03 <f_setlabel+0x1b0>
c0006df8:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dfd:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e01:	eb 70                	jmp    c0006e73 <f_setlabel+0x220>
c0006e03:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e06:	eb 70                	jmp    c0006e78 <f_setlabel+0x225>
c0006e08:	83 f8 04             	cmp    eax,0x4
c0006e0b:	75 7c                	jne    c0006e89 <f_setlabel+0x236>
c0006e0d:	85 db                	test   ebx,ebx
c0006e0f:	0f 84 a3 00 00 00    	je     c0006eb8 <f_setlabel+0x265>
c0006e15:	ba 01 00 00 00       	mov    edx,0x1
c0006e1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e1e:	e8 51 ca ff ff       	call   c0003874 <dir_alloc>
c0006e23:	89 c6                	mov    esi,eax
c0006e25:	85 c0                	test   eax,eax
c0006e27:	0f 85 8b 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006e2d:	31 d2                	xor    edx,edx
c0006e2f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e33:	b9 20 00 00 00       	mov    ecx,0x20
c0006e38:	e8 e5 ab ff ff       	call   c0001a22 <mem_set>
c0006e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e41:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e44:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e48:	75 18                	jne    c0006e62 <f_setlabel+0x20f>
c0006e4a:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e4d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e51:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e54:	b9 16 00 00 00       	mov    ecx,0x16
c0006e59:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e5d:	83 c0 02             	add    eax,0x2
c0006e60:	eb 9b                	jmp    c0006dfd <f_setlabel+0x1aa>
c0006e62:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e66:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e6b:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e6f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e73:	e8 95 ab ff ff       	call   c0001a0d <mem_cpy>
c0006e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e84:	e8 0e d4 ff ff       	call   c0004297 <sync_fs>
c0006e89:	89 c6                	mov    esi,eax
c0006e8b:	eb 2b                	jmp    c0006eb8 <f_setlabel+0x265>
c0006e8d:	83 fb 0a             	cmp    ebx,0xa
c0006e90:	0f 87 2f fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006e96:	89 f0                	mov    eax,esi
c0006e98:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e9c:	43                   	inc    ebx
c0006e9d:	e9 85 fe ff ff       	jmp    c0006d27 <f_setlabel+0xd4>
c0006ea2:	83 fb 09             	cmp    ebx,0x9
c0006ea5:	0f 87 1a fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006eab:	89 f0                	mov    eax,esi
c0006ead:	66 c1 e8 08          	shr    ax,0x8
c0006eb1:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006eb5:	43                   	inc    ebx
c0006eb6:	eb de                	jmp    c0006e96 <f_setlabel+0x243>
c0006eb8:	89 f0                	mov    eax,esi
c0006eba:	83 c4 74             	add    esp,0x74
c0006ebd:	5b                   	pop    ebx
c0006ebe:	5e                   	pop    esi
c0006ebf:	c3                   	ret    

c0006ec0 <f_forward>:
c0006ec0:	55                   	push   ebp
c0006ec1:	57                   	push   edi
c0006ec2:	56                   	push   esi
c0006ec3:	53                   	push   ebx
c0006ec4:	83 ec 2c             	sub    esp,0x2c
c0006ec7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ecb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006ecf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006ed5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006ed9:	89 d8                	mov    eax,ebx
c0006edb:	e8 b1 b1 ff ff       	call   c0002091 <validate>
c0006ee0:	89 c5                	mov    ebp,eax
c0006ee2:	85 c0                	test   eax,eax
c0006ee4:	0f 85 aa 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006eea:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006eee:	85 ed                	test   ebp,ebp
c0006ef0:	0f 85 9e 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006ef6:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006efa:	0f 84 8f 01 00 00    	je     c000708f <f_forward+0x1cf>
c0006f00:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f03:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f06:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f09:	bf 00 00 00 00       	mov    edi,0x0
c0006f0e:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f11:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f15:	89 d1                	mov    ecx,edx
c0006f17:	19 f9                	sbb    ecx,edi
c0006f19:	0f 83 cf 00 00 00    	jae    c0006fee <f_forward+0x12e>
c0006f1f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f23:	e9 c6 00 00 00       	jmp    c0006fee <f_forward+0x12e>
c0006f28:	50                   	push   eax
c0006f29:	50                   	push   eax
c0006f2a:	6a 00                	push   0x0
c0006f2c:	6a 00                	push   0x0
c0006f2e:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006f32:	83 c4 10             	add    esp,0x10
c0006f35:	85 c0                	test   eax,eax
c0006f37:	0f 84 57 01 00 00    	je     c0007094 <f_forward+0x1d4>
c0006f3d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006f40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f44:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006f47:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006f4b:	89 d7                	mov    edi,edx
c0006f4d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006f50:	89 c6                	mov    esi,eax
c0006f52:	0f ac fe 09          	shrd   esi,edi,0x9
c0006f56:	21 ce                	and    esi,ecx
c0006f58:	89 c1                	mov    ecx,eax
c0006f5a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006f60:	0f 84 98 00 00 00    	je     c0006ffe <f_forward+0x13e>
c0006f66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f6a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006f6d:	89 c8                	mov    eax,ecx
c0006f6f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006f73:	e8 af ac ff ff       	call   c0001c27 <clst2sect>
c0006f78:	89 d7                	mov    edi,edx
c0006f7a:	09 c7                	or     edi,eax
c0006f7c:	0f 84 9e 00 00 00    	je     c0007020 <f_forward+0x160>
c0006f82:	31 ff                	xor    edi,edi
c0006f84:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006f87:	01 c6                	add    esi,eax
c0006f89:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006f8d:	11 d7                	adc    edi,edx
c0006f8f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0006f92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006f95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006f99:	39 fa                	cmp    edx,edi
c0006f9b:	0f 85 a2 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa1:	39 f0                	cmp    eax,esi
c0006fa3:	0f 85 9a 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fac:	ba 00 02 00 00       	mov    edx,0x200
c0006fb1:	25 ff 01 00 00       	and    eax,0x1ff
c0006fb6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0006fba:	29 c2                	sub    edx,eax
c0006fbc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0006fbf:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0006fc2:	39 d1                	cmp    ecx,edx
c0006fc4:	76 02                	jbe    c0006fc8 <f_forward+0x108>
c0006fc6:	89 d1                	mov    ecx,edx
c0006fc8:	8d 73 50             	lea    esi,[ebx+0x50]
c0006fcb:	52                   	push   edx
c0006fcc:	01 c6                	add    esi,eax
c0006fce:	52                   	push   edx
c0006fcf:	51                   	push   ecx
c0006fd0:	56                   	push   esi
c0006fd1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fd5:	83 c4 10             	add    esp,0x10
c0006fd8:	85 c0                	test   eax,eax
c0006fda:	74 44                	je     c0007020 <f_forward+0x160>
c0006fdc:	31 ff                	xor    edi,edi
c0006fde:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0006fe1:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0006fe4:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0006fe8:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0006fec:	01 07                	add    DWORD PTR [edi],eax
c0006fee:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0006ff3:	0f 85 2f ff ff ff    	jne    c0006f28 <f_forward+0x68>
c0006ff9:	e9 96 00 00 00       	jmp    c0007094 <f_forward+0x1d4>
c0006ffe:	85 f6                	test   esi,esi
c0007000:	0f 85 60 ff ff ff    	jne    c0006f66 <f_forward+0xa6>
c0007006:	89 d7                	mov    edi,edx
c0007008:	09 c7                	or     edi,eax
c000700a:	75 05                	jne    c0007011 <f_forward+0x151>
c000700c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000700f:	eb 0a                	jmp    c000701b <f_forward+0x15b>
c0007011:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007014:	89 d8                	mov    eax,ebx
c0007016:	e8 d9 bc ff ff       	call   c0002cf4 <get_fat>
c000701b:	83 f8 01             	cmp    eax,0x1
c000701e:	77 0b                	ja     c000702b <f_forward+0x16b>
c0007020:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007024:	bd 02 00 00 00       	mov    ebp,0x2
c0007029:	eb 69                	jmp    c0007094 <f_forward+0x1d4>
c000702b:	83 f8 ff             	cmp    eax,0xffffffff
c000702e:	75 0b                	jne    c000703b <f_forward+0x17b>
c0007030:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007034:	bd 01 00 00 00       	mov    ebp,0x1
c0007039:	eb 59                	jmp    c0007094 <f_forward+0x1d4>
c000703b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000703e:	e9 23 ff ff ff       	jmp    c0006f66 <f_forward+0xa6>
c0007043:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007047:	79 20                	jns    c0007069 <f_forward+0x1a9>
c0007049:	83 ec 0c             	sub    esp,0xc
c000704c:	6a 01                	push   0x1
c000704e:	52                   	push   edx
c000704f:	50                   	push   eax
c0007050:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007054:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007058:	50                   	push   eax
c0007059:	e8 fb a8 ff ff       	call   c0001959 <disk_write>
c000705e:	83 c4 20             	add    esp,0x20
c0007061:	85 c0                	test   eax,eax
c0007063:	75 cb                	jne    c0007030 <f_forward+0x170>
c0007065:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007069:	83 ec 0c             	sub    esp,0xc
c000706c:	6a 01                	push   0x1
c000706e:	57                   	push   edi
c000706f:	56                   	push   esi
c0007070:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007074:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007078:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000707c:	50                   	push   eax
c000707d:	e8 c1 a8 ff ff       	call   c0001943 <disk_read>
c0007082:	83 c4 20             	add    esp,0x20
c0007085:	85 c0                	test   eax,eax
c0007087:	0f 84 1c ff ff ff    	je     c0006fa9 <f_forward+0xe9>
c000708d:	eb a1                	jmp    c0007030 <f_forward+0x170>
c000708f:	bd 07 00 00 00       	mov    ebp,0x7
c0007094:	83 c4 2c             	add    esp,0x2c
c0007097:	89 e8                	mov    eax,ebp
c0007099:	5b                   	pop    ebx
c000709a:	5e                   	pop    esi
c000709b:	5f                   	pop    edi
c000709c:	5d                   	pop    ebp
c000709d:	c3                   	ret    

c000709e <f_mkfs>:
c000709e:	55                   	push   ebp
c000709f:	57                   	push   edi
c00070a0:	56                   	push   esi
c00070a1:	53                   	push   ebx
c00070a2:	bb 0b 00 00 00       	mov    ebx,0xb
c00070a7:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00070ad:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00070b4:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00070bb:	e8 b0 ae ff ff       	call   c0001f70 <get_ldnumber>
c00070c0:	85 c0                	test   eax,eax
c00070c2:	0f 88 ec 10 00 00    	js     c00081b4 <f_mkfs+0x1116>
c00070c8:	8b 14 85 00 2e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd200]
c00070cf:	85 d2                	test   edx,edx
c00070d1:	74 03                	je     c00070d6 <f_mkfs+0x38>
c00070d3:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00070d6:	85 f6                	test   esi,esi
c00070d8:	75 05                	jne    c00070df <f_mkfs+0x41>
c00070da:	be 80 f0 01 c0       	mov    esi,0xc001f080
c00070df:	83 ec 0c             	sub    esp,0xc
c00070e2:	0f b6 c0             	movzx  eax,al
c00070e5:	bb 03 00 00 00       	mov    ebx,0x3
c00070ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070f2:	e8 49 a8 ff ff       	call   c0001940 <disk_initialize>
c00070f7:	83 c4 10             	add    esp,0x10
c00070fa:	a8 01                	test   al,0x1
c00070fc:	0f 85 b2 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c0007102:	bb 0a 00 00 00       	mov    ebx,0xa
c0007107:	a8 04                	test   al,0x4
c0007109:	0f 85 a5 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c000710f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007112:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007116:	85 c0                	test   eax,eax
c0007118:	75 20                	jne    c000713a <f_mkfs+0x9c>
c000711a:	51                   	push   ecx
c000711b:	8d 44 24 78          	lea    eax,[esp+0x78]
c000711f:	50                   	push   eax
c0007120:	6a 03                	push   0x3
c0007122:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007126:	e8 44 a8 ff ff       	call   c000196f <disk_ioctl>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	85 c0                	test   eax,eax
c0007130:	74 08                	je     c000713a <f_mkfs+0x9c>
c0007132:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000713a:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000713e:	8d 42 ff             	lea    eax,[edx-0x1]
c0007141:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007146:	77 04                	ja     c000714c <f_mkfs+0xae>
c0007148:	85 c2                	test   edx,eax
c000714a:	74 08                	je     c0007154 <f_mkfs+0xb6>
c000714c:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007154:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007157:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000715b:	48                   	dec    eax
c000715c:	3c 01                	cmp    al,0x1
c000715e:	76 05                	jbe    c0007165 <f_mkfs+0xc7>
c0007160:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007165:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007168:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000716c:	48                   	dec    eax
c000716d:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007172:	77 07                	ja     c000717b <f_mkfs+0xdd>
c0007174:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007179:	74 08                	je     c0007183 <f_mkfs+0xe5>
c000717b:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007183:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007186:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000718c:	77 07                	ja     c0007195 <f_mkfs+0xf7>
c000718e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007191:	85 d8                	test   eax,ebx
c0007193:	74 02                	je     c0007197 <f_mkfs+0xf9>
c0007195:	31 db                	xor    ebx,ebx
c0007197:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00071a2:	77 0a                	ja     c00071ae <f_mkfs+0x110>
c00071a4:	bb 11 00 00 00       	mov    ebx,0x11
c00071a9:	e9 06 10 00 00       	jmp    c00081b4 <f_mkfs+0x1116>
c00071ae:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00071b5:	8b 36                	mov    esi,DWORD PTR [esi]
c00071b7:	85 ed                	test   ebp,ebp
c00071b9:	75 1e                	jne    c00071d9 <f_mkfs+0x13b>
c00071bb:	83 ec 0c             	sub    esp,0xc
c00071be:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00071c5:	25 00 fe ff ff       	and    eax,0xfffffe00
c00071ca:	50                   	push   eax
c00071cb:	e8 f1 0f 00 00       	call   c00081c1 <ff_memalloc>
c00071d0:	83 c4 10             	add    esp,0x10
c00071d3:	89 c5                	mov    ebp,eax
c00071d5:	85 c0                	test   eax,eax
c00071d7:	74 cb                	je     c00071a4 <f_mkfs+0x106>
c00071d9:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00071e1:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00071e9:	52                   	push   edx
c00071ea:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00071ee:	50                   	push   eax
c00071ef:	6a 01                	push   0x1
c00071f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071f5:	e8 75 a7 ff ff       	call   c000196f <disk_ioctl>
c00071fa:	83 c4 10             	add    esp,0x10
c00071fd:	85 c0                	test   eax,eax
c00071ff:	0f 85 4a 0f 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007205:	89 f1                	mov    ecx,esi
c0007207:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000720f:	83 e1 0f             	and    ecx,0xf
c0007212:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000721a:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000721e:	83 e6 08             	and    esi,0x8
c0007221:	75 56                	jne    c0007279 <f_mkfs+0x1db>
c0007223:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007227:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000722b:	83 ff 00             	cmp    edi,0x0
c000722e:	76 20                	jbe    c0007250 <f_mkfs+0x1b2>
c0007230:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007235:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000723d:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007243:	83 d7 ff             	adc    edi,0xffffffff
c0007246:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000724a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000724e:	eb 21                	jmp    c0007271 <f_mkfs+0x1d3>
c0007250:	ba 3f 00 00 00       	mov    edx,0x3f
c0007255:	39 f2                	cmp    edx,esi
c0007257:	19 f8                	sbb    eax,edi
c0007259:	73 1e                	jae    c0007279 <f_mkfs+0x1db>
c000725b:	83 c6 c1             	add    esi,0xffffffc1
c000725e:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007266:	83 d7 ff             	adc    edi,0xffffffff
c0007269:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000726d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007271:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007279:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000727d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007281:	89 04 24             	mov    DWORD PTR [esp],eax
c0007284:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007288:	31 c0                	xor    eax,eax
c000728a:	ba 7f 00 00 00       	mov    edx,0x7f
c000728f:	89 c7                	mov    edi,eax
c0007291:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007294:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007298:	0f 83 c5 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c000729e:	89 df                	mov    edi,ebx
c00072a0:	c1 ef 09             	shr    edi,0x9
c00072a3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00072a7:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00072ae:	c1 ef 09             	shr    edi,0x9
c00072b1:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00072b6:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00072ba:	74 29                	je     c00072e5 <f_mkfs+0x247>
c00072bc:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072c2:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00072c7:	0f 97 c2             	seta   dl
c00072ca:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00072cd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00072d1:	0f 92 c0             	setb   al
c00072d4:	08 c2                	or     dl,al
c00072d6:	75 5b                	jne    c0007333 <f_mkfs+0x295>
c00072d8:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00072dc:	83 e0 07             	and    eax,0x7
c00072df:	3c 04                	cmp    al,0x4
c00072e1:	74 50                	je     c0007333 <f_mkfs+0x295>
c00072e3:	eb 1b                	jmp    c0007300 <f_mkfs+0x262>
c00072e5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00072ea:	0f 87 73 0a 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c00072f0:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072f6:	76 08                	jbe    c0007300 <f_mkfs+0x262>
c00072f8:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007300:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007304:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007308:	83 e0 01             	and    eax,0x1
c000730b:	80 e1 02             	and    cl,0x2
c000730e:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007312:	74 0d                	je     c0007321 <f_mkfs+0x283>
c0007314:	84 c0                	test   al,al
c0007316:	0f 84 53 09 00 00    	je     c0007c6f <f_mkfs+0xbd1>
c000731c:	e9 12 08 00 00       	jmp    c0007b33 <f_mkfs+0xa95>
c0007321:	bb 13 00 00 00       	mov    ebx,0x13
c0007326:	84 c0                	test   al,al
c0007328:	0f 85 05 08 00 00    	jne    c0007b33 <f_mkfs+0xa95>
c000732e:	e9 39 0e 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007333:	31 c0                	xor    eax,eax
c0007335:	ba ff 0f 00 00       	mov    edx,0xfff
c000733a:	89 c7                	mov    edi,eax
c000733c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000733f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007343:	0f 83 1a 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007349:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000734f:	77 39                	ja     c000738a <f_mkfs+0x2ec>
c0007351:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007356:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000735e:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007361:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007365:	73 08                	jae    c000736f <f_mkfs+0x2d1>
c0007367:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000736f:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007374:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007377:	b8 00 00 00 00       	mov    eax,0x0
c000737c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007380:	73 08                	jae    c000738a <f_mkfs+0x2ec>
c0007382:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000738a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000738e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007392:	83 c0 20             	add    eax,0x20
c0007395:	83 d2 00             	adc    edx,0x0
c0007398:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000739c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00073a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00073a4:	31 d2                	xor    edx,edx
c00073a6:	31 ff                	xor    edi,edi
c00073a8:	52                   	push   edx
c00073a9:	89 fb                	mov    ebx,edi
c00073ab:	50                   	push   eax
c00073ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b4:	e8 13 6d 01 00       	call   c001e0cc <__udivdi3>
c00073b9:	83 c4 10             	add    esp,0x10
c00073bc:	c1 e0 02             	shl    eax,0x2
c00073bf:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00073c3:	05 07 02 00 00       	add    eax,0x207
c00073c8:	89 f1                	mov    ecx,esi
c00073ca:	c1 e8 09             	shr    eax,0x9
c00073cd:	83 c1 ff             	add    ecx,0xffffffff
c00073d0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00073d4:	83 d3 ff             	adc    ebx,0xffffffff
c00073d7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00073db:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00073df:	31 d2                	xor    edx,edx
c00073e1:	01 c8                	add    eax,ecx
c00073e3:	11 da                	adc    edx,ebx
c00073e5:	89 c1                	mov    ecx,eax
c00073e7:	f7 de                	neg    esi
c00073e9:	89 d0                	mov    eax,edx
c00073eb:	83 d7 00             	adc    edi,0x0
c00073ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073f2:	f7 df                	neg    edi
c00073f4:	21 f1                	and    ecx,esi
c00073f6:	21 f8                	and    eax,edi
c00073f8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00073fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007400:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007404:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007408:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000740c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000740f:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007413:	0f ac d0 01          	shrd   eax,edx,0x1
c0007417:	89 df                	mov    edi,ebx
c0007419:	d1 ea                	shr    edx,1
c000741b:	39 c1                	cmp    ecx,eax
c000741d:	19 d7                	sbb    edi,edx
c000741f:	0f 83 3e 09 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007429:	31 d2                	xor    edx,edx
c000742b:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000742f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007433:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007437:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000743a:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000743e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007442:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007446:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000744a:	83 f8 0f             	cmp    eax,0xf
c000744d:	0f 86 10 09 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007453:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000745b:	0f 87 02 09 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007461:	31 d2                	xor    edx,edx
c0007463:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007467:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000746f:	83 c0 07             	add    eax,0x7
c0007472:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000747a:	c1 e8 03             	shr    eax,0x3
c000747d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007484:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000748c:	c1 e0 09             	shl    eax,0x9
c000748f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007493:	48                   	dec    eax
c0007494:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007498:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000749c:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00074a0:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00074a4:	31 d2                	xor    edx,edx
c00074a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00074aa:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00074b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074b5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00074ba:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00074be:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00074c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00074c6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00074ca:	31 ff                	xor    edi,edi
c00074cc:	31 f6                	xor    esi,esi
c00074ce:	31 db                	xor    ebx,ebx
c00074d0:	85 ff                	test   edi,edi
c00074d2:	74 05                	je     c00074d9 <f_mkfs+0x43b>
c00074d4:	4f                   	dec    edi
c00074d5:	74 44                	je     c000751b <f_mkfs+0x47d>
c00074d7:	eb 4f                	jmp    c0007528 <f_mkfs+0x48a>
c00074d9:	83 ec 0c             	sub    esp,0xc
c00074dc:	0f b7 c3             	movzx  eax,bx
c00074df:	50                   	push   eax
c00074e0:	e8 05 0e 00 00       	call   c00082ea <ff_wtoupper>
c00074e5:	83 c4 10             	add    esp,0x10
c00074e8:	89 c1                	mov    ecx,eax
c00074ea:	8d 53 01             	lea    edx,[ebx+0x1]
c00074ed:	66 39 c3             	cmp    bx,ax
c00074f0:	75 3e                	jne    c0007530 <f_mkfs+0x492>
c00074f2:	be 01 00 00 00       	mov    esi,0x1
c00074f7:	89 df                	mov    edi,ebx
c00074f9:	66 01 f7             	add    di,si
c00074fc:	75 07                	jne    c0007505 <f_mkfs+0x467>
c00074fe:	83 fe 7f             	cmp    esi,0x7f
c0007501:	77 31                	ja     c0007534 <f_mkfs+0x496>
c0007503:	eb 16                	jmp    c000751b <f_mkfs+0x47d>
c0007505:	83 ec 0c             	sub    esp,0xc
c0007508:	0f b7 ff             	movzx  edi,di
c000750b:	57                   	push   edi
c000750c:	e8 d9 0d 00 00       	call   c00082ea <ff_wtoupper>
c0007511:	83 c4 10             	add    esp,0x10
c0007514:	39 c7                	cmp    edi,eax
c0007516:	75 e6                	jne    c00074fe <f_mkfs+0x460>
c0007518:	46                   	inc    esi
c0007519:	eb dc                	jmp    c00074f7 <f_mkfs+0x459>
c000751b:	31 c0                	xor    eax,eax
c000751d:	89 d9                	mov    ecx,ebx
c000751f:	4e                   	dec    esi
c0007520:	0f 95 c0             	setne  al
c0007523:	43                   	inc    ebx
c0007524:	89 c7                	mov    edi,eax
c0007526:	eb 14                	jmp    c000753c <f_mkfs+0x49e>
c0007528:	89 f1                	mov    ecx,esi
c000752a:	01 f3                	add    ebx,esi
c000752c:	31 ff                	xor    edi,edi
c000752e:	eb 0c                	jmp    c000753c <f_mkfs+0x49e>
c0007530:	89 d3                	mov    ebx,edx
c0007532:	eb 08                	jmp    c000753c <f_mkfs+0x49e>
c0007534:	bf 02 00 00 00       	mov    edi,0x2
c0007539:	83 c9 ff             	or     ecx,0xffffffff
c000753c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007540:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007543:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007547:	0f b6 c1             	movzx  eax,cl
c000754a:	e8 3a a9 ff ff       	call   c0001e89 <xsum32>
c000754f:	66 c1 e9 08          	shr    cx,0x8
c0007553:	89 c2                	mov    edx,eax
c0007555:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007558:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000755c:	0f b7 c1             	movzx  eax,cx
c000755f:	e8 25 a9 ff ff       	call   c0001e89 <xsum32>
c0007564:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007569:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000756d:	66 85 db             	test   bx,bx
c0007570:	74 1f                	je     c0007591 <f_mkfs+0x4f3>
c0007572:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007575:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000757c:	83 c0 02             	add    eax,0x2
c000757f:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007585:	39 c2                	cmp    edx,eax
c0007587:	74 08                	je     c0007591 <f_mkfs+0x4f3>
c0007589:	89 04 24             	mov    DWORD PTR [esp],eax
c000758c:	e9 3f ff ff ff       	jmp    c00074d0 <f_mkfs+0x432>
c0007591:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007594:	83 ec 0c             	sub    esp,0xc
c0007597:	05 01 02 00 00       	add    eax,0x201
c000759c:	c1 e8 09             	shr    eax,0x9
c000759f:	50                   	push   eax
c00075a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00075a4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075a8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075ac:	55                   	push   ebp
c00075ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075b1:	e8 a3 a3 ff ff       	call   c0001959 <disk_write>
c00075b6:	83 c4 20             	add    esp,0x20
c00075b9:	85 c0                	test   eax,eax
c00075bb:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00075be:	0f 85 8b 0b 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00075c4:	89 d0                	mov    eax,edx
c00075c6:	31 d2                	xor    edx,edx
c00075c8:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00075cc:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00075d0:	66 85 db             	test   bx,bx
c00075d3:	74 04                	je     c00075d9 <f_mkfs+0x53b>
c00075d5:	31 c0                	xor    eax,eax
c00075d7:	eb b0                	jmp    c0007589 <f_mkfs+0x4eb>
c00075d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00075dd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00075e1:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00075e5:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00075eb:	31 d2                	xor    edx,edx
c00075ed:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00075f8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00075fc:	c1 eb 09             	shr    ebx,0x9
c00075ff:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007606:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000760a:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000760e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007612:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007616:	8d 70 01             	lea    esi,[eax+0x1]
c0007619:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000761d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007621:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007628:	31 d2                	xor    edx,edx
c000762a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000762f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007632:	89 c1                	mov    ecx,eax
c0007634:	89 e8                	mov    eax,ebp
c0007636:	e8 e7 a3 ff ff       	call   c0001a22 <mem_set>
c000763b:	31 c0                	xor    eax,eax
c000763d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007640:	76 10                	jbe    c0007652 <f_mkfs+0x5b4>
c0007642:	83 fe 07             	cmp    esi,0x7
c0007645:	76 0b                	jbe    c0007652 <f_mkfs+0x5b4>
c0007647:	40                   	inc    eax
c0007648:	83 ee 08             	sub    esi,0x8
c000764b:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007650:	eb eb                	jmp    c000763d <f_mkfs+0x59f>
c0007652:	b2 01                	mov    dl,0x1
c0007654:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007658:	85 f6                	test   esi,esi
c000765a:	74 0c                	je     c0007668 <f_mkfs+0x5ca>
c000765c:	39 04 24             	cmp    DWORD PTR [esp],eax
c000765f:	76 07                	jbe    c0007668 <f_mkfs+0x5ca>
c0007661:	08 11                	or     BYTE PTR [ecx],dl
c0007663:	4e                   	dec    esi
c0007664:	d1 e2                	shl    edx,1
c0007666:	eb f0                	jmp    c0007658 <f_mkfs+0x5ba>
c0007668:	89 df                	mov    edi,ebx
c000766a:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000766e:	76 04                	jbe    c0007674 <f_mkfs+0x5d6>
c0007670:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007674:	83 ec 0c             	sub    esp,0xc
c0007677:	57                   	push   edi
c0007678:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000767c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007680:	55                   	push   ebp
c0007681:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007685:	e8 cf a2 ff ff       	call   c0001959 <disk_write>
c000768a:	83 c4 20             	add    esp,0x20
c000768d:	85 c0                	test   eax,eax
c000768f:	0f 85 ba 0a 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007695:	31 d2                	xor    edx,edx
c0007697:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000769b:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000769f:	29 fb                	sub    ebx,edi
c00076a1:	0f 85 7a ff ff ff    	jne    c0007621 <f_mkfs+0x583>
c00076a7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00076ab:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00076b3:	31 f6                	xor    esi,esi
c00076b5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00076b9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00076bc:	31 d2                	xor    edx,edx
c00076be:	89 e8                	mov    eax,ebp
c00076c0:	e8 5d a3 ff ff       	call   c0001a22 <mem_set>
c00076c5:	31 c9                	xor    ecx,ecx
c00076c7:	85 db                	test   ebx,ebx
c00076c9:	75 40                	jne    c000770b <f_mkfs+0x66d>
c00076cb:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00076d0:	89 e8                	mov    eax,ebp
c00076d2:	bb 02 00 00 00       	mov    ebx,0x2
c00076d7:	e8 28 a3 ff ff       	call   c0001a04 <st_dword>
c00076dc:	8d 45 04             	lea    eax,[ebp+0x4]
c00076df:	83 ca ff             	or     edx,0xffffffff
c00076e2:	e8 1d a3 ff ff       	call   c0001a04 <st_dword>
c00076e7:	b9 08 00 00 00       	mov    ecx,0x8
c00076ec:	eb 1d                	jmp    c000770b <f_mkfs+0x66d>
c00076ee:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00076f1:	76 3b                	jbe    c000772e <f_mkfs+0x690>
c00076f3:	43                   	inc    ebx
c00076f4:	83 fe 01             	cmp    esi,0x1
c00076f7:	89 da                	mov    edx,ebx
c00076f9:	77 03                	ja     c00076fe <f_mkfs+0x660>
c00076fb:	83 ca ff             	or     edx,0xffffffff
c00076fe:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007702:	4e                   	dec    esi
c0007703:	e8 fc a2 ff ff       	call   c0001a04 <st_dword>
c0007708:	83 c1 04             	add    ecx,0x4
c000770b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000770f:	85 f6                	test   esi,esi
c0007711:	75 db                	jne    c00076ee <f_mkfs+0x650>
c0007713:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007718:	77 14                	ja     c000772e <f_mkfs+0x690>
c000771a:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000771e:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007725:	85 f6                	test   esi,esi
c0007727:	74 05                	je     c000772e <f_mkfs+0x690>
c0007729:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000772c:	77 dd                	ja     c000770b <f_mkfs+0x66d>
c000772e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007732:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007736:	39 cf                	cmp    edi,ecx
c0007738:	76 02                	jbe    c000773c <f_mkfs+0x69e>
c000773a:	89 cf                	mov    edi,ecx
c000773c:	83 ec 0c             	sub    esp,0xc
c000773f:	57                   	push   edi
c0007740:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007744:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007748:	55                   	push   ebp
c0007749:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000774d:	e8 07 a2 ff ff       	call   c0001959 <disk_write>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	85 c0                	test   eax,eax
c0007757:	0f 85 f2 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c000775d:	31 d2                	xor    edx,edx
c000775f:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007763:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007767:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c000776b:	0f 85 48 ff ff ff    	jne    c00076b9 <f_mkfs+0x61b>
c0007771:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007774:	31 d2                	xor    edx,edx
c0007776:	89 e8                	mov    eax,ebp
c0007778:	31 ff                	xor    edi,edi
c000777a:	e8 a3 a2 ff ff       	call   c0001a22 <mem_set>
c000777f:	8d 45 34             	lea    eax,[ebp+0x34]
c0007782:	ba 02 00 00 00       	mov    edx,0x2
c0007787:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000778b:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000778f:	e8 70 a2 ff ff       	call   c0001a04 <st_dword>
c0007794:	8d 45 38             	lea    eax,[ebp+0x38]
c0007797:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000779b:	e8 64 a2 ff ff       	call   c0001a04 <st_dword>
c00077a0:	8d 45 44             	lea    eax,[ebp+0x44]
c00077a3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077a7:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00077ab:	e8 54 a2 ff ff       	call   c0001a04 <st_dword>
c00077b0:	8d 45 54             	lea    eax,[ebp+0x54]
c00077b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00077b7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077bb:	83 c2 02             	add    edx,0x2
c00077be:	e8 41 a2 ff ff       	call   c0001a04 <st_dword>
c00077c3:	8d 45 58             	lea    eax,[ebp+0x58]
c00077c6:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00077ca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00077ce:	e8 31 a2 ff ff       	call   c0001a04 <st_dword>
c00077d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077d7:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00077dc:	89 c6                	mov    esi,eax
c00077de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077e2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00077e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00077e9:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00077ed:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00077f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f4:	39 cb                	cmp    ebx,ecx
c00077f6:	76 02                	jbe    c00077fa <f_mkfs+0x75c>
c00077f8:	89 cb                	mov    ebx,ecx
c00077fa:	83 ec 0c             	sub    esp,0xc
c00077fd:	53                   	push   ebx
c00077fe:	57                   	push   edi
c00077ff:	56                   	push   esi
c0007800:	55                   	push   ebp
c0007801:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007805:	e8 4f a1 ff ff       	call   c0001959 <disk_write>
c000780a:	83 c4 20             	add    esp,0x20
c000780d:	85 c0                	test   eax,eax
c000780f:	0f 85 3a 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007815:	31 d2                	xor    edx,edx
c0007817:	b9 00 02 00 00       	mov    ecx,0x200
c000781c:	89 e8                	mov    eax,ebp
c000781e:	e8 ff a1 ff ff       	call   c0001a22 <mem_set>
c0007823:	31 d2                	xor    edx,edx
c0007825:	01 de                	add    esi,ebx
c0007827:	11 d7                	adc    edi,edx
c0007829:	29 1c 24             	sub    DWORD PTR [esp],ebx
c000782c:	75 bf                	jne    c00077ed <f_mkfs+0x74f>
c000782e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007832:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007836:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c000783e:	b9 00 02 00 00       	mov    ecx,0x200
c0007843:	31 d2                	xor    edx,edx
c0007845:	89 e8                	mov    eax,ebp
c0007847:	e8 d6 a1 ff ff       	call   c0001a22 <mem_set>
c000784c:	b9 0b 00 00 00       	mov    ecx,0xb
c0007851:	ba 60 f1 01 c0       	mov    edx,0xc001f160
c0007856:	89 e8                	mov    eax,ebp
c0007858:	e8 b0 a1 ff ff       	call   c0001a0d <mem_cpy>
c000785d:	8d 45 40             	lea    eax,[ebp+0x40]
c0007860:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007864:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007868:	e8 9a a1 ff ff       	call   c0001a07 <st_qword>
c000786d:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007871:	8d 45 48             	lea    eax,[ebp+0x48]
c0007874:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007878:	e8 8a a1 ff ff       	call   c0001a07 <st_qword>
c000787d:	8d 45 50             	lea    eax,[ebp+0x50]
c0007880:	ba 20 00 00 00       	mov    edx,0x20
c0007885:	e8 7a a1 ff ff       	call   c0001a04 <st_dword>
c000788a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000788e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007892:	e8 6d a1 ff ff       	call   c0001a04 <st_dword>
c0007897:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000789b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000789f:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c00078a3:	e8 5c a1 ff ff       	call   c0001a04 <st_dword>
c00078a8:	8d 45 5c             	lea    eax,[ebp+0x5c]
c00078ab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00078af:	e8 50 a1 ff ff       	call   c0001a04 <st_dword>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8d 50 02             	lea    edx,[eax+0x2]
c00078bb:	8d 45 60             	lea    eax,[ebp+0x60]
c00078be:	e8 41 a1 ff ff       	call   c0001a04 <st_dword>
c00078c3:	8d 45 64             	lea    eax,[ebp+0x64]
c00078c6:	ba 00 00 21 50       	mov    edx,0x50210000
c00078cb:	e8 34 a1 ff ff       	call   c0001a04 <st_dword>
c00078d0:	8d 45 68             	lea    eax,[ebp+0x68]
c00078d3:	ba 00 01 00 00       	mov    edx,0x100
c00078d8:	e8 23 a1 ff ff       	call   c0001a00 <st_word>
c00078dd:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00078e1:	b8 0a 00 00 00       	mov    eax,0xa
c00078e6:	48                   	dec    eax
c00078e7:	74 05                	je     c00078ee <f_mkfs+0x850>
c00078e9:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00078ec:	eb f8                	jmp    c00078e6 <f_mkfs+0x848>
c00078ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078f2:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00078f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00078fa:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00078fe:	74 05                	je     c0007905 <f_mkfs+0x867>
c0007900:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007903:	eb f5                	jmp    c00078fa <f_mkfs+0x85c>
c0007905:	8d 45 78             	lea    eax,[ebp+0x78]
c0007908:	ba eb fe 00 00       	mov    edx,0xfeeb
c000790d:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007913:	31 db                	xor    ebx,ebx
c0007915:	e8 e6 a0 ff ff       	call   c0001a00 <st_word>
c000791a:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007920:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	e8 d3 a0 ff ff       	call   c0001a00 <st_word>
c000792d:	31 c9                	xor    ecx,ecx
c000792f:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007932:	83 f8 01             	cmp    eax,0x1
c0007935:	76 13                	jbe    c000794a <f_mkfs+0x8ac>
c0007937:	83 f9 70             	cmp    ecx,0x70
c000793a:	74 0e                	je     c000794a <f_mkfs+0x8ac>
c000793c:	89 da                	mov    edx,ebx
c000793e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007943:	e8 41 a5 ff ff       	call   c0001e89 <xsum32>
c0007948:	89 c3                	mov    ebx,eax
c000794a:	41                   	inc    ecx
c000794b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007951:	75 dc                	jne    c000792f <f_mkfs+0x891>
c0007953:	89 f0                	mov    eax,esi
c0007955:	89 fa                	mov    edx,edi
c0007957:	83 c0 01             	add    eax,0x1
c000795a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000795e:	83 d2 00             	adc    edx,0x0
c0007961:	83 ec 0c             	sub    esp,0xc
c0007964:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007968:	6a 01                	push   0x1
c000796a:	57                   	push   edi
c000796b:	56                   	push   esi
c000796c:	55                   	push   ebp
c000796d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007971:	e8 e3 9f ff ff       	call   c0001959 <disk_write>
c0007976:	83 c4 20             	add    esp,0x20
c0007979:	85 c0                	test   eax,eax
c000797b:	0f 85 ce 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007981:	31 d2                	xor    edx,edx
c0007983:	b9 00 02 00 00       	mov    ecx,0x200
c0007988:	89 e8                	mov    eax,ebp
c000798a:	e8 93 a0 ff ff       	call   c0001a22 <mem_set>
c000798f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	e8 64 a0 ff ff       	call   c0001a00 <st_word>
c000799c:	89 f0                	mov    eax,esi
c000799e:	89 fa                	mov    edx,edi
c00079a0:	83 c0 09             	add    eax,0x9
c00079a3:	83 d2 00             	adc    edx,0x0
c00079a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00079a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00079ad:	31 c9                	xor    ecx,ecx
c00079af:	41                   	inc    ecx
c00079b0:	89 da                	mov    edx,ebx
c00079b2:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c00079b7:	e8 cd a4 ff ff       	call   c0001e89 <xsum32>
c00079bc:	89 c3                	mov    ebx,eax
c00079be:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c4:	75 e9                	jne    c00079af <f_mkfs+0x911>
c00079c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00079ce:	83 c0 01             	add    eax,0x1
c00079d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00079d5:	83 d2 00             	adc    edx,0x0
c00079d8:	83 ec 0c             	sub    esp,0xc
c00079db:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00079df:	6a 01                	push   0x1
c00079e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e9:	55                   	push   ebp
c00079ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ee:	e8 66 9f ff ff       	call   c0001959 <disk_write>
c00079f3:	83 c4 20             	add    esp,0x20
c00079f6:	85 c0                	test   eax,eax
c00079f8:	0f 85 51 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00079fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a02:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a06:	75 09                	jne    c0007a11 <f_mkfs+0x973>
c0007a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a0f:	74 12                	je     c0007a23 <f_mkfs+0x985>
c0007a11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a15:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a21:	eb 8a                	jmp    c00079ad <f_mkfs+0x90f>
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	b9 00 02 00 00       	mov    ecx,0x200
c0007a2a:	89 e8                	mov    eax,ebp
c0007a2c:	e8 f1 9f ff ff       	call   c0001a22 <mem_set>
c0007a31:	83 c6 0b             	add    esi,0xb
c0007a34:	83 d7 00             	adc    edi,0x0
c0007a37:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007a3b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007a3f:	31 c9                	xor    ecx,ecx
c0007a41:	41                   	inc    ecx
c0007a42:	89 da                	mov    edx,ebx
c0007a44:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a49:	e8 3b a4 ff ff       	call   c0001e89 <xsum32>
c0007a4e:	89 c3                	mov    ebx,eax
c0007a50:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a56:	75 e9                	jne    c0007a41 <f_mkfs+0x9a3>
c0007a58:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007a5b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007a5f:	83 c6 01             	add    esi,0x1
c0007a62:	83 d7 00             	adc    edi,0x0
c0007a65:	83 ec 0c             	sub    esp,0xc
c0007a68:	6a 01                	push   0x1
c0007a6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a72:	55                   	push   ebp
c0007a73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a77:	e8 dd 9e ff ff       	call   c0001959 <disk_write>
c0007a7c:	83 c4 20             	add    esp,0x20
c0007a7f:	85 c0                	test   eax,eax
c0007a81:	0f 85 c8 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007a87:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007a8b:	75 06                	jne    c0007a93 <f_mkfs+0x9f5>
c0007a8d:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007a91:	74 09                	je     c0007a9c <f_mkfs+0x9fe>
c0007a93:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a96:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007a9a:	eb a3                	jmp    c0007a3f <f_mkfs+0x9a1>
c0007a9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aa0:	89 da                	mov    edx,ebx
c0007aa2:	01 e8                	add    eax,ebp
c0007aa4:	e8 5b 9f ff ff       	call   c0001a04 <st_dword>
c0007aa9:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007aae:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007ab6:	75 e4                	jne    c0007a9c <f_mkfs+0x9fe>
c0007ab8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007abb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007abf:	83 c6 02             	add    esi,0x2
c0007ac2:	83 d7 00             	adc    edi,0x0
c0007ac5:	83 ec 0c             	sub    esp,0xc
c0007ac8:	6a 01                	push   0x1
c0007aca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ace:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ad2:	55                   	push   ebp
c0007ad3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad7:	e8 7d 9e ff ff       	call   c0001959 <disk_write>
c0007adc:	83 c4 20             	add    esp,0x20
c0007adf:	85 c0                	test   eax,eax
c0007ae1:	0f 85 68 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ae7:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007aec:	74 0d                	je     c0007afb <f_mkfs+0xa5d>
c0007aee:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007af6:	e9 43 fd ff ff       	jmp    c000783e <f_mkfs+0x7a0>
c0007afb:	b1 07                	mov    cl,0x7
c0007afd:	e9 e3 05 00 00       	jmp    c00080e5 <f_mkfs+0x1047>
c0007b02:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b07:	0f 85 4f 02 00 00    	jne    c0007d5c <f_mkfs+0xcbe>
c0007b0d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b12:	0f 86 22 02 00 00    	jbe    c0007d3a <f_mkfs+0xc9c>
c0007b18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b1d:	0f 85 81 06 00 00    	jne    c00081a4 <f_mkfs+0x1106>
c0007b23:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b2a:	83 f8 40             	cmp    eax,0x40
c0007b2d:	0f 87 51 06 00 00    	ja     c0008184 <f_mkfs+0x10e6>
c0007b33:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007b37:	85 ff                	test   edi,edi
c0007b39:	75 1c                	jne    c0007b57 <f_mkfs+0xab9>
c0007b3b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b3e:	ba 60 f0 01 c0       	mov    edx,0xc001f060
c0007b43:	c1 e9 0c             	shr    ecx,0xc
c0007b46:	bf 01 00 00 00       	mov    edi,0x1
c0007b4b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007b4e:	66 85 c0             	test   ax,ax
c0007b51:	0f 85 95 01 00 00    	jne    c0007cec <f_mkfs+0xc4e>
c0007b57:	31 d2                	xor    edx,edx
c0007b59:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007b5c:	f7 f7                	div    edi
c0007b5e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007b63:	0f 86 95 01 00 00    	jbe    c0007cfe <f_mkfs+0xc60>
c0007b69:	83 c0 02             	add    eax,0x2
c0007b6c:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007b71:	01 c0                	add    eax,eax
c0007b73:	05 ff 01 00 00       	add    eax,0x1ff
c0007b78:	be 01 00 00 00       	mov    esi,0x1
c0007b7d:	c1 e8 09             	shr    eax,0x9
c0007b80:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007b84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b88:	c1 e0 05             	shl    eax,0x5
c0007b8b:	c1 e8 09             	shr    eax,0x9
c0007b8e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007b92:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007b97:	31 d2                	xor    edx,edx
c0007b99:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b9d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007ba1:	89 f0                	mov    eax,esi
c0007ba3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007ba7:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007bab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007baf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007bb3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007bb7:	31 d2                	xor    edx,edx
c0007bb9:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007bbe:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007bc2:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007bc6:	31 db                	xor    ebx,ebx
c0007bc8:	01 c8                	add    eax,ecx
c0007bca:	11 da                	adc    edx,ebx
c0007bcc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007bd0:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007bd4:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007bd8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007bdc:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007be0:	f7 da                	neg    edx
c0007be2:	21 d1                	and    ecx,edx
c0007be4:	29 d9                	sub    ecx,ebx
c0007be6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007beb:	0f 85 20 01 00 00    	jne    c0007d11 <f_mkfs+0xc73>
c0007bf1:	31 db                	xor    ebx,ebx
c0007bf3:	01 ce                	add    esi,ecx
c0007bf5:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007bf9:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007bfd:	31 d2                	xor    edx,edx
c0007bff:	89 f8                	mov    eax,edi
c0007c01:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c05:	c1 e0 04             	shl    eax,0x4
c0007c08:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c0c:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c10:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c14:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c18:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c1b:	19 d3                	sbb    ebx,edx
c0007c1d:	0f 82 40 01 00 00    	jb     c0007d63 <f_mkfs+0xcc5>
c0007c23:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c26:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c2a:	89 c8                	mov    eax,ecx
c0007c2c:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007c31:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007c35:	29 f0                	sub    eax,esi
c0007c37:	29 d0                	sub    eax,edx
c0007c39:	31 d2                	xor    edx,edx
c0007c3b:	f7 f7                	div    edi
c0007c3d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c42:	89 c3                	mov    ebx,eax
c0007c44:	0f 85 b8 fe ff ff    	jne    c0007b02 <f_mkfs+0xa64>
c0007c4a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007c4f:	0f 87 1d 01 00 00    	ja     c0007d72 <f_mkfs+0xcd4>
c0007c55:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c5a:	0f 85 03 01 00 00    	jne    c0007d63 <f_mkfs+0xcc5>
c0007c60:	83 ff 01             	cmp    edi,0x1
c0007c63:	0f 86 fa 00 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007c69:	d1 ef                	shr    edi,1
c0007c6b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007c6f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c73:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c76:	85 db                	test   ebx,ebx
c0007c78:	75 2d                	jne    c0007ca7 <f_mkfs+0xc09>
c0007c7a:	89 cb                	mov    ebx,ecx
c0007c7c:	ba 70 f0 01 c0       	mov    edx,0xc001f070
c0007c81:	c1 eb 11             	shr    ebx,0x11
c0007c84:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007c8c:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c8f:	66 85 c0             	test   ax,ax
c0007c92:	74 11                	je     c0007ca5 <f_mkfs+0xc07>
c0007c94:	83 c2 02             	add    edx,0x2
c0007c97:	39 d8                	cmp    eax,ebx
c0007c99:	77 0a                	ja     c0007ca5 <f_mkfs+0xc07>
c0007c9b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007c9f:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007ca3:	eb e7                	jmp    c0007c8c <f_mkfs+0xbee>
c0007ca5:	31 db                	xor    ebx,ebx
c0007ca7:	31 d2                	xor    edx,edx
c0007ca9:	89 c8                	mov    eax,ecx
c0007cab:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007caf:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007cb6:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007cbb:	c1 ea 09             	shr    edx,0x9
c0007cbe:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007cc3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007cc7:	0f 87 96 00 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007ccd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cd1:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007cd9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007cdd:	be 20 00 00 00       	mov    esi,0x20
c0007ce2:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007ce7:	e9 a6 fe ff ff       	jmp    c0007b92 <f_mkfs+0xaf4>
c0007cec:	83 c2 02             	add    edx,0x2
c0007cef:	39 c8                	cmp    eax,ecx
c0007cf1:	0f 87 60 fe ff ff    	ja     c0007b57 <f_mkfs+0xab9>
c0007cf7:	01 ff                	add    edi,edi
c0007cf9:	e9 4d fe ff ff       	jmp    c0007b4b <f_mkfs+0xaad>
c0007cfe:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d01:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d06:	40                   	inc    eax
c0007d07:	d1 e8                	shr    eax,1
c0007d09:	83 c0 03             	add    eax,0x3
c0007d0c:	e9 62 fe ff ff       	jmp    c0007b73 <f_mkfs+0xad5>
c0007d11:	31 d2                	xor    edx,edx
c0007d13:	89 c8                	mov    eax,ecx
c0007d15:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d19:	85 d2                	test   edx,edx
c0007d1b:	74 0c                	je     c0007d29 <f_mkfs+0xc8b>
c0007d1d:	49                   	dec    ecx
c0007d1e:	46                   	inc    esi
c0007d1f:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d24:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d29:	89 c8                	mov    eax,ecx
c0007d2b:	31 d2                	xor    edx,edx
c0007d2d:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d31:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d35:	e9 c3 fe ff ff       	jmp    c0007bfd <f_mkfs+0xb5f>
c0007d3a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d3f:	77 31                	ja     c0007d72 <f_mkfs+0xcd4>
c0007d41:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d46:	75 1b                	jne    c0007d63 <f_mkfs+0xcc5>
c0007d48:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d4f:	3d 80 00 00 00       	cmp    eax,0x80
c0007d54:	0f 86 d9 fd ff ff    	jbe    c0007b33 <f_mkfs+0xa95>
c0007d5a:	eb 07                	jmp    c0007d63 <f_mkfs+0xcc5>
c0007d5c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d61:	76 0a                	jbe    c0007d6d <f_mkfs+0xccf>
c0007d63:	bb 0e 00 00 00       	mov    ebx,0xe
c0007d68:	e9 ff 03 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007d6d:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d72:	31 d2                	xor    edx,edx
c0007d74:	b9 00 02 00 00       	mov    ecx,0x200
c0007d79:	89 e8                	mov    eax,ebp
c0007d7b:	e8 a2 9c ff ff       	call   c0001a22 <mem_set>
c0007d80:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d85:	ba 82 f1 01 c0       	mov    edx,0xc001f182
c0007d8a:	89 e8                	mov    eax,ebp
c0007d8c:	e8 7c 9c ff ff       	call   c0001a0d <mem_cpy>
c0007d91:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007d94:	ba 00 02 00 00       	mov    edx,0x200
c0007d99:	e8 62 9c ff ff       	call   c0001a00 <st_word>
c0007d9e:	89 f8                	mov    eax,edi
c0007da0:	0f b7 d6             	movzx  edx,si
c0007da3:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007da6:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007da9:	e8 52 9c ff ff       	call   c0001a00 <st_word>
c0007dae:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007db2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007db7:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007dba:	75 08                	jne    c0007dc4 <f_mkfs+0xd26>
c0007dbc:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007dc4:	8d 45 11             	lea    eax,[ebp+0x11]
c0007dc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007dcb:	e8 30 9c ff ff       	call   c0001a00 <st_word>
c0007dd0:	b8 ff ff 00 00       	mov    eax,0xffff
c0007dd5:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007dd9:	39 d0                	cmp    eax,edx
c0007ddb:	b8 00 00 00 00       	mov    eax,0x0
c0007de0:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007de4:	72 0a                	jb     c0007df0 <f_mkfs+0xd52>
c0007de6:	8d 45 13             	lea    eax,[ebp+0x13]
c0007de9:	e8 12 9c ff ff       	call   c0001a00 <st_word>
c0007dee:	eb 08                	jmp    c0007df8 <f_mkfs+0xd5a>
c0007df0:	8d 45 20             	lea    eax,[ebp+0x20]
c0007df3:	e8 0c 9c ff ff       	call   c0001a04 <st_dword>
c0007df8:	8d 45 18             	lea    eax,[ebp+0x18]
c0007dfb:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e00:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e04:	e8 f7 9b ff ff       	call   c0001a00 <st_word>
c0007e09:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e0c:	ba ff 00 00 00       	mov    edx,0xff
c0007e11:	e8 ea 9b ff ff       	call   c0001a00 <st_word>
c0007e16:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e1d:	e8 e2 9b ff ff       	call   c0001a04 <st_dword>
c0007e22:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e27:	75 57                	jne    c0007e80 <f_mkfs+0xde2>
c0007e29:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e31:	e8 ce 9b ff ff       	call   c0001a04 <st_dword>
c0007e36:	8d 45 24             	lea    eax,[ebp+0x24]
c0007e39:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007e3d:	e8 c2 9b ff ff       	call   c0001a04 <st_dword>
c0007e42:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007e45:	ba 02 00 00 00       	mov    edx,0x2
c0007e4a:	e8 b5 9b ff ff       	call   c0001a04 <st_dword>
c0007e4f:	8d 45 30             	lea    eax,[ebp+0x30]
c0007e52:	ba 01 00 00 00       	mov    edx,0x1
c0007e57:	e8 a4 9b ff ff       	call   c0001a00 <st_word>
c0007e5c:	8d 45 32             	lea    eax,[ebp+0x32]
c0007e5f:	ba 06 00 00 00       	mov    edx,0x6
c0007e64:	e8 97 9b ff ff       	call   c0001a00 <st_word>
c0007e69:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007e6d:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007e71:	8d 45 47             	lea    eax,[ebp+0x47]
c0007e74:	b9 13 00 00 00       	mov    ecx,0x13
c0007e79:	ba 8e f1 01 c0       	mov    edx,0xc001f18e
c0007e7e:	eb 2f                	jmp    c0007eaf <f_mkfs+0xe11>
c0007e80:	8d 45 27             	lea    eax,[ebp+0x27]
c0007e83:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e88:	e8 77 9b ff ff       	call   c0001a04 <st_dword>
c0007e8d:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007e92:	8d 45 16             	lea    eax,[ebp+0x16]
c0007e95:	e8 66 9b ff ff       	call   c0001a00 <st_word>
c0007e9a:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007e9e:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007ea2:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007ea5:	b9 13 00 00 00       	mov    ecx,0x13
c0007eaa:	ba a2 f1 01 c0       	mov    edx,0xc001f1a2
c0007eaf:	e8 59 9b ff ff       	call   c0001a0d <mem_cpy>
c0007eb4:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007eba:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007ebf:	89 f0                	mov    eax,esi
c0007ec1:	e8 3a 9b ff ff       	call   c0001a00 <st_word>
c0007ec6:	83 ec 0c             	sub    esp,0xc
c0007ec9:	6a 01                	push   0x1
c0007ecb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ecf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ed3:	55                   	push   ebp
c0007ed4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed8:	e8 7c 9a ff ff       	call   c0001959 <disk_write>
c0007edd:	83 c4 20             	add    esp,0x20
c0007ee0:	85 c0                	test   eax,eax
c0007ee2:	0f 85 67 02 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ee8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eed:	0f 85 b7 00 00 00    	jne    c0007faa <f_mkfs+0xf0c>
c0007ef3:	83 ec 0c             	sub    esp,0xc
c0007ef6:	6a 01                	push   0x1
c0007ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007efc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f00:	83 c0 06             	add    eax,0x6
c0007f03:	83 d2 00             	adc    edx,0x0
c0007f06:	52                   	push   edx
c0007f07:	50                   	push   eax
c0007f08:	55                   	push   ebp
c0007f09:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f0d:	e8 47 9a ff ff       	call   c0001959 <disk_write>
c0007f12:	83 c4 20             	add    esp,0x20
c0007f15:	b9 00 02 00 00       	mov    ecx,0x200
c0007f1a:	31 d2                	xor    edx,edx
c0007f1c:	89 e8                	mov    eax,ebp
c0007f1e:	e8 ff 9a ff ff       	call   c0001a22 <mem_set>
c0007f23:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f28:	89 e8                	mov    eax,ebp
c0007f2a:	e8 d5 9a ff ff       	call   c0001a04 <st_dword>
c0007f2f:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f35:	ba 72 72 41 61       	mov    edx,0x61417272
c0007f3a:	e8 c5 9a ff ff       	call   c0001a04 <st_dword>
c0007f3f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007f42:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007f48:	e8 b7 9a ff ff       	call   c0001a04 <st_dword>
c0007f4d:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007f53:	ba 02 00 00 00       	mov    edx,0x2
c0007f58:	e8 a7 9a ff ff       	call   c0001a04 <st_dword>
c0007f5d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f62:	89 f0                	mov    eax,esi
c0007f64:	e8 97 9a ff ff       	call   c0001a00 <st_word>
c0007f69:	83 ec 0c             	sub    esp,0xc
c0007f6c:	6a 01                	push   0x1
c0007f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f76:	83 c0 07             	add    eax,0x7
c0007f79:	83 d2 00             	adc    edx,0x0
c0007f7c:	52                   	push   edx
c0007f7d:	50                   	push   eax
c0007f7e:	55                   	push   ebp
c0007f7f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f83:	e8 d1 99 ff ff       	call   c0001959 <disk_write>
c0007f88:	83 c4 14             	add    esp,0x14
c0007f8b:	6a 01                	push   0x1
c0007f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f91:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f95:	83 c0 01             	add    eax,0x1
c0007f98:	83 d2 00             	adc    edx,0x0
c0007f9b:	52                   	push   edx
c0007f9c:	50                   	push   eax
c0007f9d:	55                   	push   ebp
c0007f9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa2:	e8 b2 99 ff ff       	call   c0001959 <disk_write>
c0007fa7:	83 c4 20             	add    esp,0x20
c0007faa:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0007fb1:	31 d2                	xor    edx,edx
c0007fb3:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0007fb9:	31 db                	xor    ebx,ebx
c0007fbb:	89 e8                	mov    eax,ebp
c0007fbd:	e8 60 9a ff ff       	call   c0001a22 <mem_set>
c0007fc2:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0007fc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007fce:	0f 94 c3             	sete   bl
c0007fd1:	4b                   	dec    ebx
c0007fd2:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0007fd8:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0007fde:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe3:	75 21                	jne    c0008006 <f_mkfs+0xf68>
c0007fe5:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007fea:	89 e8                	mov    eax,ebp
c0007fec:	e8 13 9a ff ff       	call   c0001a04 <st_dword>
c0007ff1:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ff4:	83 ca ff             	or     edx,0xffffffff
c0007ff7:	e8 08 9a ff ff       	call   c0001a04 <st_dword>
c0007ffc:	8d 45 08             	lea    eax,[ebp+0x8]
c0007fff:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008004:	eb 04                	jmp    c000800a <f_mkfs+0xf6c>
c0008006:	89 da                	mov    edx,ebx
c0008008:	89 e8                	mov    eax,ebp
c000800a:	e8 f5 99 ff ff       	call   c0001a04 <st_dword>
c000800f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008013:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008017:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000801b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000801f:	39 ce                	cmp    esi,ecx
c0008021:	76 02                	jbe    c0008025 <f_mkfs+0xf87>
c0008023:	89 ce                	mov    esi,ecx
c0008025:	83 ec 0c             	sub    esp,0xc
c0008028:	56                   	push   esi
c0008029:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000802d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008031:	55                   	push   ebp
c0008032:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008036:	e8 1e 99 ff ff       	call   c0001959 <disk_write>
c000803b:	83 c4 20             	add    esp,0x20
c000803e:	85 c0                	test   eax,eax
c0008040:	0f 85 09 01 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0008046:	31 d2                	xor    edx,edx
c0008048:	b9 00 02 00 00       	mov    ecx,0x200
c000804d:	89 e8                	mov    eax,ebp
c000804f:	e8 ce 99 ff ff       	call   c0001a22 <mem_set>
c0008054:	31 d2                	xor    edx,edx
c0008056:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000805a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000805e:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008062:	75 b3                	jne    c0008017 <f_mkfs+0xf79>
c0008064:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008067:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000806e:	40                   	inc    eax
c000806f:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008073:	0f 87 65 ff ff ff    	ja     c0007fde <f_mkfs+0xf40>
c0008079:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000807e:	74 04                	je     c0008084 <f_mkfs+0xfe6>
c0008080:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008084:	89 fb                	mov    ebx,edi
c0008086:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000808a:	76 04                	jbe    c0008090 <f_mkfs+0xff2>
c000808c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008090:	83 ec 0c             	sub    esp,0xc
c0008093:	53                   	push   ebx
c0008094:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008098:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000809c:	55                   	push   ebp
c000809d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a1:	e8 b3 98 ff ff       	call   c0001959 <disk_write>
c00080a6:	83 c4 20             	add    esp,0x20
c00080a9:	85 c0                	test   eax,eax
c00080ab:	0f 85 9e 00 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00080b1:	31 d2                	xor    edx,edx
c00080b3:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00080b7:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080bb:	29 df                	sub    edi,ebx
c00080bd:	75 c5                	jne    c0008084 <f_mkfs+0xfe6>
c00080bf:	b1 0c                	mov    cl,0xc
c00080c1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c6:	74 1d                	je     c00080e5 <f_mkfs+0x1047>
c00080c8:	b8 ff ff 00 00       	mov    eax,0xffff
c00080cd:	b1 06                	mov    cl,0x6
c00080cf:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00080d3:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00080d7:	72 0c                	jb     c00080e5 <f_mkfs+0x1047>
c00080d9:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00080de:	0f 94 c1             	sete   cl
c00080e1:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00080e5:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00080ea:	75 4c                	jne    c0008138 <f_mkfs+0x109a>
c00080ec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00080f0:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00080f4:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00080fb:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008102:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000810d:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008118:	0f b6 c9             	movzx  ecx,cl
c000811b:	83 ec 0c             	sub    esp,0xc
c000811e:	55                   	push   ebp
c000811f:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000812a:	e8 2f c2 ff ff       	call   c000435e <create_partition>
c000812f:	83 c4 10             	add    esp,0x10
c0008132:	89 c3                	mov    ebx,eax
c0008134:	85 c0                	test   eax,eax
c0008136:	75 34                	jne    c000816c <f_mkfs+0x10ce>
c0008138:	31 db                	xor    ebx,ebx
c000813a:	50                   	push   eax
c000813b:	6a 00                	push   0x0
c000813d:	6a 00                	push   0x0
c000813f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008143:	e8 27 98 ff ff       	call   c000196f <disk_ioctl>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	85 c0                	test   eax,eax
c000814d:	74 1d                	je     c000816c <f_mkfs+0x10ce>
c000814f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008157:	75 0c                	jne    c0008165 <f_mkfs+0x10c7>
c0008159:	83 ec 0c             	sub    esp,0xc
c000815c:	55                   	push   ebp
c000815d:	e8 75 00 00 00       	call   c00081d7 <ff_memfree>
c0008162:	83 c4 10             	add    esp,0x10
c0008165:	bb 01 00 00 00       	mov    ebx,0x1
c000816a:	eb 48                	jmp    c00081b4 <f_mkfs+0x1116>
c000816c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008174:	75 3e                	jne    c00081b4 <f_mkfs+0x1116>
c0008176:	83 ec 0c             	sub    esp,0xc
c0008179:	55                   	push   ebp
c000817a:	e8 58 00 00 00       	call   c00081d7 <ff_memfree>
c000817f:	83 c4 10             	add    esp,0x10
c0008182:	eb 30                	jmp    c00081b4 <f_mkfs+0x1116>
c0008184:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008189:	0f 85 eb fa ff ff    	jne    c0007c7a <f_mkfs+0xbdc>
c000818f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008193:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008199:	0f 86 b8 f9 ff ff    	jbe    c0007b57 <f_mkfs+0xab9>
c000819f:	e9 bf fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081a4:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081a9:	0f 85 c0 fa ff ff    	jne    c0007c6f <f_mkfs+0xbd1>
c00081af:	e9 af fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081b4:	81 c4 9c 00 00 00    	add    esp,0x9c
c00081ba:	89 d8                	mov    eax,ebx
c00081bc:	5b                   	pop    ebx
c00081bd:	5e                   	pop    esi
c00081be:	5f                   	pop    edi
c00081bf:	5d                   	pop    ebp
c00081c0:	c3                   	ret    

c00081c1 <ff_memalloc>:
c00081c1:	83 ec 0c             	sub    esp,0xc
c00081c4:	83 ec 0c             	sub    esp,0xc
c00081c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081cb:	e8 95 50 00 00       	call   c000d265 <malloc>
c00081d0:	83 c4 10             	add    esp,0x10
c00081d3:	83 c4 0c             	add    esp,0xc
c00081d6:	c3                   	ret    

c00081d7 <ff_memfree>:
c00081d7:	83 ec 0c             	sub    esp,0xc
c00081da:	83 ec 0c             	sub    esp,0xc
c00081dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081e1:	e8 8f 50 00 00       	call   c000d275 <free>
c00081e6:	83 c4 10             	add    esp,0x10
c00081e9:	90                   	nop
c00081ea:	83 c4 0c             	add    esp,0xc
c00081ed:	c3                   	ret    

c00081ee <ff_uni2oem>:
c00081ee:	83 ec 14             	sub    esp,0x14
c00081f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081f5:	66 89 04 24          	mov    WORD PTR [esp],ax
c00081f9:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008200:	c7 44 24 0c c0 f4 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f4c0
c0008208:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000820d:	77 0b                	ja     c000821a <ff_uni2oem+0x2c>
c000820f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008213:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008218:	eb 5b                	jmp    c0008275 <ff_uni2oem+0x87>
c000821a:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008222:	77 51                	ja     c0008275 <ff_uni2oem+0x87>
c0008224:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000822a:	75 49                	jne    c0008275 <ff_uni2oem+0x87>
c000822c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008233:	eb 0b                	jmp    c0008240 <ff_uni2oem+0x52>
c0008235:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000823a:	40                   	inc    eax
c000823b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008240:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008246:	77 1b                	ja     c0008263 <ff_uni2oem+0x75>
c0008248:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000824d:	01 c0                	add    eax,eax
c000824f:	89 c2                	mov    edx,eax
c0008251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008255:	01 d0                	add    eax,edx
c0008257:	66 8b 00             	mov    ax,WORD PTR [eax]
c000825a:	0f b7 c0             	movzx  eax,ax
c000825d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008261:	75 d2                	jne    c0008235 <ff_uni2oem+0x47>
c0008263:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008268:	83 e8 80             	sub    eax,0xffffff80
c000826b:	25 ff 00 00 00       	and    eax,0xff
c0008270:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008275:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000827a:	83 c4 14             	add    esp,0x14
c000827d:	c3                   	ret    

c000827e <ff_oem2uni>:
c000827e:	83 ec 18             	sub    esp,0x18
c0008281:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008289:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000828e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008292:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008299:	c7 44 24 10 c0 f4 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f4c0
c00082a1:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00082a7:	77 0b                	ja     c00082b4 <ff_oem2uni+0x36>
c00082a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ad:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082b2:	eb 2d                	jmp    c00082e1 <ff_oem2uni+0x63>
c00082b4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ba:	75 25                	jne    c00082e1 <ff_oem2uni+0x63>
c00082bc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00082c3:	77 1c                	ja     c00082e1 <ff_oem2uni+0x63>
c00082c5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00082ca:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00082cf:	01 c0                	add    eax,eax
c00082d1:	89 c2                	mov    edx,eax
c00082d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00082d7:	01 d0                	add    eax,edx
c00082d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082e1:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00082e6:	83 c4 18             	add    esp,0x18
c00082e9:	c3                   	ret    

c00082ea <ff_wtoupper>:
c00082ea:	83 ec 10             	sub    esp,0x10
c00082ed:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00082f5:	0f 87 3e 01 00 00    	ja     c0008439 <ff_wtoupper+0x14f>
c00082fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00082ff:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008304:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000830b:	77 07                	ja     c0008314 <ff_wtoupper+0x2a>
c000830d:	b8 c0 f2 01 c0       	mov    eax,0xc001f2c0
c0008312:	eb 05                	jmp    c0008319 <ff_wtoupper+0x2f>
c0008314:	b8 00 f2 01 c0       	mov    eax,0xc001f200
c0008319:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000831d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008321:	8d 50 02             	lea    edx,[eax+0x2]
c0008324:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008328:	66 8b 00             	mov    ax,WORD PTR [eax]
c000832b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008330:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008336:	0f 84 f4 00 00 00    	je     c0008430 <ff_wtoupper+0x146>
c000833c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008341:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008346:	0f 82 e4 00 00 00    	jb     c0008430 <ff_wtoupper+0x146>
c000834c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008350:	8d 50 02             	lea    edx,[eax+0x2]
c0008353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008357:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000835f:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008364:	66 c1 e8 08          	shr    ax,0x8
c0008368:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000836d:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008374:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008379:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000837e:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008383:	01 ca                	add    edx,ecx
c0008385:	39 d0                	cmp    eax,edx
c0008387:	0f 8d 86 00 00 00    	jge    c0008413 <ff_wtoupper+0x129>
c000838d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008392:	83 f8 08             	cmp    eax,0x8
c0008395:	0f 87 94 00 00 00    	ja     c000842f <ff_wtoupper+0x145>
c000839b:	8b 04 85 c0 f1 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0e40]
c00083a2:	ff e0                	jmp    eax
c00083a4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00083a9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00083ae:	29 c2                	sub    edx,eax
c00083b0:	89 d0                	mov    eax,edx
c00083b2:	01 c0                	add    eax,eax
c00083b4:	89 c2                	mov    edx,eax
c00083b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ba:	01 d0                	add    eax,edx
c00083bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083bf:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c4:	eb 4b                	jmp    c0008411 <ff_wtoupper+0x127>
c00083c6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083cb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00083cf:	83 e0 01             	and    eax,0x1
c00083d2:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00083d7:	eb 38                	jmp    c0008411 <ff_wtoupper+0x127>
c00083d9:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00083df:	eb 30                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e1:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00083e7:	eb 28                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e9:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00083ef:	eb 20                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f1:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00083f7:	eb 18                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f9:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00083ff:	eb 10                	jmp    c0008411 <ff_wtoupper+0x127>
c0008401:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008407:	eb 08                	jmp    c0008411 <ff_wtoupper+0x127>
c0008409:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008410:	90                   	nop
c0008411:	eb 1c                	jmp    c000842f <ff_wtoupper+0x145>
c0008413:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008419:	0f 85 fe fe ff ff    	jne    c000831d <ff_wtoupper+0x33>
c000841f:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008424:	01 c0                	add    eax,eax
c0008426:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000842a:	e9 ee fe ff ff       	jmp    c000831d <ff_wtoupper+0x33>
c000842f:	90                   	nop
c0008430:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008435:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008439:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	c3                   	ret    

c0008441 <is_bad_src_ratio>:
c0008441:	83 ec 0c             	sub    esp,0xc
c0008444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008448:	89 04 24             	mov    DWORD PTR [esp],eax
c000844b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000844f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008453:	dd 04 24             	fld    QWORD PTR [esp]
c0008456:	dd 05 80 fa 01 c0    	fld    QWORD PTR ds:0xc001fa80
c000845c:	de d9                	fcompp 
c000845e:	df e0                	fnstsw ax
c0008460:	f6 c4 45             	test   ah,0x45
c0008463:	74 10                	je     c0008475 <is_bad_src_ratio+0x34>
c0008465:	dd 04 24             	fld    QWORD PTR [esp]
c0008468:	dc 1d 88 fa 01 c0    	fcomp  QWORD PTR ds:0xc001fa88
c000846e:	df e0                	fnstsw ax
c0008470:	f6 c4 45             	test   ah,0x45
c0008473:	75 07                	jne    c000847c <is_bad_src_ratio+0x3b>
c0008475:	b8 01 00 00 00       	mov    eax,0x1
c000847a:	eb 05                	jmp    c0008481 <is_bad_src_ratio+0x40>
c000847c:	b8 00 00 00 00       	mov    eax,0x0
c0008481:	83 c4 0c             	add    esp,0xc
c0008484:	c3                   	ret    

c0008485 <psrc_set_converter>:
c0008485:	56                   	push   esi
c0008486:	89 d6                	mov    esi,edx
c0008488:	53                   	push   ebx
c0008489:	89 c3                	mov    ebx,eax
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	52                   	push   edx
c000848f:	50                   	push   eax
c0008490:	e8 33 24 00 00       	call   c000a8c8 <sinc_set_converter>
c0008495:	83 c4 10             	add    esp,0x10
c0008498:	85 c0                	test   eax,eax
c000849a:	74 25                	je     c00084c1 <psrc_set_converter+0x3c>
c000849c:	50                   	push   eax
c000849d:	50                   	push   eax
c000849e:	56                   	push   esi
c000849f:	53                   	push   ebx
c00084a0:	e8 32 28 00 00       	call   c000acd7 <zoh_set_converter>
c00084a5:	83 c4 10             	add    esp,0x10
c00084a8:	85 c0                	test   eax,eax
c00084aa:	74 15                	je     c00084c1 <psrc_set_converter+0x3c>
c00084ac:	51                   	push   ecx
c00084ad:	51                   	push   ecx
c00084ae:	56                   	push   esi
c00084af:	53                   	push   ebx
c00084b0:	e8 10 0a 00 00       	call   c0008ec5 <linear_set_converter>
c00084b5:	83 c4 10             	add    esp,0x10
c00084b8:	ba 0a 00 00 00       	mov    edx,0xa
c00084bd:	85 c0                	test   eax,eax
c00084bf:	75 02                	jne    c00084c3 <psrc_set_converter+0x3e>
c00084c1:	31 d2                	xor    edx,edx
c00084c3:	89 d0                	mov    eax,edx
c00084c5:	5a                   	pop    edx
c00084c6:	5b                   	pop    ebx
c00084c7:	5e                   	pop    esi
c00084c8:	c3                   	ret    

c00084c9 <src_delete>:
c00084c9:	53                   	push   ebx
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084d1:	85 db                	test   ebx,ebx
c00084d3:	74 29                	je     c00084fe <src_delete+0x35>
c00084d5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00084d8:	85 c0                	test   eax,eax
c00084da:	74 0c                	je     c00084e8 <src_delete+0x1f>
c00084dc:	83 ec 0c             	sub    esp,0xc
c00084df:	50                   	push   eax
c00084e0:	e8 90 4d 00 00       	call   c000d275 <free>
c00084e5:	83 c4 10             	add    esp,0x10
c00084e8:	50                   	push   eax
c00084e9:	6a 3c                	push   0x3c
c00084eb:	6a 00                	push   0x0
c00084ed:	53                   	push   ebx
c00084ee:	e8 15 81 ff ff       	call   c0000608 <memset>
c00084f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00084f6:	e8 7a 4d 00 00       	call   c000d275 <free>
c00084fb:	83 c4 10             	add    esp,0x10
c00084fe:	31 c0                	xor    eax,eax
c0008500:	83 c4 08             	add    esp,0x8
c0008503:	5b                   	pop    ebx
c0008504:	c3                   	ret    

c0008505 <src_process>:
c0008505:	56                   	push   esi
c0008506:	53                   	push   ebx
c0008507:	53                   	push   ebx
c0008508:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000850c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008510:	85 f6                	test   esi,esi
c0008512:	0f 84 e2 00 00 00    	je     c00085fa <src_process+0xf5>
c0008518:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000851c:	0f 84 df 00 00 00    	je     c0008601 <src_process+0xfc>
c0008522:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008526:	0f 84 d5 00 00 00    	je     c0008601 <src_process+0xfc>
c000852c:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008533:	0f 85 cf 00 00 00    	jne    c0008608 <src_process+0x103>
c0008539:	85 db                	test   ebx,ebx
c000853b:	0f 84 ce 00 00 00    	je     c000860f <src_process+0x10a>
c0008541:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008544:	0f 84 cc 00 00 00    	je     c0008616 <src_process+0x111>
c000854a:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000854e:	0f 84 c2 00 00 00    	je     c0008616 <src_process+0x111>
c0008554:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008557:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000855a:	e8 e2 fe ff ff       	call   c0008441 <is_bad_src_ratio>
c000855f:	5a                   	pop    edx
c0008560:	85 c0                	test   eax,eax
c0008562:	59                   	pop    ecx
c0008563:	0f 85 b4 00 00 00    	jne    c000861d <src_process+0x118>
c0008569:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000856d:	79 07                	jns    c0008576 <src_process+0x71>
c000856f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008576:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000857a:	79 07                	jns    c0008583 <src_process+0x7e>
c000857c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008583:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008585:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008588:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000858b:	39 ca                	cmp    edx,ecx
c000858d:	73 0b                	jae    c000859a <src_process+0x95>
c000858f:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008593:	8d 04 82             	lea    eax,[edx+eax*4]
c0008596:	39 c1                	cmp    ecx,eax
c0008598:	eb 09                	jmp    c00085a3 <src_process+0x9e>
c000859a:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000859e:	8d 04 81             	lea    eax,[ecx+eax*4]
c00085a1:	39 c2                	cmp    edx,eax
c00085a3:	72 7f                	jb     c0008624 <src_process+0x11f>
c00085a5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00085ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085b3:	d9 05 a0 fa 01 c0    	fld    DWORD PTR ds:0xc001faa0
c00085b9:	dc 1e                	fcomp  QWORD PTR [esi]
c00085bb:	df e0                	fnstsw ax
c00085bd:	9e                   	sahf   
c00085be:	76 05                	jbe    c00085c5 <src_process+0xc0>
c00085c0:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00085c3:	dd 1e                	fstp   QWORD PTR [esi]
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	dd 06                	fld    QWORD PTR [esi]
c00085ca:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00085cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00085d0:	e8 1b 5d 01 00       	call   c001e2f0 <fabs>
c00085d5:	83 c4 10             	add    esp,0x10
c00085d8:	dd 05 90 fa 01 c0    	fld    QWORD PTR ds:0xc001fa90
c00085de:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00085e2:	de d9                	fcompp 
c00085e4:	df e0                	fnstsw ax
c00085e6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00085ea:	9e                   	sahf   
c00085eb:	76 05                	jbe    c00085f2 <src_process+0xed>
c00085ed:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00085f0:	eb 03                	jmp    c00085f5 <src_process+0xf0>
c00085f2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00085f5:	59                   	pop    ecx
c00085f6:	5b                   	pop    ebx
c00085f7:	5e                   	pop    esi
c00085f8:	ff e0                	jmp    eax
c00085fa:	b8 02 00 00 00       	mov    eax,0x2
c00085ff:	eb 28                	jmp    c0008629 <src_process+0x124>
c0008601:	b8 07 00 00 00       	mov    eax,0x7
c0008606:	eb 21                	jmp    c0008629 <src_process+0x124>
c0008608:	b8 12 00 00 00       	mov    eax,0x12
c000860d:	eb 1a                	jmp    c0008629 <src_process+0x124>
c000860f:	b8 03 00 00 00       	mov    eax,0x3
c0008614:	eb 13                	jmp    c0008629 <src_process+0x124>
c0008616:	b8 04 00 00 00       	mov    eax,0x4
c000861b:	eb 0c                	jmp    c0008629 <src_process+0x124>
c000861d:	b8 06 00 00 00       	mov    eax,0x6
c0008622:	eb 05                	jmp    c0008629 <src_process+0x124>
c0008624:	b8 10 00 00 00       	mov    eax,0x10
c0008629:	5a                   	pop    edx
c000862a:	5b                   	pop    ebx
c000862b:	5e                   	pop    esi
c000862c:	c3                   	ret    

c000862d <src_callback_read>:
c000862d:	55                   	push   ebp
c000862e:	57                   	push   edi
c000862f:	56                   	push   esi
c0008630:	53                   	push   ebx
c0008631:	83 ec 4c             	sub    esp,0x4c
c0008634:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008638:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c000863c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0008640:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008644:	85 ff                	test   edi,edi
c0008646:	0f 8e 36 01 00 00    	jle    c0008782 <src_callback_read+0x155>
c000864c:	85 db                	test   ebx,ebx
c000864e:	0f 84 2e 01 00 00    	je     c0008782 <src_callback_read+0x155>
c0008654:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000865b:	74 0c                	je     c0008669 <src_callback_read+0x3c>
c000865d:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008664:	e9 19 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c0008669:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000866d:	75 0c                	jne    c000867b <src_callback_read+0x4e>
c000866f:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008676:	e9 07 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c000867b:	51                   	push   ecx
c000867c:	6a 24                	push   0x24
c000867e:	6a 00                	push   0x0
c0008680:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008684:	50                   	push   eax
c0008685:	e8 7e 7f ff ff       	call   c0000608 <memset>
c000868a:	5e                   	pop    esi
c000868b:	5d                   	pop    ebp
c000868c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008694:	e8 a8 fd ff ff       	call   c0008441 <is_bad_src_ratio>
c0008699:	83 c4 10             	add    esp,0x10
c000869c:	85 c0                	test   eax,eax
c000869e:	74 0c                	je     c00086ac <src_callback_read+0x7f>
c00086a0:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00086a7:	e9 d6 00 00 00       	jmp    c0008782 <src_callback_read+0x155>
c00086ac:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00086b0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00086b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086b8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00086bc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00086bf:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00086c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00086c7:	31 f6                	xor    esi,esi
c00086c9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00086cc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00086d0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00086d5:	75 30                	jne    c0008707 <src_callback_read+0xda>
c00086d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00086db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086df:	52                   	push   edx
c00086e0:	52                   	push   edx
c00086e1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00086e5:	50                   	push   eax
c00086e6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086e9:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00086ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00086f0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00086f8:	83 c4 10             	add    esp,0x10
c00086fb:	85 c0                	test   eax,eax
c00086fd:	75 08                	jne    c0008707 <src_callback_read+0xda>
c00086ff:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008707:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c000870e:	50                   	push   eax
c000870f:	50                   	push   eax
c0008710:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008714:	50                   	push   eax
c0008715:	53                   	push   ebx
c0008716:	e8 ea fd ff ff       	call   c0008505 <src_process>
c000871b:	83 c4 10             	add    esp,0x10
c000871e:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008725:	85 c0                	test   eax,eax
c0008727:	75 42                	jne    c000876b <src_callback_read+0x13e>
c0008729:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000872d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008730:	89 e9                	mov    ecx,ebp
c0008732:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008736:	0f af ca             	imul   ecx,edx
c0008739:	c1 e1 02             	shl    ecx,0x2
c000873c:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008740:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008744:	0f af d1             	imul   edx,ecx
c0008747:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c000874b:	c1 e2 02             	shl    edx,0x2
c000874e:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008752:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008755:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000875a:	75 04                	jne    c0008760 <src_callback_read+0x133>
c000875c:	85 c9                	test   ecx,ecx
c000875e:	74 0b                	je     c000876b <src_callback_read+0x13e>
c0008760:	39 d7                	cmp    edi,edx
c0008762:	7e 09                	jle    c000876d <src_callback_read+0x140>
c0008764:	89 d6                	mov    esi,edx
c0008766:	e9 65 ff ff ff       	jmp    c00086d0 <src_callback_read+0xa3>
c000876b:	89 f2                	mov    edx,esi
c000876d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008771:	85 c0                	test   eax,eax
c0008773:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008776:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000877a:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000877d:	74 05                	je     c0008784 <src_callback_read+0x157>
c000877f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008782:	31 d2                	xor    edx,edx
c0008784:	83 c4 4c             	add    esp,0x4c
c0008787:	89 d0                	mov    eax,edx
c0008789:	5b                   	pop    ebx
c000878a:	5e                   	pop    esi
c000878b:	5f                   	pop    edi
c000878c:	5d                   	pop    ebp
c000878d:	c3                   	ret    

c000878e <src_set_ratio>:
c000878e:	53                   	push   ebx
c000878f:	b8 02 00 00 00       	mov    eax,0x2
c0008794:	83 ec 08             	sub    esp,0x8
c0008797:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000879b:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c000879f:	85 db                	test   ebx,ebx
c00087a1:	74 33                	je     c00087d6 <src_set_ratio+0x48>
c00087a3:	b8 07 00 00 00       	mov    eax,0x7
c00087a8:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00087ac:	74 2c                	je     c00087da <src_set_ratio+0x4c>
c00087ae:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00087b2:	74 2a                	je     c00087de <src_set_ratio+0x50>
c00087b4:	50                   	push   eax
c00087b5:	50                   	push   eax
c00087b6:	dd 14 24             	fst    QWORD PTR [esp]
c00087b9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00087bd:	e8 7f fc ff ff       	call   c0008441 <is_bad_src_ratio>
c00087c2:	5a                   	pop    edx
c00087c3:	85 c0                	test   eax,eax
c00087c5:	59                   	pop    ecx
c00087c6:	75 07                	jne    c00087cf <src_set_ratio+0x41>
c00087c8:	dd 04 24             	fld    QWORD PTR [esp]
c00087cb:	dd 1b                	fstp   QWORD PTR [ebx]
c00087cd:	eb 11                	jmp    c00087e0 <src_set_ratio+0x52>
c00087cf:	b8 06 00 00 00       	mov    eax,0x6
c00087d4:	eb 0a                	jmp    c00087e0 <src_set_ratio+0x52>
c00087d6:	dd d8                	fstp   st(0)
c00087d8:	eb 06                	jmp    c00087e0 <src_set_ratio+0x52>
c00087da:	dd d8                	fstp   st(0)
c00087dc:	eb 02                	jmp    c00087e0 <src_set_ratio+0x52>
c00087de:	dd d8                	fstp   st(0)
c00087e0:	83 c4 08             	add    esp,0x8
c00087e3:	5b                   	pop    ebx
c00087e4:	c3                   	ret    

c00087e5 <src_get_channels>:
c00087e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00087e9:	b8 02 00 00 00       	mov    eax,0x2
c00087ee:	85 d2                	test   edx,edx
c00087f0:	74 14                	je     c0008806 <src_get_channels+0x21>
c00087f2:	b8 07 00 00 00       	mov    eax,0x7
c00087f7:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00087fb:	74 09                	je     c0008806 <src_get_channels+0x21>
c00087fd:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008801:	74 03                	je     c0008806 <src_get_channels+0x21>
c0008803:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008806:	c3                   	ret    

c0008807 <src_reset>:
c0008807:	53                   	push   ebx
c0008808:	b8 02 00 00 00       	mov    eax,0x2
c000880d:	83 ec 08             	sub    esp,0x8
c0008810:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008814:	85 db                	test   ebx,ebx
c0008816:	74 2e                	je     c0008846 <src_reset+0x3f>
c0008818:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000881b:	85 c0                	test   eax,eax
c000881d:	74 09                	je     c0008828 <src_reset+0x21>
c000881f:	83 ec 0c             	sub    esp,0xc
c0008822:	53                   	push   ebx
c0008823:	ff d0                	call   eax
c0008825:	83 c4 10             	add    esp,0x10
c0008828:	d9 ee                	fldz   
c000882a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008831:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008834:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000883b:	dd 1b                	fstp   QWORD PTR [ebx]
c000883d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008844:	31 c0                	xor    eax,eax
c0008846:	83 c4 08             	add    esp,0x8
c0008849:	5b                   	pop    ebx
c000884a:	c3                   	ret    

c000884b <src_new>:
c000884b:	57                   	push   edi
c000884c:	56                   	push   esi
c000884d:	53                   	push   ebx
c000884e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008852:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008856:	85 f6                	test   esi,esi
c0008858:	74 73                	je     c00088cd <src_new+0x82>
c000885a:	85 ff                	test   edi,edi
c000885c:	7f 08                	jg     c0008866 <src_new+0x1b>
c000885e:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008864:	eb 1e                	jmp    c0008884 <src_new+0x39>
c0008866:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000886c:	50                   	push   eax
c000886d:	50                   	push   eax
c000886e:	6a 3c                	push   0x3c
c0008870:	6a 01                	push   0x1
c0008872:	e8 1e 4a 00 00       	call   c000d295 <calloc>
c0008877:	83 c4 10             	add    esp,0x10
c000887a:	89 c3                	mov    ebx,eax
c000887c:	85 c0                	test   eax,eax
c000887e:	75 10                	jne    c0008890 <src_new+0x45>
c0008880:	85 f6                	test   esi,esi
c0008882:	75 04                	jne    c0008888 <src_new+0x3d>
c0008884:	31 db                	xor    ebx,ebx
c0008886:	eb 4b                	jmp    c00088d3 <src_new+0x88>
c0008888:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c000888e:	eb 43                	jmp    c00088d3 <src_new+0x88>
c0008890:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008893:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000889a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000889e:	e8 e2 fb ff ff       	call   c0008485 <psrc_set_converter>
c00088a3:	85 c0                	test   eax,eax
c00088a5:	74 18                	je     c00088bf <src_new+0x74>
c00088a7:	85 f6                	test   esi,esi
c00088a9:	74 06                	je     c00088b1 <src_new+0x66>
c00088ab:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00088b1:	83 ec 0c             	sub    esp,0xc
c00088b4:	53                   	push   ebx
c00088b5:	31 db                	xor    ebx,ebx
c00088b7:	e8 b9 49 00 00       	call   c000d275 <free>
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	83 ec 0c             	sub    esp,0xc
c00088c2:	53                   	push   ebx
c00088c3:	e8 3f ff ff ff       	call   c0008807 <src_reset>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	eb 06                	jmp    c00088d3 <src_new+0x88>
c00088cd:	85 ff                	test   edi,edi
c00088cf:	7f 9b                	jg     c000886c <src_new+0x21>
c00088d1:	eb b1                	jmp    c0008884 <src_new+0x39>
c00088d3:	89 d8                	mov    eax,ebx
c00088d5:	5b                   	pop    ebx
c00088d6:	5e                   	pop    esi
c00088d7:	5f                   	pop    edi
c00088d8:	c3                   	ret    

c00088d9 <src_callback_new>:
c00088d9:	56                   	push   esi
c00088da:	53                   	push   ebx
c00088db:	53                   	push   ebx
c00088dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088e4:	85 f6                	test   esi,esi
c00088e6:	75 0e                	jne    c00088f6 <src_callback_new+0x1d>
c00088e8:	31 db                	xor    ebx,ebx
c00088ea:	85 c0                	test   eax,eax
c00088ec:	74 47                	je     c0008935 <src_callback_new+0x5c>
c00088ee:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00088f4:	eb 3f                	jmp    c0008935 <src_callback_new+0x5c>
c00088f6:	85 c0                	test   eax,eax
c00088f8:	74 06                	je     c0008900 <src_callback_new+0x27>
c00088fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008900:	51                   	push   ecx
c0008901:	50                   	push   eax
c0008902:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008906:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000890a:	e8 3c ff ff ff       	call   c000884b <src_new>
c000890f:	83 c4 10             	add    esp,0x10
c0008912:	89 c3                	mov    ebx,eax
c0008914:	85 c0                	test   eax,eax
c0008916:	74 1d                	je     c0008935 <src_callback_new+0x5c>
c0008918:	83 ec 0c             	sub    esp,0xc
c000891b:	50                   	push   eax
c000891c:	e8 e6 fe ff ff       	call   c0008807 <src_reset>
c0008921:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008925:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c000892c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000892f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008932:	83 c4 10             	add    esp,0x10
c0008935:	89 d8                	mov    eax,ebx
c0008937:	5a                   	pop    edx
c0008938:	5b                   	pop    ebx
c0008939:	5e                   	pop    esi
c000893a:	c3                   	ret    

c000893b <src_get_name>:
c000893b:	53                   	push   ebx
c000893c:	83 ec 14             	sub    esp,0x14
c000893f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008943:	53                   	push   ebx
c0008944:	e8 59 1f 00 00       	call   c000a8a2 <sinc_get_name>
c0008949:	83 c4 10             	add    esp,0x10
c000894c:	85 c0                	test   eax,eax
c000894e:	75 1d                	jne    c000896d <src_get_name+0x32>
c0008950:	83 ec 0c             	sub    esp,0xc
c0008953:	53                   	push   ebx
c0008954:	e8 60 23 00 00       	call   c000acb9 <zoh_get_name>
c0008959:	83 c4 10             	add    esp,0x10
c000895c:	85 c0                	test   eax,eax
c000895e:	75 0d                	jne    c000896d <src_get_name+0x32>
c0008960:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008964:	83 c4 08             	add    esp,0x8
c0008967:	5b                   	pop    ebx
c0008968:	e9 3a 05 00 00       	jmp    c0008ea7 <linear_get_name>
c000896d:	83 c4 08             	add    esp,0x8
c0008970:	5b                   	pop    ebx
c0008971:	c3                   	ret    

c0008972 <src_get_description>:
c0008972:	53                   	push   ebx
c0008973:	83 ec 14             	sub    esp,0x14
c0008976:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000897a:	53                   	push   ebx
c000897b:	e8 35 1f 00 00       	call   c000a8b5 <sinc_get_description>
c0008980:	83 c4 10             	add    esp,0x10
c0008983:	85 c0                	test   eax,eax
c0008985:	75 1d                	jne    c00089a4 <src_get_description+0x32>
c0008987:	83 ec 0c             	sub    esp,0xc
c000898a:	53                   	push   ebx
c000898b:	e8 38 23 00 00       	call   c000acc8 <zoh_get_description>
c0008990:	83 c4 10             	add    esp,0x10
c0008993:	85 c0                	test   eax,eax
c0008995:	75 0d                	jne    c00089a4 <src_get_description+0x32>
c0008997:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000899b:	83 c4 08             	add    esp,0x8
c000899e:	5b                   	pop    ebx
c000899f:	e9 12 05 00 00       	jmp    c0008eb6 <linear_get_description>
c00089a4:	83 c4 08             	add    esp,0x8
c00089a7:	5b                   	pop    ebx
c00089a8:	c3                   	ret    

c00089a9 <src_get_version>:
c00089a9:	b8 c0 f5 01 c0       	mov    eax,0xc001f5c0
c00089ae:	c3                   	ret    

c00089af <src_is_valid_ratio>:
c00089af:	50                   	push   eax
c00089b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b8:	e8 84 fa ff ff       	call   c0008441 <is_bad_src_ratio>
c00089bd:	85 c0                	test   eax,eax
c00089bf:	0f 94 c0             	sete   al
c00089c2:	83 c4 0c             	add    esp,0xc
c00089c5:	0f b6 c0             	movzx  eax,al
c00089c8:	c3                   	ret    

c00089c9 <src_error>:
c00089c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089cd:	31 c0                	xor    eax,eax
c00089cf:	85 d2                	test   edx,edx
c00089d1:	74 03                	je     c00089d6 <src_error+0xd>
c00089d3:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00089d6:	c3                   	ret    

c00089d7 <src_strerror>:
c00089d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089db:	31 c0                	xor    eax,eax
c00089dd:	83 fa 17             	cmp    edx,0x17
c00089e0:	77 07                	ja     c00089e9 <src_strerror+0x12>
c00089e2:	8b 04 95 20 fa 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe05e0]
c00089e9:	c3                   	ret    

c00089ea <src_simple>:
c00089ea:	56                   	push   esi
c00089eb:	53                   	push   ebx
c00089ec:	83 ec 18             	sub    esp,0x18
c00089ef:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089f3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089f7:	50                   	push   eax
c00089f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00089fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a00:	e8 46 fe ff ff       	call   c000884b <src_new>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	85 c0                	test   eax,eax
c0008a0a:	75 06                	jne    c0008a12 <src_simple+0x28>
c0008a0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a10:	eb 25                	jmp    c0008a37 <src_simple+0x4d>
c0008a12:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008a19:	89 c3                	mov    ebx,eax
c0008a1b:	50                   	push   eax
c0008a1c:	50                   	push   eax
c0008a1d:	56                   	push   esi
c0008a1e:	53                   	push   ebx
c0008a1f:	e8 e1 fa ff ff       	call   c0008505 <src_process>
c0008a24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008a27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a2b:	e8 99 fa ff ff       	call   c00084c9 <src_delete>
c0008a30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a34:	83 c4 10             	add    esp,0x10
c0008a37:	83 c4 14             	add    esp,0x14
c0008a3a:	5b                   	pop    ebx
c0008a3b:	5e                   	pop    esi
c0008a3c:	c3                   	ret    

c0008a3d <src_short_to_float_array>:
c0008a3d:	83 ec 0c             	sub    esp,0xc
c0008a40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008a44:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008a4c:	85 c0                	test   eax,eax
c0008a4e:	74 0f                	je     c0008a5f <src_short_to_float_array+0x22>
c0008a50:	48                   	dec    eax
c0008a51:	d9 05 a4 fa 01 c0    	fld    DWORD PTR ds:0xc001faa4
c0008a57:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008a5a:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008a5d:	eb ed                	jmp    c0008a4c <src_short_to_float_array+0xf>
c0008a5f:	83 c4 0c             	add    esp,0xc
c0008a62:	c3                   	ret    

c0008a63 <src_float_to_short_array>:
c0008a63:	56                   	push   esi
c0008a64:	53                   	push   ebx
c0008a65:	52                   	push   edx
c0008a66:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008a6e:	85 db                	test   ebx,ebx
c0008a70:	74 51                	je     c0008ac3 <src_float_to_short_array+0x60>
c0008a72:	4b                   	dec    ebx
c0008a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a77:	d9 05 a8 fa 01 c0    	fld    DWORD PTR ds:0xc001faa8
c0008a7d:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008a80:	dc 15 98 fa 01 c0    	fcom   QWORD PTR ds:0xc001fa98
c0008a86:	df e0                	fnstsw ax
c0008a88:	9e                   	sahf   
c0008a89:	72 0a                	jb     c0008a95 <src_float_to_short_array+0x32>
c0008a8b:	dd d8                	fstp   st(0)
c0008a8d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008a93:	eb d9                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008a95:	d9 05 ac fa 01 c0    	fld    DWORD PTR ds:0xc001faac
c0008a9b:	d8 d9                	fcomp  st(1)
c0008a9d:	df e0                	fnstsw ax
c0008a9f:	9e                   	sahf   
c0008aa0:	72 0a                	jb     c0008aac <src_float_to_short_array+0x49>
c0008aa2:	dd d8                	fstp   st(0)
c0008aa4:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008aaa:	eb c2                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008aac:	83 ec 10             	sub    esp,0x10
c0008aaf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008ab2:	e8 59 58 01 00       	call   c001e310 <lrint>
c0008ab7:	83 c4 10             	add    esp,0x10
c0008aba:	c1 f8 10             	sar    eax,0x10
c0008abd:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ac1:	eb ab                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008ac3:	58                   	pop    eax
c0008ac4:	5b                   	pop    ebx
c0008ac5:	5e                   	pop    esi
c0008ac6:	c3                   	ret    

c0008ac7 <src_int_to_float_array>:
c0008ac7:	83 ec 0c             	sub    esp,0xc
c0008aca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ace:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ad2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ad6:	85 c0                	test   eax,eax
c0008ad8:	74 0f                	je     c0008ae9 <src_int_to_float_array+0x22>
c0008ada:	48                   	dec    eax
c0008adb:	d9 05 b0 fa 01 c0    	fld    DWORD PTR ds:0xc001fab0
c0008ae1:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008ae4:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008ae7:	eb ed                	jmp    c0008ad6 <src_int_to_float_array+0xf>
c0008ae9:	83 c4 0c             	add    esp,0xc
c0008aec:	c3                   	ret    

c0008aed <src_float_to_int_array>:
c0008aed:	56                   	push   esi
c0008aee:	53                   	push   ebx
c0008aef:	52                   	push   edx
c0008af0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008af4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008af8:	85 db                	test   ebx,ebx
c0008afa:	74 4f                	je     c0008b4b <src_float_to_int_array+0x5e>
c0008afc:	4b                   	dec    ebx
c0008afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b01:	d9 05 a8 fa 01 c0    	fld    DWORD PTR ds:0xc001faa8
c0008b07:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b0a:	dc 15 98 fa 01 c0    	fcom   QWORD PTR ds:0xc001fa98
c0008b10:	df e0                	fnstsw ax
c0008b12:	9e                   	sahf   
c0008b13:	72 0b                	jb     c0008b20 <src_float_to_int_array+0x33>
c0008b15:	dd d8                	fstp   st(0)
c0008b17:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008b1e:	eb d8                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b20:	d9 05 ac fa 01 c0    	fld    DWORD PTR ds:0xc001faac
c0008b26:	d8 d9                	fcomp  st(1)
c0008b28:	df e0                	fnstsw ax
c0008b2a:	9e                   	sahf   
c0008b2b:	72 0b                	jb     c0008b38 <src_float_to_int_array+0x4b>
c0008b2d:	dd d8                	fstp   st(0)
c0008b2f:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008b36:	eb c0                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b38:	83 ec 10             	sub    esp,0x10
c0008b3b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b3e:	e8 cd 57 01 00       	call   c001e310 <lrint>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008b49:	eb ad                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b4b:	58                   	pop    eax
c0008b4c:	5b                   	pop    ebx
c0008b4d:	5e                   	pop    esi
c0008b4e:	c3                   	ret    

c0008b4f <is_bad_src_ratio>:
c0008b4f:	83 ec 0c             	sub    esp,0xc
c0008b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b56:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008b61:	dd 04 24             	fld    QWORD PTR [esp]
c0008b64:	dd 05 80 fa 01 c0    	fld    QWORD PTR ds:0xc001fa80
c0008b6a:	de d9                	fcompp 
c0008b6c:	df e0                	fnstsw ax
c0008b6e:	f6 c4 45             	test   ah,0x45
c0008b71:	74 10                	je     c0008b83 <is_bad_src_ratio+0x34>
c0008b73:	dd 04 24             	fld    QWORD PTR [esp]
c0008b76:	dc 1d 88 fa 01 c0    	fcomp  QWORD PTR ds:0xc001fa88
c0008b7c:	df e0                	fnstsw ax
c0008b7e:	f6 c4 45             	test   ah,0x45
c0008b81:	75 07                	jne    c0008b8a <is_bad_src_ratio+0x3b>
c0008b83:	b8 01 00 00 00       	mov    eax,0x1
c0008b88:	eb 05                	jmp    c0008b8f <is_bad_src_ratio+0x40>
c0008b8a:	b8 00 00 00 00       	mov    eax,0x0
c0008b8f:	83 c4 0c             	add    esp,0xc
c0008b92:	c3                   	ret    

c0008b93 <fmod_one>:
c0008b93:	83 ec 2c             	sub    esp,0x2c
c0008b96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008ba2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ba6:	83 ec 08             	sub    esp,0x8
c0008ba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb1:	e8 5a 57 01 00       	call   c001e310 <lrint>
c0008bb6:	83 c4 10             	add    esp,0x10
c0008bb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bbd:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008bc1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008bc5:	de e1                	fsubrp st(1),st
c0008bc7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008bcb:	d9 ee                	fldz   
c0008bcd:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008bd1:	df e0                	fnstsw ax
c0008bd3:	f6 c4 45             	test   ah,0x45
c0008bd6:	75 0a                	jne    c0008be2 <fmod_one+0x4f>
c0008bd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008bdc:	d9 e8                	fld1   
c0008bde:	de c1                	faddp  st(1),st
c0008be0:	eb 04                	jmp    c0008be6 <fmod_one+0x53>
c0008be2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008be6:	83 c4 2c             	add    esp,0x2c
c0008be9:	c3                   	ret    

c0008bea <linear_vari_process>:
c0008bea:	55                   	push   ebp
c0008beb:	57                   	push   edi
c0008bec:	56                   	push   esi
c0008bed:	53                   	push   ebx
c0008bee:	83 ec 2c             	sub    esp,0x2c
c0008bf1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008bf5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008bf9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c01:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c05:	0f 8e 5e 02 00 00    	jle    c0008e69 <linear_vari_process+0x27f>
c0008c0b:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008c0e:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008c16:	85 db                	test   ebx,ebx
c0008c18:	0f 84 4b 02 00 00    	je     c0008e69 <linear_vari_process+0x27f>
c0008c1e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008c21:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008c25:	74 19                	je     c0008c40 <linear_vari_process+0x56>
c0008c27:	31 d2                	xor    edx,edx
c0008c29:	39 c2                	cmp    edx,eax
c0008c2b:	7d 0c                	jge    c0008c39 <linear_vari_process+0x4f>
c0008c2d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008c2f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008c32:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008c36:	42                   	inc    edx
c0008c37:	eb f0                	jmp    c0008c29 <linear_vari_process+0x3f>
c0008c39:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008c40:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008c43:	0f af d0             	imul   edx,eax
c0008c46:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008c49:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008c4d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008c54:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008c5e:	dd 07                	fld    QWORD PTR [edi]
c0008c60:	dd 14 24             	fst    QWORD PTR [esp]
c0008c63:	50                   	push   eax
c0008c64:	50                   	push   eax
c0008c65:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008c68:	e8 e2 fe ff ff       	call   c0008b4f <is_bad_src_ratio>
c0008c6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008c71:	5a                   	pop    edx
c0008c72:	59                   	pop    ecx
c0008c73:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008c78:	0f 85 e3 01 00 00    	jne    c0008e61 <linear_vari_process+0x277>
c0008c7e:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008c81:	d9 e8                	fld1   
c0008c83:	d8 d1                	fcom   st(1)
c0008c85:	df e0                	fnstsw ax
c0008c87:	9e                   	sahf   
c0008c88:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008c8c:	0f 86 99 00 00 00    	jbe    c0008d2b <linear_vari_process+0x141>
c0008c92:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c95:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008c98:	0f 8d 8d 00 00 00    	jge    c0008d2b <linear_vari_process+0x141>
c0008c9e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008ca2:	d8 c1                	fadd   st,st(1)
c0008ca4:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008ca7:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008caa:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008cad:	df e0                	fnstsw ax
c0008caf:	9e                   	sahf   
c0008cb0:	73 79                	jae    c0008d2b <linear_vari_process+0x141>
c0008cb2:	85 d2                	test   edx,edx
c0008cb4:	7e 38                	jle    c0008cee <linear_vari_process+0x104>
c0008cb6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008cba:	83 ec 10             	sub    esp,0x10
c0008cbd:	dd 07                	fld    QWORD PTR [edi]
c0008cbf:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cc5:	e8 26 56 01 00       	call   c001e2f0 <fabs>
c0008cca:	83 c4 10             	add    esp,0x10
c0008ccd:	dc 1d f8 fa 01 c0    	fcomp  QWORD PTR ds:0xc001faf8
c0008cd3:	df e0                	fnstsw ax
c0008cd5:	9e                   	sahf   
c0008cd6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008cda:	76 12                	jbe    c0008cee <linear_vari_process+0x104>
c0008cdc:	dd 07                	fld    QWORD PTR [edi]
c0008cde:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008ce1:	d8 e1                	fsub   st,st(1)
c0008ce3:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008ce6:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008ce9:	de c1                	faddp  st(1),st
c0008ceb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cee:	31 c0                	xor    eax,eax
c0008cf0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008cf3:	7e 1f                	jle    c0008d14 <linear_vari_process+0x12a>
c0008cf5:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008cf9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008cfb:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008cfe:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d02:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d05:	d8 e1                	fsub   st,st(1)
c0008d07:	40                   	inc    eax
c0008d08:	d8 ca                	fmul   st,st(2)
c0008d0a:	de c1                	faddp  st(1),st
c0008d0c:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008d0f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008d12:	eb dc                	jmp    c0008cf0 <linear_vari_process+0x106>
c0008d14:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d18:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d1b:	de c1                	faddp  st(1),st
c0008d1d:	e9 5f ff ff ff       	jmp    c0008c81 <linear_vari_process+0x97>
c0008d22:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d26:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d29:	de c1                	faddp  st(1),st
c0008d2b:	83 ec 10             	sub    esp,0x10
c0008d2e:	dd 14 24             	fst    QWORD PTR [esp]
c0008d31:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d35:	e8 59 fe ff ff       	call   c0008b93 <fmod_one>
c0008d3a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008d3d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008d41:	d8 e1                	fsub   st,st(1)
c0008d43:	d9 c9                	fxch   st(1)
c0008d45:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d49:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d4c:	e8 bf 55 01 00       	call   c001e310 <lrint>
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	0f af e8             	imul   ebp,eax
c0008d57:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d5b:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008d5e:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008d61:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008d64:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008d67:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008d6a:	0f 8d 97 00 00 00    	jge    c0008e07 <linear_vari_process+0x21d>
c0008d70:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008d74:	d9 c0                	fld    st(0)
c0008d76:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d79:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008d7d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008d81:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008d85:	de d9                	fcompp 
c0008d87:	df e0                	fnstsw ax
c0008d89:	9e                   	sahf   
c0008d8a:	76 7b                	jbe    c0008e07 <linear_vari_process+0x21d>
c0008d8c:	85 ed                	test   ebp,ebp
c0008d8e:	7e 38                	jle    c0008dc8 <linear_vari_process+0x1de>
c0008d90:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d94:	83 ec 10             	sub    esp,0x10
c0008d97:	dd 07                	fld    QWORD PTR [edi]
c0008d99:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d9c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d9f:	e8 4c 55 01 00       	call   c001e2f0 <fabs>
c0008da4:	83 c4 10             	add    esp,0x10
c0008da7:	dc 1d f8 fa 01 c0    	fcomp  QWORD PTR ds:0xc001faf8
c0008dad:	df e0                	fnstsw ax
c0008daf:	9e                   	sahf   
c0008db0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008db4:	76 12                	jbe    c0008dc8 <linear_vari_process+0x1de>
c0008db6:	dd 07                	fld    QWORD PTR [edi]
c0008db8:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008dbb:	d8 e1                	fsub   st,st(1)
c0008dbd:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008dc0:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008dc3:	de c1                	faddp  st(1),st
c0008dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dc8:	31 c0                	xor    eax,eax
c0008dca:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008dcd:	39 c2                	cmp    edx,eax
c0008dcf:	0f 8e 4d ff ff ff    	jle    c0008d22 <linear_vari_process+0x138>
c0008dd5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dd7:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008dda:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008dde:	89 e9                	mov    ecx,ebp
c0008de0:	01 c5                	add    ebp,eax
c0008de2:	29 d1                	sub    ecx,edx
c0008de4:	89 ca                	mov    edx,ecx
c0008de6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008dea:	01 c2                	add    edx,eax
c0008dec:	40                   	inc    eax
c0008ded:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008df0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008df3:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008df6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008df9:	d8 e1                	fsub   st,st(1)
c0008dfb:	d8 ca                	fmul   st,st(2)
c0008dfd:	de c1                	faddp  st(1),st
c0008dff:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e02:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e05:	eb c3                	jmp    c0008dca <linear_vari_process+0x1e0>
c0008e07:	39 d1                	cmp    ecx,edx
c0008e09:	7d 13                	jge    c0008e1e <linear_vari_process+0x234>
c0008e0b:	89 d0                	mov    eax,edx
c0008e0d:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008e10:	29 c8                	sub    eax,ecx
c0008e12:	99                   	cdq    
c0008e13:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e1a:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008e1e:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008e21:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e24:	85 c0                	test   eax,eax
c0008e26:	7f 1b                	jg     c0008e43 <linear_vari_process+0x259>
c0008e28:	dd 04 24             	fld    QWORD PTR [esp]
c0008e2b:	dd 1f                	fstp   QWORD PTR [edi]
c0008e2d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e30:	99                   	cdq    
c0008e31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008e37:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008e3a:	99                   	cdq    
c0008e3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e3e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008e41:	eb 26                	jmp    c0008e69 <linear_vari_process+0x27f>
c0008e43:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008e46:	31 d2                	xor    edx,edx
c0008e48:	29 c8                	sub    eax,ecx
c0008e4a:	c1 e0 02             	shl    eax,0x2
c0008e4d:	39 d1                	cmp    ecx,edx
c0008e4f:	7e d7                	jle    c0008e28 <linear_vari_process+0x23e>
c0008e51:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008e53:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008e57:	83 c0 04             	add    eax,0x4
c0008e5a:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008e5e:	42                   	inc    edx
c0008e5f:	eb ec                	jmp    c0008e4d <linear_vari_process+0x263>
c0008e61:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008e69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e6d:	83 c4 2c             	add    esp,0x2c
c0008e70:	5b                   	pop    ebx
c0008e71:	5e                   	pop    esi
c0008e72:	5f                   	pop    edi
c0008e73:	5d                   	pop    ebp
c0008e74:	c3                   	ret    

c0008e75 <linear_reset>:
c0008e75:	83 ec 0c             	sub    esp,0xc
c0008e78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e7c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008e7f:	85 c0                	test   eax,eax
c0008e81:	74 20                	je     c0008ea3 <linear_reset+0x2e>
c0008e83:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008e86:	83 c0 1c             	add    eax,0x1c
c0008e89:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0008e8c:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0008e93:	c1 e2 02             	shl    edx,0x2
c0008e96:	51                   	push   ecx
c0008e97:	52                   	push   edx
c0008e98:	6a 00                	push   0x0
c0008e9a:	50                   	push   eax
c0008e9b:	e8 68 77 ff ff       	call   c0000608 <memset>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	83 c4 0c             	add    esp,0xc
c0008ea6:	c3                   	ret    

c0008ea7 <linear_get_name>:
c0008ea7:	31 c0                	xor    eax,eax
c0008ea9:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008eae:	75 05                	jne    c0008eb5 <linear_get_name+0xe>
c0008eb0:	b8 b4 fa 01 c0       	mov    eax,0xc001fab4
c0008eb5:	c3                   	ret    

c0008eb6 <linear_get_description>:
c0008eb6:	31 c0                	xor    eax,eax
c0008eb8:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008ebd:	75 05                	jne    c0008ec4 <linear_get_description+0xe>
c0008ebf:	b8 c8 fa 01 c0       	mov    eax,0xc001fac8
c0008ec4:	c3                   	ret    

c0008ec5 <linear_set_converter>:
c0008ec5:	53                   	push   ebx
c0008ec6:	b8 0a 00 00 00       	mov    eax,0xa
c0008ecb:	83 ec 08             	sub    esp,0x8
c0008ece:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ed2:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008ed7:	75 6e                	jne    c0008f47 <linear_set_converter+0x82>
c0008ed9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008edc:	85 c0                	test   eax,eax
c0008ede:	74 13                	je     c0008ef3 <linear_set_converter+0x2e>
c0008ee0:	83 ec 0c             	sub    esp,0xc
c0008ee3:	50                   	push   eax
c0008ee4:	e8 8c 43 00 00       	call   c000d275 <free>
c0008ee9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008ef0:	83 c4 10             	add    esp,0x10
c0008ef3:	50                   	push   eax
c0008ef4:	50                   	push   eax
c0008ef5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008ef8:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008eff:	50                   	push   eax
c0008f00:	6a 01                	push   0x1
c0008f02:	e8 8e 43 00 00       	call   c000d295 <calloc>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	89 c2                	mov    edx,eax
c0008f0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f0f:	85 d2                	test   edx,edx
c0008f11:	b8 01 00 00 00       	mov    eax,0x1
c0008f16:	74 2f                	je     c0008f47 <linear_set_converter+0x82>
c0008f18:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008f1e:	83 ec 0c             	sub    esp,0xc
c0008f21:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f24:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f27:	c7 43 24 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008bea
c0008f2e:	c7 43 20 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008bea
c0008f35:	c7 43 28 75 8e 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008e75
c0008f3c:	53                   	push   ebx
c0008f3d:	e8 33 ff ff ff       	call   c0008e75 <linear_reset>
c0008f42:	83 c4 10             	add    esp,0x10
c0008f45:	31 c0                	xor    eax,eax
c0008f47:	83 c4 08             	add    esp,0x8
c0008f4a:	5b                   	pop    ebx
c0008f4b:	c3                   	ret    

c0008f4c <is_bad_src_ratio>:
c0008f4c:	83 ec 0c             	sub    esp,0xc
c0008f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f53:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008f5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f5e:	dd 04 24             	fld    QWORD PTR [esp]
c0008f61:	dd 05 80 fa 01 c0    	fld    QWORD PTR ds:0xc001fa80
c0008f67:	de d9                	fcompp 
c0008f69:	df e0                	fnstsw ax
c0008f6b:	f6 c4 45             	test   ah,0x45
c0008f6e:	74 10                	je     c0008f80 <is_bad_src_ratio+0x34>
c0008f70:	dd 04 24             	fld    QWORD PTR [esp]
c0008f73:	dc 1d 88 fa 01 c0    	fcomp  QWORD PTR ds:0xc001fa88
c0008f79:	df e0                	fnstsw ax
c0008f7b:	f6 c4 45             	test   ah,0x45
c0008f7e:	75 07                	jne    c0008f87 <is_bad_src_ratio+0x3b>
c0008f80:	b8 01 00 00 00       	mov    eax,0x1
c0008f85:	eb 05                	jmp    c0008f8c <is_bad_src_ratio+0x40>
c0008f87:	b8 00 00 00 00       	mov    eax,0x0
c0008f8c:	83 c4 0c             	add    esp,0xc
c0008f8f:	c3                   	ret    

c0008f90 <int_to_fp>:
c0008f90:	c1 e0 0c             	shl    eax,0xc
c0008f93:	c3                   	ret    

c0008f94 <fp_to_int>:
c0008f94:	c1 f8 0c             	sar    eax,0xc
c0008f97:	c3                   	ret    

c0008f98 <fp_fraction_part>:
c0008f98:	25 ff 0f 00 00       	and    eax,0xfff
c0008f9d:	c3                   	ret    

c0008f9e <fp_to_double>:
c0008f9e:	83 ec 0c             	sub    esp,0xc
c0008fa1:	e8 f2 ff ff ff       	call   c0008f98 <fp_fraction_part>
c0008fa6:	d9 05 88 fc 01 c0    	fld    DWORD PTR ds:0xc001fc88
c0008fac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fb0:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0008fb4:	83 c4 0c             	add    esp,0xc
c0008fb7:	c3                   	ret    

c0008fb8 <calc_output_single>:
c0008fb8:	55                   	push   ebp
c0008fb9:	57                   	push   edi
c0008fba:	89 c7                	mov    edi,eax
c0008fbc:	56                   	push   esi
c0008fbd:	53                   	push   ebx
c0008fbe:	89 d3                	mov    ebx,edx
c0008fc0:	83 ec 24             	sub    esp,0x24
c0008fc3:	89 de                	mov    esi,ebx
c0008fc5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008fc8:	e8 c3 ff ff ff       	call   c0008f90 <int_to_fp>
c0008fcd:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0008fd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fd4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008fdb:	29 c8                	sub    eax,ecx
c0008fdd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008fe5:	99                   	cdq    
c0008fe6:	f7 fb                	idiv   ebx
c0008fe8:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0008feb:	0f af f0             	imul   esi,eax
c0008fee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008ff2:	01 ce                	add    esi,ecx
c0008ff4:	29 c2                	sub    edx,eax
c0008ff6:	8d 14 97             	lea    edx,[edi+edx*4]
c0008ff9:	89 f0                	mov    eax,esi
c0008ffb:	e8 9e ff ff ff       	call   c0008f9e <fp_to_double>
c0009000:	89 f0                	mov    eax,esi
c0009002:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009006:	e8 89 ff ff ff       	call   c0008f94 <fp_to_int>
c000900b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000900f:	83 c2 04             	add    edx,0x4
c0009012:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009016:	d8 e1                	fsub   st,st(1)
c0009018:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000901c:	de c9                	fmulp  st(1),st
c000901e:	de c1                	faddp  st(1),st
c0009020:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009026:	29 de                	sub    esi,ebx
c0009028:	dc 04 24             	fadd   QWORD PTR [esp]
c000902b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000902e:	79 c9                	jns    c0008ff9 <calc_output_single+0x41>
c0009030:	89 d8                	mov    eax,ebx
c0009032:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009036:	29 c8                	sub    eax,ecx
c0009038:	d9 ee                	fldz   
c000903a:	89 c1                	mov    ecx,eax
c000903c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009040:	29 c8                	sub    eax,ecx
c0009042:	99                   	cdq    
c0009043:	f7 fb                	idiv   ebx
c0009045:	89 da                	mov    edx,ebx
c0009047:	0f af d0             	imul   edx,eax
c000904a:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000904e:	01 d1                	add    ecx,edx
c0009050:	8d 14 87             	lea    edx,[edi+eax*4]
c0009053:	89 c8                	mov    eax,ecx
c0009055:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009059:	e8 40 ff ff ff       	call   c0008f9e <fp_to_double>
c000905e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009062:	89 c8                	mov    eax,ecx
c0009064:	e8 2b ff ff ff       	call   c0008f94 <fp_to_int>
c0009069:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000906d:	29 d9                	sub    ecx,ebx
c000906f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009073:	83 ea 04             	sub    edx,0x4
c0009076:	d8 e1                	fsub   st,st(1)
c0009078:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000907c:	de c9                	fmulp  st(1),st
c000907e:	de c1                	faddp  st(1),st
c0009080:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009086:	85 c9                	test   ecx,ecx
c0009088:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000908c:	de c1                	faddp  st(1),st
c000908e:	7f c3                	jg     c0009053 <calc_output_single+0x9b>
c0009090:	dd 04 24             	fld    QWORD PTR [esp]
c0009093:	83 c4 24             	add    esp,0x24
c0009096:	de c1                	faddp  st(1),st
c0009098:	5b                   	pop    ebx
c0009099:	5e                   	pop    esi
c000909a:	5f                   	pop    edi
c000909b:	5d                   	pop    ebp
c000909c:	c3                   	ret    

c000909d <calc_output_stereo>:
c000909d:	55                   	push   ebp
c000909e:	57                   	push   edi
c000909f:	89 c7                	mov    edi,eax
c00090a1:	56                   	push   esi
c00090a2:	53                   	push   ebx
c00090a3:	89 d3                	mov    ebx,edx
c00090a5:	83 ec 44             	sub    esp,0x44
c00090a8:	89 de                	mov    esi,ebx
c00090aa:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00090ae:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00090b1:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00090b5:	e8 d6 fe ff ff       	call   c0008f90 <int_to_fp>
c00090ba:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00090bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090c1:	d9 ee                	fldz   
c00090c3:	29 c8                	sub    eax,ecx
c00090c5:	dd 14 24             	fst    QWORD PTR [esp]
c00090c8:	99                   	cdq    
c00090c9:	f7 fb                	idiv   ebx
c00090cb:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00090ce:	0f af f0             	imul   esi,eax
c00090d1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090d5:	01 ce                	add    esi,ecx
c00090d7:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00090da:	0f af c2             	imul   eax,edx
c00090dd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00090e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00090e5:	29 c2                	sub    edx,eax
c00090e7:	8d 14 97             	lea    edx,[edi+edx*4]
c00090ea:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00090ee:	89 f0                	mov    eax,esi
c00090f0:	e8 a9 fe ff ff       	call   c0008f9e <fp_to_double>
c00090f5:	89 f0                	mov    eax,esi
c00090f7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00090fb:	e8 94 fe ff ff       	call   c0008f94 <fp_to_int>
c0009100:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009104:	83 c2 08             	add    edx,0x8
c0009107:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000910b:	d8 e1                	fsub   st,st(1)
c000910d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009111:	de c9                	fmulp  st(1),st
c0009113:	de c1                	faddp  st(1),st
c0009115:	d9 c0                	fld    st(0)
c0009117:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000911d:	dc 04 24             	fadd   QWORD PTR [esp]
c0009120:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009123:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009129:	29 de                	sub    esi,ebx
c000912b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000912f:	de c1                	faddp  st(1),st
c0009131:	79 b7                	jns    c00090ea <calc_output_stereo+0x4d>
c0009133:	89 d8                	mov    eax,ebx
c0009135:	d9 ee                	fldz   
c0009137:	d9 ee                	fldz   
c0009139:	29 c8                	sub    eax,ecx
c000913b:	89 c1                	mov    ecx,eax
c000913d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009141:	29 c8                	sub    eax,ecx
c0009143:	99                   	cdq    
c0009144:	f7 fb                	idiv   ebx
c0009146:	89 da                	mov    edx,ebx
c0009148:	0f af d0             	imul   edx,eax
c000914b:	40                   	inc    eax
c000914c:	01 d1                	add    ecx,edx
c000914e:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009153:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009157:	8d 14 87             	lea    edx,[edi+eax*4]
c000915a:	eb 04                	jmp    c0009160 <calc_output_stereo+0xc3>
c000915c:	d9 ca                	fxch   st(2)
c000915e:	d9 c9                	fxch   st(1)
c0009160:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009164:	d9 c9                	fxch   st(1)
c0009166:	89 c8                	mov    eax,ecx
c0009168:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000916c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009170:	e8 29 fe ff ff       	call   c0008f9e <fp_to_double>
c0009175:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009179:	89 c8                	mov    eax,ecx
c000917b:	e8 14 fe ff ff       	call   c0008f94 <fp_to_int>
c0009180:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009184:	29 d9                	sub    ecx,ebx
c0009186:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000918a:	83 ea 08             	sub    edx,0x8
c000918d:	d8 e1                	fsub   st,st(1)
c000918f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009193:	de c9                	fmulp  st(1),st
c0009195:	de c1                	faddp  st(1),st
c0009197:	d9 c0                	fld    st(0)
c0009199:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c000919f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00091a3:	de c1                	faddp  st(1),st
c00091a5:	d9 c9                	fxch   st(1)
c00091a7:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c00091ad:	85 c9                	test   ecx,ecx
c00091af:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00091b3:	de c1                	faddp  st(1),st
c00091b5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00091b9:	7f a1                	jg     c000915c <calc_output_stereo+0xbf>
c00091bb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00091bf:	dd 04 24             	fld    QWORD PTR [esp]
c00091c2:	de c3                	faddp  st(3),st
c00091c4:	d9 ca                	fxch   st(2)
c00091c6:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091ca:	d9 18                	fstp   DWORD PTR [eax]
c00091cc:	de c1                	faddp  st(1),st
c00091ce:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091d2:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00091d5:	83 c4 44             	add    esp,0x44
c00091d8:	5b                   	pop    ebx
c00091d9:	5e                   	pop    esi
c00091da:	5f                   	pop    edi
c00091db:	5d                   	pop    ebp
c00091dc:	c3                   	ret    

c00091dd <calc_output_quad>:
c00091dd:	55                   	push   ebp
c00091de:	57                   	push   edi
c00091df:	56                   	push   esi
c00091e0:	89 c6                	mov    esi,eax
c00091e2:	53                   	push   ebx
c00091e3:	89 d3                	mov    ebx,edx
c00091e5:	83 ec 5c             	sub    esp,0x5c
c00091e8:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00091ec:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00091ef:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091f2:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00091f6:	e8 95 fd ff ff       	call   c0008f90 <int_to_fp>
c00091fb:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00091fe:	d9 ee                	fldz   
c0009200:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009204:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009208:	29 c8                	sub    eax,ecx
c000920a:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000920e:	99                   	cdq    
c000920f:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009213:	f7 fb                	idiv   ebx
c0009215:	89 da                	mov    edx,ebx
c0009217:	0f af d0             	imul   edx,eax
c000921a:	01 ca                	add    edx,ecx
c000921c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009220:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009223:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009227:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000922a:	0f af c2             	imul   eax,edx
c000922d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009231:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009235:	29 c2                	sub    edx,eax
c0009237:	8d 14 96             	lea    edx,[esi+edx*4]
c000923a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000923e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009242:	e8 57 fd ff ff       	call   c0008f9e <fp_to_double>
c0009247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000924b:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000924f:	e8 40 fd ff ff       	call   c0008f94 <fp_to_int>
c0009254:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009258:	83 c2 10             	add    edx,0x10
c000925b:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000925f:	d8 e1                	fsub   st,st(1)
c0009261:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009265:	de c9                	fmulp  st(1),st
c0009267:	de c1                	faddp  st(1),st
c0009269:	d9 c0                	fld    st(0)
c000926b:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009271:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009275:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009279:	d9 c0                	fld    st(0)
c000927b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009281:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009285:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009289:	d9 c0                	fld    st(0)
c000928b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009291:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009295:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009299:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000929f:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c00092a3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00092a7:	de c1                	faddp  st(1),st
c00092a9:	79 8f                	jns    c000923a <calc_output_quad+0x5d>
c00092ab:	89 d8                	mov    eax,ebx
c00092ad:	d9 ee                	fldz   
c00092af:	29 c8                	sub    eax,ecx
c00092b1:	d9 ee                	fldz   
c00092b3:	89 c1                	mov    ecx,eax
c00092b5:	d9 ee                	fldz   
c00092b7:	d9 ee                	fldz   
c00092b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00092bd:	29 c8                	sub    eax,ecx
c00092bf:	99                   	cdq    
c00092c0:	f7 fb                	idiv   ebx
c00092c2:	89 da                	mov    edx,ebx
c00092c4:	0f af d0             	imul   edx,eax
c00092c7:	40                   	inc    eax
c00092c8:	01 d1                	add    ecx,edx
c00092ca:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00092cf:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00092d3:	8d 14 86             	lea    edx,[esi+eax*4]
c00092d6:	eb 0a                	jmp    c00092e2 <calc_output_quad+0x105>
c00092d8:	d9 cc                	fxch   st(4)
c00092da:	d9 ca                	fxch   st(2)
c00092dc:	d9 c9                	fxch   st(1)
c00092de:	d9 cb                	fxch   st(3)
c00092e0:	d9 c9                	fxch   st(1)
c00092e2:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092e6:	d9 c9                	fxch   st(1)
c00092e8:	89 c8                	mov    eax,ecx
c00092ea:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092ee:	d9 c9                	fxch   st(1)
c00092f0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00092f4:	d9 c9                	fxch   st(1)
c00092f6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00092fa:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00092fe:	e8 9b fc ff ff       	call   c0008f9e <fp_to_double>
c0009303:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009307:	89 c8                	mov    eax,ecx
c0009309:	e8 86 fc ff ff       	call   c0008f94 <fp_to_int>
c000930e:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009312:	29 d9                	sub    ecx,ebx
c0009314:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009318:	83 ea 10             	sub    edx,0x10
c000931b:	d8 e1                	fsub   st,st(1)
c000931d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009321:	de c9                	fmulp  st(1),st
c0009323:	de c1                	faddp  st(1),st
c0009325:	d9 c0                	fld    st(0)
c0009327:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000932d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009331:	de c1                	faddp  st(1),st
c0009333:	d9 c1                	fld    st(1)
c0009335:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c000933b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000933f:	de c1                	faddp  st(1),st
c0009341:	d9 c2                	fld    st(2)
c0009343:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009349:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000934d:	de c1                	faddp  st(1),st
c000934f:	d9 cb                	fxch   st(3)
c0009351:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009357:	85 c9                	test   ecx,ecx
c0009359:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000935d:	de c1                	faddp  st(1),st
c000935f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009363:	0f 8f 6f ff ff ff    	jg     c00092d8 <calc_output_quad+0xfb>
c0009369:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000936d:	de c4                	faddp  st(4),st
c000936f:	d9 cb                	fxch   st(3)
c0009371:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009374:	d9 1f                	fstp   DWORD PTR [edi]
c0009376:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000937a:	de c2                	faddp  st(2),st
c000937c:	d9 c9                	fxch   st(1)
c000937e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009381:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009384:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009388:	de c3                	faddp  st(3),st
c000938a:	d9 ca                	fxch   st(2)
c000938c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000938f:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009392:	de c1                	faddp  st(1),st
c0009394:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009397:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000939a:	83 c4 5c             	add    esp,0x5c
c000939d:	5b                   	pop    ebx
c000939e:	5e                   	pop    esi
c000939f:	5f                   	pop    edi
c00093a0:	5d                   	pop    ebp
c00093a1:	c3                   	ret    

c00093a2 <calc_output_hex>:
c00093a2:	55                   	push   ebp
c00093a3:	57                   	push   edi
c00093a4:	89 c7                	mov    edi,eax
c00093a6:	56                   	push   esi
c00093a7:	53                   	push   ebx
c00093a8:	89 d3                	mov    ebx,edx
c00093aa:	83 ec 7c             	sub    esp,0x7c
c00093ad:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00093b4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00093b7:	dd 1c 24             	fstp   QWORD PTR [esp]
c00093ba:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00093c1:	e8 ca fb ff ff       	call   c0008f90 <int_to_fp>
c00093c6:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093c9:	d9 ee                	fldz   
c00093cb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00093cf:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00093d3:	29 c8                	sub    eax,ecx
c00093d5:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00093d9:	99                   	cdq    
c00093da:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00093de:	f7 fb                	idiv   ebx
c00093e0:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00093e4:	89 da                	mov    edx,ebx
c00093e6:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00093ea:	0f af d0             	imul   edx,eax
c00093ed:	01 ca                	add    edx,ecx
c00093ef:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00093f3:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093f6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00093fa:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093fd:	0f af c2             	imul   eax,edx
c0009400:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009404:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009408:	29 c2                	sub    edx,eax
c000940a:	8d 14 97             	lea    edx,[edi+edx*4]
c000940d:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009411:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009415:	e8 84 fb ff ff       	call   c0008f9e <fp_to_double>
c000941a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000941e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009422:	e8 6d fb ff ff       	call   c0008f94 <fp_to_int>
c0009427:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000942b:	83 c2 18             	add    edx,0x18
c000942e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009432:	d8 e1                	fsub   st,st(1)
c0009434:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009438:	de c9                	fmulp  st(1),st
c000943a:	de c1                	faddp  st(1),st
c000943c:	d9 c0                	fld    st(0)
c000943e:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009444:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009448:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000944c:	d9 c0                	fld    st(0)
c000944e:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009454:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009458:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000945c:	d9 c0                	fld    st(0)
c000945e:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009464:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009468:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000946c:	d9 c0                	fld    st(0)
c000946e:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009474:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009478:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000947c:	d9 c0                	fld    st(0)
c000947e:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009484:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009488:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000948c:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009492:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009496:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000949a:	de c1                	faddp  st(1),st
c000949c:	0f 89 6b ff ff ff    	jns    c000940d <calc_output_hex+0x6b>
c00094a2:	d9 ee                	fldz   
c00094a4:	d9 ee                	fldz   
c00094a6:	89 d8                	mov    eax,ebx
c00094a8:	29 c8                	sub    eax,ecx
c00094aa:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00094ae:	89 c1                	mov    ecx,eax
c00094b0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00094b4:	29 c8                	sub    eax,ecx
c00094b6:	99                   	cdq    
c00094b7:	f7 fb                	idiv   ebx
c00094b9:	89 da                	mov    edx,ebx
c00094bb:	0f af d0             	imul   edx,eax
c00094be:	40                   	inc    eax
c00094bf:	01 d1                	add    ecx,edx
c00094c1:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00094c6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00094ca:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00094ce:	8d 14 87             	lea    edx,[edi+eax*4]
c00094d1:	d9 ee                	fldz   
c00094d3:	d9 ee                	fldz   
c00094d5:	d9 ca                	fxch   st(2)
c00094d7:	eb 08                	jmp    c00094e1 <calc_output_hex+0x13f>
c00094d9:	d9 cc                	fxch   st(4)
c00094db:	d9 cb                	fxch   st(3)
c00094dd:	d9 ca                	fxch   st(2)
c00094df:	d9 c9                	fxch   st(1)
c00094e1:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00094e5:	89 c8                	mov    eax,ecx
c00094e7:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00094eb:	d9 ca                	fxch   st(2)
c00094ed:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094f1:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00094f5:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00094f9:	e8 a0 fa ff ff       	call   c0008f9e <fp_to_double>
c00094fe:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009502:	89 c8                	mov    eax,ecx
c0009504:	e8 8b fa ff ff       	call   c0008f94 <fp_to_int>
c0009509:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000950d:	29 d9                	sub    ecx,ebx
c000950f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009513:	83 ea 18             	sub    edx,0x18
c0009516:	d8 e1                	fsub   st,st(1)
c0009518:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000951c:	de c9                	fmulp  st(1),st
c000951e:	de c1                	faddp  st(1),st
c0009520:	d9 c0                	fld    st(0)
c0009522:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009528:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000952c:	de c1                	faddp  st(1),st
c000952e:	d9 c1                	fld    st(1)
c0009530:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009536:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c000953a:	de c1                	faddp  st(1),st
c000953c:	d9 c2                	fld    st(2)
c000953e:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009544:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009548:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000954c:	d9 c2                	fld    st(2)
c000954e:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009554:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009558:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000955c:	d9 c2                	fld    st(2)
c000955e:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009564:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009568:	de c1                	faddp  st(1),st
c000956a:	d9 cb                	fxch   st(3)
c000956c:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009572:	85 c9                	test   ecx,ecx
c0009574:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009578:	de c1                	faddp  st(1),st
c000957a:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000957e:	0f 8f 55 ff ff ff    	jg     c00094d9 <calc_output_hex+0x137>
c0009584:	d9 cb                	fxch   st(3)
c0009586:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000958a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000958d:	d9 1e                	fstp   DWORD PTR [esi]
c000958f:	d9 c9                	fxch   st(1)
c0009591:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009595:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009598:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000959b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000959f:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00095a3:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095a6:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c00095a9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00095ad:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095b1:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095b4:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00095b7:	d9 ca                	fxch   st(2)
c00095b9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095bd:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c0:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00095c3:	de c1                	faddp  st(1),st
c00095c5:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c8:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00095cb:	83 c4 7c             	add    esp,0x7c
c00095ce:	5b                   	pop    ebx
c00095cf:	5e                   	pop    esi
c00095d0:	5f                   	pop    edi
c00095d1:	5d                   	pop    ebp
c00095d2:	c3                   	ret    

c00095d3 <sinc_reset>:
c00095d3:	56                   	push   esi
c00095d4:	53                   	push   ebx
c00095d5:	51                   	push   ecx
c00095d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095da:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00095dd:	85 db                	test   ebx,ebx
c00095df:	74 51                	je     c0009632 <sinc_reset+0x5f>
c00095e1:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00095e8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00095ef:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00095f6:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00095fc:	d9 ee                	fldz   
c00095fe:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009601:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009604:	52                   	push   edx
c0009605:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009608:	c1 e0 02             	shl    eax,0x2
c000960b:	50                   	push   eax
c000960c:	6a 00                	push   0x0
c000960e:	56                   	push   esi
c000960f:	e8 f4 6f ff ff       	call   c0000608 <memset>
c0009614:	83 c4 0c             	add    esp,0xc
c0009617:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000961a:	c1 e0 02             	shl    eax,0x2
c000961d:	50                   	push   eax
c000961e:	68 aa 00 00 00       	push   0xaa
c0009623:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009626:	8d 04 86             	lea    eax,[esi+eax*4]
c0009629:	50                   	push   eax
c000962a:	e8 d9 6f ff ff       	call   c0000608 <memset>
c000962f:	83 c4 10             	add    esp,0x10
c0009632:	58                   	pop    eax
c0009633:	5b                   	pop    ebx
c0009634:	5e                   	pop    esi
c0009635:	c3                   	ret    

c0009636 <calc_output_multi>:
c0009636:	55                   	push   ebp
c0009637:	57                   	push   edi
c0009638:	8d 78 44             	lea    edi,[eax+0x44]
c000963b:	56                   	push   esi
c000963c:	89 c6                	mov    esi,eax
c000963e:	53                   	push   ebx
c000963f:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c0009645:	83 ec 4c             	sub    esp,0x4c
c0009648:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000964c:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0009650:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009654:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009658:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000965c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009660:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009663:	e8 28 f9 ff ff       	call   c0008f90 <int_to_fp>
c0009668:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c000966b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000966f:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009673:	99                   	cdq    
c0009674:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009678:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000967c:	0f af d0             	imul   edx,eax
c000967f:	0f af c3             	imul   eax,ebx
c0009682:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009686:	29 c5                	sub    ebp,eax
c0009688:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000968c:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0009690:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009697:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000969b:	52                   	push   edx
c000969c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096a0:	6a 00                	push   0x0
c00096a2:	57                   	push   edi
c00096a3:	e8 60 6f ff ff       	call   c0000608 <memset>
c00096a8:	83 c4 10             	add    esp,0x10
c00096ab:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096af:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00096b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096b7:	e8 e2 f8 ff ff       	call   c0008f9e <fp_to_double>
c00096bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096c0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00096c4:	e8 cb f8 ff ff       	call   c0008f94 <fp_to_int>
c00096c9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00096cc:	89 d9                	mov    ecx,ebx
c00096ce:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00096d1:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00096d5:	d8 e1                	fsub   st,st(1)
c00096d7:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096db:	de c9                	fmulp  st(1),st
c00096dd:	de c1                	faddp  st(1),st
c00096df:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00096e3:	89 c8                	mov    eax,ecx
c00096e5:	bd 08 00 00 00       	mov    ebp,0x8
c00096ea:	99                   	cdq    
c00096eb:	f7 fd                	idiv   ebp
c00096ed:	4a                   	dec    edx
c00096ee:	83 fa 06             	cmp    edx,0x6
c00096f1:	77 07                	ja     c00096fa <calc_output_multi+0xc4>
c00096f3:	ff 24 95 00 fb 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0500]
c00096fa:	49                   	dec    ecx
c00096fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00096ff:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009702:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009709:	d9 c1                	fld    st(1)
c000970b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000970f:	dc 00                	fadd   QWORD PTR [eax]
c0009711:	dd 18                	fstp   QWORD PTR [eax]
c0009713:	49                   	dec    ecx
c0009714:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009718:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000971b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009722:	d9 c1                	fld    st(1)
c0009724:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009728:	dc 00                	fadd   QWORD PTR [eax]
c000972a:	dd 18                	fstp   QWORD PTR [eax]
c000972c:	49                   	dec    ecx
c000972d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009731:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009734:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000973b:	d9 c1                	fld    st(1)
c000973d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009741:	dc 00                	fadd   QWORD PTR [eax]
c0009743:	dd 18                	fstp   QWORD PTR [eax]
c0009745:	49                   	dec    ecx
c0009746:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000974a:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000974d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009754:	d9 c1                	fld    st(1)
c0009756:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000975a:	dc 00                	fadd   QWORD PTR [eax]
c000975c:	dd 18                	fstp   QWORD PTR [eax]
c000975e:	49                   	dec    ecx
c000975f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009763:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009766:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000976d:	d9 c1                	fld    st(1)
c000976f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009773:	dc 00                	fadd   QWORD PTR [eax]
c0009775:	dd 18                	fstp   QWORD PTR [eax]
c0009777:	49                   	dec    ecx
c0009778:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000977c:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000977f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009786:	d9 c1                	fld    st(1)
c0009788:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000978c:	dc 00                	fadd   QWORD PTR [eax]
c000978e:	dd 18                	fstp   QWORD PTR [eax]
c0009790:	49                   	dec    ecx
c0009791:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009795:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009798:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000979f:	d9 c1                	fld    st(1)
c00097a1:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097a5:	dc 00                	fadd   QWORD PTR [eax]
c00097a7:	dd 18                	fstp   QWORD PTR [eax]
c00097a9:	49                   	dec    ecx
c00097aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097ae:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b8:	d9 c1                	fld    st(1)
c00097ba:	85 c9                	test   ecx,ecx
c00097bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097c0:	dc 00                	fadd   QWORD PTR [eax]
c00097c2:	dd 18                	fstp   QWORD PTR [eax]
c00097c4:	0f 8f 19 ff ff ff    	jg     c00096e3 <calc_output_multi+0xad>
c00097ca:	dd d9                	fstp   st(1)
c00097cc:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c00097d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d4:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c00097d8:	0f 89 d1 fe ff ff    	jns    c00096af <calc_output_multi+0x79>
c00097de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097e2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00097e6:	89 d1                	mov    ecx,edx
c00097e8:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00097ec:	29 c8                	sub    eax,ecx
c00097ee:	99                   	cdq    
c00097ef:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c00097f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097f7:	0f af d0             	imul   edx,eax
c00097fa:	40                   	inc    eax
c00097fb:	01 d1                	add    ecx,edx
c00097fd:	0f af c3             	imul   eax,ebx
c0009800:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009804:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009807:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000980b:	50                   	push   eax
c000980c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009810:	6a 00                	push   0x0
c0009812:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009816:	e8 ed 6d ff ff       	call   c0000608 <memset>
c000981b:	83 c4 10             	add    esp,0x10
c000981e:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009822:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009826:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000982a:	e8 6f f7 ff ff       	call   c0008f9e <fp_to_double>
c000982f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009833:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009837:	e8 58 f7 ff ff       	call   c0008f94 <fp_to_int>
c000983c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000983f:	89 d9                	mov    ecx,ebx
c0009841:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009844:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009848:	d8 e1                	fsub   st,st(1)
c000984a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000984e:	de c9                	fmulp  st(1),st
c0009850:	de c1                	faddp  st(1),st
c0009852:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009856:	89 c8                	mov    eax,ecx
c0009858:	bd 08 00 00 00       	mov    ebp,0x8
c000985d:	99                   	cdq    
c000985e:	f7 fd                	idiv   ebp
c0009860:	4a                   	dec    edx
c0009861:	83 fa 06             	cmp    edx,0x6
c0009864:	77 07                	ja     c000986d <calc_output_multi+0x237>
c0009866:	ff 24 95 1c fb 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe04e4]
c000986d:	49                   	dec    ecx
c000986e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009872:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009876:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009879:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009880:	d9 c1                	fld    st(1)
c0009882:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009886:	dc 00                	fadd   QWORD PTR [eax]
c0009888:	dd 18                	fstp   QWORD PTR [eax]
c000988a:	49                   	dec    ecx
c000988b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000988f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009893:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009896:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000989d:	d9 c1                	fld    st(1)
c000989f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098a3:	dc 00                	fadd   QWORD PTR [eax]
c00098a5:	dd 18                	fstp   QWORD PTR [eax]
c00098a7:	49                   	dec    ecx
c00098a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098b0:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098b3:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098ba:	d9 c1                	fld    st(1)
c00098bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098c0:	dc 00                	fadd   QWORD PTR [eax]
c00098c2:	dd 18                	fstp   QWORD PTR [eax]
c00098c4:	49                   	dec    ecx
c00098c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098cd:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098d0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098d7:	d9 c1                	fld    st(1)
c00098d9:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098dd:	dc 00                	fadd   QWORD PTR [eax]
c00098df:	dd 18                	fstp   QWORD PTR [eax]
c00098e1:	49                   	dec    ecx
c00098e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098ea:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098ed:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098f4:	d9 c1                	fld    st(1)
c00098f6:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098fa:	dc 00                	fadd   QWORD PTR [eax]
c00098fc:	dd 18                	fstp   QWORD PTR [eax]
c00098fe:	49                   	dec    ecx
c00098ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009903:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009907:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000990a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009911:	d9 c1                	fld    st(1)
c0009913:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009917:	dc 00                	fadd   QWORD PTR [eax]
c0009919:	dd 18                	fstp   QWORD PTR [eax]
c000991b:	49                   	dec    ecx
c000991c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009920:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009924:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009927:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000992e:	d9 c1                	fld    st(1)
c0009930:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009934:	dc 00                	fadd   QWORD PTR [eax]
c0009936:	dd 18                	fstp   QWORD PTR [eax]
c0009938:	49                   	dec    ecx
c0009939:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000993d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009941:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009944:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000994b:	d9 c1                	fld    st(1)
c000994d:	85 c9                	test   ecx,ecx
c000994f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009953:	dc 00                	fadd   QWORD PTR [eax]
c0009955:	dd 18                	fstp   QWORD PTR [eax]
c0009957:	0f 8f f9 fe ff ff    	jg     c0009856 <calc_output_multi+0x220>
c000995d:	dd d9                	fstp   st(1)
c000995f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009963:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009967:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c000996b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009970:	0f 8f ac fe ff ff    	jg     c0009822 <calc_output_multi+0x1ec>
c0009976:	b9 08 00 00 00       	mov    ecx,0x8
c000997b:	89 d8                	mov    eax,ebx
c000997d:	99                   	cdq    
c000997e:	f7 f9                	idiv   ecx
c0009980:	4a                   	dec    edx
c0009981:	83 fa 06             	cmp    edx,0x6
c0009984:	77 07                	ja     c000998d <calc_output_multi+0x357>
c0009986:	ff 24 95 38 fb 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe04c8]
c000998d:	4b                   	dec    ebx
c000998e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009992:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009995:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009998:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000999c:	d8 c9                	fmul   st,st(1)
c000999e:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099a1:	4b                   	dec    ebx
c00099a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099a6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099a9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099b0:	d8 c9                	fmul   st,st(1)
c00099b2:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099b5:	4b                   	dec    ebx
c00099b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ba:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099bd:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099c0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099c4:	d8 c9                	fmul   st,st(1)
c00099c6:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099c9:	4b                   	dec    ebx
c00099ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ce:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099d1:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099d4:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099d8:	d8 c9                	fmul   st,st(1)
c00099da:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099dd:	4b                   	dec    ebx
c00099de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099e2:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099e5:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099e8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099ec:	d8 c9                	fmul   st,st(1)
c00099ee:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099f1:	4b                   	dec    ebx
c00099f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099f6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099f9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099fc:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a00:	d8 c9                	fmul   st,st(1)
c0009a02:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a05:	4b                   	dec    ebx
c0009a06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a0a:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a0d:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a10:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a14:	d8 c9                	fmul   st,st(1)
c0009a16:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a19:	4b                   	dec    ebx
c0009a1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a1e:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a21:	85 db                	test   ebx,ebx
c0009a23:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a26:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a2a:	d8 c9                	fmul   st,st(1)
c0009a2c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a2f:	0f 8f 46 ff ff ff    	jg     c000997b <calc_output_multi+0x345>
c0009a35:	dd d8                	fstp   st(0)
c0009a37:	83 c4 4c             	add    esp,0x4c
c0009a3a:	5b                   	pop    ebx
c0009a3b:	5e                   	pop    esi
c0009a3c:	5f                   	pop    edi
c0009a3d:	5d                   	pop    ebp
c0009a3e:	c3                   	ret    

c0009a3f <double_to_fp>:
c0009a3f:	d9 05 8c fc 01 c0    	fld    DWORD PTR ds:0xc001fc8c
c0009a45:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009a49:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009a4d:	e9 be 48 01 00       	jmp    c001e310 <lrint>

c0009a52 <fmod_one>:
c0009a52:	83 ec 2c             	sub    esp,0x2c
c0009a55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a65:	83 ec 08             	sub    esp,0x8
c0009a68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a70:	e8 9b 48 01 00       	call   c001e310 <lrint>
c0009a75:	83 c4 10             	add    esp,0x10
c0009a78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a7c:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009a80:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009a84:	de e1                	fsubrp st(1),st
c0009a86:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009a8a:	d9 ee                	fldz   
c0009a8c:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009a90:	df e0                	fnstsw ax
c0009a92:	f6 c4 45             	test   ah,0x45
c0009a95:	75 0a                	jne    c0009aa1 <fmod_one+0x4f>
c0009a97:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009a9b:	d9 e8                	fld1   
c0009a9d:	de c1                	faddp  st(1),st
c0009a9f:	eb 04                	jmp    c0009aa5 <fmod_one+0x53>
c0009aa1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009aa5:	83 c4 2c             	add    esp,0x2c
c0009aa8:	c3                   	ret    

c0009aa9 <prepare_data>:
c0009aa9:	55                   	push   ebp
c0009aaa:	57                   	push   edi
c0009aab:	56                   	push   esi
c0009aac:	53                   	push   ebx
c0009aad:	83 ec 1c             	sub    esp,0x1c
c0009ab0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009ab4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009ab8:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009abc:	0f 89 57 01 00 00    	jns    c0009c19 <prepare_data+0x170>
c0009ac2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009ac5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ac8:	85 d2                	test   edx,edx
c0009aca:	75 0d                	jne    c0009ad9 <prepare_data+0x30>
c0009acc:	8d 14 36             	lea    edx,[esi+esi*1]
c0009acf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009ad2:	29 d0                	sub    eax,edx
c0009ad4:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ad7:	eb 44                	jmp    c0009b1d <prepare_data+0x74>
c0009ad9:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009adc:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009adf:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009ae2:	39 c1                	cmp    ecx,eax
c0009ae4:	7d 04                	jge    c0009aea <prepare_data+0x41>
c0009ae6:	29 d0                	sub    eax,edx
c0009ae8:	eb 2d                	jmp    c0009b17 <prepare_data+0x6e>
c0009aea:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009af0:	29 d7                	sub    edi,edx
c0009af2:	01 f7                	add    edi,esi
c0009af4:	51                   	push   ecx
c0009af5:	29 f2                	sub    edx,esi
c0009af7:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009afe:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b01:	51                   	push   ecx
c0009b02:	52                   	push   edx
c0009b03:	50                   	push   eax
c0009b04:	e8 91 6a ff ff       	call   c000059a <memmove>
c0009b09:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b0c:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b0f:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009b12:	29 f0                	sub    eax,esi
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	29 f0                	sub    eax,esi
c0009b19:	79 02                	jns    c0009b1d <prepare_data+0x74>
c0009b1b:	31 c0                	xor    eax,eax
c0009b1d:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009b20:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009b23:	29 ef                	sub    edi,ebp
c0009b25:	39 c7                	cmp    edi,eax
c0009b27:	7e 02                	jle    c0009b2b <prepare_data+0x82>
c0009b29:	89 c7                	mov    edi,eax
c0009b2b:	89 f8                	mov    eax,edi
c0009b2d:	99                   	cdq    
c0009b2e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009b31:	b8 15 00 00 00       	mov    eax,0x15
c0009b36:	29 d7                	sub    edi,edx
c0009b38:	0f 88 dd 00 00 00    	js     c0009c1b <prepare_data+0x172>
c0009b3e:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009b41:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009b44:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009b47:	0f 8f ce 00 00 00    	jg     c0009c1b <prepare_data+0x172>
c0009b4d:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009b53:	50                   	push   eax
c0009b54:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009b5b:	50                   	push   eax
c0009b5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b62:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009b65:	50                   	push   eax
c0009b66:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009b69:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009b6d:	50                   	push   eax
c0009b6e:	e8 5f 6a ff ff       	call   c00005d2 <memcpy>
c0009b73:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009b76:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009b79:	01 fd                	add    ebp,edi
c0009b7b:	01 f9                	add    ecx,edi
c0009b7d:	83 c4 10             	add    esp,0x10
c0009b80:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009b83:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009b86:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009b89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b8d:	0f 85 86 00 00 00    	jne    c0009c19 <prepare_data+0x170>
c0009b93:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009b96:	89 e8                	mov    eax,ebp
c0009b98:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009b9b:	29 c8                	sub    eax,ecx
c0009b9d:	39 f8                	cmp    eax,edi
c0009b9f:	7d 78                	jge    c0009c19 <prepare_data+0x170>
c0009ba1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009ba5:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009ba9:	74 6e                	je     c0009c19 <prepare_data+0x170>
c0009bab:	8d 7e 04             	lea    edi,[esi+0x4]
c0009bae:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009bb2:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009bb5:	29 ef                	sub    edi,ebp
c0009bb7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009bbb:	7c 29                	jl     c0009be6 <prepare_data+0x13d>
c0009bbd:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bc0:	29 f1                	sub    ecx,esi
c0009bc2:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009bc9:	55                   	push   ebp
c0009bca:	50                   	push   eax
c0009bcb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bce:	50                   	push   eax
c0009bcf:	52                   	push   edx
c0009bd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009bd4:	e8 c1 69 ff ff       	call   c000059a <memmove>
c0009bd9:	83 c4 10             	add    esp,0x10
c0009bdc:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bdf:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009be2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009be6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009be9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009bec:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009bef:	83 c6 05             	add    esi,0x5
c0009bf2:	78 07                	js     c0009bfb <prepare_data+0x152>
c0009bf4:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bf7:	39 cf                	cmp    edi,ecx
c0009bf9:	7e 04                	jle    c0009bff <prepare_data+0x156>
c0009bfb:	89 ce                	mov    esi,ecx
c0009bfd:	29 c6                	sub    esi,eax
c0009bff:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c02:	51                   	push   ecx
c0009c03:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c0a:	51                   	push   ecx
c0009c0b:	6a 00                	push   0x0
c0009c0d:	50                   	push   eax
c0009c0e:	e8 f5 69 ff ff       	call   c0000608 <memset>
c0009c13:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009c16:	83 c4 10             	add    esp,0x10
c0009c19:	31 c0                	xor    eax,eax
c0009c1b:	83 c4 1c             	add    esp,0x1c
c0009c1e:	5b                   	pop    ebx
c0009c1f:	5e                   	pop    esi
c0009c20:	5f                   	pop    edi
c0009c21:	5d                   	pop    ebp
c0009c22:	c3                   	ret    

c0009c23 <sinc_multichan_vari_process>:
c0009c23:	55                   	push   ebp
c0009c24:	b8 05 00 00 00       	mov    eax,0x5
c0009c29:	57                   	push   edi
c0009c2a:	56                   	push   esi
c0009c2b:	53                   	push   ebx
c0009c2c:	83 ec 3c             	sub    esp,0x3c
c0009c2f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009c33:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009c37:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009c3a:	85 db                	test   ebx,ebx
c0009c3c:	0f 84 5d 02 00 00    	je     c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c42:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009c45:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009c48:	0f af d0             	imul   edx,eax
c0009c4b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009c4e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009c52:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009c59:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009c5c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009c63:	dd 06                	fld    QWORD PTR [esi]
c0009c65:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009c69:	55                   	push   ebp
c0009c6a:	55                   	push   ebp
c0009c6b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009c6e:	e8 d9 f2 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009c73:	89 c2                	mov    edx,eax
c0009c75:	58                   	pop    eax
c0009c76:	85 d2                	test   edx,edx
c0009c78:	59                   	pop    ecx
c0009c79:	b8 16 00 00 00       	mov    eax,0x16
c0009c7e:	0f 85 1b 02 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c84:	d9 05 90 fc 01 c0    	fld    DWORD PTR ds:0xc001fc90
c0009c8a:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009c8d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009c90:	dd 06                	fld    QWORD PTR [esi]
c0009c92:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009c95:	d8 d1                	fcom   st(1)
c0009c97:	df e0                	fnstsw ax
c0009c99:	9e                   	sahf   
c0009c9a:	76 0f                	jbe    c0009cab <sinc_multichan_vari_process+0x88>
c0009c9c:	dd d8                	fstp   st(0)
c0009c9e:	d9 e8                	fld1   
c0009ca0:	d8 d9                	fcomp  st(1)
c0009ca2:	df e0                	fnstsw ax
c0009ca4:	9e                   	sahf   
c0009ca5:	77 0f                	ja     c0009cb6 <sinc_multichan_vari_process+0x93>
c0009ca7:	dd d8                	fstp   st(0)
c0009ca9:	eb 11                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cab:	dd d9                	fstp   st(1)
c0009cad:	d9 e8                	fld1   
c0009caf:	d8 d9                	fcomp  st(1)
c0009cb1:	df e0                	fnstsw ax
c0009cb3:	9e                   	sahf   
c0009cb4:	76 04                	jbe    c0009cba <sinc_multichan_vari_process+0x97>
c0009cb6:	de f9                	fdivp  st(1),st
c0009cb8:	eb 02                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cba:	dd d8                	fstp   st(0)
c0009cbc:	83 ec 10             	sub    esp,0x10
c0009cbf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cc5:	e8 46 46 01 00       	call   c001e310 <lrint>
c0009cca:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009ccd:	40                   	inc    eax
c0009cce:	dd 14 24             	fst    QWORD PTR [esp]
c0009cd1:	0f af c5             	imul   eax,ebp
c0009cd4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009cd8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009cdc:	e8 71 fd ff ff       	call   c0009a52 <fmod_one>
c0009ce1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ce4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009ce8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ceb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009cef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cf3:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009cf7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cfa:	e8 11 46 01 00       	call   c001e310 <lrint>
c0009cff:	0f af e8             	imul   ebp,eax
c0009d02:	d9 e8                	fld1   
c0009d04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d08:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d0c:	01 e8                	add    eax,ebp
c0009d0e:	dc 05 f8 fa 01 c0    	fadd   QWORD PTR ds:0xc001faf8
c0009d14:	99                   	cdq    
c0009d15:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d19:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009d1c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009d1f:	83 c4 10             	add    esp,0x10
c0009d22:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009d25:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009d28:	7d 4b                	jge    c0009d75 <sinc_multichan_vari_process+0x152>
c0009d2a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d2d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d30:	01 c8                	add    eax,ecx
c0009d32:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d35:	99                   	cdq    
c0009d36:	f7 f9                	idiv   ecx
c0009d38:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d3c:	7d 09                	jge    c0009d47 <sinc_multichan_vari_process+0x124>
c0009d3e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009d41:	85 c0                	test   eax,eax
c0009d43:	79 57                	jns    c0009d9c <sinc_multichan_vari_process+0x179>
c0009d45:	eb 70                	jmp    c0009db7 <sinc_multichan_vari_process+0x194>
c0009d47:	51                   	push   ecx
c0009d48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d4c:	57                   	push   edi
c0009d4d:	53                   	push   ebx
c0009d4e:	e8 56 fd ff ff       	call   c0009aa9 <prepare_data>
c0009d53:	83 c4 10             	add    esp,0x10
c0009d56:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009d59:	85 c0                	test   eax,eax
c0009d5b:	0f 85 3e 01 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d61:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d64:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d67:	01 c8                	add    eax,ecx
c0009d69:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d6c:	99                   	cdq    
c0009d6d:	f7 f9                	idiv   ecx
c0009d6f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d73:	7c c9                	jl     c0009d3e <sinc_multichan_vari_process+0x11b>
c0009d75:	dd 04 24             	fld    QWORD PTR [esp]
c0009d78:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009d7b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009d7f:	dd 1e                	fstp   QWORD PTR [esi]
c0009d81:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009d84:	99                   	cdq    
c0009d85:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d88:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009d8b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009d8e:	99                   	cdq    
c0009d8f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d92:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009d95:	31 c0                	xor    eax,eax
c0009d97:	e9 03 01 00 00       	jmp    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da0:	dd 04 24             	fld    QWORD PTR [esp]
c0009da3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009da6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009daa:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009dae:	d9 c9                	fxch   st(1)
c0009db0:	de d9                	fcompp 
c0009db2:	df e0                	fnstsw ax
c0009db4:	9e                   	sahf   
c0009db5:	73 be                	jae    c0009d75 <sinc_multichan_vari_process+0x152>
c0009db7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009dbb:	7e 31                	jle    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009dbd:	83 ec 10             	sub    esp,0x10
c0009dc0:	dd 06                	fld    QWORD PTR [esi]
c0009dc2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dc8:	e8 23 45 01 00       	call   c001e2f0 <fabs>
c0009dcd:	83 c4 10             	add    esp,0x10
c0009dd0:	dc 1d 80 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fc80
c0009dd6:	df e0                	fnstsw ax
c0009dd8:	9e                   	sahf   
c0009dd9:	76 13                	jbe    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009ddb:	dd 06                	fld    QWORD PTR [esi]
c0009ddd:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009de0:	d8 e1                	fsub   st,st(1)
c0009de2:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009de5:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009de8:	de c1                	faddp  st(1),st
c0009dea:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009dee:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009df1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009df5:	d9 e8                	fld1   
c0009df7:	d8 d9                	fcomp  st(1)
c0009df9:	df e0                	fnstsw ax
c0009dfb:	9e                   	sahf   
c0009dfc:	77 04                	ja     c0009e02 <sinc_multichan_vari_process+0x1df>
c0009dfe:	dd d8                	fstp   st(0)
c0009e00:	d9 e8                	fld1   
c0009e02:	de c9                	fmulp  st(1),st
c0009e04:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e08:	50                   	push   eax
c0009e09:	50                   	push   eax
c0009e0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e12:	e8 28 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e17:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009e1b:	89 c5                	mov    ebp,eax
c0009e1d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009e21:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e24:	e8 16 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e29:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009e2c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009e2f:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009e32:	89 c1                	mov    ecx,eax
c0009e34:	52                   	push   edx
c0009e35:	89 d8                	mov    eax,ebx
c0009e37:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009e3b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009e3e:	52                   	push   edx
c0009e3f:	52                   	push   edx
c0009e40:	89 ea                	mov    edx,ebp
c0009e42:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009e48:	e8 e9 f7 ff ff       	call   c0009636 <calc_output_multi>
c0009e4d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009e50:	d9 e8                	fld1   
c0009e52:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009e55:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009e59:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e5d:	83 c4 10             	add    esp,0x10
c0009e60:	dd 14 24             	fst    QWORD PTR [esp]
c0009e63:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009e67:	e8 e6 fb ff ff       	call   c0009a52 <fmod_one>
c0009e6c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009e6f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009e73:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009e76:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009e7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e7e:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009e82:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e85:	e8 86 44 01 00       	call   c001e310 <lrint>
c0009e8a:	0f af e8             	imul   ebp,eax
c0009e8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009e91:	01 e8                	add    eax,ebp
c0009e93:	99                   	cdq    
c0009e94:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009e97:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009e9a:	e9 80 fe ff ff       	jmp    c0009d1f <sinc_multichan_vari_process+0xfc>
c0009e9f:	83 c4 3c             	add    esp,0x3c
c0009ea2:	5b                   	pop    ebx
c0009ea3:	5e                   	pop    esi
c0009ea4:	5f                   	pop    edi
c0009ea5:	5d                   	pop    ebp
c0009ea6:	c3                   	ret    

c0009ea7 <sinc_hex_vari_process>:
c0009ea7:	55                   	push   ebp
c0009ea8:	b8 05 00 00 00       	mov    eax,0x5
c0009ead:	57                   	push   edi
c0009eae:	56                   	push   esi
c0009eaf:	53                   	push   ebx
c0009eb0:	83 ec 3c             	sub    esp,0x3c
c0009eb3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009eb7:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009ebb:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009ebe:	85 db                	test   ebx,ebx
c0009ec0:	0f 84 58 02 00 00    	je     c000a11e <sinc_hex_vari_process+0x277>
c0009ec6:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009ec9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009ecc:	0f af d0             	imul   edx,eax
c0009ecf:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009ed2:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ed6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009edd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ee0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009ee7:	dd 06                	fld    QWORD PTR [esi]
c0009ee9:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009eed:	55                   	push   ebp
c0009eee:	55                   	push   ebp
c0009eef:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ef2:	e8 55 f0 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009ef7:	89 c2                	mov    edx,eax
c0009ef9:	58                   	pop    eax
c0009efa:	85 d2                	test   edx,edx
c0009efc:	59                   	pop    ecx
c0009efd:	b8 16 00 00 00       	mov    eax,0x16
c0009f02:	0f 85 16 02 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009f08:	d9 05 90 fc 01 c0    	fld    DWORD PTR ds:0xc001fc90
c0009f0e:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f11:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009f14:	dd 06                	fld    QWORD PTR [esi]
c0009f16:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009f19:	d8 d1                	fcom   st(1)
c0009f1b:	df e0                	fnstsw ax
c0009f1d:	9e                   	sahf   
c0009f1e:	76 0f                	jbe    c0009f2f <sinc_hex_vari_process+0x88>
c0009f20:	dd d8                	fstp   st(0)
c0009f22:	d9 e8                	fld1   
c0009f24:	d8 d9                	fcomp  st(1)
c0009f26:	df e0                	fnstsw ax
c0009f28:	9e                   	sahf   
c0009f29:	77 0f                	ja     c0009f3a <sinc_hex_vari_process+0x93>
c0009f2b:	dd d8                	fstp   st(0)
c0009f2d:	eb 11                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f2f:	dd d9                	fstp   st(1)
c0009f31:	d9 e8                	fld1   
c0009f33:	d8 d9                	fcomp  st(1)
c0009f35:	df e0                	fnstsw ax
c0009f37:	9e                   	sahf   
c0009f38:	76 04                	jbe    c0009f3e <sinc_hex_vari_process+0x97>
c0009f3a:	de f9                	fdivp  st(1),st
c0009f3c:	eb 02                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f3e:	dd d8                	fstp   st(0)
c0009f40:	83 ec 10             	sub    esp,0x10
c0009f43:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f46:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f49:	e8 c2 43 01 00       	call   c001e310 <lrint>
c0009f4e:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009f51:	40                   	inc    eax
c0009f52:	dd 14 24             	fst    QWORD PTR [esp]
c0009f55:	0f af c5             	imul   eax,ebp
c0009f58:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f5c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009f60:	e8 ed fa ff ff       	call   c0009a52 <fmod_one>
c0009f65:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f68:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f6c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f6f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009f73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f77:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f7b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f7e:	e8 8d 43 01 00       	call   c001e310 <lrint>
c0009f83:	0f af e8             	imul   ebp,eax
c0009f86:	d9 e8                	fld1   
c0009f88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f8c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009f90:	01 e8                	add    eax,ebp
c0009f92:	dc 05 f8 fa 01 c0    	fadd   QWORD PTR ds:0xc001faf8
c0009f98:	99                   	cdq    
c0009f99:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f9d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009fa0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009fa3:	83 c4 10             	add    esp,0x10
c0009fa6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009fa9:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009fac:	7d 4b                	jge    c0009ff9 <sinc_hex_vari_process+0x152>
c0009fae:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009fb4:	01 c8                	add    eax,ecx
c0009fb6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009fb9:	99                   	cdq    
c0009fba:	f7 f9                	idiv   ecx
c0009fbc:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009fc0:	7d 09                	jge    c0009fcb <sinc_hex_vari_process+0x124>
c0009fc2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009fc5:	85 c0                	test   eax,eax
c0009fc7:	79 57                	jns    c000a020 <sinc_hex_vari_process+0x179>
c0009fc9:	eb 70                	jmp    c000a03b <sinc_hex_vari_process+0x194>
c0009fcb:	51                   	push   ecx
c0009fcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009fd0:	57                   	push   edi
c0009fd1:	53                   	push   ebx
c0009fd2:	e8 d2 fa ff ff       	call   c0009aa9 <prepare_data>
c0009fd7:	83 c4 10             	add    esp,0x10
c0009fda:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009fdd:	85 c0                	test   eax,eax
c0009fdf:	0f 85 39 01 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009fe5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fe8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009feb:	01 c8                	add    eax,ecx
c0009fed:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009ff0:	99                   	cdq    
c0009ff1:	f7 f9                	idiv   ecx
c0009ff3:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009ff7:	7c c9                	jl     c0009fc2 <sinc_hex_vari_process+0x11b>
c0009ff9:	dd 04 24             	fld    QWORD PTR [esp]
c0009ffc:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009fff:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a003:	dd 1e                	fstp   QWORD PTR [esi]
c000a005:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a008:	99                   	cdq    
c000a009:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a00c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a00f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a012:	99                   	cdq    
c000a013:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a016:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a019:	31 c0                	xor    eax,eax
c000a01b:	e9 fe 00 00 00       	jmp    c000a11e <sinc_hex_vari_process+0x277>
c000a020:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a024:	dd 04 24             	fld    QWORD PTR [esp]
c000a027:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a02a:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a02e:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a032:	d9 c9                	fxch   st(1)
c000a034:	de d9                	fcompp 
c000a036:	df e0                	fnstsw ax
c000a038:	9e                   	sahf   
c000a039:	73 be                	jae    c0009ff9 <sinc_hex_vari_process+0x152>
c000a03b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a03f:	7e 31                	jle    c000a072 <sinc_hex_vari_process+0x1cb>
c000a041:	83 ec 10             	sub    esp,0x10
c000a044:	dd 06                	fld    QWORD PTR [esi]
c000a046:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a049:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a04c:	e8 9f 42 01 00       	call   c001e2f0 <fabs>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	dc 1d 80 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fc80
c000a05a:	df e0                	fnstsw ax
c000a05c:	9e                   	sahf   
c000a05d:	76 13                	jbe    c000a072 <sinc_hex_vari_process+0x1cb>
c000a05f:	dd 06                	fld    QWORD PTR [esi]
c000a061:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a064:	d8 e1                	fsub   st,st(1)
c000a066:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a069:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a06c:	de c1                	faddp  st(1),st
c000a06e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a072:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a075:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a079:	d9 e8                	fld1   
c000a07b:	d8 d9                	fcomp  st(1)
c000a07d:	df e0                	fnstsw ax
c000a07f:	9e                   	sahf   
c000a080:	77 04                	ja     c000a086 <sinc_hex_vari_process+0x1df>
c000a082:	dd d8                	fstp   st(0)
c000a084:	d9 e8                	fld1   
c000a086:	de c9                	fmulp  st(1),st
c000a088:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a08c:	50                   	push   eax
c000a08d:	50                   	push   eax
c000a08e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a092:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a096:	e8 a4 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a09b:	89 c5                	mov    ebp,eax
c000a09d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a0a1:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a0a5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0a8:	e8 92 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a0ad:	83 c4 0c             	add    esp,0xc
c000a0b0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a0b3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a0b6:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a0b9:	89 c1                	mov    ecx,eax
c000a0bb:	52                   	push   edx
c000a0bc:	89 d8                	mov    eax,ebx
c000a0be:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a0c2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a0c5:	52                   	push   edx
c000a0c6:	52                   	push   edx
c000a0c7:	89 ea                	mov    edx,ebp
c000a0c9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0cc:	e8 d1 f2 ff ff       	call   c00093a2 <calc_output_hex>
c000a0d1:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a0d5:	d9 e8                	fld1   
c000a0d7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a0db:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a0df:	dd 14 24             	fst    QWORD PTR [esp]
c000a0e2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a0e6:	e8 67 f9 ff ff       	call   c0009a52 <fmod_one>
c000a0eb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a0ee:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a0f2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a0f5:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a0f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a0fd:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a101:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a104:	e8 07 42 01 00       	call   c001e310 <lrint>
c000a109:	0f af e8             	imul   ebp,eax
c000a10c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a110:	01 e8                	add    eax,ebp
c000a112:	99                   	cdq    
c000a113:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a116:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a119:	e9 85 fe ff ff       	jmp    c0009fa3 <sinc_hex_vari_process+0xfc>
c000a11e:	83 c4 3c             	add    esp,0x3c
c000a121:	5b                   	pop    ebx
c000a122:	5e                   	pop    esi
c000a123:	5f                   	pop    edi
c000a124:	5d                   	pop    ebp
c000a125:	c3                   	ret    

c000a126 <sinc_quad_vari_process>:
c000a126:	55                   	push   ebp
c000a127:	b8 05 00 00 00       	mov    eax,0x5
c000a12c:	57                   	push   edi
c000a12d:	56                   	push   esi
c000a12e:	53                   	push   ebx
c000a12f:	83 ec 3c             	sub    esp,0x3c
c000a132:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a136:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a13a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a13d:	85 db                	test   ebx,ebx
c000a13f:	0f 84 58 02 00 00    	je     c000a39d <sinc_quad_vari_process+0x277>
c000a145:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a148:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a14b:	0f af d0             	imul   edx,eax
c000a14e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a151:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a155:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a15c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a15f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a166:	dd 06                	fld    QWORD PTR [esi]
c000a168:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a16c:	55                   	push   ebp
c000a16d:	55                   	push   ebp
c000a16e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a171:	e8 d6 ed ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a176:	89 c2                	mov    edx,eax
c000a178:	58                   	pop    eax
c000a179:	85 d2                	test   edx,edx
c000a17b:	59                   	pop    ecx
c000a17c:	b8 16 00 00 00       	mov    eax,0x16
c000a181:	0f 85 16 02 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a187:	d9 05 90 fc 01 c0    	fld    DWORD PTR ds:0xc001fc90
c000a18d:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a190:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a193:	dd 06                	fld    QWORD PTR [esi]
c000a195:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a198:	d8 d1                	fcom   st(1)
c000a19a:	df e0                	fnstsw ax
c000a19c:	9e                   	sahf   
c000a19d:	76 0f                	jbe    c000a1ae <sinc_quad_vari_process+0x88>
c000a19f:	dd d8                	fstp   st(0)
c000a1a1:	d9 e8                	fld1   
c000a1a3:	d8 d9                	fcomp  st(1)
c000a1a5:	df e0                	fnstsw ax
c000a1a7:	9e                   	sahf   
c000a1a8:	77 0f                	ja     c000a1b9 <sinc_quad_vari_process+0x93>
c000a1aa:	dd d8                	fstp   st(0)
c000a1ac:	eb 11                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1ae:	dd d9                	fstp   st(1)
c000a1b0:	d9 e8                	fld1   
c000a1b2:	d8 d9                	fcomp  st(1)
c000a1b4:	df e0                	fnstsw ax
c000a1b6:	9e                   	sahf   
c000a1b7:	76 04                	jbe    c000a1bd <sinc_quad_vari_process+0x97>
c000a1b9:	de f9                	fdivp  st(1),st
c000a1bb:	eb 02                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1bd:	dd d8                	fstp   st(0)
c000a1bf:	83 ec 10             	sub    esp,0x10
c000a1c2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1c8:	e8 43 41 01 00       	call   c001e310 <lrint>
c000a1cd:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a1d0:	40                   	inc    eax
c000a1d1:	dd 14 24             	fst    QWORD PTR [esp]
c000a1d4:	0f af c5             	imul   eax,ebp
c000a1d7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a1df:	e8 6e f8 ff ff       	call   c0009a52 <fmod_one>
c000a1e4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1e7:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1eb:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1ee:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a1f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1f6:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1fa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1fd:	e8 0e 41 01 00       	call   c001e310 <lrint>
c000a202:	0f af e8             	imul   ebp,eax
c000a205:	d9 e8                	fld1   
c000a207:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a20b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a20f:	01 e8                	add    eax,ebp
c000a211:	dc 05 f8 fa 01 c0    	fadd   QWORD PTR ds:0xc001faf8
c000a217:	99                   	cdq    
c000a218:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a21c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a21f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a222:	83 c4 10             	add    esp,0x10
c000a225:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a228:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a22b:	7d 4b                	jge    c000a278 <sinc_quad_vari_process+0x152>
c000a22d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a230:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a233:	01 c8                	add    eax,ecx
c000a235:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a238:	99                   	cdq    
c000a239:	f7 f9                	idiv   ecx
c000a23b:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a23f:	7d 09                	jge    c000a24a <sinc_quad_vari_process+0x124>
c000a241:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a244:	85 c0                	test   eax,eax
c000a246:	79 57                	jns    c000a29f <sinc_quad_vari_process+0x179>
c000a248:	eb 70                	jmp    c000a2ba <sinc_quad_vari_process+0x194>
c000a24a:	51                   	push   ecx
c000a24b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a24f:	57                   	push   edi
c000a250:	53                   	push   ebx
c000a251:	e8 53 f8 ff ff       	call   c0009aa9 <prepare_data>
c000a256:	83 c4 10             	add    esp,0x10
c000a259:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a25c:	85 c0                	test   eax,eax
c000a25e:	0f 85 39 01 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a264:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a267:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a26a:	01 c8                	add    eax,ecx
c000a26c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a26f:	99                   	cdq    
c000a270:	f7 f9                	idiv   ecx
c000a272:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a276:	7c c9                	jl     c000a241 <sinc_quad_vari_process+0x11b>
c000a278:	dd 04 24             	fld    QWORD PTR [esp]
c000a27b:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a27e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a282:	dd 1e                	fstp   QWORD PTR [esi]
c000a284:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a287:	99                   	cdq    
c000a288:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a28b:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a28e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a291:	99                   	cdq    
c000a292:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a295:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a298:	31 c0                	xor    eax,eax
c000a29a:	e9 fe 00 00 00       	jmp    c000a39d <sinc_quad_vari_process+0x277>
c000a29f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2a3:	dd 04 24             	fld    QWORD PTR [esp]
c000a2a6:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a2a9:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a2ad:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a2b1:	d9 c9                	fxch   st(1)
c000a2b3:	de d9                	fcompp 
c000a2b5:	df e0                	fnstsw ax
c000a2b7:	9e                   	sahf   
c000a2b8:	73 be                	jae    c000a278 <sinc_quad_vari_process+0x152>
c000a2ba:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a2be:	7e 31                	jle    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2c0:	83 ec 10             	sub    esp,0x10
c000a2c3:	dd 06                	fld    QWORD PTR [esi]
c000a2c5:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a2c8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2cb:	e8 20 40 01 00       	call   c001e2f0 <fabs>
c000a2d0:	83 c4 10             	add    esp,0x10
c000a2d3:	dc 1d 80 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fc80
c000a2d9:	df e0                	fnstsw ax
c000a2db:	9e                   	sahf   
c000a2dc:	76 13                	jbe    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2de:	dd 06                	fld    QWORD PTR [esi]
c000a2e0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a2e3:	d8 e1                	fsub   st,st(1)
c000a2e5:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a2e8:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a2eb:	de c1                	faddp  st(1),st
c000a2ed:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a2f1:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a2f4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a2f8:	d9 e8                	fld1   
c000a2fa:	d8 d9                	fcomp  st(1)
c000a2fc:	df e0                	fnstsw ax
c000a2fe:	9e                   	sahf   
c000a2ff:	77 04                	ja     c000a305 <sinc_quad_vari_process+0x1df>
c000a301:	dd d8                	fstp   st(0)
c000a303:	d9 e8                	fld1   
c000a305:	de c9                	fmulp  st(1),st
c000a307:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a30b:	50                   	push   eax
c000a30c:	50                   	push   eax
c000a30d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a311:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a315:	e8 25 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a31a:	89 c5                	mov    ebp,eax
c000a31c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a320:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a324:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a327:	e8 13 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a32c:	83 c4 0c             	add    esp,0xc
c000a32f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a332:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a335:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a338:	89 c1                	mov    ecx,eax
c000a33a:	52                   	push   edx
c000a33b:	89 d8                	mov    eax,ebx
c000a33d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a341:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a344:	52                   	push   edx
c000a345:	52                   	push   edx
c000a346:	89 ea                	mov    edx,ebp
c000a348:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a34b:	e8 8d ee ff ff       	call   c00091dd <calc_output_quad>
c000a350:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a354:	d9 e8                	fld1   
c000a356:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a35a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a35e:	dd 14 24             	fst    QWORD PTR [esp]
c000a361:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a365:	e8 e8 f6 ff ff       	call   c0009a52 <fmod_one>
c000a36a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a36d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a371:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a374:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a37c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a380:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a383:	e8 88 3f 01 00       	call   c001e310 <lrint>
c000a388:	0f af e8             	imul   ebp,eax
c000a38b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a38f:	01 e8                	add    eax,ebp
c000a391:	99                   	cdq    
c000a392:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a395:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a398:	e9 85 fe ff ff       	jmp    c000a222 <sinc_quad_vari_process+0xfc>
c000a39d:	83 c4 3c             	add    esp,0x3c
c000a3a0:	5b                   	pop    ebx
c000a3a1:	5e                   	pop    esi
c000a3a2:	5f                   	pop    edi
c000a3a3:	5d                   	pop    ebp
c000a3a4:	c3                   	ret    

c000a3a5 <sinc_stereo_vari_process>:
c000a3a5:	55                   	push   ebp
c000a3a6:	b8 05 00 00 00       	mov    eax,0x5
c000a3ab:	57                   	push   edi
c000a3ac:	56                   	push   esi
c000a3ad:	53                   	push   ebx
c000a3ae:	83 ec 3c             	sub    esp,0x3c
c000a3b1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a3b5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a3b9:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a3bc:	85 db                	test   ebx,ebx
c000a3be:	0f 84 58 02 00 00    	je     c000a61c <sinc_stereo_vari_process+0x277>
c000a3c4:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a3c7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a3ca:	0f af d0             	imul   edx,eax
c000a3cd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a3d0:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a3d4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a3db:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a3de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a3e5:	dd 06                	fld    QWORD PTR [esi]
c000a3e7:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a3eb:	55                   	push   ebp
c000a3ec:	55                   	push   ebp
c000a3ed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3f0:	e8 57 eb ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a3f5:	89 c2                	mov    edx,eax
c000a3f7:	58                   	pop    eax
c000a3f8:	85 d2                	test   edx,edx
c000a3fa:	59                   	pop    ecx
c000a3fb:	b8 16 00 00 00       	mov    eax,0x16
c000a400:	0f 85 16 02 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a406:	d9 05 90 fc 01 c0    	fld    DWORD PTR ds:0xc001fc90
c000a40c:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a40f:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a412:	dd 06                	fld    QWORD PTR [esi]
c000a414:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a417:	d8 d1                	fcom   st(1)
c000a419:	df e0                	fnstsw ax
c000a41b:	9e                   	sahf   
c000a41c:	76 0f                	jbe    c000a42d <sinc_stereo_vari_process+0x88>
c000a41e:	dd d8                	fstp   st(0)
c000a420:	d9 e8                	fld1   
c000a422:	d8 d9                	fcomp  st(1)
c000a424:	df e0                	fnstsw ax
c000a426:	9e                   	sahf   
c000a427:	77 0f                	ja     c000a438 <sinc_stereo_vari_process+0x93>
c000a429:	dd d8                	fstp   st(0)
c000a42b:	eb 11                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a42d:	dd d9                	fstp   st(1)
c000a42f:	d9 e8                	fld1   
c000a431:	d8 d9                	fcomp  st(1)
c000a433:	df e0                	fnstsw ax
c000a435:	9e                   	sahf   
c000a436:	76 04                	jbe    c000a43c <sinc_stereo_vari_process+0x97>
c000a438:	de f9                	fdivp  st(1),st
c000a43a:	eb 02                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a43c:	dd d8                	fstp   st(0)
c000a43e:	83 ec 10             	sub    esp,0x10
c000a441:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a444:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a447:	e8 c4 3e 01 00       	call   c001e310 <lrint>
c000a44c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a44f:	40                   	inc    eax
c000a450:	dd 14 24             	fst    QWORD PTR [esp]
c000a453:	0f af c5             	imul   eax,ebp
c000a456:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a45a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a45e:	e8 ef f5 ff ff       	call   c0009a52 <fmod_one>
c000a463:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a466:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a46a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a46d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a471:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a475:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a479:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a47c:	e8 8f 3e 01 00       	call   c001e310 <lrint>
c000a481:	0f af e8             	imul   ebp,eax
c000a484:	d9 e8                	fld1   
c000a486:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a48a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a48e:	01 e8                	add    eax,ebp
c000a490:	dc 05 f8 fa 01 c0    	fadd   QWORD PTR ds:0xc001faf8
c000a496:	99                   	cdq    
c000a497:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a49b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a49e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a4a1:	83 c4 10             	add    esp,0x10
c000a4a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a4a7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a4aa:	7d 4b                	jge    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a4ac:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4af:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4b2:	01 c8                	add    eax,ecx
c000a4b4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4b7:	99                   	cdq    
c000a4b8:	f7 f9                	idiv   ecx
c000a4ba:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4be:	7d 09                	jge    c000a4c9 <sinc_stereo_vari_process+0x124>
c000a4c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a4c3:	85 c0                	test   eax,eax
c000a4c5:	79 57                	jns    c000a51e <sinc_stereo_vari_process+0x179>
c000a4c7:	eb 70                	jmp    c000a539 <sinc_stereo_vari_process+0x194>
c000a4c9:	51                   	push   ecx
c000a4ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4ce:	57                   	push   edi
c000a4cf:	53                   	push   ebx
c000a4d0:	e8 d4 f5 ff ff       	call   c0009aa9 <prepare_data>
c000a4d5:	83 c4 10             	add    esp,0x10
c000a4d8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a4db:	85 c0                	test   eax,eax
c000a4dd:	0f 85 39 01 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a4e3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4e6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4e9:	01 c8                	add    eax,ecx
c000a4eb:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4ee:	99                   	cdq    
c000a4ef:	f7 f9                	idiv   ecx
c000a4f1:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4f5:	7c c9                	jl     c000a4c0 <sinc_stereo_vari_process+0x11b>
c000a4f7:	dd 04 24             	fld    QWORD PTR [esp]
c000a4fa:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a4fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a501:	dd 1e                	fstp   QWORD PTR [esi]
c000a503:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a506:	99                   	cdq    
c000a507:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a50a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a50d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a510:	99                   	cdq    
c000a511:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a514:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a517:	31 c0                	xor    eax,eax
c000a519:	e9 fe 00 00 00       	jmp    c000a61c <sinc_stereo_vari_process+0x277>
c000a51e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a522:	dd 04 24             	fld    QWORD PTR [esp]
c000a525:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a528:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a52c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a530:	d9 c9                	fxch   st(1)
c000a532:	de d9                	fcompp 
c000a534:	df e0                	fnstsw ax
c000a536:	9e                   	sahf   
c000a537:	73 be                	jae    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a539:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a53d:	7e 31                	jle    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a53f:	83 ec 10             	sub    esp,0x10
c000a542:	dd 06                	fld    QWORD PTR [esi]
c000a544:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a547:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a54a:	e8 a1 3d 01 00       	call   c001e2f0 <fabs>
c000a54f:	83 c4 10             	add    esp,0x10
c000a552:	dc 1d 80 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fc80
c000a558:	df e0                	fnstsw ax
c000a55a:	9e                   	sahf   
c000a55b:	76 13                	jbe    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a55d:	dd 06                	fld    QWORD PTR [esi]
c000a55f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a562:	d8 e1                	fsub   st,st(1)
c000a564:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a567:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a56a:	de c1                	faddp  st(1),st
c000a56c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a570:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a573:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a577:	d9 e8                	fld1   
c000a579:	d8 d9                	fcomp  st(1)
c000a57b:	df e0                	fnstsw ax
c000a57d:	9e                   	sahf   
c000a57e:	77 04                	ja     c000a584 <sinc_stereo_vari_process+0x1df>
c000a580:	dd d8                	fstp   st(0)
c000a582:	d9 e8                	fld1   
c000a584:	de c9                	fmulp  st(1),st
c000a586:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a58a:	50                   	push   eax
c000a58b:	50                   	push   eax
c000a58c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a594:	e8 a6 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a599:	89 c5                	mov    ebp,eax
c000a59b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a59f:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a5a3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5a6:	e8 94 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a5ab:	83 c4 0c             	add    esp,0xc
c000a5ae:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a5b1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a5b4:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a5b7:	89 c1                	mov    ecx,eax
c000a5b9:	52                   	push   edx
c000a5ba:	89 d8                	mov    eax,ebx
c000a5bc:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a5c0:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a5c3:	52                   	push   edx
c000a5c4:	52                   	push   edx
c000a5c5:	89 ea                	mov    edx,ebp
c000a5c7:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5ca:	e8 ce ea ff ff       	call   c000909d <calc_output_stereo>
c000a5cf:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a5d3:	d9 e8                	fld1   
c000a5d5:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a5d9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a5dd:	dd 14 24             	fst    QWORD PTR [esp]
c000a5e0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a5e4:	e8 69 f4 ff ff       	call   c0009a52 <fmod_one>
c000a5e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a5ec:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a5f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a5f3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a5f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5fb:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a5ff:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a602:	e8 09 3d 01 00       	call   c001e310 <lrint>
c000a607:	0f af e8             	imul   ebp,eax
c000a60a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a60e:	01 e8                	add    eax,ebp
c000a610:	99                   	cdq    
c000a611:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a614:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a617:	e9 85 fe ff ff       	jmp    c000a4a1 <sinc_stereo_vari_process+0xfc>
c000a61c:	83 c4 3c             	add    esp,0x3c
c000a61f:	5b                   	pop    ebx
c000a620:	5e                   	pop    esi
c000a621:	5f                   	pop    edi
c000a622:	5d                   	pop    ebp
c000a623:	c3                   	ret    

c000a624 <sinc_mono_vari_process>:
c000a624:	55                   	push   ebp
c000a625:	b8 05 00 00 00       	mov    eax,0x5
c000a62a:	57                   	push   edi
c000a62b:	56                   	push   esi
c000a62c:	53                   	push   ebx
c000a62d:	83 ec 3c             	sub    esp,0x3c
c000a630:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a634:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a638:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a63b:	85 db                	test   ebx,ebx
c000a63d:	0f 84 57 02 00 00    	je     c000a89a <sinc_mono_vari_process+0x276>
c000a643:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a646:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a649:	0f af d0             	imul   edx,eax
c000a64c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a64f:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a653:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a65a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a65d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a664:	dd 06                	fld    QWORD PTR [esi]
c000a666:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a66a:	51                   	push   ecx
c000a66b:	51                   	push   ecx
c000a66c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a66f:	e8 d8 e8 ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a674:	5d                   	pop    ebp
c000a675:	89 c2                	mov    edx,eax
c000a677:	58                   	pop    eax
c000a678:	85 d2                	test   edx,edx
c000a67a:	b8 16 00 00 00       	mov    eax,0x16
c000a67f:	0f 85 15 02 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a685:	d9 05 90 fc 01 c0    	fld    DWORD PTR ds:0xc001fc90
c000a68b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a68e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a691:	dd 06                	fld    QWORD PTR [esi]
c000a693:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a696:	d8 d1                	fcom   st(1)
c000a698:	df e0                	fnstsw ax
c000a69a:	9e                   	sahf   
c000a69b:	76 0f                	jbe    c000a6ac <sinc_mono_vari_process+0x88>
c000a69d:	dd d8                	fstp   st(0)
c000a69f:	d9 e8                	fld1   
c000a6a1:	d8 d9                	fcomp  st(1)
c000a6a3:	df e0                	fnstsw ax
c000a6a5:	9e                   	sahf   
c000a6a6:	77 0f                	ja     c000a6b7 <sinc_mono_vari_process+0x93>
c000a6a8:	dd d8                	fstp   st(0)
c000a6aa:	eb 11                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6ac:	dd d9                	fstp   st(1)
c000a6ae:	d9 e8                	fld1   
c000a6b0:	d8 d9                	fcomp  st(1)
c000a6b2:	df e0                	fnstsw ax
c000a6b4:	9e                   	sahf   
c000a6b5:	76 04                	jbe    c000a6bb <sinc_mono_vari_process+0x97>
c000a6b7:	de f9                	fdivp  st(1),st
c000a6b9:	eb 02                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6bb:	dd d8                	fstp   st(0)
c000a6bd:	83 ec 10             	sub    esp,0x10
c000a6c0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a6c3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6c6:	e8 45 3c 01 00       	call   c001e310 <lrint>
c000a6cb:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a6ce:	40                   	inc    eax
c000a6cf:	dd 14 24             	fst    QWORD PTR [esp]
c000a6d2:	0f af e8             	imul   ebp,eax
c000a6d5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a6d9:	e8 74 f3 ff ff       	call   c0009a52 <fmod_one>
c000a6de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a6e1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6e9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a6ed:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6f0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a6f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a6f8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6fb:	e8 10 3c 01 00       	call   c001e310 <lrint>
c000a700:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a705:	d9 e8                	fld1   
c000a707:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a70b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a70f:	99                   	cdq    
c000a710:	dc 05 f8 fa 01 c0    	fadd   QWORD PTR ds:0xc001faf8
c000a716:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a719:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a71d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a720:	83 c4 10             	add    esp,0x10
c000a723:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a726:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a729:	7d 44                	jge    c000a76f <sinc_mono_vari_process+0x14b>
c000a72b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a72e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a731:	01 c8                	add    eax,ecx
c000a733:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a736:	99                   	cdq    
c000a737:	f7 f9                	idiv   ecx
c000a739:	39 d5                	cmp    ebp,edx
c000a73b:	7d 09                	jge    c000a746 <sinc_mono_vari_process+0x122>
c000a73d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a740:	85 c0                	test   eax,eax
c000a742:	79 52                	jns    c000a796 <sinc_mono_vari_process+0x172>
c000a744:	eb 6b                	jmp    c000a7b1 <sinc_mono_vari_process+0x18d>
c000a746:	52                   	push   edx
c000a747:	55                   	push   ebp
c000a748:	57                   	push   edi
c000a749:	53                   	push   ebx
c000a74a:	e8 5a f3 ff ff       	call   c0009aa9 <prepare_data>
c000a74f:	83 c4 10             	add    esp,0x10
c000a752:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a755:	85 c0                	test   eax,eax
c000a757:	0f 85 3d 01 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a75d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a760:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a763:	01 c8                	add    eax,ecx
c000a765:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a768:	99                   	cdq    
c000a769:	f7 f9                	idiv   ecx
c000a76b:	39 d5                	cmp    ebp,edx
c000a76d:	7c ce                	jl     c000a73d <sinc_mono_vari_process+0x119>
c000a76f:	dd 04 24             	fld    QWORD PTR [esp]
c000a772:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a775:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a779:	dd 1e                	fstp   QWORD PTR [esi]
c000a77b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a77e:	99                   	cdq    
c000a77f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a782:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a785:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a788:	99                   	cdq    
c000a789:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a78c:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a78f:	31 c0                	xor    eax,eax
c000a791:	e9 04 01 00 00       	jmp    c000a89a <sinc_mono_vari_process+0x276>
c000a796:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a79a:	dd 04 24             	fld    QWORD PTR [esp]
c000a79d:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a7a0:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a7a4:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a7a8:	d9 c9                	fxch   st(1)
c000a7aa:	de d9                	fcompp 
c000a7ac:	df e0                	fnstsw ax
c000a7ae:	9e                   	sahf   
c000a7af:	77 be                	ja     c000a76f <sinc_mono_vari_process+0x14b>
c000a7b1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a7b5:	7e 31                	jle    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7b7:	83 ec 10             	sub    esp,0x10
c000a7ba:	dd 06                	fld    QWORD PTR [esi]
c000a7bc:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a7bf:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7c2:	e8 29 3b 01 00       	call   c001e2f0 <fabs>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	dc 1d 80 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fc80
c000a7d0:	df e0                	fnstsw ax
c000a7d2:	9e                   	sahf   
c000a7d3:	76 13                	jbe    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7d5:	dd 06                	fld    QWORD PTR [esi]
c000a7d7:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a7da:	d8 e1                	fsub   st,st(1)
c000a7dc:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a7df:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a7e2:	de c1                	faddp  st(1),st
c000a7e4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a7e8:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a7eb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a7ef:	d9 e8                	fld1   
c000a7f1:	d8 d9                	fcomp  st(1)
c000a7f3:	df e0                	fnstsw ax
c000a7f5:	9e                   	sahf   
c000a7f6:	77 04                	ja     c000a7fc <sinc_mono_vari_process+0x1d8>
c000a7f8:	dd d8                	fstp   st(0)
c000a7fa:	d9 e8                	fld1   
c000a7fc:	de c9                	fmulp  st(1),st
c000a7fe:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a802:	50                   	push   eax
c000a803:	50                   	push   eax
c000a804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a80c:	e8 2e f2 ff ff       	call   c0009a3f <double_to_fp>
c000a811:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a815:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a819:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a81d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a820:	e8 1a f2 ff ff       	call   c0009a3f <double_to_fp>
c000a825:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a829:	89 c1                	mov    ecx,eax
c000a82b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a82f:	89 d8                	mov    eax,ebx
c000a831:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a834:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a838:	e8 7b e7 ff ff       	call   c0008fb8 <calc_output_single>
c000a83d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a840:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a843:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a847:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a84a:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a84d:	d9 e8                	fld1   
c000a84f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a853:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a857:	dd 14 24             	fst    QWORD PTR [esp]
c000a85a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a85e:	e8 ef f1 ff ff       	call   c0009a52 <fmod_one>
c000a863:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a866:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a86a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a86e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a872:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a875:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a879:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a87d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a880:	e8 8b 3a 01 00       	call   c001e310 <lrint>
c000a885:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a88a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88e:	99                   	cdq    
c000a88f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a892:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a895:	e9 86 fe ff ff       	jmp    c000a720 <sinc_mono_vari_process+0xfc>
c000a89a:	83 c4 3c             	add    esp,0x3c
c000a89d:	5b                   	pop    ebx
c000a89e:	5e                   	pop    esi
c000a89f:	5f                   	pop    edi
c000a8a0:	5d                   	pop    ebp
c000a8a1:	c3                   	ret    

c000a8a2 <sinc_get_name>:
c000a8a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8a6:	31 c0                	xor    eax,eax
c000a8a8:	83 fa 02             	cmp    edx,0x2
c000a8ab:	77 07                	ja     c000a8b4 <sinc_get_name+0x12>
c000a8ad:	8b 04 95 60 fb 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe04a0]
c000a8b4:	c3                   	ret    

c000a8b5 <sinc_get_description>:
c000a8b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8b9:	31 c0                	xor    eax,eax
c000a8bb:	83 fa 02             	cmp    edx,0x2
c000a8be:	77 07                	ja     c000a8c7 <sinc_get_description+0x12>
c000a8c0:	8b 04 95 54 fb 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe04ac]
c000a8c7:	c3                   	ret    

c000a8c8 <sinc_set_converter>:
c000a8c8:	53                   	push   ebx
c000a8c9:	81 ec 58 08 00 00    	sub    esp,0x858
c000a8cf:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a8d6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a8d9:	85 c0                	test   eax,eax
c000a8db:	74 13                	je     c000a8f0 <sinc_set_converter+0x28>
c000a8dd:	83 ec 0c             	sub    esp,0xc
c000a8e0:	50                   	push   eax
c000a8e1:	e8 8f 29 00 00       	call   c000d275 <free>
c000a8e6:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a8ed:	83 c4 10             	add    esp,0x10
c000a8f0:	50                   	push   eax
c000a8f1:	68 44 08 00 00       	push   0x844
c000a8f6:	6a 00                	push   0x0
c000a8f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a8fc:	50                   	push   eax
c000a8fd:	e8 06 5d ff ff       	call   c0000608 <memset>
c000a902:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a905:	83 c4 10             	add    esp,0x10
c000a908:	b8 0b 00 00 00       	mov    eax,0xb
c000a90d:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a913:	7f 6e                	jg     c000a983 <sinc_set_converter+0xbb>
c000a915:	83 fa 01             	cmp    edx,0x1
c000a918:	75 10                	jne    c000a92a <sinc_set_converter+0x62>
c000a91a:	c7 43 24 24 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a624
c000a921:	c7 43 20 24 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a624
c000a928:	eb 4d                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a92a:	83 fa 02             	cmp    edx,0x2
c000a92d:	75 10                	jne    c000a93f <sinc_set_converter+0x77>
c000a92f:	c7 43 24 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a3a5
c000a936:	c7 43 20 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a3a5
c000a93d:	eb 38                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a93f:	83 fa 04             	cmp    edx,0x4
c000a942:	75 10                	jne    c000a954 <sinc_set_converter+0x8c>
c000a944:	c7 43 24 26 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a126
c000a94b:	c7 43 20 26 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a126
c000a952:	eb 23                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a954:	83 fa 06             	cmp    edx,0x6
c000a957:	75 10                	jne    c000a969 <sinc_set_converter+0xa1>
c000a959:	c7 43 24 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009ea7
c000a960:	c7 43 20 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009ea7
c000a967:	eb 0e                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a969:	c7 43 24 23 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009c23
c000a970:	c7 43 20 23 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009c23
c000a977:	c7 43 28 d3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095d3
c000a97e:	b8 0a 00 00 00       	mov    eax,0xa
c000a983:	81 c4 58 08 00 00    	add    esp,0x858
c000a989:	5b                   	pop    ebx
c000a98a:	c3                   	ret    

c000a98b <is_bad_src_ratio>:
c000a98b:	83 ec 0c             	sub    esp,0xc
c000a98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a992:	89 04 24             	mov    DWORD PTR [esp],eax
c000a995:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a999:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a99d:	dd 04 24             	fld    QWORD PTR [esp]
c000a9a0:	dd 05 80 fa 01 c0    	fld    QWORD PTR ds:0xc001fa80
c000a9a6:	de d9                	fcompp 
c000a9a8:	df e0                	fnstsw ax
c000a9aa:	f6 c4 45             	test   ah,0x45
c000a9ad:	74 10                	je     c000a9bf <is_bad_src_ratio+0x34>
c000a9af:	dd 04 24             	fld    QWORD PTR [esp]
c000a9b2:	dc 1d 88 fa 01 c0    	fcomp  QWORD PTR ds:0xc001fa88
c000a9b8:	df e0                	fnstsw ax
c000a9ba:	f6 c4 45             	test   ah,0x45
c000a9bd:	75 07                	jne    c000a9c6 <is_bad_src_ratio+0x3b>
c000a9bf:	b8 01 00 00 00       	mov    eax,0x1
c000a9c4:	eb 05                	jmp    c000a9cb <is_bad_src_ratio+0x40>
c000a9c6:	b8 00 00 00 00       	mov    eax,0x0
c000a9cb:	83 c4 0c             	add    esp,0xc
c000a9ce:	c3                   	ret    

c000a9cf <fmod_one>:
c000a9cf:	83 ec 2c             	sub    esp,0x2c
c000a9d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a9d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9e2:	83 ec 08             	sub    esp,0x8
c000a9e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ed:	e8 1e 39 01 00       	call   c001e310 <lrint>
c000a9f2:	83 c4 10             	add    esp,0x10
c000a9f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9f9:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000a9fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa01:	de e1                	fsubrp st(1),st
c000aa03:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa07:	d9 ee                	fldz   
c000aa09:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa0d:	df e0                	fnstsw ax
c000aa0f:	f6 c4 45             	test   ah,0x45
c000aa12:	75 0a                	jne    c000aa1e <fmod_one+0x4f>
c000aa14:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa18:	d9 e8                	fld1   
c000aa1a:	de c1                	faddp  st(1),st
c000aa1c:	eb 04                	jmp    c000aa22 <fmod_one+0x53>
c000aa1e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa22:	83 c4 2c             	add    esp,0x2c
c000aa25:	c3                   	ret    

c000aa26 <zoh_vari_process>:
c000aa26:	55                   	push   ebp
c000aa27:	57                   	push   edi
c000aa28:	56                   	push   esi
c000aa29:	53                   	push   ebx
c000aa2a:	83 ec 2c             	sub    esp,0x2c
c000aa2d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aa31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aa35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aa3d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aa41:	0f 8e 34 02 00 00    	jle    c000ac7b <zoh_vari_process+0x255>
c000aa47:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aa4a:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aa52:	85 db                	test   ebx,ebx
c000aa54:	0f 84 21 02 00 00    	je     c000ac7b <zoh_vari_process+0x255>
c000aa5a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa5d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aa61:	74 19                	je     c000aa7c <zoh_vari_process+0x56>
c000aa63:	31 d2                	xor    edx,edx
c000aa65:	39 c2                	cmp    edx,eax
c000aa67:	7d 0c                	jge    c000aa75 <zoh_vari_process+0x4f>
c000aa69:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aa6b:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aa6e:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aa72:	42                   	inc    edx
c000aa73:	eb f0                	jmp    c000aa65 <zoh_vari_process+0x3f>
c000aa75:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aa7c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aa7f:	0f af d0             	imul   edx,eax
c000aa82:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aa85:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aa89:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aa90:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aa93:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aa9a:	dd 07                	fld    QWORD PTR [edi]
c000aa9c:	dd 14 24             	fst    QWORD PTR [esp]
c000aa9f:	50                   	push   eax
c000aaa0:	50                   	push   eax
c000aaa1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaa4:	e8 e2 fe ff ff       	call   c000a98b <is_bad_src_ratio>
c000aaa9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aaad:	5a                   	pop    edx
c000aaae:	59                   	pop    ecx
c000aaaf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aab4:	0f 85 b9 01 00 00    	jne    c000ac73 <zoh_vari_process+0x24d>
c000aaba:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aabd:	d9 e8                	fld1   
c000aabf:	d8 d1                	fcom   st(1)
c000aac1:	df e0                	fnstsw ax
c000aac3:	9e                   	sahf   
c000aac4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aac8:	0f 86 85 00 00 00    	jbe    c000ab53 <zoh_vari_process+0x12d>
c000aace:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aad1:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aad4:	7d 7d                	jge    c000ab53 <zoh_vari_process+0x12d>
c000aad6:	d9 c0                	fld    st(0)
c000aad8:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aadb:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000aade:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000aae1:	df e0                	fnstsw ax
c000aae3:	9e                   	sahf   
c000aae4:	73 6d                	jae    c000ab53 <zoh_vari_process+0x12d>
c000aae6:	85 d2                	test   edx,edx
c000aae8:	7e 38                	jle    c000ab22 <zoh_vari_process+0xfc>
c000aaea:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aaee:	83 ec 10             	sub    esp,0x10
c000aaf1:	dd 07                	fld    QWORD PTR [edi]
c000aaf3:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000aaf6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaf9:	e8 f2 37 01 00       	call   c001e2f0 <fabs>
c000aafe:	83 c4 10             	add    esp,0x10
c000ab01:	dc 1d f8 fa 01 c0    	fcomp  QWORD PTR ds:0xc001faf8
c000ab07:	df e0                	fnstsw ax
c000ab09:	9e                   	sahf   
c000ab0a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab0e:	76 12                	jbe    c000ab22 <zoh_vari_process+0xfc>
c000ab10:	dd 07                	fld    QWORD PTR [edi]
c000ab12:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab15:	d8 e1                	fsub   st,st(1)
c000ab17:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ab1a:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ab1d:	de c1                	faddp  st(1),st
c000ab1f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab22:	31 c0                	xor    eax,eax
c000ab24:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ab27:	7e 13                	jle    c000ab3c <zoh_vari_process+0x116>
c000ab29:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000ab2d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ab30:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ab33:	40                   	inc    eax
c000ab34:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000ab37:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ab3a:	eb e8                	jmp    c000ab24 <zoh_vari_process+0xfe>
c000ab3c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab40:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab43:	de c1                	faddp  st(1),st
c000ab45:	e9 73 ff ff ff       	jmp    c000aabd <zoh_vari_process+0x97>
c000ab4a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab4e:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab51:	de c1                	faddp  st(1),st
c000ab53:	83 ec 10             	sub    esp,0x10
c000ab56:	dd 14 24             	fst    QWORD PTR [esp]
c000ab59:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab5d:	e8 6d fe ff ff       	call   c000a9cf <fmod_one>
c000ab62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ab65:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ab69:	d8 e1                	fsub   st,st(1)
c000ab6b:	d9 c9                	fxch   st(1)
c000ab6d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab71:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab74:	e8 97 37 01 00       	call   c001e310 <lrint>
c000ab79:	83 c4 10             	add    esp,0x10
c000ab7c:	0f af e8             	imul   ebp,eax
c000ab7f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab82:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ab85:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ab8c:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ab8f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab92:	0f 8d 82 00 00 00    	jge    c000ac1a <zoh_vari_process+0x1f4>
c000ab98:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ab9c:	d9 c0                	fld    st(0)
c000ab9e:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aba1:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000aba5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000aba9:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000abad:	de d9                	fcompp 
c000abaf:	df e0                	fnstsw ax
c000abb1:	9e                   	sahf   
c000abb2:	72 66                	jb     c000ac1a <zoh_vari_process+0x1f4>
c000abb4:	85 d2                	test   edx,edx
c000abb6:	7e 38                	jle    c000abf0 <zoh_vari_process+0x1ca>
c000abb8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000abbc:	83 ec 10             	sub    esp,0x10
c000abbf:	dd 07                	fld    QWORD PTR [edi]
c000abc1:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000abc4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abc7:	e8 24 37 01 00       	call   c001e2f0 <fabs>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	dc 1d f8 fa 01 c0    	fcomp  QWORD PTR ds:0xc001faf8
c000abd5:	df e0                	fnstsw ax
c000abd7:	9e                   	sahf   
c000abd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abdc:	76 12                	jbe    c000abf0 <zoh_vari_process+0x1ca>
c000abde:	dd 07                	fld    QWORD PTR [edi]
c000abe0:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abe3:	d8 e1                	fsub   st,st(1)
c000abe5:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abe8:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abeb:	de c1                	faddp  st(1),st
c000abed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abf0:	31 d2                	xor    edx,edx
c000abf2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000abf5:	39 d0                	cmp    eax,edx
c000abf7:	0f 8e 4d ff ff ff    	jle    c000ab4a <zoh_vari_process+0x124>
c000abfd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac00:	29 c1                	sub    ecx,eax
c000ac02:	89 c8                	mov    eax,ecx
c000ac04:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac06:	01 d0                	add    eax,edx
c000ac08:	42                   	inc    edx
c000ac09:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac0c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac0f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac12:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac15:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac18:	eb d8                	jmp    c000abf2 <zoh_vari_process+0x1cc>
c000ac1a:	39 e9                	cmp    ecx,ebp
c000ac1c:	7d 13                	jge    c000ac31 <zoh_vari_process+0x20b>
c000ac1e:	89 e8                	mov    eax,ebp
c000ac20:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000ac23:	29 c8                	sub    eax,ecx
c000ac25:	99                   	cdq    
c000ac26:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac2d:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000ac31:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000ac34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac37:	85 c0                	test   eax,eax
c000ac39:	7f 1b                	jg     c000ac56 <zoh_vari_process+0x230>
c000ac3b:	dd 04 24             	fld    QWORD PTR [esp]
c000ac3e:	dd 1f                	fstp   QWORD PTR [edi]
c000ac40:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac43:	99                   	cdq    
c000ac44:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac47:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ac4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac4d:	99                   	cdq    
c000ac4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac51:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ac54:	eb 25                	jmp    c000ac7b <zoh_vari_process+0x255>
c000ac56:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac59:	31 d2                	xor    edx,edx
c000ac5b:	29 e8                	sub    eax,ebp
c000ac5d:	c1 e0 02             	shl    eax,0x2
c000ac60:	39 d5                	cmp    ebp,edx
c000ac62:	7e d7                	jle    c000ac3b <zoh_vari_process+0x215>
c000ac64:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac66:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ac69:	83 c0 04             	add    eax,0x4
c000ac6c:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ac70:	42                   	inc    edx
c000ac71:	eb ed                	jmp    c000ac60 <zoh_vari_process+0x23a>
c000ac73:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ac7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ac7f:	83 c4 2c             	add    esp,0x2c
c000ac82:	5b                   	pop    ebx
c000ac83:	5e                   	pop    esi
c000ac84:	5f                   	pop    edi
c000ac85:	5d                   	pop    ebp
c000ac86:	c3                   	ret    

c000ac87 <zoh_reset>:
c000ac87:	83 ec 0c             	sub    esp,0xc
c000ac8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac8e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ac91:	85 c0                	test   eax,eax
c000ac93:	74 20                	je     c000acb5 <zoh_reset+0x2e>
c000ac95:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ac98:	83 c0 1c             	add    eax,0x1c
c000ac9b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000ac9e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000aca5:	c1 e2 02             	shl    edx,0x2
c000aca8:	51                   	push   ecx
c000aca9:	52                   	push   edx
c000acaa:	6a 00                	push   0x0
c000acac:	50                   	push   eax
c000acad:	e8 56 59 ff ff       	call   c0000608 <memset>
c000acb2:	83 c4 10             	add    esp,0x10
c000acb5:	83 c4 0c             	add    esp,0xc
c000acb8:	c3                   	ret    

c000acb9 <zoh_get_name>:
c000acb9:	31 c0                	xor    eax,eax
c000acbb:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000acc0:	75 05                	jne    c000acc7 <zoh_get_name+0xe>
c000acc2:	b8 94 fc 01 c0       	mov    eax,0xc001fc94
c000acc7:	c3                   	ret    

c000acc8 <zoh_get_description>:
c000acc8:	31 c0                	xor    eax,eax
c000acca:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000accf:	75 05                	jne    c000acd6 <zoh_get_description+0xe>
c000acd1:	b8 a5 fc 01 c0       	mov    eax,0xc001fca5
c000acd6:	c3                   	ret    

c000acd7 <zoh_set_converter>:
c000acd7:	53                   	push   ebx
c000acd8:	b8 0a 00 00 00       	mov    eax,0xa
c000acdd:	83 ec 08             	sub    esp,0x8
c000ace0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ace4:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ace9:	75 6e                	jne    c000ad59 <zoh_set_converter+0x82>
c000aceb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000acee:	85 c0                	test   eax,eax
c000acf0:	74 13                	je     c000ad05 <zoh_set_converter+0x2e>
c000acf2:	83 ec 0c             	sub    esp,0xc
c000acf5:	50                   	push   eax
c000acf6:	e8 7a 25 00 00       	call   c000d275 <free>
c000acfb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad02:	83 c4 10             	add    esp,0x10
c000ad05:	50                   	push   eax
c000ad06:	50                   	push   eax
c000ad07:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad0a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad11:	50                   	push   eax
c000ad12:	6a 01                	push   0x1
c000ad14:	e8 7c 25 00 00       	call   c000d295 <calloc>
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	89 c2                	mov    edx,eax
c000ad1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ad21:	85 d2                	test   edx,edx
c000ad23:	b8 01 00 00 00       	mov    eax,0x1
c000ad28:	74 2f                	je     c000ad59 <zoh_set_converter+0x82>
c000ad2a:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000ad30:	83 ec 0c             	sub    esp,0xc
c000ad33:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad36:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ad39:	c7 43 24 26 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aa26
c000ad40:	c7 43 20 26 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aa26
c000ad47:	c7 43 28 87 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ac87
c000ad4e:	53                   	push   ebx
c000ad4f:	e8 33 ff ff ff       	call   c000ac87 <zoh_reset>
c000ad54:	83 c4 10             	add    esp,0x10
c000ad57:	31 c0                	xor    eax,eax
c000ad59:	83 c4 08             	add    esp,0x8
c000ad5c:	5b                   	pop    ebx
c000ad5d:	c3                   	ret    

c000ad5e <Computer::close(int, int, void*)>:
c000ad5e:	57                   	push   edi
c000ad5f:	56                   	push   esi
c000ad60:	53                   	push   ebx
c000ad61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ad6d:	83 ec 0c             	sub    esp,0xc
c000ad70:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ad76:	e8 29 89 00 00       	call   c00136a4 <Device::closeAll()>
c000ad7b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ad81:	83 c4 10             	add    esp,0x10
c000ad84:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad86:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ad8a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ad92:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ad96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ad9a:	5b                   	pop    ebx
c000ad9b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ad9e:	5e                   	pop    esi
c000ad9f:	5f                   	pop    edi
c000ada0:	ff e0                	jmp    eax

c000ada2 <Computer::Computer()>:
c000ada2:	83 ec 0c             	sub    esp,0xc
c000ada5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ada9:	83 ec 08             	sub    esp,0x8
c000adac:	68 dc fc 01 c0       	push   0xc001fcdc
c000adb1:	50                   	push   eax
c000adb2:	e8 67 89 00 00       	call   c001371e <Device::Device(char const*)>
c000adb7:	83 c4 10             	add    esp,0x10
c000adba:	ba 58 fd 01 c0       	mov    edx,0xc001fd58
c000adbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc3:	89 10                	mov    DWORD PTR [eax],edx
c000adc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc9:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000add3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add7:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ade1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000adeb:	83 ca 04             	or     edx,0x4
c000adee:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000adf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000adfe:	0f b6 d0             	movzx  edx,al
c000ae01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae05:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae16:	0f b6 d0             	movzx  edx,al
c000ae19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae1d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ae22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae2c:	8d 50 01             	lea    edx,[eax+0x1]
c000ae2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae33:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae39:	0f b6 d0             	movzx  edx,al
c000ae3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae40:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae44:	83 e1 3f             	and    ecx,0x3f
c000ae47:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ae4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae55:	0f b6 d0             	movzx  edx,al
c000ae58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5c:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ae63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae6d:	0f b6 d0             	movzx  edx,al
c000ae70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae74:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000ae79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae83:	8d 50 01             	lea    edx,[eax+0x1]
c000ae86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae8a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae90:	0f b6 d0             	movzx  edx,al
c000ae93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae97:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae9b:	83 e1 3f             	and    ecx,0x3f
c000ae9e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeac:	0f b6 d0             	movzx  edx,al
c000aeaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb3:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000aeba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aebe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aec4:	0f b6 d0             	movzx  edx,al
c000aec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecb:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeda:	8d 50 01             	lea    edx,[eax+0x1]
c000aedd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aee1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aee7:	0f b6 d0             	movzx  edx,al
c000aeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeee:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aef2:	83 e1 3f             	and    ecx,0x3f
c000aef5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aef9:	90                   	nop
c000aefa:	83 c4 0c             	add    esp,0xc
c000aefd:	c3                   	ret    

c000aefe <Computer::setBootMessage(char const*)>:
c000aefe:	c3                   	ret    
c000aeff:	90                   	nop

c000af00 <Computer::start()>:
c000af00:	56                   	push   esi
c000af01:	53                   	push   ebx
c000af02:	50                   	push   eax
c000af03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af07:	e8 00 32 00 00       	call   c000e10c <lockScheduler()>
c000af0c:	e8 2f 35 00 00       	call   c000e440 <schedule()>
c000af11:	e8 f8 31 00 00       	call   c000e10e <unlockScheduler()>
c000af16:	fb                   	sti    
c000af17:	83 ec 0c             	sub    esp,0xc
c000af1a:	68 3b 07 00 00       	push   0x73b
c000af1f:	e8 00 73 00 00       	call   c0012224 <operator new(unsigned long)>
c000af24:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000af2b:	89 c6                	mov    esi,eax
c000af2d:	ff 35 dc 36 02 c0    	push   DWORD PTR ds:0xc00236dc
c000af33:	68 e5 fc 01 c0       	push   0xc001fce5
c000af38:	6a 01                	push   0x1
c000af3a:	50                   	push   eax
c000af3b:	e8 2c 30 00 00       	call   c000df6c <Process::Process(bool, char const*, Process*, char**)>
c000af40:	83 c4 20             	add    esp,0x20
c000af43:	68 ff 00 00 00       	push   0xff
c000af48:	6a 00                	push   0x0
c000af4a:	68 d9 c6 00 c0       	push   0xc000c6d9
c000af4f:	56                   	push   esi
c000af50:	e8 e1 32 00 00       	call   c000e236 <Process::createThread(void (*)(void*), void*, int)>
c000af55:	6a 7a                	push   0x7a
c000af57:	6a 00                	push   0x0
c000af59:	68 7c ec 00 c0       	push   0xc000ec7c
c000af5e:	ff 35 dc 36 02 c0    	push   DWORD PTR ds:0xc00236dc
c000af64:	e8 cd 32 00 00       	call   c000e236 <Process::createThread(void (*)(void*), void*, int)>
c000af69:	83 c4 20             	add    esp,0x20
c000af6c:	a3 90 36 02 c0       	mov    ds:0xc0023690,eax
c000af71:	c6 05 6d 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022e6d,0x1
c000af78:	e8 01 75 00 00       	call   c001247e <initVFS()>
c000af7d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000af83:	8b 10                	mov    edx,DWORD PTR [eax]
c000af85:	6a 00                	push   0x0
c000af87:	6a 00                	push   0x0
c000af89:	6a 00                	push   0x0
c000af8b:	50                   	push   eax
c000af8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000af8f:	e8 85 4a 00 00       	call   c000fa19 <setupSystemCalls()>
c000af94:	e8 e3 7f 00 00       	call   c0012f7c <loadClockSettings()>
c000af99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000af9c:	e8 d7 86 00 00       	call   c0013678 <Device::loadDriversForAll()>
c000afa1:	5a                   	pop    edx
c000afa2:	8b 1d 68 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022e68
c000afa8:	59                   	pop    ecx
c000afa9:	6a 01                	push   0x1
c000afab:	68 f2 fc 01 c0       	push   0xc001fcf2
c000afb0:	e8 ef 13 00 00       	call   c000c3a4 <Thr::loadDLL(char const*, bool)>
c000afb5:	5e                   	pop    esi
c000afb6:	5a                   	pop    edx
c000afb7:	53                   	push   ebx
c000afb8:	50                   	push   eax
c000afb9:	e8 39 15 00 00       	call   c000c4f7 <Thr::executeDLL(unsigned long, void*)>
c000afbe:	c7 04 24 94 14 02 c0 	mov    DWORD PTR [esp],0xc0021494
c000afc5:	e8 a0 1c 00 00       	call   c000cc6a <kprintf(char const*, ...)>
c000afca:	83 c4 10             	add    esp,0x10
c000afcd:	83 ec 0c             	sub    esp,0xc
c000afd0:	6a 02                	push   0x2
c000afd2:	e8 34 37 00 00       	call   c000e70b <blockTask(TaskState)>
c000afd7:	83 c4 10             	add    esp,0x10
c000afda:	eb f1                	jmp    c000afcd <Computer::start()+0xcd>

c000afdc <firstTask()>:
c000afdc:	83 ec 18             	sub    esp,0x18
c000afdf:	ff 35 68 2e 02 c0    	push   DWORD PTR ds:0xc0022e68
c000afe5:	e8 16 ff ff ff       	call   c000af00 <Computer::start()>

c000afea <Computer::detectFeatures()>:
c000afea:	55                   	push   ebp
c000afeb:	57                   	push   edi
c000afec:	56                   	push   esi
c000afed:	53                   	push   ebx
c000afee:	83 ec 1c             	sub    esp,0x1c
c000aff1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000aff5:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000afff:	e8 bb 52 ff ff       	call   c00002bf <detectCPUID>
c000b004:	85 c0                	test   eax,eax
c000b006:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b00c:	0f 95 c2             	setne  dl
c000b00f:	83 e0 fd             	and    eax,0xfffffffd
c000b012:	d1 e2                	shl    edx,1
c000b014:	09 d0                	or     eax,edx
c000b016:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b01c:	a8 02                	test   al,0x2
c000b01e:	75 46                	jne    c000b066 <Computer::detectFeatures()+0x7c>
c000b020:	f6 05 35 36 02 c0 04 	test   BYTE PTR ds:0xc0023635,0x4
c000b027:	74 07                	je     c000b030 <Computer::detectFeatures()+0x46>
c000b029:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b030:	e8 61 2d 01 00       	call   c001dd96 <x87Detect>
c000b035:	83 e0 01             	and    eax,0x1
c000b038:	c1 e0 04             	shl    eax,0x4
c000b03b:	88 c2                	mov    dl,al
c000b03d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b043:	83 e0 ef             	and    eax,0xffffffef
c000b046:	09 d0                	or     eax,edx
c000b048:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b04e:	a8 10                	test   al,0x10
c000b050:	0f 85 10 01 00 00    	jne    c000b166 <Computer::detectFeatures()+0x17c>
c000b056:	84 c0                	test   al,al
c000b058:	0f 88 2b 01 00 00    	js     c000b189 <Computer::detectFeatures()+0x19f>
c000b05e:	83 c4 1c             	add    esp,0x1c
c000b061:	5b                   	pop    ebx
c000b062:	5e                   	pop    esi
c000b063:	5f                   	pop    edi
c000b064:	5d                   	pop    ebp
c000b065:	c3                   	ret    
c000b066:	83 ec 0c             	sub    esp,0xc
c000b069:	6a 20                	push   0x20
c000b06b:	e8 5f be 00 00       	call   c0016ecf <cpuidCheckEDX(unsigned int)>
c000b070:	83 e0 01             	and    eax,0x1
c000b073:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b07a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b080:	83 e0 f7             	and    eax,0xfffffff7
c000b083:	09 d0                	or     eax,edx
c000b085:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b08b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b092:	e8 38 be 00 00       	call   c0016ecf <cpuidCheckEDX(unsigned int)>
c000b097:	83 e0 01             	and    eax,0x1
c000b09a:	88 c2                	mov    dl,al
c000b09c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0a2:	83 e0 fe             	and    eax,0xfffffffe
c000b0a5:	09 d0                	or     eax,edx
c000b0a7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0ad:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b0b4:	e8 16 be 00 00       	call   c0016ecf <cpuidCheckEDX(unsigned int)>
c000b0b9:	c1 e0 07             	shl    eax,0x7
c000b0bc:	88 c2                	mov    dl,al
c000b0be:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0c4:	83 e0 7f             	and    eax,0x7f
c000b0c7:	09 d0                	or     eax,edx
c000b0c9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0cf:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b0d6:	e8 f4 bd 00 00       	call   c0016ecf <cpuidCheckEDX(unsigned int)>
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	83 e0 01             	and    eax,0x1
c000b0e1:	c1 e0 05             	shl    eax,0x5
c000b0e4:	88 c2                	mov    dl,al
c000b0e6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0ec:	83 e0 df             	and    eax,0xffffffdf
c000b0ef:	09 d0                	or     eax,edx
c000b0f1:	f7 05 34 36 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0023634,0x401
c000b0fb:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b101:	0f 84 a8 00 00 00    	je     c000b1af <Computer::detectFeatures()+0x1c5>
c000b107:	83 ec 0c             	sub    esp,0xc
c000b10a:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b111:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b115:	50                   	push   eax
c000b116:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b11a:	55                   	push   ebp
c000b11b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b11f:	57                   	push   edi
c000b120:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b124:	56                   	push   esi
c000b125:	68 00 00 00 80       	push   0x80000000
c000b12a:	e8 1d bd 00 00       	call   c0016e4c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b12f:	83 c4 20             	add    esp,0x20
c000b132:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b139:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b13d:	0f 86 dd fe ff ff    	jbe    c000b020 <Computer::detectFeatures()+0x36>
c000b143:	83 ec 0c             	sub    esp,0xc
c000b146:	50                   	push   eax
c000b147:	55                   	push   ebp
c000b148:	57                   	push   edi
c000b149:	56                   	push   esi
c000b14a:	68 01 00 00 80       	push   0x80000001
c000b14f:	e8 f8 bc 00 00       	call   c0016e4c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b154:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b15e:	83 c4 20             	add    esp,0x20
c000b161:	e9 ba fe ff ff       	jmp    c000b020 <Computer::detectFeatures()+0x36>
c000b166:	e8 e5 2b 01 00       	call   c001dd50 <sseDetect>
c000b16b:	88 c2                	mov    dl,al
c000b16d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b173:	c1 e2 07             	shl    edx,0x7
c000b176:	83 e0 7f             	and    eax,0x7f
c000b179:	09 d0                	or     eax,edx
c000b17b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b181:	84 c0                	test   al,al
c000b183:	0f 89 d5 fe ff ff    	jns    c000b05e <Computer::detectFeatures()+0x74>
c000b189:	e8 b2 2b 01 00       	call   c001dd40 <avxDetect>
c000b18e:	83 e0 01             	and    eax,0x1
c000b191:	c1 e0 05             	shl    eax,0x5
c000b194:	88 c2                	mov    dl,al
c000b196:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b19c:	83 e0 df             	and    eax,0xffffffdf
c000b19f:	09 d0                	or     eax,edx
c000b1a1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1a7:	83 c4 1c             	add    esp,0x1c
c000b1aa:	5b                   	pop    ebx
c000b1ab:	5e                   	pop    esi
c000b1ac:	5f                   	pop    edi
c000b1ad:	5d                   	pop    ebp
c000b1ae:	c3                   	ret    
c000b1af:	83 ec 0c             	sub    esp,0xc
c000b1b2:	68 00 02 00 00       	push   0x200
c000b1b7:	e8 13 bd 00 00       	call   c0016ecf <cpuidCheckEDX(unsigned int)>
c000b1bc:	83 c4 10             	add    esp,0x10
c000b1bf:	e9 43 ff ff ff       	jmp    c000b107 <Computer::detectFeatures()+0x11d>

c000b1c4 <Computer::displayFeatures()>:
c000b1c4:	c3                   	ret    
c000b1c5:	90                   	nop

c000b1c6 <Computer::rdmsr(unsigned int)>:
c000b1c6:	83 ec 0c             	sub    esp,0xc
c000b1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b1d4:	74 0a                	je     c000b1e0 <Computer::rdmsr(unsigned int)+0x1a>
c000b1d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b1da:	0f 32                	rdmsr  
c000b1dc:	83 c4 0c             	add    esp,0xc
c000b1df:	c3                   	ret    
c000b1e0:	83 ec 0c             	sub    esp,0xc
c000b1e3:	68 0e fd 01 c0       	push   0xc001fd0e
c000b1e8:	e8 9b 1b 00 00       	call   c000cd88 <panic(char const*)>
c000b1ed:	83 c4 10             	add    esp,0x10
c000b1f0:	eb e4                	jmp    c000b1d6 <Computer::rdmsr(unsigned int)+0x10>

c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b1f2:	57                   	push   edi
c000b1f3:	56                   	push   esi
c000b1f4:	52                   	push   edx
c000b1f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b1fd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b201:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b208:	74 0e                	je     c000b218 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b20a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b20e:	89 f0                	mov    eax,esi
c000b210:	89 fa                	mov    edx,edi
c000b212:	0f 30                	wrmsr  
c000b214:	58                   	pop    eax
c000b215:	5e                   	pop    esi
c000b216:	5f                   	pop    edi
c000b217:	c3                   	ret    
c000b218:	83 ec 0c             	sub    esp,0xc
c000b21b:	68 14 fd 01 c0       	push   0xc001fd14
c000b220:	e8 63 1b 00 00       	call   c000cd88 <panic(char const*)>
c000b225:	83 c4 10             	add    esp,0x10
c000b228:	eb e0                	jmp    c000b20a <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b22a <Computer::nmiEnabled()>:
c000b22a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b22e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b234:	c3                   	ret    
c000b235:	90                   	nop

c000b236 <Computer::readCMOS(unsigned char)>:
c000b236:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b23a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b241:	19 c0                	sbb    eax,eax
c000b243:	83 e0 80             	and    eax,0xffffff80
c000b246:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b24a:	e6 70                	out    0x70,al
c000b24c:	e4 71                	in     al,0x71
c000b24e:	c3                   	ret    
c000b24f:	90                   	nop

c000b250 <Computer::enableNMI(bool)>:
c000b250:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b258:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b25e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b266:	eb ce                	jmp    c000b236 <Computer::readCMOS(unsigned char)>

c000b268 <Computer::open(int, int, void*)>:
c000b268:	56                   	push   esi
c000b269:	53                   	push   ebx
c000b26a:	83 ec 10             	sub    esp,0x10
c000b26d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b271:	f6 05 34 36 02 c0 04 	test   BYTE PTR ds:0xc0023634,0x4
c000b278:	68 68 22 00 00       	push   0x2268
c000b27d:	0f 94 05 a0 22 02 c0 	sete   BYTE PTR ds:0xc00222a0
c000b284:	e8 9b 6f 00 00       	call   c0012224 <operator new(unsigned long)>
c000b289:	89 04 24             	mov    DWORD PTR [esp],eax
c000b28c:	89 c6                	mov    esi,eax
c000b28e:	e8 d3 b2 00 00       	call   c0016566 <ACPI::ACPI()>
c000b293:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b299:	58                   	pop    eax
c000b29a:	5a                   	pop    edx
c000b29b:	56                   	push   esi
c000b29c:	53                   	push   ebx
c000b29d:	e8 8c 82 00 00       	call   c001352e <Device::addChild(Device*)>
c000b2a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2a5:	e8 40 fd ff ff       	call   c000afea <Computer::detectFeatures()>
c000b2aa:	59                   	pop    ecx
c000b2ab:	5e                   	pop    esi
c000b2ac:	6a 01                	push   0x1
c000b2ae:	53                   	push   ebx
c000b2af:	e8 9c ff ff ff       	call   c000b250 <Computer::enableNMI(bool)>
c000b2b4:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b2bb:	e8 64 6f 00 00       	call   c0012224 <operator new(unsigned long)>
c000b2c0:	89 04 24             	mov    DWORD PTR [esp],eax
c000b2c3:	89 c6                	mov    esi,eax
c000b2c5:	e8 d0 bc 00 00       	call   c0016f9a <CPU::CPU()>
c000b2ca:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b2d0:	58                   	pop    eax
c000b2d1:	5a                   	pop    edx
c000b2d2:	56                   	push   esi
c000b2d3:	53                   	push   ebx
c000b2d4:	e8 55 82 00 00       	call   c001352e <Device::addChild(Device*)>
c000b2d9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b2df:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b2e5:	6a 00                	push   0x0
c000b2e7:	6a 00                	push   0x0
c000b2e9:	50                   	push   eax
c000b2ea:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b2ed:	83 c4 20             	add    esp,0x20
c000b2f0:	e8 a1 87 00 00       	call   c0013a96 <setupFPU()>
c000b2f5:	83 ec 08             	sub    esp,0x8
c000b2f8:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b2fe:	50                   	push   eax
c000b2ff:	53                   	push   ebx
c000b300:	e8 29 82 00 00       	call   c001352e <Device::addChild(Device*)>
c000b305:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b30b:	8b 10                	mov    edx,DWORD PTR [eax]
c000b30d:	6a 00                	push   0x0
c000b30f:	6a 00                	push   0x0
c000b311:	6a 00                	push   0x0
c000b313:	50                   	push   eax
c000b314:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b317:	83 c4 14             	add    esp,0x14
c000b31a:	68 dc af 00 c0       	push   0xc000afdc
c000b31f:	e8 12 30 00 00       	call   c000e336 <setupMultitasking(void (*)())>
c000b324:	83 c4 14             	add    esp,0x14
c000b327:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b32c:	5b                   	pop    ebx
c000b32d:	5e                   	pop    esi
c000b32e:	c3                   	ret    
c000b32f:	90                   	nop

c000b330 <Computer::disableNMI()>:
c000b330:	6a 00                	push   0x0
c000b332:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b336:	e8 15 ff ff ff       	call   c000b250 <Computer::enableNMI(bool)>
c000b33b:	58                   	pop    eax
c000b33c:	5a                   	pop    edx
c000b33d:	c3                   	ret    

c000b33e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b33e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b342:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b349:	19 c0                	sbb    eax,eax
c000b34b:	83 e0 80             	and    eax,0xffffff80
c000b34e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b352:	e6 70                	out    0x70,al
c000b354:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b358:	e6 71                	out    0x71,al
c000b35a:	c3                   	ret    
c000b35b:	90                   	nop

c000b35c <Computer::handleNMI()>:
c000b35c:	56                   	push   esi
c000b35d:	53                   	push   ebx
c000b35e:	83 ec 10             	sub    esp,0x10
c000b361:	e4 92                	in     al,0x92
c000b363:	89 c6                	mov    esi,eax
c000b365:	e4 61                	in     al,0x61
c000b367:	68 1a fd 01 c0       	push   0xc001fd1a
c000b36c:	88 c3                	mov    bl,al
c000b36e:	e8 f7 18 00 00       	call   c000cc6a <kprintf(char const*, ...)>
c000b373:	83 c4 10             	add    esp,0x10
c000b376:	83 e6 10             	and    esi,0x10
c000b379:	75 0d                	jne    c000b388 <Computer::handleNMI()+0x2c>
c000b37b:	f6 c3 40             	test   bl,0x40
c000b37e:	75 1d                	jne    c000b39d <Computer::handleNMI()+0x41>
c000b380:	84 db                	test   bl,bl
c000b382:	78 2d                	js     c000b3b1 <Computer::handleNMI()+0x55>
c000b384:	58                   	pop    eax
c000b385:	5b                   	pop    ebx
c000b386:	5e                   	pop    esi
c000b387:	c3                   	ret    
c000b388:	83 ec 0c             	sub    esp,0xc
c000b38b:	68 2b fd 01 c0       	push   0xc001fd2b
c000b390:	e8 f3 19 00 00       	call   c000cd88 <panic(char const*)>
c000b395:	83 c4 10             	add    esp,0x10
c000b398:	f6 c3 40             	test   bl,0x40
c000b39b:	74 e3                	je     c000b380 <Computer::handleNMI()+0x24>
c000b39d:	83 ec 0c             	sub    esp,0xc
c000b3a0:	68 38 fd 01 c0       	push   0xc001fd38
c000b3a5:	e8 de 19 00 00       	call   c000cd88 <panic(char const*)>
c000b3aa:	83 c4 10             	add    esp,0x10
c000b3ad:	84 db                	test   bl,bl
c000b3af:	79 d3                	jns    c000b384 <Computer::handleNMI()+0x28>
c000b3b1:	c7 44 24 10 42 fd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fd42
c000b3b9:	5a                   	pop    edx
c000b3ba:	5b                   	pop    ebx
c000b3bb:	5e                   	pop    esi
c000b3bc:	e9 c7 19 00 00       	jmp    c000cd88 <panic(char const*)>
c000b3c1:	90                   	nop

c000b3c2 <Computer::setDiskActivityLight(int, bool)>:
c000b3c2:	56                   	push   esi
c000b3c3:	53                   	push   ebx
c000b3c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b3c8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b3cd:	77 1b                	ja     c000b3ea <Computer::setDiskActivityLight(int, bool)+0x28>
c000b3cf:	e4 92                	in     al,0x92
c000b3d1:	bb 40 00 00 00       	mov    ebx,0x40
c000b3d6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b3da:	89 da                	mov    edx,ebx
c000b3dc:	d3 e2                	shl    edx,cl
c000b3de:	89 f1                	mov    ecx,esi
c000b3e0:	f7 d2                	not    edx
c000b3e2:	d3 e3                	shl    ebx,cl
c000b3e4:	21 d0                	and    eax,edx
c000b3e6:	09 d8                	or     eax,ebx
c000b3e8:	e6 92                	out    0x92,al
c000b3ea:	5b                   	pop    ebx
c000b3eb:	5e                   	pop    esi
c000b3ec:	c3                   	ret    

c000b3ed <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c000b3ed:	55                   	push   ebp
c000b3ee:	89 e5                	mov    ebp,esp
c000b3f0:	57                   	push   edi
c000b3f1:	56                   	push   esi
c000b3f2:	53                   	push   ebx
c000b3f3:	81 ec 2c 10 00 00    	sub    esp,0x102c
c000b3f9:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c000b3fc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c000b3ff:	85 c0                	test   eax,eax
c000b401:	0f 95 c1             	setne  cl
c000b404:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000b408:	0f 94 c2             	sete   dl
c000b40b:	84 d1                	test   cl,dl
c000b40d:	74 26                	je     c000b435 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c000b40f:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c000b416:	74 1d                	je     c000b435 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c000b418:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c000b41b:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c000b421:	89 d6                	mov    esi,edx
c000b423:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b429:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c000b42f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c000b432:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c000b435:	83 ec 0c             	sub    esp,0xc
c000b438:	05 ff 0f 00 00       	add    eax,0xfff
c000b43d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000b440:	6a 01                	push   0x1
c000b442:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c000b448:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c000b44e:	e8 40 5c 00 00       	call   c0011093 <Virt::allocateKernelVirtualPages(int)>
c000b453:	83 c4 10             	add    esp,0x10
c000b456:	89 c6                	mov    esi,eax
c000b458:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c000b45e:	0f 86 21 01 00 00    	jbe    c000b585 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c000b464:	c1 eb 0c             	shr    ebx,0xc
c000b467:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c000b471:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c000b477:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000b47a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000b47d:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c000b483:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c000b486:	29 d8                	sub    eax,ebx
c000b488:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c000b48e:	0f 83 f4 00 00 00    	jae    c000b588 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c000b494:	83 ec 0c             	sub    esp,0xc
c000b497:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c000b49d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000b4a0:	3d 00 10 00 00       	cmp    eax,0x1000
c000b4a5:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000b4a7:	52                   	push   edx
c000b4a8:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c000b4ae:	52                   	push   edx
c000b4af:	76 05                	jbe    c000b4b6 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c000b4b1:	b8 00 10 00 00       	mov    eax,0x1000
c000b4b6:	31 d2                	xor    edx,edx
c000b4b8:	52                   	push   edx
c000b4b9:	50                   	push   eax
c000b4ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000b4bd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b4c0:	83 c4 20             	add    esp,0x20
c000b4c3:	85 c0                	test   eax,eax
c000b4c5:	74 1f                	je     c000b4e6 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c000b4c7:	51                   	push   ecx
c000b4c8:	51                   	push   ecx
c000b4c9:	50                   	push   eax
c000b4ca:	68 7c fd 01 c0       	push   0xc001fd7c
c000b4cf:	e8 96 17 00 00       	call   c000cc6a <kprintf(char const*, ...)>
c000b4d4:	89 34 24             	mov    DWORD PTR [esp],esi
c000b4d7:	e8 ed 5e 00 00       	call   c00113c9 <Virt::freeKernelVirtualPages(unsigned long)>
c000b4dc:	83 c4 10             	add    esp,0x10
c000b4df:	31 c0                	xor    eax,eax
c000b4e1:	e9 7c 01 00 00       	jmp    c000b662 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c000b4e6:	e8 21 2c 00 00       	call   c000e10c <lockScheduler()>
c000b4eb:	e8 1f 23 00 00       	call   c000d80f <Phys::allocatePage()>
c000b4f0:	6a 07                	push   0x7
c000b4f2:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c000b4f8:	56                   	push   esi
c000b4f9:	50                   	push   eax
c000b4fa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b500:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c000b503:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c000b509:	e8 bc 61 00 00       	call   c00116ca <VAS::mapPage(unsigned long, unsigned long, int)>
c000b50e:	83 c4 0c             	add    esp,0xc
c000b511:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b517:	6a 00                	push   0x0
c000b519:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b51f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c000b522:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c000b528:	e8 fb 5f 00 00       	call   c0011528 <VAS::mapOtherVASIn(bool, VAS*)>
c000b52d:	58                   	pop    eax
c000b52e:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c000b534:	5a                   	pop    edx
c000b535:	68 07 04 00 00       	push   0x407
c000b53a:	53                   	push   ebx
c000b53b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000b541:	50                   	push   eax
c000b542:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b548:	6a 00                	push   0x0
c000b54a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b54f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b552:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b558:	e8 6d 68 00 00       	call   c0011dca <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c000b55d:	83 c4 1c             	add    esp,0x1c
c000b560:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c000b566:	68 00 10 00 00       	push   0x1000
c000b56b:	50                   	push   eax
c000b56c:	56                   	push   esi
c000b56d:	e8 60 50 ff ff       	call   c00005d2 <memcpy>
c000b572:	e8 97 2b 00 00       	call   c000e10e <unlockScheduler()>
c000b577:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c000b57d:	83 c4 10             	add    esp,0x10
c000b580:	e9 f5 fe ff ff       	jmp    c000b47a <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c000b585:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000b588:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c000b592:	0f 86 bc 00 00 00    	jbe    c000b654 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c000b598:	e8 6f 2b 00 00       	call   c000e10c <lockScheduler()>
c000b59d:	51                   	push   ecx
c000b59e:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b5a4:	6a 00                	push   0x0
c000b5a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b5ab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b5ae:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b5b4:	e8 6f 5f 00 00       	call   c0011528 <VAS::mapOtherVASIn(bool, VAS*)>
c000b5b9:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c000b5bf:	83 c4 10             	add    esp,0x10
c000b5c2:	c1 e8 0c             	shr    eax,0xc
c000b5c5:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c000b5cf:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c000b5d5:	e8 35 22 00 00       	call   c000d80f <Phys::allocatePage()>
c000b5da:	6a 07                	push   0x7
c000b5dc:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c000b5e2:	56                   	push   esi
c000b5e3:	50                   	push   eax
c000b5e4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000b5ea:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000b5ed:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c000b5f3:	e8 d2 60 00 00       	call   c00116ca <VAS::mapPage(unsigned long, unsigned long, int)>
c000b5f8:	58                   	pop    eax
c000b5f9:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c000b5ff:	5a                   	pop    edx
c000b600:	68 07 04 00 00       	push   0x407
c000b605:	53                   	push   ebx
c000b606:	81 c3 00 10 00 00    	add    ebx,0x1000
c000b60c:	50                   	push   eax
c000b60d:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b613:	6a 00                	push   0x0
c000b615:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b61a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b61d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b623:	e8 a2 67 00 00       	call   c0011dca <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c000b628:	83 c4 1c             	add    esp,0x1c
c000b62b:	68 00 10 00 00       	push   0x1000
c000b630:	6a 00                	push   0x0
c000b632:	56                   	push   esi
c000b633:	e8 d0 4f ff ff       	call   c0000608 <memset>
c000b638:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c000b63e:	83 c4 10             	add    esp,0x10
c000b641:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c000b647:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c000b64d:	77 86                	ja     c000b5d5 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c000b64f:	e8 ba 2a 00 00       	call   c000e10e <unlockScheduler()>
c000b654:	83 ec 0c             	sub    esp,0xc
c000b657:	56                   	push   esi
c000b658:	e8 6c 5d 00 00       	call   c00113c9 <Virt::freeKernelVirtualPages(unsigned long)>
c000b65d:	83 c4 10             	add    esp,0x10
c000b660:	b0 01                	mov    al,0x1
c000b662:	8d 65 f4             	lea    esp,[ebp-0xc]
c000b665:	5b                   	pop    ebx
c000b666:	5e                   	pop    esi
c000b667:	5f                   	pop    edi
c000b668:	5d                   	pop    ebp
c000b669:	c3                   	ret    

c000b66a <loadProgramIntoMemory(Process*, char const*)>:
c000b66a:	55                   	push   ebp
c000b66b:	57                   	push   edi
c000b66c:	56                   	push   esi
c000b66d:	53                   	push   ebx
c000b66e:	83 ec 48             	sub    esp,0x48
c000b671:	68 14 01 00 00       	push   0x114
c000b676:	e8 a9 6b 00 00       	call   c0012224 <operator new(unsigned long)>
c000b67b:	83 c4 0c             	add    esp,0xc
c000b67e:	89 c6                	mov    esi,eax
c000b680:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b684:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b688:	50                   	push   eax
c000b689:	e8 c4 6f 00 00       	call   c0012652 <File::File(char const*, Process*)>
c000b68e:	58                   	pop    eax
c000b68f:	5a                   	pop    edx
c000b690:	6a 01                	push   0x1
c000b692:	56                   	push   esi
c000b693:	e8 1e 70 00 00       	call   c00126b6 <File::open(FileOpenMode)>
c000b698:	83 c4 10             	add    esp,0x10
c000b69b:	85 c0                	test   eax,eax
c000b69d:	0f 85 47 01 00 00    	jne    c000b7ea <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b6a3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b6ab:	83 ec 0c             	sub    esp,0xc
c000b6ae:	6a 34                	push   0x34
c000b6b0:	e8 b0 1b 00 00       	call   c000d265 <malloc>
c000b6b5:	89 c3                	mov    ebx,eax
c000b6b7:	58                   	pop    eax
c000b6b8:	8b 06                	mov    eax,DWORD PTR [esi]
c000b6ba:	8d 7c 24 38          	lea    edi,[esp+0x38]
c000b6be:	57                   	push   edi
c000b6bf:	53                   	push   ebx
c000b6c0:	6a 00                	push   0x0
c000b6c2:	6a 34                	push   0x34
c000b6c4:	56                   	push   esi
c000b6c5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b6c8:	83 c4 20             	add    esp,0x20
c000b6cb:	85 c0                	test   eax,eax
c000b6cd:	0f 85 17 01 00 00    	jne    c000b7ea <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b6d3:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c000b6d9:	0f 85 0b 01 00 00    	jne    c000b7ea <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b6df:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000b6e2:	85 c0                	test   eax,eax
c000b6e4:	0f 84 00 01 00 00    	je     c000b7ea <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b6ea:	31 d2                	xor    edx,edx
c000b6ec:	55                   	push   ebp
c000b6ed:	52                   	push   edx
c000b6ee:	50                   	push   eax
c000b6ef:	56                   	push   esi
c000b6f0:	e8 7f 70 00 00       	call   c0012774 <File::seek(unsigned long long)>
c000b6f5:	83 c4 10             	add    esp,0x10
c000b6f8:	85 c0                	test   eax,eax
c000b6fa:	0f 85 ea 00 00 00    	jne    c000b7ea <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b700:	83 ec 0c             	sub    esp,0xc
c000b703:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b706:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c000b70a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b70e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c000b712:	0f af c2             	imul   eax,edx
c000b715:	50                   	push   eax
c000b716:	e8 4a 1b 00 00       	call   c000d265 <malloc>
c000b71b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b71e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b722:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b724:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b728:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c000b72c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c000b730:	0f af c2             	imul   eax,edx
c000b733:	99                   	cdq    
c000b734:	52                   	push   edx
c000b735:	50                   	push   eax
c000b736:	56                   	push   esi
c000b737:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b73a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000b73d:	83 c4 20             	add    esp,0x20
c000b740:	85 c0                	test   eax,eax
c000b742:	0f 84 a2 00 00 00    	je     c000b7ea <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b748:	31 d2                	xor    edx,edx
c000b74a:	51                   	push   ecx
c000b74b:	52                   	push   edx
c000b74c:	50                   	push   eax
c000b74d:	56                   	push   esi
c000b74e:	e8 21 70 00 00       	call   c0012774 <File::seek(unsigned long long)>
c000b753:	83 c4 10             	add    esp,0x10
c000b756:	85 c0                	test   eax,eax
c000b758:	0f 85 8c 00 00 00    	jne    c000b7ea <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b75e:	83 ec 0c             	sub    esp,0xc
c000b761:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c000b765:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c000b769:	31 ed                	xor    ebp,ebp
c000b76b:	0f af c2             	imul   eax,edx
c000b76e:	50                   	push   eax
c000b76f:	e8 f1 1a 00 00       	call   c000d265 <malloc>
c000b774:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b777:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b77b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b77d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b781:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c000b785:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c000b789:	0f af c2             	imul   eax,edx
c000b78c:	99                   	cdq    
c000b78d:	52                   	push   edx
c000b78e:	50                   	push   eax
c000b78f:	56                   	push   esi
c000b790:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b793:	83 c4 20             	add    esp,0x20
c000b796:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b79e:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c000b7a2:	0f 86 80 00 00 00    	jbe    c000b828 <loadProgramIntoMemory(Process*, char const*)+0x1be>
c000b7a8:	0f b7 fd             	movzx  edi,bp
c000b7ab:	c1 e7 05             	shl    edi,0x5
c000b7ae:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c000b7b2:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c000b7b5:	75 6b                	jne    c000b822 <loadProgramIntoMemory(Process*, char const*)+0x1b8>
c000b7b7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b7ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b7be:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000b7c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b7c5:	52                   	push   edx
c000b7c6:	31 d2                	xor    edx,edx
c000b7c8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000b7cb:	52                   	push   edx
c000b7cc:	50                   	push   eax
c000b7cd:	56                   	push   esi
c000b7ce:	e8 a1 6f 00 00       	call   c0012774 <File::seek(unsigned long long)>
c000b7d3:	83 c4 10             	add    esp,0x10
c000b7d6:	85 c0                	test   eax,eax
c000b7d8:	74 17                	je     c000b7f1 <loadProgramIntoMemory(Process*, char const*)+0x187>
c000b7da:	83 ec 0c             	sub    esp,0xc
c000b7dd:	68 a7 fd 01 c0       	push   0xc001fda7
c000b7e2:	e8 83 14 00 00       	call   c000cc6a <kprintf(char const*, ...)>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	31 c0                	xor    eax,eax
c000b7ec:	e9 87 00 00 00       	jmp    c000b878 <loadProgramIntoMemory(Process*, char const*)+0x20e>
c000b7f1:	83 ec 0c             	sub    esp,0xc
c000b7f4:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c000b7f7:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c000b7fa:	50                   	push   eax
c000b7fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b7ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b803:	56                   	push   esi
c000b804:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000b808:	e8 e0 fb ff ff       	call   c000b3ed <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c000b80d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b811:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c000b815:	83 c4 20             	add    esp,0x20
c000b818:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c000b81c:	73 04                	jae    c000b822 <loadProgramIntoMemory(Process*, char const*)+0x1b8>
c000b81e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b822:	45                   	inc    ebp
c000b823:	e9 76 ff ff ff       	jmp    c000b79e <loadProgramIntoMemory(Process*, char const*)+0x134>
c000b828:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000b82c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b830:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b834:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c000b83a:	83 ec 0c             	sub    esp,0xc
c000b83d:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c000b843:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b848:	05 00 10 00 00       	add    eax,0x1000
c000b84d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b854:	e8 1c 1a 00 00       	call   c000d275 <free>
c000b859:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b85c:	e8 14 1a 00 00       	call   c000d275 <free>
c000b861:	58                   	pop    eax
c000b862:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b866:	e8 0a 1a 00 00       	call   c000d275 <free>
c000b86b:	89 34 24             	mov    DWORD PTR [esp],esi
c000b86e:	e8 a1 6e 00 00       	call   c0012714 <File::close()>
c000b873:	83 c4 10             	add    esp,0x10
c000b876:	b0 01                	mov    al,0x1
c000b878:	83 c4 3c             	add    esp,0x3c
c000b87b:	5b                   	pop    ebx
c000b87c:	5e                   	pop    esi
c000b87d:	5f                   	pop    edi
c000b87e:	5d                   	pop    ebp
c000b87f:	c3                   	ret    

c000b880 <runtimeReferenceHelper()>:
c000b880:	83 ec 18             	sub    esp,0x18
c000b883:	68 af fd 01 c0       	push   0xc001fdaf
c000b888:	e8 dd 13 00 00       	call   c000cc6a <kprintf(char const*, ...)>
c000b88d:	fa                   	cli    
c000b88e:	83 c4 10             	add    esp,0x10
c000b891:	eb fe                	jmp    c000b891 <runtimeReferenceHelper()+0x11>

c000b893 <Thr::getAddressOfKernelSymbol(char const*)>:
c000b893:	57                   	push   edi
c000b894:	56                   	push   esi
c000b895:	53                   	push   ebx
c000b896:	31 db                	xor    ebx,ebx
c000b898:	39 1d 20 36 02 c0    	cmp    DWORD PTR ds:0xc0023620,ebx
c000b89e:	7e 3c                	jle    c000b8dc <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c000b8a0:	8b 34 9d a0 35 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdca60]
c000b8a7:	31 ff                	xor    edi,edi
c000b8a9:	39 3c 9d a0 34 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdcb60],edi
c000b8b0:	7e 27                	jle    c000b8d9 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c000b8b2:	50                   	push   eax
c000b8b3:	50                   	push   eax
c000b8b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b8b8:	8b 06                	mov    eax,DWORD PTR [esi]
c000b8ba:	03 04 9d 20 35 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdcae0]
c000b8c1:	50                   	push   eax
c000b8c2:	e8 31 4e ff ff       	call   c00006f8 <strcmp>
c000b8c7:	83 c4 10             	add    esp,0x10
c000b8ca:	85 c0                	test   eax,eax
c000b8cc:	75 05                	jne    c000b8d3 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c000b8ce:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000b8d1:	eb 0b                	jmp    c000b8de <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c000b8d3:	83 c6 10             	add    esi,0x10
c000b8d6:	47                   	inc    edi
c000b8d7:	eb d0                	jmp    c000b8a9 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c000b8d9:	43                   	inc    ebx
c000b8da:	eb bc                	jmp    c000b898 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c000b8dc:	31 c0                	xor    eax,eax
c000b8de:	5b                   	pop    ebx
c000b8df:	5e                   	pop    esi
c000b8e0:	5f                   	pop    edi
c000b8e1:	c3                   	ret    

c000b8e2 <Thr::loadKernelSymbolTable(char const*)>:
c000b8e2:	55                   	push   ebp
c000b8e3:	57                   	push   edi
c000b8e4:	56                   	push   esi
c000b8e5:	53                   	push   ebx
c000b8e6:	83 ec 68             	sub    esp,0x68
c000b8e9:	8b 35 dc 36 02 c0    	mov    esi,DWORD PTR ds:0xc00236dc
c000b8ef:	68 14 01 00 00       	push   0x114
c000b8f4:	e8 2b 69 00 00       	call   c0012224 <operator new(unsigned long)>
c000b8f9:	83 c4 0c             	add    esp,0xc
c000b8fc:	89 c3                	mov    ebx,eax
c000b8fe:	56                   	push   esi
c000b8ff:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c000b903:	50                   	push   eax
c000b904:	e8 49 6d 00 00       	call   c0012652 <File::File(char const*, Process*)>
c000b909:	5e                   	pop    esi
c000b90a:	5f                   	pop    edi
c000b90b:	6a 01                	push   0x1
c000b90d:	53                   	push   ebx
c000b90e:	e8 a3 6d 00 00       	call   c00126b6 <File::open(FileOpenMode)>
c000b913:	83 c4 10             	add    esp,0x10
c000b916:	31 d2                	xor    edx,edx
c000b918:	85 c0                	test   eax,eax
c000b91a:	0f 85 79 02 00 00    	jne    c000bb99 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c000b920:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b928:	83 ec 0c             	sub    esp,0xc
c000b92b:	6a 34                	push   0x34
c000b92d:	e8 33 19 00 00       	call   c000d265 <malloc>
c000b932:	59                   	pop    ecx
c000b933:	89 c7                	mov    edi,eax
c000b935:	8d 74 24 34          	lea    esi,[esp+0x34]
c000b939:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b93b:	56                   	push   esi
c000b93c:	57                   	push   edi
c000b93d:	6a 00                	push   0x0
c000b93f:	6a 34                	push   0x34
c000b941:	53                   	push   ebx
c000b942:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b945:	83 c4 20             	add    esp,0x20
c000b948:	85 c0                	test   eax,eax
c000b94a:	74 17                	je     c000b963 <Thr::loadKernelSymbolTable(char const*)+0x81>
c000b94c:	83 ec 0c             	sub    esp,0xc
c000b94f:	68 d1 fd 01 c0       	push   0xc001fdd1
c000b954:	e8 2f 14 00 00       	call   c000cd88 <panic(char const*)>
c000b959:	83 c4 10             	add    esp,0x10
c000b95c:	31 d2                	xor    edx,edx
c000b95e:	e9 36 02 00 00       	jmp    c000bb99 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c000b963:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c000b969:	75 e1                	jne    c000b94c <Thr::loadKernelSymbolTable(char const*)+0x6a>
c000b96b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c000b96e:	85 c0                	test   eax,eax
c000b970:	74 da                	je     c000b94c <Thr::loadKernelSymbolTable(char const*)+0x6a>
c000b972:	52                   	push   edx
c000b973:	31 d2                	xor    edx,edx
c000b975:	52                   	push   edx
c000b976:	50                   	push   eax
c000b977:	53                   	push   ebx
c000b978:	e8 f7 6d 00 00       	call   c0012774 <File::seek(unsigned long long)>
c000b97d:	83 c4 10             	add    esp,0x10
c000b980:	85 c0                	test   eax,eax
c000b982:	75 c8                	jne    c000b94c <Thr::loadKernelSymbolTable(char const*)+0x6a>
c000b984:	83 ec 0c             	sub    esp,0xc
c000b987:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000b98b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000b98f:	31 ed                	xor    ebp,ebp
c000b991:	0f af c2             	imul   eax,edx
c000b994:	50                   	push   eax
c000b995:	e8 cb 18 00 00       	call   c000d265 <malloc>
c000b99a:	89 34 24             	mov    DWORD PTR [esp],esi
c000b99d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b9a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b9a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b9a7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000b9ab:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000b9af:	0f af c2             	imul   eax,edx
c000b9b2:	99                   	cdq    
c000b9b3:	52                   	push   edx
c000b9b4:	50                   	push   eax
c000b9b5:	53                   	push   ebx
c000b9b6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b9b9:	83 c4 20             	add    esp,0x20
c000b9bc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b9c4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b9cc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b9d4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b9dc:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c000b9e0:	0f 86 aa 00 00 00    	jbe    c000ba90 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c000b9e6:	0f b7 f5             	movzx  esi,bp
c000b9e9:	6b f6 28             	imul   esi,esi,0x28
c000b9ec:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c000b9f0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000b9f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b9f7:	50                   	push   eax
c000b9f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b9fc:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c000ba00:	8b 16                	mov    edx,DWORD PTR [esi]
c000ba02:	6b c0 28             	imul   eax,eax,0x28
c000ba05:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c000ba09:	89 d0                	mov    eax,edx
c000ba0b:	31 d2                	xor    edx,edx
c000ba0d:	52                   	push   edx
c000ba0e:	50                   	push   eax
c000ba0f:	53                   	push   ebx
c000ba10:	e8 5f 6d 00 00       	call   c0012774 <File::seek(unsigned long long)>
c000ba15:	83 c4 0c             	add    esp,0xc
c000ba18:	6a 20                	push   0x20
c000ba1a:	6a 00                	push   0x0
c000ba1c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c000ba20:	52                   	push   edx
c000ba21:	e8 e2 4b ff ff       	call   c0000608 <memset>
c000ba26:	58                   	pop    eax
c000ba27:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba29:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c000ba2d:	51                   	push   ecx
c000ba2e:	8d 54 24 40          	lea    edx,[esp+0x40]
c000ba32:	52                   	push   edx
c000ba33:	6a 00                	push   0x0
c000ba35:	6a 1f                	push   0x1f
c000ba37:	53                   	push   ebx
c000ba38:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ba3b:	83 c4 18             	add    esp,0x18
c000ba3e:	68 e8 fd 01 c0       	push   0xc001fde8
c000ba43:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c000ba47:	52                   	push   edx
c000ba48:	e8 ab 4c ff ff       	call   c00006f8 <strcmp>
c000ba4d:	83 c4 10             	add    esp,0x10
c000ba50:	85 c0                	test   eax,eax
c000ba52:	75 0f                	jne    c000ba63 <Thr::loadKernelSymbolTable(char const*)+0x181>
c000ba54:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000ba57:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba63:	50                   	push   eax
c000ba64:	50                   	push   eax
c000ba65:	68 f0 fd 01 c0       	push   0xc001fdf0
c000ba6a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ba6e:	50                   	push   eax
c000ba6f:	e8 84 4c ff ff       	call   c00006f8 <strcmp>
c000ba74:	83 c4 10             	add    esp,0x10
c000ba77:	85 c0                	test   eax,eax
c000ba79:	75 0f                	jne    c000ba8a <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c000ba7b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000ba7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba86:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ba8a:	45                   	inc    ebp
c000ba8b:	e9 4c ff ff ff       	jmp    c000b9dc <Thr::loadKernelSymbolTable(char const*)+0xfa>
c000ba90:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ba95:	75 10                	jne    c000baa7 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c000ba97:	83 ec 0c             	sub    esp,0xc
c000ba9a:	68 f8 fd 01 c0       	push   0xc001fdf8
c000ba9f:	e8 e4 12 00 00       	call   c000cd88 <panic(char const*)>
c000baa4:	83 c4 10             	add    esp,0x10
c000baa7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000baac:	75 10                	jne    c000babe <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c000baae:	83 ec 0c             	sub    esp,0xc
c000bab1:	68 f8 fd 01 c0       	push   0xc001fdf8
c000bab6:	e8 cd 12 00 00       	call   c000cd88 <panic(char const*)>
c000babb:	83 c4 10             	add    esp,0x10
c000babe:	31 d2                	xor    edx,edx
c000bac0:	50                   	push   eax
c000bac1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bac5:	52                   	push   edx
c000bac6:	50                   	push   eax
c000bac7:	53                   	push   ebx
c000bac8:	e8 a7 6c 00 00       	call   c0012774 <File::seek(unsigned long long)>
c000bacd:	5a                   	pop    edx
c000bace:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bad2:	e8 8e 17 00 00       	call   c000d265 <malloc>
c000bad7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000badf:	89 c1                	mov    ecx,eax
c000bae1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bae5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bae9:	5e                   	pop    esi
c000baea:	8b 03                	mov    eax,DWORD PTR [ebx]
c000baec:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c000baf0:	55                   	push   ebp
c000baf1:	51                   	push   ecx
c000baf2:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c000baf6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bafa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bafe:	53                   	push   ebx
c000baff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bb02:	83 c4 14             	add    esp,0x14
c000bb05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bb09:	e8 57 17 00 00       	call   c000d265 <malloc>
c000bb0e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bb11:	89 c6                	mov    esi,eax
c000bb13:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb15:	56                   	push   esi
c000bb16:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bb1a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bb1e:	53                   	push   ebx
c000bb1f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bb22:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bb26:	8b 15 20 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023620
c000bb2c:	83 c4 1c             	add    esp,0x1c
c000bb2f:	c1 e8 04             	shr    eax,0x4
c000bb32:	89 04 95 a0 34 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcb60],eax
c000bb39:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bb3d:	31 d2                	xor    edx,edx
c000bb3f:	52                   	push   edx
c000bb40:	50                   	push   eax
c000bb41:	53                   	push   ebx
c000bb42:	e8 2d 6c 00 00       	call   c0012774 <File::seek(unsigned long long)>
c000bb47:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bb4a:	31 d2                	xor    edx,edx
c000bb4c:	56                   	push   esi
c000bb4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb51:	52                   	push   edx
c000bb52:	50                   	push   eax
c000bb53:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb55:	53                   	push   ebx
c000bb56:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bb59:	83 c4 14             	add    esp,0x14
c000bb5c:	53                   	push   ebx
c000bb5d:	e8 b2 6b 00 00       	call   c0012714 <File::close()>
c000bb62:	5d                   	pop    ebp
c000bb63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb67:	e8 09 17 00 00       	call   c000d275 <free>
c000bb6c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bb6f:	e8 01 17 00 00       	call   c000d275 <free>
c000bb74:	a1 20 36 02 c0       	mov    eax,ds:0xc0023620
c000bb79:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bb7d:	8d 50 01             	lea    edx,[eax+0x1]
c000bb80:	89 0c 85 a0 35 02 c0 	mov    DWORD PTR [eax*4-0x3ffdca60],ecx
c000bb87:	89 15 20 36 02 c0    	mov    DWORD PTR ds:0xc0023620,edx
c000bb8d:	89 34 85 20 35 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcae0],esi
c000bb94:	83 c4 10             	add    esp,0x10
c000bb97:	b2 01                	mov    dl,0x1
c000bb99:	83 c4 5c             	add    esp,0x5c
c000bb9c:	88 d0                	mov    al,dl
c000bb9e:	5b                   	pop    ebx
c000bb9f:	5e                   	pop    esi
c000bba0:	5f                   	pop    edi
c000bba1:	5d                   	pop    ebp
c000bba2:	c3                   	ret    

c000bba3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c000bba3:	55                   	push   ebp
c000bba4:	57                   	push   edi
c000bba5:	56                   	push   esi
c000bba6:	53                   	push   ebx
c000bba7:	81 ec 68 03 00 00    	sub    esp,0x368
c000bbad:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c000bbb4:	8b 1d dc 36 02 c0    	mov    ebx,DWORD PTR ds:0xc00236dc
c000bbba:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c000bbbe:	68 14 01 00 00       	push   0x114
c000bbc3:	e8 5c 66 00 00       	call   c0012224 <operator new(unsigned long)>
c000bbc8:	83 c4 0c             	add    esp,0xc
c000bbcb:	89 c5                	mov    ebp,eax
c000bbcd:	53                   	push   ebx
c000bbce:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c000bbd5:	50                   	push   eax
c000bbd6:	e8 77 6a 00 00       	call   c0012652 <File::File(char const*, Process*)>
c000bbdb:	58                   	pop    eax
c000bbdc:	5a                   	pop    edx
c000bbdd:	6a 01                	push   0x1
c000bbdf:	55                   	push   ebp
c000bbe0:	e8 d1 6a 00 00       	call   c00126b6 <File::open(FileOpenMode)>
c000bbe5:	83 c4 10             	add    esp,0x10
c000bbe8:	85 c0                	test   eax,eax
c000bbea:	0f 85 ef 06 00 00    	jne    c000c2df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c000bbf0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000bbf8:	83 ec 0c             	sub    esp,0xc
c000bbfb:	6a 34                	push   0x34
c000bbfd:	e8 63 16 00 00       	call   c000d265 <malloc>
c000bc02:	89 c7                	mov    edi,eax
c000bc04:	58                   	pop    eax
c000bc05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bc08:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c000bc0c:	53                   	push   ebx
c000bc0d:	57                   	push   edi
c000bc0e:	6a 00                	push   0x0
c000bc10:	6a 34                	push   0x34
c000bc12:	55                   	push   ebp
c000bc13:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bc16:	83 c4 20             	add    esp,0x20
c000bc19:	85 c0                	test   eax,eax
c000bc1b:	0f 85 be 06 00 00    	jne    c000c2df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c000bc21:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c000bc27:	0f 85 b2 06 00 00    	jne    c000c2df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c000bc2d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c000bc30:	85 c0                	test   eax,eax
c000bc32:	0f 84 a7 06 00 00    	je     c000c2df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c000bc38:	31 d2                	xor    edx,edx
c000bc3a:	56                   	push   esi
c000bc3b:	52                   	push   edx
c000bc3c:	50                   	push   eax
c000bc3d:	55                   	push   ebp
c000bc3e:	e8 31 6b 00 00       	call   c0012774 <File::seek(unsigned long long)>
c000bc43:	83 c4 10             	add    esp,0x10
c000bc46:	85 c0                	test   eax,eax
c000bc48:	0f 85 91 06 00 00    	jne    c000c2df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c000bc4e:	83 ec 0c             	sub    esp,0xc
c000bc51:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c000bc54:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bc58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000bc5c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bc60:	0f af c2             	imul   eax,edx
c000bc63:	50                   	push   eax
c000bc64:	e8 fc 15 00 00       	call   c000d265 <malloc>
c000bc69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bc6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bc70:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bc73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc77:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bc7b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bc7f:	0f af c2             	imul   eax,edx
c000bc82:	99                   	cdq    
c000bc83:	52                   	push   edx
c000bc84:	50                   	push   eax
c000bc85:	55                   	push   ebp
c000bc86:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bc89:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bc8c:	83 c4 20             	add    esp,0x20
c000bc8f:	85 c0                	test   eax,eax
c000bc91:	0f 84 48 06 00 00    	je     c000c2df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c000bc97:	31 d2                	xor    edx,edx
c000bc99:	51                   	push   ecx
c000bc9a:	52                   	push   edx
c000bc9b:	50                   	push   eax
c000bc9c:	55                   	push   ebp
c000bc9d:	e8 d2 6a 00 00       	call   c0012774 <File::seek(unsigned long long)>
c000bca2:	83 c4 10             	add    esp,0x10
c000bca5:	85 c0                	test   eax,eax
c000bca7:	0f 85 32 06 00 00    	jne    c000c2df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c000bcad:	83 ec 0c             	sub    esp,0xc
c000bcb0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c000bcb4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c000bcb8:	31 f6                	xor    esi,esi
c000bcba:	0f af c2             	imul   eax,edx
c000bcbd:	50                   	push   eax
c000bcbe:	e8 a2 15 00 00       	call   c000d265 <malloc>
c000bcc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bcc6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bcca:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bccd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcd1:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c000bcd5:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c000bcd9:	0f af c2             	imul   eax,edx
c000bcdc:	99                   	cdq    
c000bcdd:	52                   	push   edx
c000bcde:	50                   	push   eax
c000bcdf:	55                   	push   ebp
c000bce0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bce3:	83 c4 20             	add    esp,0x20
c000bce6:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c000bcea:	0f 86 8a 00 00 00    	jbe    c000bd7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c000bcf0:	0f b7 de             	movzx  ebx,si
c000bcf3:	c1 e3 05             	shl    ebx,0x5
c000bcf6:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c000bcfa:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c000bcfd:	75 75                	jne    c000bd74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c000bcff:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000bd02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bd06:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd0d:	52                   	push   edx
c000bd0e:	31 d2                	xor    edx,edx
c000bd10:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bd13:	52                   	push   edx
c000bd14:	50                   	push   eax
c000bd15:	55                   	push   ebp
c000bd16:	e8 59 6a 00 00       	call   c0012774 <File::seek(unsigned long long)>
c000bd1b:	83 c4 10             	add    esp,0x10
c000bd1e:	85 c0                	test   eax,eax
c000bd20:	0f 85 b9 05 00 00    	jne    c000c2df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c000bd26:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c000bd2d:	31 d2                	xor    edx,edx
c000bd2f:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c000bd33:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bd36:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000bd3a:	83 ec 0c             	sub    esp,0xc
c000bd3d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bd41:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000bd48:	50                   	push   eax
c000bd49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bd51:	52                   	push   edx
c000bd52:	50                   	push   eax
c000bd53:	55                   	push   ebp
c000bd54:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bd57:	83 c4 1c             	add    esp,0x1c
c000bd5a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd5d:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c000bd60:	50                   	push   eax
c000bd61:	6a 00                	push   0x0
c000bd63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd67:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c000bd6b:	50                   	push   eax
c000bd6c:	e8 97 48 ff ff       	call   c0000608 <memset>
c000bd71:	83 c4 10             	add    esp,0x10
c000bd74:	46                   	inc    esi
c000bd75:	e9 6c ff ff ff       	jmp    c000bce6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c000bd7a:	31 db                	xor    ebx,ebx
c000bd7c:	50                   	push   eax
c000bd7d:	68 00 01 00 00       	push   0x100
c000bd82:	6a 00                	push   0x0
c000bd84:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000bd88:	50                   	push   eax
c000bd89:	e8 7a 48 ff ff       	call   c0000608 <memset>
c000bd8e:	83 c4 0c             	add    esp,0xc
c000bd91:	68 00 01 00 00       	push   0x100
c000bd96:	6a 00                	push   0x0
c000bd98:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c000bd9f:	50                   	push   eax
c000bda0:	e8 63 48 ff ff       	call   c0000608 <memset>
c000bda5:	83 c4 10             	add    esp,0x10
c000bda8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000bdb0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000bdb8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bdc0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bdc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bdd0:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c000bdd4:	0f 86 30 01 00 00    	jbe    c000bf0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c000bdda:	0f b7 f3             	movzx  esi,bx
c000bddd:	6b f6 28             	imul   esi,esi,0x28
c000bde0:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000bde4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000bde7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdeb:	50                   	push   eax
c000bdec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bdf0:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c000bdf4:	8b 06                	mov    eax,DWORD PTR [esi]
c000bdf6:	6b d2 28             	imul   edx,edx,0x28
c000bdf9:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c000bdfd:	31 d2                	xor    edx,edx
c000bdff:	52                   	push   edx
c000be00:	50                   	push   eax
c000be01:	55                   	push   ebp
c000be02:	e8 6d 69 00 00       	call   c0012774 <File::seek(unsigned long long)>
c000be07:	83 c4 0c             	add    esp,0xc
c000be0a:	6a 20                	push   0x20
c000be0c:	6a 00                	push   0x0
c000be0e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c000be15:	51                   	push   ecx
c000be16:	e8 ed 47 ff ff       	call   c0000608 <memset>
c000be1b:	58                   	pop    eax
c000be1c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000be1f:	8d 54 24 58          	lea    edx,[esp+0x58]
c000be23:	52                   	push   edx
c000be24:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c000be2b:	51                   	push   ecx
c000be2c:	6a 00                	push   0x0
c000be2e:	6a 1f                	push   0x1f
c000be30:	55                   	push   ebp
c000be31:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000be34:	83 c4 1c             	add    esp,0x1c
c000be37:	6a 09                	push   0x9
c000be39:	68 12 fe 01 c0       	push   0xc001fe12
c000be3e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c000be45:	51                   	push   ecx
c000be46:	e8 24 47 ff ff       	call   c000056f <memcmp>
c000be4b:	83 c4 10             	add    esp,0x10
c000be4e:	85 c0                	test   eax,eax
c000be50:	75 21                	jne    c000be73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c000be52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be56:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000be5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000be5e:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c000be62:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be65:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c000be6c:	89 c8                	mov    eax,ecx
c000be6e:	40                   	inc    eax
c000be6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000be73:	50                   	push   eax
c000be74:	6a 09                	push   0x9
c000be76:	68 1c fe 01 c0       	push   0xc001fe1c
c000be7b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000be82:	50                   	push   eax
c000be83:	e8 e7 46 ff ff       	call   c000056f <memcmp>
c000be88:	83 c4 10             	add    esp,0x10
c000be8b:	85 c0                	test   eax,eax
c000be8d:	75 21                	jne    c000beb0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c000be8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be93:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000be97:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000be9b:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c000be9f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bea2:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c000bea9:	89 c8                	mov    eax,ecx
c000beab:	40                   	inc    eax
c000beac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000beb0:	50                   	push   eax
c000beb1:	50                   	push   eax
c000beb2:	68 e8 fd 01 c0       	push   0xc001fde8
c000beb7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000bebe:	50                   	push   eax
c000bebf:	e8 34 48 ff ff       	call   c00006f8 <strcmp>
c000bec4:	83 c4 10             	add    esp,0x10
c000bec7:	85 c0                	test   eax,eax
c000bec9:	75 0f                	jne    c000beda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c000becb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bece:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bed2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bed6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000beda:	50                   	push   eax
c000bedb:	50                   	push   eax
c000bedc:	68 f0 fd 01 c0       	push   0xc001fdf0
c000bee1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000bee8:	50                   	push   eax
c000bee9:	e8 0a 48 ff ff       	call   c00006f8 <strcmp>
c000beee:	83 c4 10             	add    esp,0x10
c000bef1:	85 c0                	test   eax,eax
c000bef3:	75 0f                	jne    c000bf04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c000bef5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bef8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000befc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf00:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf04:	43                   	inc    ebx
c000bf05:	e9 c6 fe ff ff       	jmp    c000bdd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c000bf0a:	31 d2                	xor    edx,edx
c000bf0c:	50                   	push   eax
c000bf0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bf11:	52                   	push   edx
c000bf12:	50                   	push   eax
c000bf13:	55                   	push   ebp
c000bf14:	e8 5b 68 00 00       	call   c0012774 <File::seek(unsigned long long)>
c000bf19:	5a                   	pop    edx
c000bf1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf1e:	e8 42 13 00 00       	call   c000d265 <malloc>
c000bf23:	31 d2                	xor    edx,edx
c000bf25:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bf29:	59                   	pop    ecx
c000bf2a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bf2d:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c000bf31:	53                   	push   ebx
c000bf32:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000bf36:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bf3a:	52                   	push   edx
c000bf3b:	50                   	push   eax
c000bf3c:	55                   	push   ebp
c000bf3d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bf40:	83 c4 14             	add    esp,0x14
c000bf43:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf47:	e8 19 13 00 00       	call   c000d265 <malloc>
c000bf4c:	31 d2                	xor    edx,edx
c000bf4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf52:	83 c4 0c             	add    esp,0xc
c000bf55:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bf59:	52                   	push   edx
c000bf5a:	50                   	push   eax
c000bf5b:	55                   	push   ebp
c000bf5c:	e8 13 68 00 00       	call   c0012774 <File::seek(unsigned long long)>
c000bf61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bf64:	31 d2                	xor    edx,edx
c000bf66:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf6a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bf6d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bf71:	52                   	push   edx
c000bf72:	50                   	push   eax
c000bf73:	55                   	push   ebp
c000bf74:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bf77:	83 c4 20             	add    esp,0x20
c000bf7a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000bf82:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bf86:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000bf8a:	0f 84 53 03 00 00    	je     c000c2e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x740>
c000bf90:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c000bf97:	31 d2                	xor    edx,edx
c000bf99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf9d:	c1 e8 03             	shr    eax,0x3
c000bfa0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000bfa4:	50                   	push   eax
c000bfa5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bfa9:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c000bfad:	52                   	push   edx
c000bfae:	50                   	push   eax
c000bfaf:	55                   	push   ebp
c000bfb0:	e8 bf 67 00 00       	call   c0012774 <File::seek(unsigned long long)>
c000bfb5:	58                   	pop    eax
c000bfb6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bfba:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c000bfc1:	e8 9f 12 00 00       	call   c000d265 <malloc>
c000bfc6:	31 d2                	xor    edx,edx
c000bfc8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bfcc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bfcf:	58                   	pop    eax
c000bfd0:	8d 44 24 58          	lea    eax,[esp+0x58]
c000bfd4:	50                   	push   eax
c000bfd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfd9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bfdd:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c000bfe4:	52                   	push   edx
c000bfe5:	50                   	push   eax
c000bfe6:	55                   	push   ebp
c000bfe7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bfea:	83 c4 20             	add    esp,0x20
c000bfed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000bff5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000bff9:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c000bffd:	0f 8d c4 02 00 00    	jge    c000c2c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x724>
c000c003:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c007:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c00b:	31 db                	xor    ebx,ebx
c000c00d:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c000c010:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c014:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c018:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c000c01c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c020:	c1 e8 08             	shr    eax,0x8
c000c023:	89 c6                	mov    esi,eax
c000c025:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c029:	c1 e6 04             	shl    esi,0x4
c000c02c:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c000c030:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c033:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c037:	85 c0                	test   eax,eax
c000c039:	0f 85 17 01 00 00    	jne    c000c156 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c000c03f:	83 ec 0c             	sub    esp,0xc
c000c042:	b3 01                	mov    bl,0x1
c000c044:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c048:	03 06                	add    eax,DWORD PTR [esi]
c000c04a:	50                   	push   eax
c000c04b:	e8 43 f8 ff ff       	call   c000b893 <Thr::getAddressOfKernelSymbol(char const*)>
c000c050:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c054:	83 c4 10             	add    esp,0x10
c000c057:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000c05c:	0f 85 f4 00 00 00    	jne    c000c156 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c000c062:	50                   	push   eax
c000c063:	50                   	push   eax
c000c064:	68 26 fe 01 c0       	push   0xc001fe26
c000c069:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c06d:	03 06                	add    eax,DWORD PTR [esi]
c000c06f:	50                   	push   eax
c000c070:	e8 83 46 ff ff       	call   c00006f8 <strcmp>
c000c075:	83 c4 10             	add    esp,0x10
c000c078:	85 c0                	test   eax,eax
c000c07a:	75 0a                	jne    c000c086 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c000c07c:	b8 cc e0 01 c0       	mov    eax,0xc001e0cc
c000c081:	e9 ca 00 00 00       	jmp    c000c150 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c000c086:	50                   	push   eax
c000c087:	50                   	push   eax
c000c088:	68 30 fe 01 c0       	push   0xc001fe30
c000c08d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c091:	03 06                	add    eax,DWORD PTR [esi]
c000c093:	50                   	push   eax
c000c094:	e8 5f 46 ff ff       	call   c00006f8 <strcmp>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	85 c0                	test   eax,eax
c000c09e:	75 0a                	jne    c000c0aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c000c0a0:	b8 00 de 01 c0       	mov    eax,0xc001de00
c000c0a5:	e9 a6 00 00 00       	jmp    c000c150 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c000c0aa:	53                   	push   ebx
c000c0ab:	53                   	push   ebx
c000c0ac:	68 39 fe 01 c0       	push   0xc001fe39
c000c0b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c0b5:	03 06                	add    eax,DWORD PTR [esi]
c000c0b7:	50                   	push   eax
c000c0b8:	e8 3b 46 ff ff       	call   c00006f8 <strcmp>
c000c0bd:	83 c4 10             	add    esp,0x10
c000c0c0:	85 c0                	test   eax,eax
c000c0c2:	75 0a                	jne    c000c0ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c000c0c4:	b8 cc e1 01 c0       	mov    eax,0xc001e1cc
c000c0c9:	e9 82 00 00 00       	jmp    c000c150 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c000c0ce:	51                   	push   ecx
c000c0cf:	51                   	push   ecx
c000c0d0:	68 43 fe 01 c0       	push   0xc001fe43
c000c0d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c0d9:	03 06                	add    eax,DWORD PTR [esi]
c000c0db:	50                   	push   eax
c000c0dc:	e8 17 46 ff ff       	call   c00006f8 <strcmp>
c000c0e1:	83 c4 10             	add    esp,0x10
c000c0e4:	85 c0                	test   eax,eax
c000c0e6:	74 63                	je     c000c14b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c000c0e8:	50                   	push   eax
c000c0e9:	50                   	push   eax
c000c0ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c0ee:	03 06                	add    eax,DWORD PTR [esi]
c000c0f0:	50                   	push   eax
c000c0f1:	68 4c fe 01 c0       	push   0xc001fe4c
c000c0f6:	e8 6f 0b 00 00       	call   c000cc6a <kprintf(char const*, ...)>
c000c0fb:	58                   	pop    eax
c000c0fc:	5a                   	pop    edx
c000c0fd:	68 66 fe 01 c0       	push   0xc001fe66
c000c102:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c000c109:	53                   	push   ebx
c000c10a:	e8 98 45 ff ff       	call   c00006a7 <strcpy>
c000c10f:	59                   	pop    ecx
c000c110:	58                   	pop    eax
c000c111:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c115:	03 06                	add    eax,DWORD PTR [esi]
c000c117:	50                   	push   eax
c000c118:	53                   	push   ebx
c000c119:	e8 40 46 ff ff       	call   c000075e <strcat>
c000c11e:	58                   	pop    eax
c000c11f:	5a                   	pop    edx
c000c120:	68 fc fe 01 c0       	push   0xc001fefc
c000c125:	53                   	push   ebx
c000c126:	e8 33 46 ff ff       	call   c000075e <strcat>
c000c12b:	83 c4 10             	add    esp,0x10
c000c12e:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c000c133:	0f 84 48 01 00 00    	je     c000c281 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c000c139:	83 ec 0c             	sub    esp,0xc
c000c13c:	53                   	push   ebx
c000c13d:	e8 46 0c 00 00       	call   c000cd88 <panic(char const*)>
c000c142:	83 c4 10             	add    esp,0x10
c000c145:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c000c149:	eb 0b                	jmp    c000c156 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c000c14b:	b8 4c df 01 c0       	mov    eax,0xc001df4c
c000c150:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c154:	b3 01                	mov    bl,0x1
c000c156:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000c15b:	0f 85 80 00 00 00    	jne    c000c1e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c000c161:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c000c168:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c16c:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c000c170:	01 ce                	add    esi,ecx
c000c172:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c000c17a:	8b 06                	mov    eax,DWORD PTR [esi]
c000c17c:	0f 94 c2             	sete   dl
c000c17f:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c000c187:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c000c18c:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c000c190:	84 db                	test   bl,bl
c000c192:	74 31                	je     c000c1c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c000c194:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000c198:	01 c3                	add    ebx,eax
c000c19a:	84 d2                	test   dl,dl
c000c19c:	75 0a                	jne    c000c1a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c000c19e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000c1a2:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c000c1a6:	76 32                	jbe    c000c1da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c000c1a8:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c000c1ad:	0f 84 ce 00 00 00    	je     c000c281 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c000c1b3:	83 ec 0c             	sub    esp,0xc
c000c1b6:	68 7d fe 01 c0       	push   0xc001fe7d
c000c1bb:	e8 c8 0b 00 00       	call   c000cd88 <panic(char const*)>
c000c1c0:	83 c4 10             	add    esp,0x10
c000c1c3:	eb 15                	jmp    c000c1da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c000c1c5:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c000c1c8:	84 d2                	test   dl,dl
c000c1ca:	75 0e                	jne    c000c1da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c000c1cc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000c1d0:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c000c1d4:	77 04                	ja     c000c1da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c000c1d6:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000c1da:	89 1e                	mov    DWORD PTR [esi],ebx
c000c1dc:	e9 dd 00 00 00       	jmp    c000c2be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71b>
c000c1e1:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c000c1e6:	75 6b                	jne    c000c253 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b0>
c000c1e8:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c000c1ef:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c000c1f3:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c000c1f7:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c000c1ff:	74 14                	je     c000c215 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x672>
c000c201:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c000c209:	74 0a                	je     c000c215 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x672>
c000c20b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000c20f:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c000c213:	76 17                	jbe    c000c22c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x689>
c000c215:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c000c21a:	74 65                	je     c000c281 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c000c21c:	83 ec 0c             	sub    esp,0xc
c000c21f:	68 99 fe 01 c0       	push   0xc001fe99
c000c224:	e8 5f 0b 00 00       	call   c000cd88 <panic(char const*)>
c000c229:	83 c4 10             	add    esp,0x10
c000c22c:	8b 16                	mov    edx,DWORD PTR [esi]
c000c22e:	84 db                	test   bl,bl
c000c230:	74 13                	je     c000c245 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a2>
c000c232:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c236:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c000c23d:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c000c241:	01 d0                	add    eax,edx
c000c243:	eb 06                	jmp    c000c24b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c000c245:	89 d0                	mov    eax,edx
c000c247:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c000c24b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c24f:	89 06                	mov    DWORD PTR [esi],eax
c000c251:	eb 6b                	jmp    c000c2be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71b>
c000c253:	50                   	push   eax
c000c254:	50                   	push   eax
c000c255:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c25a:	50                   	push   eax
c000c25b:	68 b5 fe 01 c0       	push   0xc001feb5
c000c260:	e8 05 0a 00 00       	call   c000cc6a <kprintf(char const*, ...)>
c000c265:	83 c4 10             	add    esp,0x10
c000c268:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c000c26d:	74 12                	je     c000c281 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c000c26f:	83 ec 0c             	sub    esp,0xc
c000c272:	68 c0 fe 01 c0       	push   0xc001fec0
c000c277:	e8 0c 0b 00 00       	call   c000cd88 <panic(char const*)>
c000c27c:	83 c4 10             	add    esp,0x10
c000c27f:	eb 3d                	jmp    c000c2be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71b>
c000c281:	83 ec 0c             	sub    esp,0xc
c000c284:	55                   	push   ebp
c000c285:	e8 8a 64 00 00       	call   c0012714 <File::close()>
c000c28a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c28d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c290:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c293:	59                   	pop    ecx
c000c294:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c298:	e8 d8 0f 00 00       	call   c000d275 <free>
c000c29d:	5b                   	pop    ebx
c000c29e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c2a2:	e8 ce 0f 00 00       	call   c000d275 <free>
c000c2a7:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c2aa:	e8 c6 0f 00 00       	call   c000d275 <free>
c000c2af:	5e                   	pop    esi
c000c2b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c2b4:	e8 bc 0f 00 00       	call   c000d275 <free>
c000c2b9:	83 c4 10             	add    esp,0x10
c000c2bc:	eb 21                	jmp    c000c2df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c000c2be:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000c2c2:	e9 2e fd ff ff       	jmp    c000bff5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c000c2c7:	83 ec 0c             	sub    esp,0xc
c000c2ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c2ce:	e8 a2 0f 00 00       	call   c000d275 <free>
c000c2d3:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c000c2d7:	83 c4 10             	add    esp,0x10
c000c2da:	e9 a3 fc ff ff       	jmp    c000bf82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c000c2df:	31 c0                	xor    eax,eax
c000c2e1:	eb 33                	jmp    c000c316 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x773>
c000c2e3:	83 ec 0c             	sub    esp,0xc
c000c2e6:	55                   	push   ebp
c000c2e7:	e8 28 64 00 00       	call   c0012714 <File::close()>
c000c2ec:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c2ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c2f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c2f5:	58                   	pop    eax
c000c2f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c2fa:	e8 76 0f 00 00       	call   c000d275 <free>
c000c2ff:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c302:	e8 6e 0f 00 00       	call   c000d275 <free>
c000c307:	5a                   	pop    edx
c000c308:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c30c:	e8 64 0f 00 00       	call   c000d275 <free>
c000c311:	83 c4 10             	add    esp,0x10
c000c314:	b0 01                	mov    al,0x1
c000c316:	81 c4 5c 03 00 00    	add    esp,0x35c
c000c31c:	5b                   	pop    ebx
c000c31d:	5e                   	pop    esi
c000c31e:	5f                   	pop    edi
c000c31f:	5d                   	pop    ebp
c000c320:	c3                   	ret    

c000c321 <Thr::getDriverBaseFromAddress(unsigned long)>:
c000c321:	56                   	push   esi
c000c322:	31 d2                	xor    edx,edx
c000c324:	53                   	push   ebx
c000c325:	8b 1d 80 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022e80
c000c32b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c32f:	39 d3                	cmp    ebx,edx
c000c331:	7e 1b                	jle    c000c34e <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c000c333:	8b 04 95 a0 30 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcf60]
c000c33a:	39 c8                	cmp    eax,ecx
c000c33c:	77 0d                	ja     c000c34b <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c000c33e:	8b 34 95 a0 2e 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdd160]
c000c345:	01 c6                	add    esi,eax
c000c347:	39 ce                	cmp    esi,ecx
c000c349:	77 05                	ja     c000c350 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c000c34b:	42                   	inc    edx
c000c34c:	eb e1                	jmp    c000c32f <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c000c34e:	31 c0                	xor    eax,eax
c000c350:	5b                   	pop    ebx
c000c351:	5e                   	pop    esi
c000c352:	c3                   	ret    

c000c353 <Thr::getDriverNameFromAddress(unsigned long)>:
c000c353:	53                   	push   ebx
c000c354:	31 c0                	xor    eax,eax
c000c356:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c35a:	8b 1d 80 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022e80
c000c360:	39 c3                	cmp    ebx,eax
c000c362:	7e 22                	jle    c000c386 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c000c364:	8b 14 85 a0 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcf60]
c000c36b:	39 ca                	cmp    edx,ecx
c000c36d:	77 14                	ja     c000c383 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c000c36f:	03 14 85 a0 2e 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdd160]
c000c376:	39 ca                	cmp    edx,ecx
c000c378:	76 09                	jbe    c000c383 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c000c37a:	8b 04 85 a0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd60]
c000c381:	eb 05                	jmp    c000c388 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c000c383:	40                   	inc    eax
c000c384:	eb da                	jmp    c000c360 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c000c386:	31 c0                	xor    eax,eax
c000c388:	5b                   	pop    ebx
c000c389:	c3                   	ret    

c000c38a <Thr::getDriverOffsetFromAddress(unsigned long)>:
c000c38a:	53                   	push   ebx
c000c38b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000c38f:	53                   	push   ebx
c000c390:	e8 8c ff ff ff       	call   c000c321 <Thr::getDriverBaseFromAddress(unsigned long)>
c000c395:	5a                   	pop    edx
c000c396:	31 d2                	xor    edx,edx
c000c398:	85 c0                	test   eax,eax
c000c39a:	74 04                	je     c000c3a0 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c000c39c:	89 da                	mov    edx,ebx
c000c39e:	29 c2                	sub    edx,eax
c000c3a0:	89 d0                	mov    eax,edx
c000c3a2:	5b                   	pop    ebx
c000c3a3:	c3                   	ret    

c000c3a4 <Thr::loadDLL(char const*, bool)>:
c000c3a4:	55                   	push   ebp
c000c3a5:	57                   	push   edi
c000c3a6:	56                   	push   esi
c000c3a7:	53                   	push   ebx
c000c3a8:	81 ec 24 01 00 00    	sub    esp,0x124
c000c3ae:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c000c3b5:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c000c3bc:	56                   	push   esi
c000c3bd:	68 d8 fe 01 c0       	push   0xc001fed8
c000c3c2:	e8 a3 08 00 00       	call   c000cc6a <kprintf(char const*, ...)>
c000c3c7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c3ce:	e8 51 5e 00 00       	call   c0012224 <operator new(unsigned long)>
c000c3d3:	83 c4 0c             	add    esp,0xc
c000c3d6:	89 c3                	mov    ebx,eax
c000c3d8:	ff 35 dc 36 02 c0    	push   DWORD PTR ds:0xc00236dc
c000c3de:	56                   	push   esi
c000c3df:	50                   	push   eax
c000c3e0:	e8 6d 62 00 00       	call   c0012652 <File::File(char const*, Process*)>
c000c3e5:	83 c4 0c             	add    esp,0xc
c000c3e8:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000c3ec:	50                   	push   eax
c000c3ed:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c3f1:	50                   	push   eax
c000c3f2:	53                   	push   ebx
c000c3f3:	e8 6a 65 00 00       	call   c0012962 <File::stat(unsigned long long*, bool*)>
c000c3f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c3fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c3fd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c400:	83 c4 10             	add    esp,0x10
c000c403:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c408:	75 0a                	jne    c000c414 <Thr::loadDLL(char const*, bool)+0x70>
c000c40a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c40e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000c412:	75 3e                	jne    c000c452 <Thr::loadDLL(char const*, bool)+0xae>
c000c414:	89 f8                	mov    eax,edi
c000c416:	31 db                	xor    ebx,ebx
c000c418:	84 c0                	test   al,al
c000c41a:	0f 84 ca 00 00 00    	je     c000c4ea <Thr::loadDLL(char const*, bool)+0x146>
c000c420:	50                   	push   eax
c000c421:	50                   	push   eax
c000c422:	68 e9 fe 01 c0       	push   0xc001fee9
c000c427:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000c42b:	53                   	push   ebx
c000c42c:	e8 76 42 ff ff       	call   c00006a7 <strcpy>
c000c431:	58                   	pop    eax
c000c432:	5a                   	pop    edx
c000c433:	56                   	push   esi
c000c434:	53                   	push   ebx
c000c435:	e8 24 43 ff ff       	call   c000075e <strcat>
c000c43a:	59                   	pop    ecx
c000c43b:	5d                   	pop    ebp
c000c43c:	68 fc fe 01 c0       	push   0xc001fefc
c000c441:	53                   	push   ebx
c000c442:	e8 17 43 ff ff       	call   c000075e <strcat>
c000c447:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c44a:	e8 39 09 00 00       	call   c000cd88 <panic(char const*)>
c000c44f:	83 c4 10             	add    esp,0x10
c000c452:	83 ec 0c             	sub    esp,0xc
c000c455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c459:	e8 07 0e 00 00       	call   c000d265 <malloc>
c000c45e:	89 34 24             	mov    DWORD PTR [esp],esi
c000c461:	89 c3                	mov    ebx,eax
c000c463:	e8 bd 41 ff ff       	call   c0000625 <strlen>
c000c468:	8b 2d 80 2e 02 c0    	mov    ebp,DWORD PTR ds:0xc0022e80
c000c46e:	40                   	inc    eax
c000c46f:	89 04 24             	mov    DWORD PTR [esp],eax
c000c472:	e8 ee 0d 00 00       	call   c000d265 <malloc>
c000c477:	89 04 ad a0 32 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdcd60],eax
c000c47e:	58                   	pop    eax
c000c47f:	a1 80 2e 02 c0       	mov    eax,ds:0xc0022e80
c000c484:	5a                   	pop    edx
c000c485:	56                   	push   esi
c000c486:	ff 34 85 a0 32 02 c0 	push   DWORD PTR [eax*4-0x3ffdcd60]
c000c48d:	e8 15 42 ff ff       	call   c00006a7 <strcpy>
c000c492:	a1 80 2e 02 c0       	mov    eax,ds:0xc0022e80
c000c497:	8d 50 01             	lea    edx,[eax+0x1]
c000c49a:	89 1c 85 a0 30 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcf60],ebx
c000c4a1:	89 15 80 2e 02 c0    	mov    DWORD PTR ds:0xc0022e80,edx
c000c4a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c4ab:	59                   	pop    ecx
c000c4ac:	89 14 85 a0 2e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd160],edx
c000c4b3:	5d                   	pop    ebp
c000c4b4:	53                   	push   ebx
c000c4b5:	68 fe fe 01 c0       	push   0xc001fefe
c000c4ba:	e8 ab 07 00 00       	call   c000cc6a <kprintf(char const*, ...)>
c000c4bf:	83 c4 0c             	add    esp,0xc
c000c4c2:	6a 01                	push   0x1
c000c4c4:	53                   	push   ebx
c000c4c5:	56                   	push   esi
c000c4c6:	e8 d8 f6 ff ff       	call   c000bba3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c000c4cb:	83 c4 10             	add    esp,0x10
c000c4ce:	84 c0                	test   al,al
c000c4d0:	75 18                	jne    c000c4ea <Thr::loadDLL(char const*, bool)+0x146>
c000c4d2:	31 db                	xor    ebx,ebx
c000c4d4:	89 f8                	mov    eax,edi
c000c4d6:	84 c0                	test   al,al
c000c4d8:	74 10                	je     c000c4ea <Thr::loadDLL(char const*, bool)+0x146>
c000c4da:	83 ec 0c             	sub    esp,0xc
c000c4dd:	68 1d ff 01 c0       	push   0xc001ff1d
c000c4e2:	e8 a1 08 00 00       	call   c000cd88 <panic(char const*)>
c000c4e7:	83 c4 10             	add    esp,0x10
c000c4ea:	81 c4 1c 01 00 00    	add    esp,0x11c
c000c4f0:	89 d8                	mov    eax,ebx
c000c4f2:	5b                   	pop    ebx
c000c4f3:	5e                   	pop    esi
c000c4f4:	5f                   	pop    edi
c000c4f5:	5d                   	pop    ebp
c000c4f6:	c3                   	ret    

c000c4f7 <Thr::executeDLL(unsigned long, void*)>:
c000c4f7:	56                   	push   esi
c000c4f8:	53                   	push   ebx
c000c4f9:	51                   	push   ecx
c000c4fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c4fe:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c502:	85 db                	test   ebx,ebx
c000c504:	75 10                	jne    c000c516 <Thr::executeDLL(unsigned long, void*)+0x1f>
c000c506:	83 ec 0c             	sub    esp,0xc
c000c509:	68 3c ff 01 c0       	push   0xc001ff3c
c000c50e:	e8 75 08 00 00       	call   c000cd88 <panic(char const*)>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c51a:	89 d8                	mov    eax,ebx
c000c51c:	5a                   	pop    edx
c000c51d:	5b                   	pop    ebx
c000c51e:	5e                   	pop    esi
c000c51f:	ff e0                	jmp    eax
c000c521:	90                   	nop

c000c522 <GDTEntry::setBase(unsigned int)>:
c000c522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c526:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c52a:	89 c1                	mov    ecx,eax
c000c52c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000c530:	c1 e9 10             	shr    ecx,0x10
c000c533:	c1 e8 18             	shr    eax,0x18
c000c536:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000c539:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000c53c:	c3                   	ret    
c000c53d:	90                   	nop

c000c53e <GDTEntry::setLimit(unsigned int)>:
c000c53e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c542:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c546:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000c549:	66 89 01             	mov    WORD PTR [ecx],ax
c000c54c:	83 e2 f0             	and    edx,0xfffffff0
c000c54f:	c1 e8 10             	shr    eax,0x10
c000c552:	83 e0 0f             	and    eax,0xf
c000c555:	09 d0                	or     eax,edx
c000c557:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000c55a:	c3                   	ret    
c000c55b:	90                   	nop

c000c55c <GDT::GDT()>:
c000c55c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c560:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c566:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c56a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c570:	90                   	nop
c000c571:	c3                   	ret    

c000c572 <GDT::addEntry(GDTEntry)>:
c000c572:	53                   	push   ebx
c000c573:	83 ec 0c             	sub    esp,0xc
c000c576:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c57a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c57c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000c583:	52                   	push   edx
c000c584:	50                   	push   eax
c000c585:	68 66 ff 01 c0       	push   0xc001ff66
c000c58a:	e8 db 06 00 00       	call   c000cc6a <kprintf(char const*, ...)>
c000c58f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c591:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c595:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c599:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000c59d:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000c5a1:	8d 50 01             	lea    edx,[eax+0x1]
c000c5a4:	c1 e0 03             	shl    eax,0x3
c000c5a7:	89 13                	mov    DWORD PTR [ebx],edx
c000c5a9:	83 c4 18             	add    esp,0x18
c000c5ac:	5b                   	pop    ebx
c000c5ad:	c3                   	ret    

c000c5ae <GDT::getNumberOfEntries()>:
c000c5ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c5b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000c5b4:	c3                   	ret    
c000c5b5:	90                   	nop

c000c5b6 <GDT::flush()>:
c000c5b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c5ba:	8b 10                	mov    edx,DWORD PTR [eax]
c000c5bc:	83 c0 04             	add    eax,0x4
c000c5bf:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000c5c6:	a3 26 36 02 c0       	mov    ds:0xc0023626,eax
c000c5cb:	66 89 15 24 36 02 c0 	mov    WORD PTR ds:0xc0023624,dx
c000c5d2:	e9 5c 3d ff ff       	jmp    c0000333 <loadGDT>
c000c5d7:	90                   	nop

c000c5d8 <GDT::setup()>:
c000c5d8:	55                   	push   ebp
c000c5d9:	57                   	push   edi
c000c5da:	56                   	push   esi
c000c5db:	53                   	push   ebx
c000c5dc:	83 ec 3c             	sub    esp,0x3c
c000c5df:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000c5e3:	6a 00                	push   0x0
c000c5e5:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000c5e9:	53                   	push   ebx
c000c5ea:	e8 33 ff ff ff       	call   c000c522 <GDTEntry::setBase(unsigned int)>
c000c5ef:	6a 00                	push   0x0
c000c5f1:	53                   	push   ebx
c000c5f2:	e8 47 ff ff ff       	call   c000c53e <GDTEntry::setLimit(unsigned int)>
c000c5f7:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000c5ff:	6a 00                	push   0x0
c000c601:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000c605:	53                   	push   ebx
c000c606:	e8 17 ff ff ff       	call   c000c522 <GDTEntry::setBase(unsigned int)>
c000c60b:	68 ff ff ff 00       	push   0xffffff
c000c610:	53                   	push   ebx
c000c611:	e8 28 ff ff ff       	call   c000c53e <GDTEntry::setLimit(unsigned int)>
c000c616:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c61a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000c61f:	0d 00 9a c0 00       	or     eax,0xc09a00
c000c624:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c628:	83 c4 20             	add    esp,0x20
c000c62b:	6a 00                	push   0x0
c000c62d:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000c631:	53                   	push   ebx
c000c632:	e8 eb fe ff ff       	call   c000c522 <GDTEntry::setBase(unsigned int)>
c000c637:	68 ff ff ff 00       	push   0xffffff
c000c63c:	53                   	push   ebx
c000c63d:	e8 fc fe ff ff       	call   c000c53e <GDTEntry::setLimit(unsigned int)>
c000c642:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c646:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c64a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000c64e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000c652:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c656:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000c65b:	0d 00 92 c0 00       	or     eax,0xc09200
c000c660:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c664:	89 d8                	mov    eax,ebx
c000c666:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000c66a:	80 cc 60             	or     ah,0x60
c000c66d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c671:	83 c4 0c             	add    esp,0xc
c000c674:	89 f8                	mov    eax,edi
c000c676:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c67a:	80 cc 60             	or     ah,0x60
c000c67d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c681:	89 c7                	mov    edi,eax
c000c683:	55                   	push   ebp
c000c684:	e8 e9 fe ff ff       	call   c000c572 <GDT::addEntry(GDTEntry)>
c000c689:	83 c4 0c             	add    esp,0xc
c000c68c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c690:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c694:	55                   	push   ebp
c000c695:	e8 d8 fe ff ff       	call   c000c572 <GDT::addEntry(GDTEntry)>
c000c69a:	83 c4 0c             	add    esp,0xc
c000c69d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c6a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c6a5:	55                   	push   ebp
c000c6a6:	e8 c7 fe ff ff       	call   c000c572 <GDT::addEntry(GDTEntry)>
c000c6ab:	83 c4 0c             	add    esp,0xc
c000c6ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c6b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c6b6:	53                   	push   ebx
c000c6b7:	51                   	push   ecx
c000c6b8:	55                   	push   ebp
c000c6b9:	e8 b4 fe ff ff       	call   c000c572 <GDT::addEntry(GDTEntry)>
c000c6be:	83 c4 0c             	add    esp,0xc
c000c6c1:	57                   	push   edi
c000c6c2:	56                   	push   esi
c000c6c3:	55                   	push   ebp
c000c6c4:	e8 a9 fe ff ff       	call   c000c572 <GDT::addEntry(GDTEntry)>
c000c6c9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c6cc:	e8 e5 fe ff ff       	call   c000c5b6 <GDT::flush()>
c000c6d1:	83 c4 4c             	add    esp,0x4c
c000c6d4:	5b                   	pop    ebx
c000c6d5:	5e                   	pop    esi
c000c6d6:	5f                   	pop    edi
c000c6d7:	5d                   	pop    ebp
c000c6d8:	c3                   	ret    

c000c6d9 <idleFunction(void*)>:
c000c6d9:	53                   	push   ebx
c000c6da:	83 ec 08             	sub    esp,0x8
c000c6dd:	e8 2c 1a 00 00       	call   c000e10e <unlockScheduler()>
c000c6e2:	e8 9f a8 00 00       	call   c0016f86 <thisCPU()>
c000c6e7:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000c6ee:	74 41                	je     c000c731 <idleFunction(void*)+0x58>
c000c6f0:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c000c6f5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000c6fc:	74 33                	je     c000c731 <idleFunction(void*)+0x58>
c000c6fe:	31 db                	xor    ebx,ebx
c000c700:	52                   	push   edx
c000c701:	52                   	push   edx
c000c702:	68 e1 00 00 00       	push   0xe1
c000c707:	50                   	push   eax
c000c708:	e8 b9 ea ff ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c000c70d:	53                   	push   ebx
c000c70e:	83 e0 02             	and    eax,0x2
c000c711:	50                   	push   eax
c000c712:	68 e1 00 00 00       	push   0xe1
c000c717:	ff 35 68 2e 02 c0    	push   DWORD PTR ds:0xc0022e68
c000c71d:	e8 d0 ea ff ff       	call   c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c000c722:	83 c4 20             	add    esp,0x20
c000c725:	e8 26 3a ff ff       	call   c0000150 <doTPAUSE>
c000c72a:	e8 61 1c 01 00       	call   c001e390 <idleCommon()>
c000c72f:	eb f4                	jmp    c000c725 <idleFunction(void*)+0x4c>
c000c731:	fb                   	sti    
c000c732:	f4                   	hlt    
c000c733:	e8 58 1c 01 00       	call   c001e390 <idleCommon()>
c000c738:	eb f7                	jmp    c000c731 <idleFunction(void*)+0x58>

c000c73a <IDTEntry::IDTEntry(bool)>:
c000c73a:	83 ec 04             	sub    esp,0x4
c000c73d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c741:	88 04 24             	mov    BYTE PTR [esp],al
c000c744:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c748:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000c74e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c752:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000c756:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c75a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c75d:	83 e2 f0             	and    edx,0xfffffff0
c000c760:	83 ca 0e             	or     edx,0xe
c000c763:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c766:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c76a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c76d:	83 e2 ef             	and    edx,0xffffffef
c000c770:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c773:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000c777:	74 04                	je     c000c77d <IDTEntry::IDTEntry(bool)+0x43>
c000c779:	b2 03                	mov    dl,0x3
c000c77b:	eb 02                	jmp    c000c77f <IDTEntry::IDTEntry(bool)+0x45>
c000c77d:	b2 00                	mov    dl,0x0
c000c77f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c783:	83 e2 03             	and    edx,0x3
c000c786:	88 d1                	mov    cl,dl
c000c788:	c1 e1 05             	shl    ecx,0x5
c000c78b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c78e:	83 e2 9f             	and    edx,0xffffff9f
c000c791:	09 ca                	or     edx,ecx
c000c793:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c796:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c79a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c79d:	83 ca 80             	or     edx,0xffffff80
c000c7a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c7a3:	90                   	nop
c000c7a4:	83 c4 04             	add    esp,0x4
c000c7a7:	c3                   	ret    

c000c7a8 <IDTEntry::setOffset(unsigned int)>:
c000c7a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c7ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c7b0:	66 89 02             	mov    WORD PTR [edx],ax
c000c7b3:	c1 e8 10             	shr    eax,0x10
c000c7b6:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000c7ba:	c3                   	ret    
c000c7bb:	90                   	nop

c000c7bc <IDT::IDT()>:
c000c7bc:	90                   	nop
c000c7bd:	c3                   	ret    

c000c7be <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000c7be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7c2:	83 c0 30             	add    eax,0x30
c000c7c5:	c3                   	ret    

c000c7c6 <IDT::addEntry(IDTEntry, int)>:
c000c7c6:	53                   	push   ebx
c000c7c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c7cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c7cf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c7d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c7d7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000c7da:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000c7de:	5b                   	pop    ebx
c000c7df:	c3                   	ret    

c000c7e0 <IDT::addEntry(int, void (*)(), bool)>:
c000c7e0:	53                   	push   ebx
c000c7e1:	83 ec 10             	sub    esp,0x10
c000c7e4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000c7e9:	50                   	push   eax
c000c7ea:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c7ee:	53                   	push   ebx
c000c7ef:	e8 46 ff ff ff       	call   c000c73a <IDTEntry::IDTEntry(bool)>
c000c7f4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c7f8:	53                   	push   ebx
c000c7f9:	e8 aa ff ff ff       	call   c000c7a8 <IDTEntry::setOffset(unsigned int)>
c000c7fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c802:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c806:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c80a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c80e:	e8 b3 ff ff ff       	call   c000c7c6 <IDT::addEntry(IDTEntry, int)>
c000c813:	83 c4 30             	add    esp,0x30
c000c816:	5b                   	pop    ebx
c000c817:	c3                   	ret    

c000c818 <IDT::flush()>:
c000c818:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c81c:	66 c7 05 2c 36 02 c0 ff 07 	mov    WORD PTR ds:0xc002362c,0x7ff
c000c825:	a3 2e 36 02 c0       	mov    ds:0xc002362e,eax
c000c82a:	0f 01 1d 2c 36 02 c0 	lidtd  ds:0xc002362c
c000c831:	c3                   	ret    

c000c832 <IDT::setup()>:
c000c832:	57                   	push   edi
c000c833:	56                   	push   esi
c000c834:	53                   	push   ebx
c000c835:	83 ec 10             	sub    esp,0x10
c000c838:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c83c:	6a 00                	push   0x0
c000c83e:	68 53 03 00 c0       	push   0xc0000353
c000c843:	6a 00                	push   0x0
c000c845:	53                   	push   ebx
c000c846:	e8 95 ff ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c84b:	6a 00                	push   0x0
c000c84d:	68 63 03 00 c0       	push   0xc0000363
c000c852:	6a 01                	push   0x1
c000c854:	53                   	push   ebx
c000c855:	e8 86 ff ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c85a:	83 c4 20             	add    esp,0x20
c000c85d:	6a 00                	push   0x0
c000c85f:	68 6d 03 00 c0       	push   0xc000036d
c000c864:	6a 02                	push   0x2
c000c866:	53                   	push   ebx
c000c867:	e8 74 ff ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c86c:	6a 00                	push   0x0
c000c86e:	68 77 03 00 c0       	push   0xc0000377
c000c873:	6a 03                	push   0x3
c000c875:	53                   	push   ebx
c000c876:	e8 65 ff ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c87b:	83 c4 20             	add    esp,0x20
c000c87e:	6a 00                	push   0x0
c000c880:	68 81 03 00 c0       	push   0xc0000381
c000c885:	6a 04                	push   0x4
c000c887:	53                   	push   ebx
c000c888:	e8 53 ff ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c88d:	6a 00                	push   0x0
c000c88f:	68 8b 03 00 c0       	push   0xc000038b
c000c894:	6a 05                	push   0x5
c000c896:	53                   	push   ebx
c000c897:	e8 44 ff ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c89c:	83 c4 20             	add    esp,0x20
c000c89f:	6a 00                	push   0x0
c000c8a1:	68 95 03 00 c0       	push   0xc0000395
c000c8a6:	6a 06                	push   0x6
c000c8a8:	53                   	push   ebx
c000c8a9:	e8 32 ff ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c8ae:	6a 00                	push   0x0
c000c8b0:	68 9f 03 00 c0       	push   0xc000039f
c000c8b5:	6a 07                	push   0x7
c000c8b7:	53                   	push   ebx
c000c8b8:	e8 23 ff ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c8bd:	83 c4 20             	add    esp,0x20
c000c8c0:	6a 00                	push   0x0
c000c8c2:	68 a9 03 00 c0       	push   0xc00003a9
c000c8c7:	6a 08                	push   0x8
c000c8c9:	53                   	push   ebx
c000c8ca:	e8 11 ff ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c8cf:	6a 00                	push   0x0
c000c8d1:	68 b1 03 00 c0       	push   0xc00003b1
c000c8d6:	6a 09                	push   0x9
c000c8d8:	53                   	push   ebx
c000c8d9:	e8 02 ff ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c8de:	83 c4 20             	add    esp,0x20
c000c8e1:	6a 00                	push   0x0
c000c8e3:	68 bb 03 00 c0       	push   0xc00003bb
c000c8e8:	6a 0a                	push   0xa
c000c8ea:	53                   	push   ebx
c000c8eb:	e8 f0 fe ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c8f0:	6a 00                	push   0x0
c000c8f2:	68 c3 03 00 c0       	push   0xc00003c3
c000c8f7:	6a 0b                	push   0xb
c000c8f9:	53                   	push   ebx
c000c8fa:	e8 e1 fe ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c8ff:	83 c4 20             	add    esp,0x20
c000c902:	6a 00                	push   0x0
c000c904:	68 cb 03 00 c0       	push   0xc00003cb
c000c909:	6a 0c                	push   0xc
c000c90b:	53                   	push   ebx
c000c90c:	e8 cf fe ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c911:	6a 00                	push   0x0
c000c913:	68 d3 03 00 c0       	push   0xc00003d3
c000c918:	6a 0d                	push   0xd
c000c91a:	53                   	push   ebx
c000c91b:	e8 c0 fe ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c920:	83 c4 20             	add    esp,0x20
c000c923:	6a 00                	push   0x0
c000c925:	68 db 03 00 c0       	push   0xc00003db
c000c92a:	6a 0e                	push   0xe
c000c92c:	53                   	push   ebx
c000c92d:	e8 ae fe ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c932:	6a 00                	push   0x0
c000c934:	68 e3 03 00 c0       	push   0xc00003e3
c000c939:	6a 0f                	push   0xf
c000c93b:	53                   	push   ebx
c000c93c:	e8 9f fe ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c941:	83 c4 20             	add    esp,0x20
c000c944:	6a 00                	push   0x0
c000c946:	68 ed 03 00 c0       	push   0xc00003ed
c000c94b:	6a 10                	push   0x10
c000c94d:	53                   	push   ebx
c000c94e:	e8 8d fe ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c953:	6a 00                	push   0x0
c000c955:	68 f7 03 00 c0       	push   0xc00003f7
c000c95a:	6a 11                	push   0x11
c000c95c:	53                   	push   ebx
c000c95d:	e8 7e fe ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c962:	83 c4 20             	add    esp,0x20
c000c965:	6a 00                	push   0x0
c000c967:	68 01 04 00 c0       	push   0xc0000401
c000c96c:	6a 12                	push   0x12
c000c96e:	53                   	push   ebx
c000c96f:	e8 6c fe ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c974:	6a 01                	push   0x1
c000c976:	68 0b 04 00 c0       	push   0xc000040b
c000c97b:	6a 60                	push   0x60
c000c97d:	53                   	push   ebx
c000c97e:	e8 5d fe ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c983:	83 c4 20             	add    esp,0x20
c000c986:	6a 00                	push   0x0
c000c988:	68 15 04 00 c0       	push   0xc0000415
c000c98d:	6a 20                	push   0x20
c000c98f:	53                   	push   ebx
c000c990:	e8 4b fe ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c995:	6a 00                	push   0x0
c000c997:	68 1f 04 00 c0       	push   0xc000041f
c000c99c:	6a 21                	push   0x21
c000c99e:	53                   	push   ebx
c000c99f:	e8 3c fe ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c9a4:	83 c4 20             	add    esp,0x20
c000c9a7:	6a 00                	push   0x0
c000c9a9:	68 29 04 00 c0       	push   0xc0000429
c000c9ae:	6a 22                	push   0x22
c000c9b0:	53                   	push   ebx
c000c9b1:	e8 2a fe ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c9b6:	6a 00                	push   0x0
c000c9b8:	68 33 04 00 c0       	push   0xc0000433
c000c9bd:	6a 23                	push   0x23
c000c9bf:	53                   	push   ebx
c000c9c0:	e8 1b fe ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c9c5:	83 c4 20             	add    esp,0x20
c000c9c8:	6a 00                	push   0x0
c000c9ca:	68 3d 04 00 c0       	push   0xc000043d
c000c9cf:	6a 24                	push   0x24
c000c9d1:	53                   	push   ebx
c000c9d2:	e8 09 fe ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c9d7:	6a 00                	push   0x0
c000c9d9:	68 47 04 00 c0       	push   0xc0000447
c000c9de:	6a 25                	push   0x25
c000c9e0:	53                   	push   ebx
c000c9e1:	e8 fa fd ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c9e6:	83 c4 20             	add    esp,0x20
c000c9e9:	6a 00                	push   0x0
c000c9eb:	68 51 04 00 c0       	push   0xc0000451
c000c9f0:	6a 26                	push   0x26
c000c9f2:	53                   	push   ebx
c000c9f3:	e8 e8 fd ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000c9f8:	6a 00                	push   0x0
c000c9fa:	68 5b 04 00 c0       	push   0xc000045b
c000c9ff:	6a 27                	push   0x27
c000ca01:	53                   	push   ebx
c000ca02:	e8 d9 fd ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000ca07:	83 c4 20             	add    esp,0x20
c000ca0a:	6a 00                	push   0x0
c000ca0c:	68 65 04 00 c0       	push   0xc0000465
c000ca11:	6a 28                	push   0x28
c000ca13:	53                   	push   ebx
c000ca14:	e8 c7 fd ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000ca19:	6a 00                	push   0x0
c000ca1b:	68 6f 04 00 c0       	push   0xc000046f
c000ca20:	6a 29                	push   0x29
c000ca22:	53                   	push   ebx
c000ca23:	e8 b8 fd ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000ca28:	83 c4 20             	add    esp,0x20
c000ca2b:	6a 00                	push   0x0
c000ca2d:	68 79 04 00 c0       	push   0xc0000479
c000ca32:	6a 2a                	push   0x2a
c000ca34:	53                   	push   ebx
c000ca35:	e8 a6 fd ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000ca3a:	6a 00                	push   0x0
c000ca3c:	68 83 04 00 c0       	push   0xc0000483
c000ca41:	6a 2b                	push   0x2b
c000ca43:	53                   	push   ebx
c000ca44:	e8 97 fd ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000ca49:	83 c4 20             	add    esp,0x20
c000ca4c:	6a 00                	push   0x0
c000ca4e:	68 8d 04 00 c0       	push   0xc000048d
c000ca53:	6a 2c                	push   0x2c
c000ca55:	53                   	push   ebx
c000ca56:	e8 85 fd ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000ca5b:	6a 00                	push   0x0
c000ca5d:	68 97 04 00 c0       	push   0xc0000497
c000ca62:	6a 2d                	push   0x2d
c000ca64:	53                   	push   ebx
c000ca65:	e8 76 fd ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000ca6a:	83 c4 20             	add    esp,0x20
c000ca6d:	6a 00                	push   0x0
c000ca6f:	68 a1 04 00 c0       	push   0xc00004a1
c000ca74:	6a 2e                	push   0x2e
c000ca76:	53                   	push   ebx
c000ca77:	e8 64 fd ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000ca7c:	6a 00                	push   0x0
c000ca7e:	68 ab 04 00 c0       	push   0xc00004ab
c000ca83:	6a 2f                	push   0x2f
c000ca85:	53                   	push   ebx
c000ca86:	e8 55 fd ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000ca8b:	83 c4 20             	add    esp,0x20
c000ca8e:	6a 00                	push   0x0
c000ca90:	68 b5 04 00 c0       	push   0xc00004b5
c000ca95:	6a 30                	push   0x30
c000ca97:	53                   	push   ebx
c000ca98:	e8 43 fd ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000ca9d:	6a 00                	push   0x0
c000ca9f:	68 bf 04 00 c0       	push   0xc00004bf
c000caa4:	6a 31                	push   0x31
c000caa6:	53                   	push   ebx
c000caa7:	e8 34 fd ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000caac:	83 c4 20             	add    esp,0x20
c000caaf:	6a 00                	push   0x0
c000cab1:	68 c9 04 00 c0       	push   0xc00004c9
c000cab6:	6a 32                	push   0x32
c000cab8:	53                   	push   ebx
c000cab9:	e8 22 fd ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000cabe:	6a 00                	push   0x0
c000cac0:	68 d3 04 00 c0       	push   0xc00004d3
c000cac5:	6a 33                	push   0x33
c000cac7:	53                   	push   ebx
c000cac8:	e8 13 fd ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000cacd:	83 c4 20             	add    esp,0x20
c000cad0:	6a 00                	push   0x0
c000cad2:	68 dd 04 00 c0       	push   0xc00004dd
c000cad7:	6a 34                	push   0x34
c000cad9:	53                   	push   ebx
c000cada:	e8 01 fd ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000cadf:	6a 00                	push   0x0
c000cae1:	68 e7 04 00 c0       	push   0xc00004e7
c000cae6:	6a 35                	push   0x35
c000cae8:	53                   	push   ebx
c000cae9:	e8 f2 fc ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000caee:	83 c4 20             	add    esp,0x20
c000caf1:	6a 00                	push   0x0
c000caf3:	68 f1 04 00 c0       	push   0xc00004f1
c000caf8:	6a 36                	push   0x36
c000cafa:	53                   	push   ebx
c000cafb:	e8 e0 fc ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000cb00:	6a 00                	push   0x0
c000cb02:	68 fb 04 00 c0       	push   0xc00004fb
c000cb07:	6a 37                	push   0x37
c000cb09:	53                   	push   ebx
c000cb0a:	e8 d1 fc ff ff       	call   c000c7e0 <IDT::addEntry(int, void (*)(), bool)>
c000cb0f:	83 c4 20             	add    esp,0x20
c000cb12:	e8 0c 47 00 00       	call   c0011223 <Virt::getAKernelVAS()>
c000cb17:	52                   	push   edx
c000cb18:	6a 03                	push   0x3
c000cb1a:	6a 02                	push   0x2
c000cb1c:	50                   	push   eax
c000cb1d:	e8 a8 4c 00 00       	call   c00117ca <VAS::allocatePages(int, int)>
c000cb22:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000cb29:	89 c6                	mov    esi,eax
c000cb2b:	e8 f4 56 00 00       	call   c0012224 <operator new(unsigned long)>
c000cb30:	81 c6 00 20 00 00    	add    esi,0x2000
c000cb36:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb39:	89 c7                	mov    edi,eax
c000cb3b:	e8 3a 40 00 00       	call   c0010b7a <TSS::TSS()>
c000cb40:	83 c4 0c             	add    esp,0xc
c000cb43:	68 a9 03 00 c0       	push   0xc00003a9
c000cb48:	56                   	push   esi
c000cb49:	57                   	push   edi
c000cb4a:	e8 6b 40 00 00       	call   c0010bba <TSS::setup(unsigned long, unsigned long)>
c000cb4f:	59                   	pop    ecx
c000cb50:	89 c6                	mov    esi,eax
c000cb52:	5f                   	pop    edi
c000cb53:	6a 00                	push   0x0
c000cb55:	8d 44 24 14          	lea    eax,[esp+0x14]
c000cb59:	50                   	push   eax
c000cb5a:	e8 db fb ff ff       	call   c000c73a <IDTEntry::IDTEntry(bool)>
c000cb5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cb63:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000cb68:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000cb6f:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000cb75:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cb79:	80 ce 05             	or     dh,0x5
c000cb7c:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000cb7f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cb83:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cb87:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000cb8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cb8d:	e8 86 fc ff ff       	call   c000c818 <IDT::flush()>
c000cb92:	83 c4 20             	add    esp,0x20
c000cb95:	5b                   	pop    ebx
c000cb96:	5e                   	pop    esi
c000cb97:	5f                   	pop    edi
c000cb98:	c3                   	ret    

c000cb99 <stringifyxWithBase(unsigned int, char*, int)>:
c000cb99:	57                   	push   edi
c000cb9a:	b9 3f 00 00 00       	mov    ecx,0x3f
c000cb9f:	56                   	push   esi
c000cba0:	be 84 ff 01 c0       	mov    esi,0xc001ff84
c000cba5:	53                   	push   ebx
c000cba6:	83 ec 40             	sub    esp,0x40
c000cba9:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000cbad:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000cbb1:	fc                   	cld    
c000cbb2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cbb4:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000cbb8:	83 f9 3e             	cmp    ecx,0x3e
c000cbbb:	7e 05                	jle    c000cbc2 <stringifyxWithBase(unsigned int, char*, int)+0x29>
c000cbbd:	b9 3e 00 00 00       	mov    ecx,0x3e
c000cbc2:	89 df                	mov    edi,ebx
c000cbc4:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000cbc8:	eb 02                	jmp    c000cbcc <stringifyxWithBase(unsigned int, char*, int)+0x33>
c000cbca:	89 c7                	mov    edi,eax
c000cbcc:	31 d2                	xor    edx,edx
c000cbce:	46                   	inc    esi
c000cbcf:	89 f8                	mov    eax,edi
c000cbd1:	f7 f1                	div    ecx
c000cbd3:	39 cf                	cmp    edi,ecx
c000cbd5:	73 f3                	jae    c000cbca <stringifyxWithBase(unsigned int, char*, int)+0x31>
c000cbd7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000cbda:	eb 02                	jmp    c000cbde <stringifyxWithBase(unsigned int, char*, int)+0x45>
c000cbdc:	89 c3                	mov    ebx,eax
c000cbde:	31 d2                	xor    edx,edx
c000cbe0:	4e                   	dec    esi
c000cbe1:	89 d8                	mov    eax,ebx
c000cbe3:	f7 f1                	div    ecx
c000cbe5:	39 cb                	cmp    ebx,ecx
c000cbe7:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000cbeb:	88 16                	mov    BYTE PTR [esi],dl
c000cbed:	73 ed                	jae    c000cbdc <stringifyxWithBase(unsigned int, char*, int)+0x43>
c000cbef:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cbf3:	83 c4 40             	add    esp,0x40
c000cbf6:	5b                   	pop    ebx
c000cbf7:	5e                   	pop    esi
c000cbf8:	5f                   	pop    edi
c000cbf9:	c3                   	ret    

c000cbfa <logc(char)>:
c000cbfa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cbfe:	ba fd 03 00 00       	mov    edx,0x3fd
c000cc03:	ec                   	in     al,dx
c000cc04:	a8 20                	test   al,0x20
c000cc06:	74 fb                	je     c000cc03 <logc(char)+0x9>
c000cc08:	ba f8 03 00 00       	mov    edx,0x3f8
c000cc0d:	88 c8                	mov    al,cl
c000cc0f:	ee                   	out    dx,al
c000cc10:	c3                   	ret    

c000cc11 <logs(char*)>:
c000cc11:	53                   	push   ebx
c000cc12:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cc16:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cc19:	84 c0                	test   al,al
c000cc1b:	74 0f                	je     c000cc2c <logs(char*)+0x1b>
c000cc1d:	50                   	push   eax
c000cc1e:	43                   	inc    ebx
c000cc1f:	e8 d6 ff ff ff       	call   c000cbfa <logc(char)>
c000cc24:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cc27:	5a                   	pop    edx
c000cc28:	84 c0                	test   al,al
c000cc2a:	75 f1                	jne    c000cc1d <logs(char*)+0xc>
c000cc2c:	5b                   	pop    ebx
c000cc2d:	c3                   	ret    

c000cc2e <logWriteInt(unsigned int)>:
c000cc2e:	83 ec 10             	sub    esp,0x10
c000cc31:	6a 0a                	push   0xa
c000cc33:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cc37:	50                   	push   eax
c000cc38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc3c:	e8 58 ff ff ff       	call   c000cb99 <stringifyxWithBase(unsigned int, char*, int)>
c000cc41:	50                   	push   eax
c000cc42:	e8 ca ff ff ff       	call   c000cc11 <logs(char*)>
c000cc47:	83 c4 20             	add    esp,0x20
c000cc4a:	c3                   	ret    

c000cc4b <logWriteIntBase(unsigned int, int)>:
c000cc4b:	83 ec 10             	sub    esp,0x10
c000cc4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cc52:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cc56:	50                   	push   eax
c000cc57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc5b:	e8 39 ff ff ff       	call   c000cb99 <stringifyxWithBase(unsigned int, char*, int)>
c000cc60:	50                   	push   eax
c000cc61:	e8 ab ff ff ff       	call   c000cc11 <logs(char*)>
c000cc66:	83 c4 20             	add    esp,0x20
c000cc69:	c3                   	ret    

c000cc6a <kprintf(char const*, ...)>:
c000cc6a:	55                   	push   ebp
c000cc6b:	57                   	push   edi
c000cc6c:	56                   	push   esi
c000cc6d:	53                   	push   ebx
c000cc6e:	83 ec 0c             	sub    esp,0xc
c000cc71:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cc75:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cc79:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cc7d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cc80:	84 c0                	test   al,al
c000cc82:	74 4a                	je     c000ccce <kprintf(char const*, ...)+0x64>
c000cc84:	31 db                	xor    ebx,ebx
c000cc86:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cc89:	3c 25                	cmp    al,0x25
c000cc8b:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cc8e:	0f 85 e4 00 00 00    	jne    c000cd78 <kprintf(char const*, ...)+0x10e>
c000cc94:	83 c3 02             	add    ebx,0x2
c000cc97:	8a 07                	mov    al,BYTE PTR [edi]
c000cc99:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000cc9c:	83 e8 25             	sub    eax,0x25
c000cc9f:	3c 53                	cmp    al,0x53
c000cca1:	0f 87 ba 00 00 00    	ja     c000cd61 <kprintf(char const*, ...)+0xf7>
c000cca7:	0f b6 c0             	movzx  eax,al
c000ccaa:	ff 24 85 d8 00 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdff28]
c000ccb1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ccb5:	89 c8                	mov    eax,ecx
c000ccb7:	83 c1 04             	add    ecx,0x4
c000ccba:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ccbe:	ff 30                	push   DWORD PTR [eax]
c000ccc0:	e8 4c ff ff ff       	call   c000cc11 <logs(char*)>
c000ccc5:	58                   	pop    eax
c000ccc6:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000ccca:	84 c0                	test   al,al
c000cccc:	75 b8                	jne    c000cc86 <kprintf(char const*, ...)+0x1c>
c000ccce:	83 c4 0c             	add    esp,0xc
c000ccd1:	5b                   	pop    ebx
c000ccd2:	5e                   	pop    esi
c000ccd3:	5f                   	pop    edi
c000ccd4:	5d                   	pop    ebp
c000ccd5:	c3                   	ret    
c000ccd6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ccda:	89 d0                	mov    eax,edx
c000ccdc:	83 c2 04             	add    edx,0x4
c000ccdf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cce3:	ff 30                	push   DWORD PTR [eax]
c000cce5:	e8 44 ff ff ff       	call   c000cc2e <logWriteInt(unsigned int)>
c000ccea:	58                   	pop    eax
c000cceb:	eb d9                	jmp    c000ccc6 <kprintf(char const*, ...)+0x5c>
c000cced:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ccf1:	89 d0                	mov    eax,edx
c000ccf3:	83 c2 04             	add    edx,0x4
c000ccf6:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000ccf9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ccfd:	50                   	push   eax
c000ccfe:	e8 f7 fe ff ff       	call   c000cbfa <logc(char)>
c000cd03:	58                   	pop    eax
c000cd04:	eb c0                	jmp    c000ccc6 <kprintf(char const*, ...)+0x5c>
c000cd06:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd0a:	89 c8                	mov    eax,ecx
c000cd0c:	83 c1 04             	add    ecx,0x4
c000cd0f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd13:	ff 30                	push   DWORD PTR [eax]
c000cd15:	e8 14 ff ff ff       	call   c000cc2e <logWriteInt(unsigned int)>
c000cd1a:	5f                   	pop    edi
c000cd1b:	eb a9                	jmp    c000ccc6 <kprintf(char const*, ...)+0x5c>
c000cd1d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd21:	89 c8                	mov    eax,ecx
c000cd23:	83 c1 04             	add    ecx,0x4
c000cd26:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd2a:	6a 10                	push   0x10
c000cd2c:	ff 30                	push   DWORD PTR [eax]
c000cd2e:	e8 18 ff ff ff       	call   c000cc4b <logWriteIntBase(unsigned int, int)>
c000cd33:	59                   	pop    ecx
c000cd34:	5f                   	pop    edi
c000cd35:	eb 8f                	jmp    c000ccc6 <kprintf(char const*, ...)+0x5c>
c000cd37:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd3b:	89 d0                	mov    eax,edx
c000cd3d:	83 c2 08             	add    edx,0x8
c000cd40:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cd44:	6a 10                	push   0x10
c000cd46:	ff 30                	push   DWORD PTR [eax]
c000cd48:	e8 fe fe ff ff       	call   c000cc4b <logWriteIntBase(unsigned int, int)>
c000cd4d:	58                   	pop    eax
c000cd4e:	5a                   	pop    edx
c000cd4f:	e9 72 ff ff ff       	jmp    c000ccc6 <kprintf(char const*, ...)+0x5c>
c000cd54:	6a 25                	push   0x25
c000cd56:	e8 9f fe ff ff       	call   c000cbfa <logc(char)>
c000cd5b:	58                   	pop    eax
c000cd5c:	e9 65 ff ff ff       	jmp    c000ccc6 <kprintf(char const*, ...)+0x5c>
c000cd61:	6a 25                	push   0x25
c000cd63:	e8 92 fe ff ff       	call   c000cbfa <logc(char)>
c000cd68:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cd6b:	50                   	push   eax
c000cd6c:	e8 89 fe ff ff       	call   c000cbfa <logc(char)>
c000cd71:	5a                   	pop    edx
c000cd72:	59                   	pop    ecx
c000cd73:	e9 4e ff ff ff       	jmp    c000ccc6 <kprintf(char const*, ...)+0x5c>
c000cd78:	50                   	push   eax
c000cd79:	89 eb                	mov    ebx,ebp
c000cd7b:	e8 7a fe ff ff       	call   c000cbfa <logc(char)>
c000cd80:	89 fd                	mov    ebp,edi
c000cd82:	58                   	pop    eax
c000cd83:	e9 3e ff ff ff       	jmp    c000ccc6 <kprintf(char const*, ...)+0x5c>

c000cd88 <panic(char const*)>:
c000cd88:	55                   	push   ebp
c000cd89:	89 e5                	mov    ebp,esp
c000cd8b:	53                   	push   ebx
c000cd8c:	50                   	push   eax
c000cd8d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000cd90:	fa                   	cli    
c000cd91:	c6 05 32 36 02 c0 01 	mov    BYTE PTR ds:0xc0023632,0x1
c000cd98:	53                   	push   ebx
c000cd99:	c6 05 a0 22 02 c0 00 	mov    BYTE PTR ds:0xc00222a0,0x0
c000cda0:	68 28 02 02 c0       	push   0xc0020228
c000cda5:	e8 c0 fe ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c000cdaa:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000cdaf:	52                   	push   edx
c000cdb0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cdb6:	e8 40 36 00 00       	call   c00103fb <setActiveTerminal(VgaText*)>
c000cdbb:	83 c4 0c             	add    esp,0xc
c000cdbe:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000cdc3:	6a 01                	push   0x1
c000cdc5:	6a 0f                	push   0xf
c000cdc7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cdcd:	e8 68 30 00 00       	call   c000fe3a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000cdd2:	59                   	pop    ecx
c000cdd3:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000cdd8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cdde:	e8 b9 38 00 00       	call   c001069c <VgaText::clearScreen()>
c000cde3:	58                   	pop    eax
c000cde4:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000cde9:	5a                   	pop    edx
c000cdea:	68 41 02 02 c0       	push   0xc0020241
c000cdef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cdf5:	e8 20 3a 00 00       	call   c001081a <VgaText::puts(char const*)>
c000cdfa:	59                   	pop    ecx
c000cdfb:	58                   	pop    eax
c000cdfc:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000ce01:	68 c4 ff 01 c0       	push   0xc001ffc4
c000ce06:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ce0c:	e8 09 3a 00 00       	call   c001081a <VgaText::puts(char const*)>
c000ce11:	58                   	pop    eax
c000ce12:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000ce17:	5a                   	pop    edx
c000ce18:	68 5d 02 02 c0       	push   0xc002025d
c000ce1d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ce23:	e8 f2 39 00 00       	call   c001081a <VgaText::puts(char const*)>
c000ce28:	59                   	pop    ecx
c000ce29:	58                   	pop    eax
c000ce2a:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000ce2f:	53                   	push   ebx
c000ce30:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ce36:	e8 df 39 00 00       	call   c001081a <VgaText::puts(char const*)>
c000ce3b:	58                   	pop    eax
c000ce3c:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000ce41:	5a                   	pop    edx
c000ce42:	68 7d 02 02 c0       	push   0xc002027d
c000ce47:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ce4d:	e8 c8 39 00 00       	call   c001081a <VgaText::puts(char const*)>
c000ce52:	59                   	pop    ecx
c000ce53:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000ce58:	5b                   	pop    ebx
c000ce59:	68 00 00 02 c0       	push   0xc0020000
c000ce5e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ce64:	e8 b1 39 00 00       	call   c001081a <VgaText::puts(char const*)>
c000ce69:	58                   	pop    eax
c000ce6a:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000ce6f:	5a                   	pop    edx
c000ce70:	68 5d 02 02 c0       	push   0xc002025d
c000ce75:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ce7b:	e8 9a 39 00 00       	call   c001081a <VgaText::puts(char const*)>
c000ce80:	59                   	pop    ecx
c000ce81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ce86:	5b                   	pop    ebx
c000ce87:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ce8a:	83 c0 0c             	add    eax,0xc
c000ce8d:	50                   	push   eax
c000ce8e:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000ce93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ce99:	e8 7c 39 00 00       	call   c001081a <VgaText::puts(char const*)>
c000ce9e:	58                   	pop    eax
c000ce9f:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000cea4:	5a                   	pop    edx
c000cea5:	68 7c 02 02 c0       	push   0xc002027c
c000ceaa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ceb0:	e8 65 39 00 00       	call   c001081a <VgaText::puts(char const*)>
c000ceb5:	59                   	pop    ecx
c000ceb6:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000cebb:	5b                   	pop    ebx
c000cebc:	68 2c 00 02 c0       	push   0xc002002c
c000cec1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cec7:	e8 4e 39 00 00       	call   c001081a <VgaText::puts(char const*)>
c000cecc:	58                   	pop    eax
c000cecd:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000ced2:	5a                   	pop    edx
c000ced3:	68 6c 00 02 c0       	push   0xc002006c
c000ced8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cede:	e8 37 39 00 00       	call   c001081a <VgaText::puts(char const*)>
c000cee3:	59                   	pop    ecx
c000cee4:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000cee9:	5b                   	pop    ebx
c000ceea:	68 68 02 02 c0       	push   0xc0020268
c000ceef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cef5:	e8 20 39 00 00       	call   c001081a <VgaText::puts(char const*)>
c000cefa:	58                   	pop    eax
c000cefb:	5a                   	pop    edx
c000cefc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ceff:	68 80 02 02 c0       	push   0xc0020280
c000cf04:	e8 61 fd ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c000cf09:	59                   	pop    ecx
c000cf0a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf0d:	5b                   	pop    ebx
c000cf0e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf11:	68 89 02 02 c0       	push   0xc0020289
c000cf16:	e8 4f fd ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c000cf1b:	5a                   	pop    edx
c000cf1c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf1f:	59                   	pop    ecx
c000cf20:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf22:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf25:	68 19 11 02 c0       	push   0xc0021119
c000cf2a:	e8 3b fd ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c000cf2f:	5b                   	pop    ebx
c000cf30:	58                   	pop    eax
c000cf31:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000cf36:	68 b0 00 02 c0       	push   0xc00200b0
c000cf3b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cf41:	e8 d4 38 00 00       	call   c001081a <VgaText::puts(char const*)>
c000cf46:	58                   	pop    eax
c000cf47:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000cf4c:	5a                   	pop    edx
c000cf4d:	68 92 02 02 c0       	push   0xc0020292
c000cf52:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cf58:	e8 bd 38 00 00       	call   c001081a <VgaText::puts(char const*)>
c000cf5d:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000cf62:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000cf68:	e8 38 14 01 00       	call   c001e3a5 <CPU::readCR0()>
c000cf6d:	59                   	pop    ecx
c000cf6e:	5a                   	pop    edx
c000cf6f:	50                   	push   eax
c000cf70:	53                   	push   ebx
c000cf71:	e8 ca 38 00 00       	call   c0010840 <VgaText::putx(unsigned int)>
c000cf76:	59                   	pop    ecx
c000cf77:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000cf7c:	5b                   	pop    ebx
c000cf7d:	68 9c 02 02 c0       	push   0xc002029c
c000cf82:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cf88:	e8 8d 38 00 00       	call   c001081a <VgaText::puts(char const*)>
c000cf8d:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000cf92:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000cf98:	e8 1a 14 01 00       	call   c001e3b7 <CPU::readCR2()>
c000cf9d:	5a                   	pop    edx
c000cf9e:	59                   	pop    ecx
c000cf9f:	50                   	push   eax
c000cfa0:	53                   	push   ebx
c000cfa1:	e8 9a 38 00 00       	call   c0010840 <VgaText::putx(unsigned int)>
c000cfa6:	5b                   	pop    ebx
c000cfa7:	58                   	pop    eax
c000cfa8:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000cfad:	68 a6 02 02 c0       	push   0xc00202a6
c000cfb2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cfb8:	e8 5d 38 00 00       	call   c001081a <VgaText::puts(char const*)>
c000cfbd:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000cfc2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000cfc8:	e8 fc 13 01 00       	call   c001e3c9 <CPU::readCR3()>
c000cfcd:	5a                   	pop    edx
c000cfce:	59                   	pop    ecx
c000cfcf:	50                   	push   eax
c000cfd0:	53                   	push   ebx
c000cfd1:	e8 6a 38 00 00       	call   c0010840 <VgaText::putx(unsigned int)>
c000cfd6:	5b                   	pop    ebx
c000cfd7:	58                   	pop    eax
c000cfd8:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000cfdd:	68 b9 02 02 c0       	push   0xc00202b9
c000cfe2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cfe8:	e8 2d 38 00 00       	call   c001081a <VgaText::puts(char const*)>
c000cfed:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000cff2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000cff8:	e8 de 13 01 00       	call   c001e3db <CPU::readCR4()>
c000cffd:	5a                   	pop    edx
c000cffe:	59                   	pop    ecx
c000cfff:	50                   	push   eax
c000d000:	53                   	push   ebx
c000d001:	e8 3a 38 00 00       	call   c0010840 <VgaText::putx(unsigned int)>
c000d006:	5b                   	pop    ebx
c000d007:	58                   	pop    eax
c000d008:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000d00d:	68 c3 02 02 c0       	push   0xc00202c3
c000d012:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d018:	e8 fd 37 00 00       	call   c001081a <VgaText::puts(char const*)>
c000d01d:	5a                   	pop    edx
c000d01e:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000d023:	59                   	pop    ecx
c000d024:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d02a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d02d:	50                   	push   eax
c000d02e:	e8 0d 38 00 00       	call   c0010840 <VgaText::putx(unsigned int)>
c000d033:	5b                   	pop    ebx
c000d034:	58                   	pop    eax
c000d035:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000d03a:	68 da 02 02 c0       	push   0xc00202da
c000d03f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d045:	e8 d0 37 00 00       	call   c001081a <VgaText::puts(char const*)>
c000d04a:	5a                   	pop    edx
c000d04b:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000d050:	59                   	pop    ecx
c000d051:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d057:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d05a:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000d05d:	50                   	push   eax
c000d05e:	e8 dd 37 00 00       	call   c0010840 <VgaText::putx(unsigned int)>
c000d063:	5b                   	pop    ebx
c000d064:	58                   	pop    eax
c000d065:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000d06a:	68 da 02 02 c0       	push   0xc00202da
c000d06f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d075:	e8 a0 37 00 00       	call   c001081a <VgaText::puts(char const*)>
c000d07a:	59                   	pop    ecx
c000d07b:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000d080:	5b                   	pop    ebx
c000d081:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d087:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d08a:	8b 12                	mov    edx,DWORD PTR [edx]
c000d08c:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000d08f:	50                   	push   eax
c000d090:	e8 ab 37 00 00       	call   c0010840 <VgaText::putx(unsigned int)>
c000d095:	83 c4 10             	add    esp,0x10
c000d098:	b2 fe                	mov    dl,0xfe
c000d09a:	e4 60                	in     al,0x60
c000d09c:	3c 1c                	cmp    al,0x1c
c000d09e:	74 04                	je     c000d0a4 <panic(char const*)+0x31c>
c000d0a0:	3c 5a                	cmp    al,0x5a
c000d0a2:	75 f6                	jne    c000d09a <panic(char const*)+0x312>
c000d0a4:	e4 64                	in     al,0x64
c000d0a6:	a8 02                	test   al,0x2
c000d0a8:	75 fa                	jne    c000d0a4 <panic(char const*)+0x31c>
c000d0aa:	88 d0                	mov    al,dl
c000d0ac:	e6 64                	out    0x64,al
c000d0ae:	fa                   	cli    
c000d0af:	f4                   	hlt    
c000d0b0:	eb e8                	jmp    c000d09a <panic(char const*)+0x312>

c000d0b2 <sbrk>:
c000d0b2:	55                   	push   ebp
c000d0b3:	57                   	push   edi
c000d0b4:	56                   	push   esi
c000d0b5:	53                   	push   ebx
c000d0b6:	83 ec 1c             	sub    esp,0x1c
c000d0b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d0bd:	85 db                	test   ebx,ebx
c000d0bf:	74 37                	je     c000d0f8 <sbrk+0x46>
c000d0c1:	78 3f                	js     c000d102 <sbrk+0x50>
c000d0c3:	e8 be 9e 00 00       	call   c0016f86 <thisCPU()>
c000d0c8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000d0ce:	83 e0 01             	and    eax,0x1
c000d0d1:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000d0d5:	a1 88 22 02 c0       	mov    eax,ds:0xc0022288
c000d0da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0de:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000d0e4:	89 d8                	mov    eax,ebx
c000d0e6:	78 35                	js     c000d11d <sbrk+0x6b>
c000d0e8:	c1 f8 0c             	sar    eax,0xc
c000d0eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d0ef:	89 c7                	mov    edi,eax
c000d0f1:	be 00 00 00 00       	mov    esi,0x0
c000d0f6:	eb 3c                	jmp    c000d134 <sbrk+0x82>
c000d0f8:	a1 88 22 02 c0       	mov    eax,ds:0xc0022288
c000d0fd:	e9 ad 00 00 00       	jmp    c000d1af <sbrk+0xfd>
c000d102:	83 ec 08             	sub    esp,0x8
c000d105:	53                   	push   ebx
c000d106:	68 e0 02 02 c0       	push   0xc00202e0
c000d10b:	e8 5a fb ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c000d110:	83 c4 10             	add    esp,0x10
c000d113:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d118:	e9 92 00 00 00       	jmp    c000d1af <sbrk+0xfd>
c000d11d:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000d123:	eb c3                	jmp    c000d0e8 <sbrk+0x36>
c000d125:	81 05 88 22 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022288,0x1000
c000d12f:	46                   	inc    esi
c000d130:	39 f7                	cmp    edi,esi
c000d132:	74 34                	je     c000d168 <sbrk+0xb6>
c000d134:	e8 ea 40 00 00       	call   c0011223 <Virt::getAKernelVAS()>
c000d139:	89 c3                	mov    ebx,eax
c000d13b:	8b 2d 88 22 02 c0    	mov    ebp,DWORD PTR ds:0xc0022288
c000d141:	e8 c9 06 00 00       	call   c000d80f <Phys::allocatePage()>
c000d146:	68 01 04 00 00       	push   0x401
c000d14b:	55                   	push   ebp
c000d14c:	50                   	push   eax
c000d14d:	53                   	push   ebx
c000d14e:	e8 77 45 00 00       	call   c00116ca <VAS::mapPage(unsigned long, unsigned long, int)>
c000d153:	83 c4 10             	add    esp,0x10
c000d156:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d15b:	74 c8                	je     c000d125 <sbrk+0x73>
c000d15d:	8b 1d 88 22 02 c0    	mov    ebx,DWORD PTR ds:0xc0022288
c000d163:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000d166:	eb bd                	jmp    c000d125 <sbrk+0x73>
c000d168:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d16d:	74 48                	je     c000d1b7 <sbrk+0x105>
c000d16f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d173:	89 d3                	mov    ebx,edx
c000d175:	c1 eb 0a             	shr    ebx,0xa
c000d178:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000d17e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000d184:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d188:	c1 e0 0c             	shl    eax,0xc
c000d18b:	01 d0                	add    eax,edx
c000d18d:	c1 e8 0a             	shr    eax,0xa
c000d190:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d195:	2d 00 00 40 00       	sub    eax,0x400000
c000d19a:	39 c3                	cmp    ebx,eax
c000d19c:	77 0d                	ja     c000d1ab <sbrk+0xf9>
c000d19e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000d1a1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000d1a7:	39 d8                	cmp    eax,ebx
c000d1a9:	73 f3                	jae    c000d19e <sbrk+0xec>
c000d1ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1af:	83 c4 1c             	add    esp,0x1c
c000d1b2:	5b                   	pop    ebx
c000d1b3:	5e                   	pop    esi
c000d1b4:	5f                   	pop    edi
c000d1b5:	5d                   	pop    ebp
c000d1b6:	c3                   	ret    
c000d1b7:	e8 0d 12 01 00       	call   c001e3c9 <CPU::readCR3()>
c000d1bc:	83 ec 0c             	sub    esp,0xc
c000d1bf:	50                   	push   eax
c000d1c0:	e8 28 12 01 00       	call   c001e3ed <CPU::writeCR3(unsigned long)>
c000d1c5:	83 c4 10             	add    esp,0x10
c000d1c8:	eb e1                	jmp    c000d1ab <sbrk+0xf9>

c000d1ca <mmap>:
c000d1ca:	83 ec 18             	sub    esp,0x18
c000d1cd:	68 10 03 02 c0       	push   0xc0020310
c000d1d2:	e8 b1 fb ff ff       	call   c000cd88 <panic(char const*)>
c000d1d7:	b8 00 00 00 00       	mov    eax,0x0
c000d1dc:	83 c4 1c             	add    esp,0x1c
c000d1df:	c3                   	ret    

c000d1e0 <munmap>:
c000d1e0:	83 ec 18             	sub    esp,0x18
c000d1e3:	68 15 03 02 c0       	push   0xc0020315
c000d1e8:	e8 9b fb ff ff       	call   c000cd88 <panic(char const*)>
c000d1ed:	b8 00 00 00 00       	mov    eax,0x0
c000d1f2:	83 c4 1c             	add    esp,0x1c
c000d1f5:	c3                   	ret    

c000d1f6 <liballoc_lock()>:
c000d1f6:	83 ec 0c             	sub    esp,0xc
c000d1f9:	e8 0e 0f 00 00       	call   c000e10c <lockScheduler()>
c000d1fe:	b8 00 00 00 00       	mov    eax,0x0
c000d203:	83 c4 0c             	add    esp,0xc
c000d206:	c3                   	ret    

c000d207 <liballoc_unlock()>:
c000d207:	83 ec 0c             	sub    esp,0xc
c000d20a:	e8 ff 0e 00 00       	call   c000e10e <unlockScheduler()>
c000d20f:	b8 00 00 00 00       	mov    eax,0x0
c000d214:	83 c4 0c             	add    esp,0xc
c000d217:	c3                   	ret    

c000d218 <liballoc_alloc(int)>:
c000d218:	83 ec 0c             	sub    esp,0xc
c000d21b:	e8 03 40 00 00       	call   c0011223 <Virt::getAKernelVAS()>
c000d220:	83 ec 04             	sub    esp,0x4
c000d223:	6a 01                	push   0x1
c000d225:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d229:	50                   	push   eax
c000d22a:	e8 9b 45 00 00       	call   c00117ca <VAS::allocatePages(int, int)>
c000d22f:	83 c4 1c             	add    esp,0x1c
c000d232:	c3                   	ret    

c000d233 <liballoc_free(void*, int)>:
c000d233:	83 ec 0c             	sub    esp,0xc
c000d236:	e8 e8 3f 00 00       	call   c0011223 <Virt::getAKernelVAS()>
c000d23b:	83 ec 08             	sub    esp,0x8
c000d23e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d242:	50                   	push   eax
c000d243:	e8 a4 42 00 00       	call   c00114ec <VAS::freeAllocatedPages(unsigned long)>
c000d248:	b8 00 00 00 00       	mov    eax,0x0
c000d24d:	83 c4 1c             	add    esp,0x1c
c000d250:	c3                   	ret    

c000d251 <realloc>:
c000d251:	83 ec 14             	sub    esp,0x14
c000d254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d25c:	e8 20 41 ff ff       	call   c0001381 <dlrealloc>
c000d261:	83 c4 1c             	add    esp,0x1c
c000d264:	c3                   	ret    

c000d265 <malloc>:
c000d265:	83 ec 18             	sub    esp,0x18
c000d268:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d26c:	e8 d3 3b ff ff       	call   c0000e44 <dlmalloc>
c000d271:	83 c4 1c             	add    esp,0x1c
c000d274:	c3                   	ret    

c000d275 <free>:
c000d275:	83 ec 18             	sub    esp,0x18
c000d278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d27c:	e8 68 38 ff ff       	call   c0000ae9 <dlfree>
c000d281:	83 c4 1c             	add    esp,0x1c
c000d284:	c3                   	ret    

c000d285 <rfree>:
c000d285:	83 ec 18             	sub    esp,0x18
c000d288:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d28c:	e8 e4 ff ff ff       	call   c000d275 <free>
c000d291:	83 c4 1c             	add    esp,0x1c
c000d294:	c3                   	ret    

c000d295 <calloc>:
c000d295:	56                   	push   esi
c000d296:	53                   	push   ebx
c000d297:	83 ec 10             	sub    esp,0x10
c000d29a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d29e:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000d2a3:	53                   	push   ebx
c000d2a4:	e8 bc ff ff ff       	call   c000d265 <malloc>
c000d2a9:	89 c6                	mov    esi,eax
c000d2ab:	83 c4 0c             	add    esp,0xc
c000d2ae:	53                   	push   ebx
c000d2af:	6a 00                	push   0x0
c000d2b1:	50                   	push   eax
c000d2b2:	e8 51 33 ff ff       	call   c0000608 <memset>
c000d2b7:	89 f0                	mov    eax,esi
c000d2b9:	83 c4 14             	add    esp,0x14
c000d2bc:	5b                   	pop    ebx
c000d2bd:	5e                   	pop    esi
c000d2be:	c3                   	ret    

c000d2bf <hwTextMode_loadInData(VgaText*)>:
c000d2bf:	57                   	push   edi
c000d2c0:	56                   	push   esi
c000d2c1:	53                   	push   ebx
c000d2c2:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d2c6:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000d2cc:	85 c0                	test   eax,eax
c000d2ce:	7e 30                	jle    c000d300 <hwTextMode_loadInData(VgaText*)+0x41>
c000d2d0:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000d2d3:	31 f6                	xor    esi,esi
c000d2d5:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000d2d8:	31 c0                	xor    eax,eax
c000d2da:	c1 e1 05             	shl    ecx,0x5
c000d2dd:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000d2e3:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000d2e7:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000d2eb:	40                   	inc    eax
c000d2ec:	83 f8 50             	cmp    eax,0x50
c000d2ef:	75 f2                	jne    c000d2e3 <hwTextMode_loadInData(VgaText*)+0x24>
c000d2f1:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000d2f7:	46                   	inc    esi
c000d2f8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000d2fe:	7f d5                	jg     c000d2d5 <hwTextMode_loadInData(VgaText*)+0x16>
c000d300:	5b                   	pop    ebx
c000d301:	5e                   	pop    esi
c000d302:	5f                   	pop    edi
c000d303:	c3                   	ret    

c000d304 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000d304:	56                   	push   esi
c000d305:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000d30a:	53                   	push   ebx
c000d30b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d30f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d313:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000d319:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000d31f:	c1 e0 04             	shl    eax,0x4
c000d322:	83 e6 0f             	and    esi,0xf
c000d325:	0f b6 c0             	movzx  eax,al
c000d328:	41                   	inc    ecx
c000d329:	09 f0                	or     eax,esi
c000d32b:	83 c2 02             	add    edx,0x2
c000d32e:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000d332:	c1 e0 08             	shl    eax,0x8
c000d335:	09 f0                	or     eax,esi
c000d337:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000d33b:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000d341:	75 d0                	jne    c000d313 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000d343:	5b                   	pop    ebx
c000d344:	5e                   	pop    esi
c000d345:	c3                   	ret    

c000d346 <hwTextMode_showCursor(VgaText*, bool)>:
c000d346:	56                   	push   esi
c000d347:	53                   	push   ebx
c000d348:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000d34d:	74 38                	je     c000d387 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000d34f:	bb d4 03 00 00       	mov    ebx,0x3d4
c000d354:	b0 0a                	mov    al,0xa
c000d356:	89 da                	mov    edx,ebx
c000d358:	ee                   	out    dx,al
c000d359:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000d35e:	89 ca                	mov    edx,ecx
c000d360:	ec                   	in     al,dx
c000d361:	b2 0f                	mov    dl,0xf
c000d363:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d367:	83 e0 c0             	and    eax,0xffffffc0
c000d36a:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000d370:	09 d0                	or     eax,edx
c000d372:	89 ca                	mov    edx,ecx
c000d374:	ee                   	out    dx,al
c000d375:	b0 0b                	mov    al,0xb
c000d377:	89 da                	mov    edx,ebx
c000d379:	ee                   	out    dx,al
c000d37a:	89 ca                	mov    edx,ecx
c000d37c:	ec                   	in     al,dx
c000d37d:	83 e0 e0             	and    eax,0xffffffe0
c000d380:	83 c8 0f             	or     eax,0xf
c000d383:	ee                   	out    dx,al
c000d384:	5b                   	pop    ebx
c000d385:	5e                   	pop    esi
c000d386:	c3                   	ret    
c000d387:	b0 0a                	mov    al,0xa
c000d389:	ba d4 03 00 00       	mov    edx,0x3d4
c000d38e:	ee                   	out    dx,al
c000d38f:	b0 20                	mov    al,0x20
c000d391:	ba d5 03 00 00       	mov    edx,0x3d5
c000d396:	ee                   	out    dx,al
c000d397:	5b                   	pop    ebx
c000d398:	5e                   	pop    esi
c000d399:	c3                   	ret    

c000d39a <hwTextMode_update(VgaText*)>:
c000d39a:	c3                   	ret    

c000d39b <hwTextMode_updateCursor(VgaText*)>:
c000d39b:	56                   	push   esi
c000d39c:	b9 19 00 00 00       	mov    ecx,0x19
c000d3a1:	53                   	push   ebx
c000d3a2:	be d4 03 00 00       	mov    esi,0x3d4
c000d3a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3ab:	89 f2                	mov    edx,esi
c000d3ad:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000d3b3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000d3b9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000d3bc:	c1 e1 04             	shl    ecx,0x4
c000d3bf:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000d3c5:	b0 0f                	mov    al,0xf
c000d3c7:	ee                   	out    dx,al
c000d3c8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000d3cd:	88 c8                	mov    al,cl
c000d3cf:	89 da                	mov    edx,ebx
c000d3d1:	ee                   	out    dx,al
c000d3d2:	b0 0e                	mov    al,0xe
c000d3d4:	89 f2                	mov    edx,esi
c000d3d6:	ee                   	out    dx,al
c000d3d7:	89 c8                	mov    eax,ecx
c000d3d9:	89 da                	mov    edx,ebx
c000d3db:	66 c1 e8 08          	shr    ax,0x8
c000d3df:	ee                   	out    dx,al
c000d3e0:	5b                   	pop    ebx
c000d3e1:	5e                   	pop    esi
c000d3e2:	c3                   	ret    

c000d3e3 <hwTextMode_disableBlink(VgaText*, bool)>:
c000d3e3:	ba da 03 00 00       	mov    edx,0x3da
c000d3e8:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000d3ed:	75 18                	jne    c000d407 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000d3ef:	ec                   	in     al,dx
c000d3f0:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000d3f5:	b0 30                	mov    al,0x30
c000d3f7:	89 ca                	mov    edx,ecx
c000d3f9:	ee                   	out    dx,al
c000d3fa:	ba c1 03 00 00       	mov    edx,0x3c1
c000d3ff:	ec                   	in     al,dx
c000d400:	83 c8 08             	or     eax,0x8
c000d403:	89 ca                	mov    edx,ecx
c000d405:	ee                   	out    dx,al
c000d406:	c3                   	ret    
c000d407:	ec                   	in     al,dx
c000d408:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000d40d:	b0 30                	mov    al,0x30
c000d40f:	89 ca                	mov    edx,ecx
c000d411:	ee                   	out    dx,al
c000d412:	ba c1 03 00 00       	mov    edx,0x3c1
c000d417:	ec                   	in     al,dx
c000d418:	83 e0 f7             	and    eax,0xfffffff7
c000d41b:	89 ca                	mov    edx,ecx
c000d41d:	ee                   	out    dx,al
c000d41e:	c3                   	ret    

c000d41f <hwTextMode_scrollScreen(VgaText*)>:
c000d41f:	55                   	push   ebp
c000d420:	bd 02 00 00 00       	mov    ebp,0x2
c000d425:	57                   	push   edi
c000d426:	56                   	push   esi
c000d427:	53                   	push   ebx
c000d428:	83 ec 1c             	sub    esp,0x1c
c000d42b:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000d433:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d437:	31 c0                	xor    eax,eax
c000d439:	eb 0b                	jmp    c000d446 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000d43b:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000d441:	74 57                	je     c000d49a <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000d443:	43                   	inc    ebx
c000d444:	89 f0                	mov    eax,esi
c000d446:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000d44c:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000d452:	88 13                	mov    BYTE PTR [ebx],dl
c000d454:	8d 70 01             	lea    esi,[eax+0x1]
c000d457:	83 fd 18             	cmp    ebp,0x18
c000d45a:	75 df                	jne    c000d43b <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000d45c:	a8 01                	test   al,0x1
c000d45e:	75 13                	jne    c000d473 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000d460:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000d463:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000d469:	75 d8                	jne    c000d443 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000d46b:	83 c4 1c             	add    esp,0x1c
c000d46e:	5b                   	pop    ebx
c000d46f:	5e                   	pop    esi
c000d470:	5f                   	pop    edi
c000d471:	5d                   	pop    ebp
c000d472:	c3                   	ret    
c000d473:	83 ec 08             	sub    esp,0x8
c000d476:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d47a:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000d481:	50                   	push   eax
c000d482:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d486:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000d48d:	50                   	push   eax
c000d48e:	e8 c7 29 00 00       	call   c000fe5a <VgaText::combineColours(unsigned char, unsigned char)>
c000d493:	83 c4 10             	add    esp,0x10
c000d496:	88 07                	mov    BYTE PTR [edi],al
c000d498:	eb c9                	jmp    c000d463 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000d49a:	45                   	inc    ebp
c000d49b:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000d4a3:	eb 8e                	jmp    c000d433 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000d4a5 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000d4a5:	56                   	push   esi
c000d4a6:	53                   	push   ebx
c000d4a7:	83 ec 0c             	sub    esp,0xc
c000d4aa:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d4ae:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d4b2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000d4b7:	50                   	push   eax
c000d4b8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000d4bd:	50                   	push   eax
c000d4be:	e8 97 29 00 00       	call   c000fe5a <VgaText::combineColours(unsigned char, unsigned char)>
c000d4c3:	5a                   	pop    edx
c000d4c4:	0f b6 c0             	movzx  eax,al
c000d4c7:	59                   	pop    ecx
c000d4c8:	50                   	push   eax
c000d4c9:	89 f0                	mov    eax,esi
c000d4cb:	0f be f0             	movsx  esi,al
c000d4ce:	56                   	push   esi
c000d4cf:	e8 2c 2a 00 00       	call   c000ff00 <VgaText::combineCharAndColour(char, unsigned char)>
c000d4d4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d4d8:	ba 19 00 00 00       	mov    edx,0x19
c000d4dd:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000d4e3:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000d4e6:	8d 14 92             	lea    edx,[edx+edx*4]
c000d4e9:	c1 e1 04             	shl    ecx,0x4
c000d4ec:	c1 e2 04             	shl    edx,0x4
c000d4ef:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000d4f3:	01 ca                	add    edx,ecx
c000d4f5:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000d4fd:	83 c4 14             	add    esp,0x14
c000d500:	5b                   	pop    ebx
c000d501:	5e                   	pop    esi
c000d502:	c3                   	ret    

c000d503 <setupTextMode()>:
c000d503:	c7 05 18 39 02 c0 e3 d3 00 c0 	mov    DWORD PTR ds:0xc0023918,0xc000d3e3
c000d50d:	c7 05 04 39 02 c0 bf d2 00 c0 	mov    DWORD PTR ds:0xc0023904,0xc000d2bf
c000d517:	c7 05 00 39 02 c0 04 d3 00 c0 	mov    DWORD PTR ds:0xc0023900,0xc000d304
c000d521:	c7 05 0c 39 02 c0 1f d4 00 c0 	mov    DWORD PTR ds:0xc002390c,0xc000d41f
c000d52b:	c7 05 14 39 02 c0 46 d3 00 c0 	mov    DWORD PTR ds:0xc0023914,0xc000d346
c000d535:	c7 05 08 39 02 c0 9a d3 00 c0 	mov    DWORD PTR ds:0xc0023908,0xc000d39a
c000d53f:	c7 05 10 39 02 c0 9b d3 00 c0 	mov    DWORD PTR ds:0xc0023910,0xc000d39b
c000d549:	c7 05 1c 39 02 c0 a5 d4 00 c0 	mov    DWORD PTR ds:0xc002391c,0xc000d4a5
c000d553:	c3                   	ret    

c000d554 <kernel_main>:
c000d554:	57                   	push   edi
c000d555:	bf f9 03 00 00       	mov    edi,0x3f9
c000d55a:	56                   	push   esi
c000d55b:	31 f6                	xor    esi,esi
c000d55d:	53                   	push   ebx
c000d55e:	83 ec 10             	sub    esp,0x10
c000d561:	e8 4e 27 00 00       	call   c000fcb4 <installVgaTextImplementation()>
c000d566:	e8 98 ff ff ff       	call   c000d503 <setupTextMode()>
c000d56b:	89 f0                	mov    eax,esi
c000d56d:	89 fa                	mov    edx,edi
c000d56f:	ee                   	out    dx,al
c000d570:	bb fb 03 00 00       	mov    ebx,0x3fb
c000d575:	b0 80                	mov    al,0x80
c000d577:	89 da                	mov    edx,ebx
c000d579:	ee                   	out    dx,al
c000d57a:	b1 03                	mov    cl,0x3
c000d57c:	ba f8 03 00 00       	mov    edx,0x3f8
c000d581:	88 c8                	mov    al,cl
c000d583:	ee                   	out    dx,al
c000d584:	89 f0                	mov    eax,esi
c000d586:	89 fa                	mov    edx,edi
c000d588:	ee                   	out    dx,al
c000d589:	88 c8                	mov    al,cl
c000d58b:	89 da                	mov    edx,ebx
c000d58d:	ee                   	out    dx,al
c000d58e:	b0 c7                	mov    al,0xc7
c000d590:	ba fa 03 00 00       	mov    edx,0x3fa
c000d595:	ee                   	out    dx,al
c000d596:	b0 0b                	mov    al,0xb
c000d598:	ba fc 03 00 00       	mov    edx,0x3fc
c000d59d:	ee                   	out    dx,al
c000d59e:	a1 24 05 00 00       	mov    eax,ds:0x524
c000d5a3:	83 ec 0c             	sub    esp,0xc
c000d5a6:	05 ff 0f 00 00       	add    eax,0xfff
c000d5ab:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d5b0:	50                   	push   eax
c000d5b1:	e8 4d 03 00 00       	call   c000d903 <Phys::physicalMemorySetup(unsigned int)>
c000d5b6:	e8 e9 3b 00 00       	call   c00111a4 <Virt::virtualMemorySetup()>
c000d5bb:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000d5c1:	83 c4 10             	add    esp,0x10
c000d5c4:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000d5ca:	75 0e                	jne    c000d5da <kernel_main+0x86>
c000d5cc:	89 d8                	mov    eax,ebx
c000d5ce:	25 48 03 00 00       	and    eax,0x348
c000d5d3:	3d 00 03 00 00       	cmp    eax,0x300
c000d5d8:	74 10                	je     c000d5ea <kernel_main+0x96>
c000d5da:	83 ec 0c             	sub    esp,0xc
c000d5dd:	68 7f 02 02 c0       	push   0xc002027f
c000d5e2:	e8 a1 f7 ff ff       	call   c000cd88 <panic(char const*)>
c000d5e7:	83 c4 10             	add    esp,0x10
c000d5ea:	83 ec 0c             	sub    esp,0xc
c000d5ed:	89 1d 34 36 02 c0    	mov    DWORD PTR ds:0xc0023634,ebx
c000d5f3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d5f7:	53                   	push   ebx
c000d5f8:	e8 51 3d 00 00       	call   c001134e <VAS::VAS()>
c000d5fd:	89 1d 3c 39 02 c0    	mov    DWORD PTR ds:0xc002393c,ebx
c000d603:	e8 18 2a ff ff       	call   c0000020 <callGlobalConstructors>
c000d608:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000d60f:	e8 10 4c 00 00       	call   c0012224 <operator new(unsigned long)>
c000d614:	89 04 24             	mov    DWORD PTR [esp],eax
c000d617:	89 c6                	mov    esi,eax
c000d619:	e8 84 d7 ff ff       	call   c000ada2 <Computer::Computer()>
c000d61e:	6a 00                	push   0x0
c000d620:	89 35 68 2e 02 c0    	mov    DWORD PTR ds:0xc0022e68,esi
c000d626:	6a 00                	push   0x0
c000d628:	6a 00                	push   0x0
c000d62a:	56                   	push   esi
c000d62b:	e8 38 dc ff ff       	call   c000b268 <Computer::open(int, int, void*)>
c000d630:	83 c4 14             	add    esp,0x14
c000d633:	53                   	push   ebx
c000d634:	e8 25 3f 00 00       	call   c001155e <VAS::~VAS()>
c000d639:	c7 04 24 1c 03 02 c0 	mov    DWORD PTR [esp],0xc002031c
c000d640:	e8 43 f7 ff ff       	call   c000cd88 <panic(char const*)>
c000d645:	83 c4 20             	add    esp,0x20
c000d648:	5b                   	pop    ebx
c000d649:	5e                   	pop    esi
c000d64a:	5f                   	pop    edi
c000d64b:	c3                   	ret    

c000d64c <Phys::allocateDMA(unsigned long)>:
c000d64c:	55                   	push   ebp
c000d64d:	31 d2                	xor    edx,edx
c000d64f:	57                   	push   edi
c000d650:	31 ed                	xor    ebp,ebp
c000d652:	56                   	push   esi
c000d653:	31 c9                	xor    ecx,ecx
c000d655:	53                   	push   ebx
c000d656:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d65a:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000d660:	31 c0                	xor    eax,eax
c000d662:	c1 ee 0c             	shr    esi,0xc
c000d665:	eb 17                	jmp    c000d67e <Phys::allocateDMA(unsigned long)+0x32>
c000d667:	85 c9                	test   ecx,ecx
c000d669:	75 04                	jne    c000d66f <Phys::allocateDMA(unsigned long)+0x23>
c000d66b:	89 d5                	mov    ebp,edx
c000d66d:	89 d0                	mov    eax,edx
c000d66f:	8d 59 01             	lea    ebx,[ecx+0x1]
c000d672:	39 de                	cmp    esi,ebx
c000d674:	74 20                	je     c000d696 <Phys::allocateDMA(unsigned long)+0x4a>
c000d676:	42                   	inc    edx
c000d677:	89 d9                	mov    ecx,ebx
c000d679:	83 fa 2f             	cmp    edx,0x2f
c000d67c:	7f 11                	jg     c000d68f <Phys::allocateDMA(unsigned long)+0x43>
c000d67e:	80 ba 60 36 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdc9a0],0x0
c000d685:	74 e0                	je     c000d667 <Phys::allocateDMA(unsigned long)+0x1b>
c000d687:	31 c9                	xor    ecx,ecx
c000d689:	42                   	inc    edx
c000d68a:	83 fa 2f             	cmp    edx,0x2f
c000d68d:	7e ef                	jle    c000d67e <Phys::allocateDMA(unsigned long)+0x32>
c000d68f:	5b                   	pop    ebx
c000d690:	31 c0                	xor    eax,eax
c000d692:	5e                   	pop    esi
c000d693:	5f                   	pop    edi
c000d694:	5d                   	pop    ebp
c000d695:	c3                   	ret    
c000d696:	8d 14 30             	lea    edx,[eax+esi*1]
c000d699:	89 d7                	mov    edi,edx
c000d69b:	4f                   	dec    edi
c000d69c:	79 03                	jns    c000d6a1 <Phys::allocateDMA(unsigned long)+0x55>
c000d69e:	8d 7a 0e             	lea    edi,[edx+0xe]
c000d6a1:	c1 ff 04             	sar    edi,0x4
c000d6a4:	89 c2                	mov    edx,eax
c000d6a6:	c1 fa 04             	sar    edx,0x4
c000d6a9:	39 fa                	cmp    edx,edi
c000d6ab:	75 2f                	jne    c000d6dc <Phys::allocateDMA(unsigned long)+0x90>
c000d6ad:	85 db                	test   ebx,ebx
c000d6af:	74 1a                	je     c000d6cb <Phys::allocateDMA(unsigned long)+0x7f>
c000d6b1:	be 60 36 02 c0       	mov    esi,0xc0023660
c000d6b6:	8d 90 60 36 02 c0    	lea    edx,[eax-0x3ffdc9a0]
c000d6bc:	f7 d6                	not    esi
c000d6be:	29 c6                	sub    esi,eax
c000d6c0:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000d6c3:	42                   	inc    edx
c000d6c4:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000d6c7:	39 d9                	cmp    ecx,ebx
c000d6c9:	7f f5                	jg     c000d6c0 <Phys::allocateDMA(unsigned long)+0x74>
c000d6cb:	85 ff                	test   edi,edi
c000d6cd:	74 13                	je     c000d6e2 <Phys::allocateDMA(unsigned long)+0x96>
c000d6cf:	5b                   	pop    ebx
c000d6d0:	05 50 20 0c 00       	add    eax,0xc2050
c000d6d5:	5e                   	pop    esi
c000d6d6:	c1 e0 0c             	shl    eax,0xc
c000d6d9:	5f                   	pop    edi
c000d6da:	5d                   	pop    ebp
c000d6db:	c3                   	ret    
c000d6dc:	89 ea                	mov    edx,ebp
c000d6de:	31 c9                	xor    ecx,ecx
c000d6e0:	eb a7                	jmp    c000d689 <Phys::allocateDMA(unsigned long)+0x3d>
c000d6e2:	5b                   	pop    ebx
c000d6e3:	c1 e0 0c             	shl    eax,0xc
c000d6e6:	5e                   	pop    esi
c000d6e7:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000d6ec:	5f                   	pop    edi
c000d6ed:	5d                   	pop    ebp
c000d6ee:	c3                   	ret    

c000d6ef <Phys::freeDMA(unsigned long, unsigned long)>:
c000d6ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d6f3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d6f7:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000d6fd:	c1 e9 0c             	shr    ecx,0xc
c000d700:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000d705:	76 25                	jbe    c000d72c <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000d707:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000d70c:	c1 e8 0c             	shr    eax,0xc
c000d70f:	8d 50 10             	lea    edx,[eax+0x10]
c000d712:	85 c9                	test   ecx,ecx
c000d714:	74 15                	je     c000d72b <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000d716:	8d 82 60 36 02 c0    	lea    eax,[edx-0x3ffdc9a0]
c000d71c:	8d 94 11 60 36 02 c0 	lea    edx,[ecx+edx*1-0x3ffdc9a0]
c000d723:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000d726:	40                   	inc    eax
c000d727:	39 d0                	cmp    eax,edx
c000d729:	75 f8                	jne    c000d723 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000d72b:	c3                   	ret    
c000d72c:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000d732:	c1 ea 0c             	shr    edx,0xc
c000d735:	eb db                	jmp    c000d712 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000d737 <Phys::setPageState(unsigned long, bool)>:
c000d737:	56                   	push   esi
c000d738:	ba 01 00 00 00       	mov    edx,0x1
c000d73d:	53                   	push   ebx
c000d73e:	8b 35 8c 22 02 c0    	mov    esi,DWORD PTR ds:0xc002228c
c000d744:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d748:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d74c:	89 c8                	mov    eax,ecx
c000d74e:	83 e1 07             	and    ecx,0x7
c000d751:	c1 e8 03             	shr    eax,0x3
c000d754:	d3 e3                	shl    ebx,cl
c000d756:	01 c6                	add    esi,eax
c000d758:	d3 e2                	shl    edx,cl
c000d75a:	f7 d2                	not    edx
c000d75c:	20 16                	and    BYTE PTR [esi],dl
c000d75e:	03 05 8c 22 02 c0    	add    eax,DWORD PTR ds:0xc002228c
c000d764:	08 18                	or     BYTE PTR [eax],bl
c000d766:	5b                   	pop    ebx
c000d767:	5e                   	pop    esi
c000d768:	c3                   	ret    

c000d769 <Phys::getPageState(unsigned long)>:
c000d769:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d76d:	8b 15 8c 22 02 c0    	mov    edx,DWORD PTR ds:0xc002228c
c000d773:	89 c8                	mov    eax,ecx
c000d775:	83 e1 07             	and    ecx,0x7
c000d778:	c1 e8 03             	shr    eax,0x3
c000d77b:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000d77f:	d3 f8                	sar    eax,cl
c000d781:	83 e0 01             	and    eax,0x1
c000d784:	c3                   	ret    

c000d785 <Phys::freePage(unsigned long)>:
c000d785:	53                   	push   ebx
c000d786:	83 ec 08             	sub    esp,0x8
c000d789:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d78d:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000d793:	76 57                	jbe    c000d7ec <Phys::freePage(unsigned long)+0x67>
c000d795:	c1 eb 0c             	shr    ebx,0xc
c000d798:	53                   	push   ebx
c000d799:	e8 cb ff ff ff       	call   c000d769 <Phys::getPageState(unsigned long)>
c000d79e:	5a                   	pop    edx
c000d79f:	84 c0                	test   al,al
c000d7a1:	74 5b                	je     c000d7fe <Phys::freePage(unsigned long)+0x79>
c000d7a3:	a1 4c 36 02 c0       	mov    eax,ds:0xc002364c
c000d7a8:	48                   	dec    eax
c000d7a9:	a3 4c 36 02 c0       	mov    ds:0xc002364c,eax
c000d7ae:	8d 04 80             	lea    eax,[eax+eax*4]
c000d7b1:	8d 04 80             	lea    eax,[eax+eax*4]
c000d7b4:	c1 e0 02             	shl    eax,0x2
c000d7b7:	99                   	cdq    
c000d7b8:	f7 3d 50 36 02 c0    	idiv   DWORD PTR ds:0xc0023650
c000d7be:	39 05 48 36 02 c0    	cmp    DWORD PTR ds:0xc0023648,eax
c000d7c4:	75 13                	jne    c000d7d9 <Phys::freePage(unsigned long)+0x54>
c000d7c6:	83 ec 08             	sub    esp,0x8
c000d7c9:	6a 00                	push   0x0
c000d7cb:	53                   	push   ebx
c000d7cc:	e8 66 ff ff ff       	call   c000d737 <Phys::setPageState(unsigned long, bool)>
c000d7d1:	83 c4 10             	add    esp,0x10
c000d7d4:	83 c4 08             	add    esp,0x8
c000d7d7:	5b                   	pop    ebx
c000d7d8:	c3                   	ret    
c000d7d9:	83 ec 0c             	sub    esp,0xc
c000d7dc:	a3 48 36 02 c0       	mov    ds:0xc0023648,eax
c000d7e1:	50                   	push   eax
c000d7e2:	e8 61 28 00 00       	call   c0010048 <VgaText::updateRAMUsageDisplay(int)>
c000d7e7:	83 c4 10             	add    esp,0x10
c000d7ea:	eb da                	jmp    c000d7c6 <Phys::freePage(unsigned long)+0x41>
c000d7ec:	68 00 10 00 00       	push   0x1000
c000d7f1:	53                   	push   ebx
c000d7f2:	e8 f8 fe ff ff       	call   c000d6ef <Phys::freeDMA(unsigned long, unsigned long)>
c000d7f7:	59                   	pop    ecx
c000d7f8:	5b                   	pop    ebx
c000d7f9:	83 c4 08             	add    esp,0x8
c000d7fc:	5b                   	pop    ebx
c000d7fd:	c3                   	ret    
c000d7fe:	c7 44 24 10 37 03 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020337
c000d806:	83 c4 08             	add    esp,0x8
c000d809:	5b                   	pop    ebx
c000d80a:	e9 79 f5 ff ff       	jmp    c000cd88 <panic(char const*)>

c000d80f <Phys::allocatePage()>:
c000d80f:	56                   	push   esi
c000d810:	53                   	push   ebx
c000d811:	51                   	push   ecx
c000d812:	8b 35 40 36 02 c0    	mov    esi,DWORD PTR ds:0xc0023640
c000d818:	89 f3                	mov    ebx,esi
c000d81a:	eb 0a                	jmp    c000d826 <Phys::allocatePage()+0x17>
c000d81c:	89 1d 40 36 02 c0    	mov    DWORD PTR ds:0xc0023640,ebx
c000d822:	39 de                	cmp    esi,ebx
c000d824:	74 24                	je     c000d84a <Phys::allocatePage()+0x3b>
c000d826:	53                   	push   ebx
c000d827:	e8 3d ff ff ff       	call   c000d769 <Phys::getPageState(unsigned long)>
c000d82c:	5a                   	pop    edx
c000d82d:	84 c0                	test   al,al
c000d82f:	74 4e                	je     c000d87f <Phys::allocatePage()+0x70>
c000d831:	43                   	inc    ebx
c000d832:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000d838:	75 e2                	jne    c000d81c <Phys::allocatePage()+0xd>
c000d83a:	31 db                	xor    ebx,ebx
c000d83c:	c7 05 40 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023640,0x0
c000d846:	39 de                	cmp    esi,ebx
c000d848:	75 dc                	jne    c000d826 <Phys::allocatePage()+0x17>
c000d84a:	83 ec 0c             	sub    esp,0xc
c000d84d:	68 00 10 00 00       	push   0x1000
c000d852:	e8 f5 fd ff ff       	call   c000d64c <Phys::allocateDMA(unsigned long)>
c000d857:	83 c4 10             	add    esp,0x10
c000d85a:	85 c0                	test   eax,eax
c000d85c:	75 56                	jne    c000d8b4 <Phys::allocatePage()+0xa5>
c000d85e:	83 ec 0c             	sub    esp,0xc
c000d861:	68 4d 03 02 c0       	push   0xc002034d
c000d866:	e8 1d f5 ff ff       	call   c000cd88 <panic(char const*)>
c000d86b:	83 c4 10             	add    esp,0x10
c000d86e:	8b 1d 40 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023640
c000d874:	53                   	push   ebx
c000d875:	e8 ef fe ff ff       	call   c000d769 <Phys::getPageState(unsigned long)>
c000d87a:	5a                   	pop    edx
c000d87b:	84 c0                	test   al,al
c000d87d:	75 b2                	jne    c000d831 <Phys::allocatePage()+0x22>
c000d87f:	6a 01                	push   0x1
c000d881:	53                   	push   ebx
c000d882:	e8 b0 fe ff ff       	call   c000d737 <Phys::setPageState(unsigned long, bool)>
c000d887:	a1 4c 36 02 c0       	mov    eax,ds:0xc002364c
c000d88c:	59                   	pop    ecx
c000d88d:	40                   	inc    eax
c000d88e:	5b                   	pop    ebx
c000d88f:	a3 4c 36 02 c0       	mov    ds:0xc002364c,eax
c000d894:	8d 04 80             	lea    eax,[eax+eax*4]
c000d897:	8d 04 80             	lea    eax,[eax+eax*4]
c000d89a:	c1 e0 02             	shl    eax,0x2
c000d89d:	99                   	cdq    
c000d89e:	f7 3d 50 36 02 c0    	idiv   DWORD PTR ds:0xc0023650
c000d8a4:	39 05 48 36 02 c0    	cmp    DWORD PTR ds:0xc0023648,eax
c000d8aa:	75 0c                	jne    c000d8b8 <Phys::allocatePage()+0xa9>
c000d8ac:	a1 40 36 02 c0       	mov    eax,ds:0xc0023640
c000d8b1:	c1 e0 0c             	shl    eax,0xc
c000d8b4:	5a                   	pop    edx
c000d8b5:	5b                   	pop    ebx
c000d8b6:	5e                   	pop    esi
c000d8b7:	c3                   	ret    
c000d8b8:	83 ec 0c             	sub    esp,0xc
c000d8bb:	a3 48 36 02 c0       	mov    ds:0xc0023648,eax
c000d8c0:	50                   	push   eax
c000d8c1:	e8 82 27 00 00       	call   c0010048 <VgaText::updateRAMUsageDisplay(int)>
c000d8c6:	83 c4 10             	add    esp,0x10
c000d8c9:	eb e1                	jmp    c000d8ac <Phys::allocatePage()+0x9d>

c000d8cb <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000d8cb:	56                   	push   esi
c000d8cc:	53                   	push   ebx
c000d8cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d8d1:	39 1d 44 36 02 c0    	cmp    DWORD PTR ds:0xc0023644,ebx
c000d8d7:	73 06                	jae    c000d8df <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000d8d9:	89 1d 44 36 02 c0    	mov    DWORD PTR ds:0xc0023644,ebx
c000d8df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d8e3:	c1 eb 0c             	shr    ebx,0xc
c000d8e6:	c1 e8 0c             	shr    eax,0xc
c000d8e9:	39 d8                	cmp    eax,ebx
c000d8eb:	73 13                	jae    c000d900 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000d8ed:	6a 00                	push   0x0
c000d8ef:	8d 70 01             	lea    esi,[eax+0x1]
c000d8f2:	50                   	push   eax
c000d8f3:	e8 3f fe ff ff       	call   c000d737 <Phys::setPageState(unsigned long, bool)>
c000d8f8:	5a                   	pop    edx
c000d8f9:	89 f0                	mov    eax,esi
c000d8fb:	59                   	pop    ecx
c000d8fc:	39 f3                	cmp    ebx,esi
c000d8fe:	75 ed                	jne    c000d8ed <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000d900:	5b                   	pop    ebx
c000d901:	5e                   	pop    esi
c000d902:	c3                   	ret    

c000d903 <Phys::physicalMemorySetup(unsigned int)>:
c000d903:	55                   	push   ebp
c000d904:	57                   	push   edi
c000d905:	56                   	push   esi
c000d906:	53                   	push   ebx
c000d907:	31 db                	xor    ebx,ebx
c000d909:	83 ec 30             	sub    esp,0x30
c000d90c:	6a 30                	push   0x30
c000d90e:	6a 00                	push   0x0
c000d910:	68 60 36 02 c0       	push   0xc0023660
c000d915:	e8 ee 2c ff ff       	call   c0000608 <memset>
c000d91a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d91e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d923:	05 00 10 00 00       	add    eax,0x1000
c000d928:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d92c:	83 c4 10             	add    esp,0x10
c000d92f:	83 ec 08             	sub    esp,0x8
c000d932:	6a 01                	push   0x1
c000d934:	53                   	push   ebx
c000d935:	43                   	inc    ebx
c000d936:	e8 fc fd ff ff       	call   c000d737 <Phys::setPageState(unsigned long, bool)>
c000d93b:	83 c4 10             	add    esp,0x10
c000d93e:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000d944:	75 e9                	jne    c000d92f <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000d946:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000d94d:	66 85 c0             	test   ax,ax
c000d950:	0f 84 28 01 00 00    	je     c000da7e <Phys::physicalMemorySetup(unsigned int)+0x17b>
c000d956:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d95a:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000d960:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000d965:	8b 35 08 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000608
c000d96b:	8b 3d 0c 06 00 c2    	mov    edi,DWORD PTR ds:0xc200060c
c000d971:	89 f1                	mov    ecx,esi
c000d973:	89 fb                	mov    ebx,edi
c000d975:	01 c1                	add    ecx,eax
c000d977:	89 d5                	mov    ebp,edx
c000d979:	11 d3                	adc    ebx,edx
c000d97b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000d97e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000d982:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000d986:	8b 0d 10 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000610
c000d98c:	09 dd                	or     ebp,ebx
c000d98e:	0f 85 fa 00 00 00    	jne    c000da8e <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000d994:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d998:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d9a0:	c7 44 24 0c 00 06 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000600
c000d9a8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d9ac:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d9b4:	eb 45                	jmp    c000d9fb <Phys::physicalMemorySetup(unsigned int)+0xf8>
c000d9b6:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000d9ba:	83 44 24 0c 18       	add    DWORD PTR [esp+0xc],0x18
c000d9bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d9c3:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000d9c7:	0f 84 c1 00 00 00    	je     c000da8e <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000d9cd:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000d9d1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d9d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d9d7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c000d9da:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000d9dd:	89 c1                	mov    ecx,eax
c000d9df:	89 d3                	mov    ebx,edx
c000d9e1:	01 f1                	add    ecx,esi
c000d9e3:	11 fb                	adc    ebx,edi
c000d9e5:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000d9e8:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000d9ec:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000d9ef:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000d9f3:	09 d3                	or     ebx,edx
c000d9f5:	0f 85 93 00 00 00    	jne    c000da8e <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000d9fb:	49                   	dec    ecx
c000d9fc:	75 b8                	jne    c000d9b6 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000d9fe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000da01:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da05:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000da09:	39 e9                	cmp    ecx,ebp
c000da0b:	89 d9                	mov    ecx,ebx
c000da0d:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000da11:	72 a3                	jb     c000d9b6 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000da13:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000da18:	39 f1                	cmp    ecx,esi
c000da1a:	b9 00 00 00 00       	mov    ecx,0x0
c000da1f:	19 f9                	sbb    ecx,edi
c000da21:	73 93                	jae    c000d9b6 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000da23:	39 e8                	cmp    eax,ebp
c000da25:	89 d1                	mov    ecx,edx
c000da27:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000da2b:	73 13                	jae    c000da40 <Phys::physicalMemorySetup(unsigned int)+0x13d>
c000da2d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000da30:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000da34:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000da38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000da3c:	1b 7c 24 1c          	sbb    edi,DWORD PTR [esp+0x1c]
c000da40:	83 ec 08             	sub    esp,0x8
c000da43:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000da47:	50                   	push   eax
c000da48:	e8 7e fe ff ff       	call   c000d8cb <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000da4d:	83 c4 0c             	add    esp,0xc
c000da50:	89 fa                	mov    edx,edi
c000da52:	89 f0                	mov    eax,esi
c000da54:	0f ac d0 0c          	shrd   eax,edx,0xc
c000da58:	03 05 50 36 02 c0    	add    eax,DWORD PTR ds:0xc0023650
c000da5e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000da65:	a3 50 36 02 c0       	mov    ds:0xc0023650,eax
c000da6a:	52                   	push   edx
c000da6b:	50                   	push   eax
c000da6c:	68 69 03 02 c0       	push   0xc0020369
c000da71:	e8 f4 f1 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c000da76:	83 c4 10             	add    esp,0x10
c000da79:	e9 38 ff ff ff       	jmp    c000d9b6 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000da7e:	83 ec 0c             	sub    esp,0xc
c000da81:	68 5b 03 02 c0       	push   0xc002035b
c000da86:	e8 fd f2 ff ff       	call   c000cd88 <panic(char const*)>
c000da8b:	83 c4 10             	add    esp,0x10
c000da8e:	bb 40 01 00 00       	mov    ebx,0x140
c000da93:	83 ec 08             	sub    esp,0x8
c000da96:	6a 00                	push   0x0
c000da98:	53                   	push   ebx
c000da99:	43                   	inc    ebx
c000da9a:	e8 98 fc ff ff       	call   c000d737 <Phys::setPageState(unsigned long, bool)>
c000da9f:	ff 05 50 36 02 c0    	inc    DWORD PTR ds:0xc0023650
c000daa5:	83 c4 10             	add    esp,0x10
c000daa8:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000daae:	75 e3                	jne    c000da93 <Phys::physicalMemorySetup(unsigned int)+0x190>
c000dab0:	83 c4 2c             	add    esp,0x2c
c000dab3:	5b                   	pop    ebx
c000dab4:	5e                   	pop    esi
c000dab5:	5f                   	pop    edi
c000dab6:	5d                   	pop    ebp
c000dab7:	c3                   	ret    

c000dab8 <Pipe::isAtty()>:
c000dab8:	31 c0                	xor    eax,eax
c000daba:	c3                   	ret    
c000dabb:	90                   	nop

c000dabc <Pipe::~Pipe()>:
c000dabc:	83 ec 0c             	sub    esp,0xc
c000dabf:	ba c8 03 02 c0       	mov    edx,0xc00203c8
c000dac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dac8:	89 10                	mov    DWORD PTR [eax],edx
c000daca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dace:	83 ec 0c             	sub    esp,0xc
c000dad1:	50                   	push   eax
c000dad2:	e8 dd 33 00 00       	call   c0010eb4 <UnixFile::~UnixFile()>
c000dad7:	83 c4 10             	add    esp,0x10
c000dada:	90                   	nop
c000dadb:	83 c4 0c             	add    esp,0xc
c000dade:	c3                   	ret    
c000dadf:	90                   	nop

c000dae0 <Pipe::~Pipe()>:
c000dae0:	83 ec 0c             	sub    esp,0xc
c000dae3:	83 ec 0c             	sub    esp,0xc
c000dae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daea:	e8 cd ff ff ff       	call   c000dabc <Pipe::~Pipe()>
c000daef:	83 c4 10             	add    esp,0x10
c000daf2:	83 ec 08             	sub    esp,0x8
c000daf5:	6a 20                	push   0x20
c000daf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dafb:	e8 33 47 00 00       	call   c0012233 <operator delete(void*, unsigned long)>
c000db00:	83 c4 10             	add    esp,0x10
c000db03:	83 c4 0c             	add    esp,0xc
c000db06:	c3                   	ret    
c000db07:	90                   	nop

c000db08 <Pipe::read(unsigned long long, void*, int*)>:
c000db08:	55                   	push   ebp
c000db09:	57                   	push   edi
c000db0a:	56                   	push   esi
c000db0b:	53                   	push   ebx
c000db0c:	83 ec 1c             	sub    esp,0x1c
c000db0f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000db13:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000db17:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000db1b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000db1e:	89 c8                	mov    eax,ecx
c000db20:	99                   	cdq    
c000db21:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000db25:	74 19                	je     c000db40 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000db27:	39 f9                	cmp    ecx,edi
c000db29:	89 d1                	mov    ecx,edx
c000db2b:	19 f1                	sbb    ecx,esi
c000db2d:	73 11                	jae    c000db40 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000db2f:	e8 d8 05 00 00       	call   c000e10c <lockScheduler()>
c000db34:	e8 07 09 00 00       	call   c000e440 <schedule()>
c000db39:	e8 d0 05 00 00       	call   c000e10e <unlockScheduler()>
c000db3e:	eb db                	jmp    c000db1b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000db40:	39 f8                	cmp    eax,edi
c000db42:	89 d1                	mov    ecx,edx
c000db44:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000db48:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000db4c:	19 f1                	sbb    ecx,esi
c000db4e:	73 08                	jae    c000db58 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000db50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000db5b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000db5e:	29 c6                	sub    esi,eax
c000db60:	89 f1                	mov    ecx,esi
c000db62:	c1 f9 1f             	sar    ecx,0x1f
c000db65:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000db69:	89 ca                	mov    edx,ecx
c000db6b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000db6f:	19 d1                	sbb    ecx,edx
c000db71:	73 04                	jae    c000db77 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000db73:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000db77:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000db7b:	89 fd                	mov    ebp,edi
c000db7d:	29 f5                	sub    ebp,esi
c000db7f:	85 f6                	test   esi,esi
c000db81:	74 12                	je     c000db95 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000db83:	52                   	push   edx
c000db84:	56                   	push   esi
c000db85:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000db88:	50                   	push   eax
c000db89:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000db8d:	e8 40 2a ff ff       	call   c00005d2 <memcpy>
c000db92:	83 c4 10             	add    esp,0x10
c000db95:	85 ed                	test   ebp,ebp
c000db97:	74 12                	je     c000dbab <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000db99:	50                   	push   eax
c000db9a:	55                   	push   ebp
c000db9b:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000db9e:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000dba2:	56                   	push   esi
c000dba3:	e8 2a 2a ff ff       	call   c00005d2 <memcpy>
c000dba8:	83 c4 10             	add    esp,0x10
c000dbab:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000dbae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000dbb1:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000dbb4:	99                   	cdq    
c000dbb5:	89 f7                	mov    edi,esi
c000dbb7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dbbb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000dbbf:	c1 ff 1f             	sar    edi,0x1f
c000dbc2:	57                   	push   edi
c000dbc3:	56                   	push   esi
c000dbc4:	52                   	push   edx
c000dbc5:	50                   	push   eax
c000dbc6:	e8 01 06 01 00       	call   c001e1cc <__umoddi3>
c000dbcb:	83 c4 10             	add    esp,0x10
c000dbce:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000dbd1:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000dbd6:	75 10                	jne    c000dbe8 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000dbd8:	83 ec 0c             	sub    esp,0xc
c000dbdb:	68 85 03 02 c0       	push   0xc0020385
c000dbe0:	e8 a3 f1 ff ff       	call   c000cd88 <panic(char const*)>
c000dbe5:	83 c4 10             	add    esp,0x10
c000dbe8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dbec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dbf0:	89 10                	mov    DWORD PTR [eax],edx
c000dbf2:	83 c4 1c             	add    esp,0x1c
c000dbf5:	31 c0                	xor    eax,eax
c000dbf7:	5b                   	pop    ebx
c000dbf8:	5e                   	pop    esi
c000dbf9:	5f                   	pop    edi
c000dbfa:	5d                   	pop    ebp
c000dbfb:	c3                   	ret    

c000dbfc <Pipe::write(unsigned long long, void*, int*)>:
c000dbfc:	55                   	push   ebp
c000dbfd:	57                   	push   edi
c000dbfe:	56                   	push   esi
c000dbff:	53                   	push   ebx
c000dc00:	83 ec 1c             	sub    esp,0x1c
c000dc03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc07:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000dc0b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000dc0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc12:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000dc15:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000dc18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc1c:	89 de                	mov    esi,ebx
c000dc1e:	89 df                	mov    edi,ebx
c000dc20:	c1 ff 1f             	sar    edi,0x1f
c000dc23:	01 c6                	add    esi,eax
c000dc25:	89 c8                	mov    eax,ecx
c000dc27:	11 d7                	adc    edi,edx
c000dc29:	99                   	cdq    
c000dc2a:	39 f1                	cmp    ecx,esi
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	19 f8                	sbb    eax,edi
c000dc30:	b8 01 00 00 00       	mov    eax,0x1
c000dc35:	0f 82 80 00 00 00    	jb     c000dcbb <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000dc3b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000dc3e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dc41:	01 d8                	add    eax,ebx
c000dc43:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000dc47:	99                   	cdq    
c000dc48:	f7 f9                	idiv   ecx
c000dc4a:	29 d1                	sub    ecx,edx
c000dc4c:	89 d7                	mov    edi,edx
c000dc4e:	89 c8                	mov    eax,ecx
c000dc50:	99                   	cdq    
c000dc51:	39 ce                	cmp    esi,ecx
c000dc53:	19 d3                	sbb    ebx,edx
c000dc55:	bb 00 00 00 00       	mov    ebx,0x0
c000dc5a:	72 04                	jb     c000dc60 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000dc5c:	89 f3                	mov    ebx,esi
c000dc5e:	29 cb                	sub    ebx,ecx
c000dc60:	89 f1                	mov    ecx,esi
c000dc62:	29 d9                	sub    ecx,ebx
c000dc64:	74 1a                	je     c000dc80 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000dc66:	52                   	push   edx
c000dc67:	51                   	push   ecx
c000dc68:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dc6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc70:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000dc73:	57                   	push   edi
c000dc74:	e8 59 29 ff ff       	call   c00005d2 <memcpy>
c000dc79:	83 c4 10             	add    esp,0x10
c000dc7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc80:	85 db                	test   ebx,ebx
c000dc82:	74 12                	je     c000dc96 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000dc84:	50                   	push   eax
c000dc85:	53                   	push   ebx
c000dc86:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000dc8a:	51                   	push   ecx
c000dc8b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000dc8e:	e8 3f 29 ff ff       	call   c00005d2 <memcpy>
c000dc93:	83 c4 10             	add    esp,0x10
c000dc96:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000dc99:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000dc9e:	75 10                	jne    c000dcb0 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000dca0:	83 ec 0c             	sub    esp,0xc
c000dca3:	68 a1 03 02 c0       	push   0xc00203a1
c000dca8:	e8 db f0 ff ff       	call   c000cd88 <panic(char const*)>
c000dcad:	83 c4 10             	add    esp,0x10
c000dcb0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dcb4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000dcb7:	89 38                	mov    DWORD PTR [eax],edi
c000dcb9:	31 c0                	xor    eax,eax
c000dcbb:	83 c4 1c             	add    esp,0x1c
c000dcbe:	5b                   	pop    ebx
c000dcbf:	5e                   	pop    esi
c000dcc0:	5f                   	pop    edi
c000dcc1:	5d                   	pop    ebp
c000dcc2:	c3                   	ret    
c000dcc3:	90                   	nop

c000dcc4 <Pipe::Pipe(int)>:
c000dcc4:	83 ec 0c             	sub    esp,0xc
c000dcc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dccb:	83 ec 08             	sub    esp,0x8
c000dcce:	6a 00                	push   0x0
c000dcd0:	50                   	push   eax
c000dcd1:	e8 7a 31 00 00       	call   c0010e50 <UnixFile::UnixFile(int)>
c000dcd6:	83 c4 10             	add    esp,0x10
c000dcd9:	ba c8 03 02 c0       	mov    edx,0xc00203c8
c000dcde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dce2:	89 10                	mov    DWORD PTR [eax],edx
c000dce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dce8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dcec:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000dcef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcf3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000dcfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcfe:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000dd05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dd09:	83 ec 0c             	sub    esp,0xc
c000dd0c:	50                   	push   eax
c000dd0d:	e8 53 f5 ff ff       	call   c000d265 <malloc>
c000dd12:	83 c4 10             	add    esp,0x10
c000dd15:	89 c2                	mov    edx,eax
c000dd17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd1b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dd1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd22:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000dd26:	90                   	nop
c000dd27:	83 c4 0c             	add    esp,0xc
c000dd2a:	c3                   	ret    
c000dd2b:	90                   	nop

c000dd2c <changeTSS>:
c000dd2c:	83 ec 0c             	sub    esp,0xc
c000dd2f:	e8 52 92 00 00       	call   c0016f86 <thisCPU()>
c000dd34:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000dd3a:	83 ec 08             	sub    esp,0x8
c000dd3d:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c000dd40:	05 7c 11 00 00       	add    eax,0x117c
c000dd45:	c1 e1 15             	shl    ecx,0x15
c000dd48:	ba 00 00 e8 01       	mov    edx,0x1e80000
c000dd4d:	29 ca                	sub    edx,ecx
c000dd4f:	52                   	push   edx
c000dd50:	50                   	push   eax
c000dd51:	e8 32 2e 00 00       	call   c0010b88 <TSS::setESP(unsigned long)>
c000dd56:	83 c4 1c             	add    esp,0x1c
c000dd59:	c3                   	ret    

c000dd5a <Process::addArgs(char**)>:
c000dd5a:	57                   	push   edi
c000dd5b:	56                   	push   esi
c000dd5c:	53                   	push   ebx
c000dd5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd61:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000dd65:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c000dd6f:	85 ff                	test   edi,edi
c000dd71:	74 3d                	je     c000ddb0 <Process::addArgs(char**)+0x56>
c000dd73:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd75:	85 c0                	test   eax,eax
c000dd77:	74 37                	je     c000ddb0 <Process::addArgs(char**)+0x56>
c000dd79:	31 db                	xor    ebx,ebx
c000dd7b:	83 ec 0c             	sub    esp,0xc
c000dd7e:	50                   	push   eax
c000dd7f:	e8 a1 28 ff ff       	call   c0000625 <strlen>
c000dd84:	40                   	inc    eax
c000dd85:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd88:	e8 d8 f4 ff ff       	call   c000d265 <malloc>
c000dd8d:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c000dd94:	5a                   	pop    edx
c000dd95:	59                   	pop    ecx
c000dd96:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c000dd99:	43                   	inc    ebx
c000dd9a:	50                   	push   eax
c000dd9b:	e8 07 29 ff ff       	call   c00006a7 <strcpy>
c000dda0:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c000dda6:	83 c4 10             	add    esp,0x10
c000dda9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c000ddac:	85 c0                	test   eax,eax
c000ddae:	75 cb                	jne    c000dd7b <Process::addArgs(char**)+0x21>
c000ddb0:	5b                   	pop    ebx
c000ddb1:	5e                   	pop    esi
c000ddb2:	5f                   	pop    edi
c000ddb3:	c3                   	ret    

c000ddb4 <Process::Process(char const*, Process*, char**)>:
c000ddb4:	56                   	push   esi
c000ddb5:	53                   	push   ebx
c000ddb6:	83 ec 14             	sub    esp,0x14
c000ddb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddbd:	05 0c 02 00 00       	add    eax,0x20c
c000ddc2:	bb 07 00 00 00       	mov    ebx,0x7
c000ddc7:	89 c6                	mov    esi,eax
c000ddc9:	85 db                	test   ebx,ebx
c000ddcb:	78 12                	js     c000dddf <Process::Process(char const*, Process*, char**)+0x2b>
c000ddcd:	83 ec 0c             	sub    esp,0xc
c000ddd0:	56                   	push   esi
c000ddd1:	e8 22 06 01 00       	call   c001e3f8 <ThreadControlBlock::ThreadControlBlock()>
c000ddd6:	83 c4 10             	add    esp,0x10
c000ddd9:	83 c6 63             	add    esi,0x63
c000dddc:	4b                   	dec    ebx
c000dddd:	eb ea                	jmp    c000ddc9 <Process::Process(char const*, Process*, char**)+0x15>
c000dddf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dde3:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c000ddea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddee:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c000ddf7:	a1 90 22 02 c0       	mov    eax,ds:0xc0022290
c000ddfc:	8d 50 01             	lea    edx,[eax+0x1]
c000ddff:	89 15 90 22 02 c0    	mov    DWORD PTR ds:0xc0022290,edx
c000de05:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000de09:	89 02                	mov    DWORD PTR [edx],eax
c000de0b:	83 ec 0c             	sub    esp,0xc
c000de0e:	6a 10                	push   0x10
c000de10:	e8 0f 44 00 00       	call   c0012224 <operator new(unsigned long)>
c000de15:	83 c4 10             	add    esp,0x10
c000de18:	89 c3                	mov    ebx,eax
c000de1a:	83 ec 08             	sub    esp,0x8
c000de1d:	6a 00                	push   0x0
c000de1f:	53                   	push   ebx
c000de20:	e8 93 40 00 00       	call   c0011eb8 <VAS::VAS(bool)>
c000de25:	83 c4 10             	add    esp,0x10
c000de28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de2c:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c000de32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de36:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000de40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de44:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000de48:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c000de4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de52:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000de58:	85 c0                	test   eax,eax
c000de5a:	74 42                	je     c000de9e <Process::Process(char const*, Process*, char**)+0xea>
c000de5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de60:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000de66:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000de6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de70:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c000de76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de7a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000de80:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000de86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de8a:	05 0c 01 00 00       	add    eax,0x10c
c000de8f:	83 ec 08             	sub    esp,0x8
c000de92:	52                   	push   edx
c000de93:	50                   	push   eax
c000de94:	e8 0e 28 ff ff       	call   c00006a7 <strcpy>
c000de99:	83 c4 10             	add    esp,0x10
c000de9c:	eb 5c                	jmp    c000defa <Process::Process(char const*, Process*, char**)+0x146>
c000de9e:	83 ec 0c             	sub    esp,0xc
c000dea1:	68 60 12 00 00       	push   0x1260
c000dea6:	e8 79 43 00 00       	call   c0012224 <operator new(unsigned long)>
c000deab:	83 c4 10             	add    esp,0x10
c000deae:	89 c3                	mov    ebx,eax
c000deb0:	83 ec 08             	sub    esp,0x8
c000deb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000deb7:	53                   	push   ebx
c000deb8:	e8 c9 29 00 00       	call   c0010886 <VgaText::VgaText(char const*)>
c000debd:	83 c4 10             	add    esp,0x10
c000dec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dec4:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c000deca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dece:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000ded4:	83 ec 0c             	sub    esp,0xc
c000ded7:	50                   	push   eax
c000ded8:	e8 aa 1d 00 00       	call   c000fc87 <addToTerminalCycle(VgaText*)>
c000dedd:	83 c4 10             	add    esp,0x10
c000dee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dee4:	05 0c 01 00 00       	add    eax,0x10c
c000dee9:	83 ec 08             	sub    esp,0x8
c000deec:	68 dc 03 02 c0       	push   0xc00203dc
c000def1:	50                   	push   eax
c000def2:	e8 b0 27 ff ff       	call   c00006a7 <strcpy>
c000def7:	83 c4 10             	add    esp,0x10
c000defa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000defe:	83 c0 0c             	add    eax,0xc
c000df01:	83 ec 08             	sub    esp,0x8
c000df04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df08:	50                   	push   eax
c000df09:	e8 99 27 ff ff       	call   c00006a7 <strcpy>
c000df0e:	83 c4 10             	add    esp,0x10
c000df11:	83 ec 08             	sub    esp,0x8
c000df14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000df18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df1c:	e8 39 fe ff ff       	call   c000dd5a <Process::addArgs(char**)>
c000df21:	83 c4 10             	add    esp,0x10
c000df24:	83 ec 08             	sub    esp,0x8
c000df27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df2f:	e8 36 d7 ff ff       	call   c000b66a <loadProgramIntoMemory(Process*, char const*)>
c000df34:	83 c4 10             	add    esp,0x10
c000df37:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000df3b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000df3f:	83 f0 01             	xor    eax,0x1
c000df42:	88 c2                	mov    dl,al
c000df44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df48:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c000df4e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000df53:	83 ec 08             	sub    esp,0x8
c000df56:	50                   	push   eax
c000df57:	68 30 04 02 c0       	push   0xc0020430
c000df5c:	e8 09 ed ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c000df61:	83 c4 10             	add    esp,0x10
c000df64:	90                   	nop
c000df65:	83 c4 14             	add    esp,0x14
c000df68:	5b                   	pop    ebx
c000df69:	5e                   	pop    esi
c000df6a:	c3                   	ret    
c000df6b:	90                   	nop

c000df6c <Process::Process(bool, char const*, Process*, char**)>:
c000df6c:	56                   	push   esi
c000df6d:	53                   	push   ebx
c000df6e:	83 ec 14             	sub    esp,0x14
c000df71:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000df75:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000df79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df7d:	05 0c 02 00 00       	add    eax,0x20c
c000df82:	bb 07 00 00 00       	mov    ebx,0x7
c000df87:	89 c6                	mov    esi,eax
c000df89:	85 db                	test   ebx,ebx
c000df8b:	78 12                	js     c000df9f <Process::Process(bool, char const*, Process*, char**)+0x33>
c000df8d:	83 ec 0c             	sub    esp,0xc
c000df90:	56                   	push   esi
c000df91:	e8 62 04 01 00       	call   c001e3f8 <ThreadControlBlock::ThreadControlBlock()>
c000df96:	83 c4 10             	add    esp,0x10
c000df99:	83 c6 63             	add    esi,0x63
c000df9c:	4b                   	dec    ebx
c000df9d:	eb ea                	jmp    c000df89 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c000df9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfa3:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c000dfaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfae:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c000dfb7:	a1 90 22 02 c0       	mov    eax,ds:0xc0022290
c000dfbc:	8d 50 01             	lea    edx,[eax+0x1]
c000dfbf:	89 15 90 22 02 c0    	mov    DWORD PTR ds:0xc0022290,edx
c000dfc5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dfc9:	89 02                	mov    DWORD PTR [edx],eax
c000dfcb:	83 ec 0c             	sub    esp,0xc
c000dfce:	6a 10                	push   0x10
c000dfd0:	e8 4f 42 00 00       	call   c0012224 <operator new(unsigned long)>
c000dfd5:	83 c4 10             	add    esp,0x10
c000dfd8:	89 c3                	mov    ebx,eax
c000dfda:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000dfdf:	83 ec 08             	sub    esp,0x8
c000dfe2:	50                   	push   eax
c000dfe3:	53                   	push   ebx
c000dfe4:	e8 cf 3e 00 00       	call   c0011eb8 <VAS::VAS(bool)>
c000dfe9:	83 c4 10             	add    esp,0x10
c000dfec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dff0:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c000dff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dffa:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000e004:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e008:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e00c:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c000e012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e016:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e01c:	85 c0                	test   eax,eax
c000e01e:	74 42                	je     c000e062 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c000e020:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e024:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e02a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000e030:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e034:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c000e03a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e03e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e044:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000e04a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e04e:	05 0c 01 00 00       	add    eax,0x10c
c000e053:	83 ec 08             	sub    esp,0x8
c000e056:	52                   	push   edx
c000e057:	50                   	push   eax
c000e058:	e8 4a 26 ff ff       	call   c00006a7 <strcpy>
c000e05d:	83 c4 10             	add    esp,0x10
c000e060:	eb 5c                	jmp    c000e0be <Process::Process(bool, char const*, Process*, char**)+0x152>
c000e062:	83 ec 0c             	sub    esp,0xc
c000e065:	68 60 12 00 00       	push   0x1260
c000e06a:	e8 b5 41 00 00       	call   c0012224 <operator new(unsigned long)>
c000e06f:	83 c4 10             	add    esp,0x10
c000e072:	89 c3                	mov    ebx,eax
c000e074:	83 ec 08             	sub    esp,0x8
c000e077:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e07b:	53                   	push   ebx
c000e07c:	e8 05 28 00 00       	call   c0010886 <VgaText::VgaText(char const*)>
c000e081:	83 c4 10             	add    esp,0x10
c000e084:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e088:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c000e08e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e092:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000e098:	83 ec 0c             	sub    esp,0xc
c000e09b:	50                   	push   eax
c000e09c:	e8 e6 1b 00 00       	call   c000fc87 <addToTerminalCycle(VgaText*)>
c000e0a1:	83 c4 10             	add    esp,0x10
c000e0a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0a8:	05 0c 01 00 00       	add    eax,0x10c
c000e0ad:	83 ec 08             	sub    esp,0x8
c000e0b0:	68 dc 03 02 c0       	push   0xc00203dc
c000e0b5:	50                   	push   eax
c000e0b6:	e8 ec 25 ff ff       	call   c00006a7 <strcpy>
c000e0bb:	83 c4 10             	add    esp,0x10
c000e0be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0c2:	83 c0 0c             	add    eax,0xc
c000e0c5:	83 ec 08             	sub    esp,0x8
c000e0c8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e0cc:	50                   	push   eax
c000e0cd:	e8 d5 25 ff ff       	call   c00006a7 <strcpy>
c000e0d2:	83 c4 10             	add    esp,0x10
c000e0d5:	83 ec 08             	sub    esp,0x8
c000e0d8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000e0dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0e0:	e8 75 fc ff ff       	call   c000dd5a <Process::addArgs(char**)>
c000e0e5:	83 c4 10             	add    esp,0x10
c000e0e8:	90                   	nop
c000e0e9:	83 c4 14             	add    esp,0x14
c000e0ec:	5b                   	pop    ebx
c000e0ed:	5e                   	pop    esi
c000e0ee:	c3                   	ret    

c000e0ef <disableIRQs()>:
c000e0ef:	fa                   	cli    
c000e0f0:	ff 05 b4 36 02 c0    	inc    DWORD PTR ds:0xc00236b4
c000e0f6:	c3                   	ret    

c000e0f7 <getIRQNestingLevel()>:
c000e0f7:	a1 b4 36 02 c0       	mov    eax,ds:0xc00236b4
c000e0fc:	c3                   	ret    

c000e0fd <enableIRQs()>:
c000e0fd:	a1 b4 36 02 c0       	mov    eax,ds:0xc00236b4
c000e102:	48                   	dec    eax
c000e103:	a3 b4 36 02 c0       	mov    ds:0xc00236b4,eax
c000e108:	75 01                	jne    c000e10b <enableIRQs()+0xe>
c000e10a:	fb                   	sti    
c000e10b:	c3                   	ret    

c000e10c <lockScheduler()>:
c000e10c:	eb e1                	jmp    c000e0ef <disableIRQs()>

c000e10e <unlockScheduler()>:
c000e10e:	eb ed                	jmp    c000e0fd <enableIRQs()>

c000e110 <userModeEntryPoint(void*)>:
c000e110:	83 ec 0c             	sub    esp,0xc
c000e113:	e8 f6 ff ff ff       	call   c000e10e <unlockScheduler()>
c000e118:	fb                   	sti    
c000e119:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e11e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e121:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c000e127:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e12b:	83 c4 0c             	add    esp,0xc
c000e12e:	e9 b3 20 ff ff       	jmp    c00001e6 <goToUsermode>

c000e133 <lockStuff()>:
c000e133:	e8 b7 ff ff ff       	call   c000e0ef <disableIRQs()>
c000e138:	ff 05 b0 36 02 c0    	inc    DWORD PTR ds:0xc00236b0
c000e13e:	c3                   	ret    

c000e13f <taskStartupFunction>:
c000e13f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e144:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c000e147:	c3                   	ret    

c000e148 <updateTimeUsed()>:
c000e148:	57                   	push   edi
c000e149:	56                   	push   esi
c000e14a:	53                   	push   ebx
c000e14b:	e8 36 8e 00 00       	call   c0016f86 <thisCPU()>
c000e150:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c000e157:	74 49                	je     c000e1a2 <updateTimeUsed()+0x5a>
c000e159:	0f 31                	rdtsc  
c000e15b:	89 c1                	mov    ecx,eax
c000e15d:	a3 f0 36 02 c0       	mov    ds:0xc00236f0,eax
c000e162:	2b 0d e0 36 02 c0    	sub    ecx,DWORD PTR ds:0xc00236e0
c000e168:	89 d3                	mov    ebx,edx
c000e16a:	89 0d e8 36 02 c0    	mov    DWORD PTR ds:0xc00236e8,ecx
c000e170:	1b 1d e4 36 02 c0    	sbb    ebx,DWORD PTR ds:0xc00236e4
c000e176:	a3 e0 36 02 c0       	mov    ds:0xc00236e0,eax
c000e17b:	89 1d ec 36 02 c0    	mov    DWORD PTR ds:0xc00236ec,ebx
c000e181:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e186:	89 15 f4 36 02 c0    	mov    DWORD PTR ds:0xc00236f4,edx
c000e18c:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000e18f:	89 15 e4 36 02 c0    	mov    DWORD PTR ds:0xc00236e4,edx
c000e195:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c000e198:	01 f1                	add    ecx,esi
c000e19a:	11 fb                	adc    ebx,edi
c000e19c:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c000e19f:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c000e1a2:	5b                   	pop    ebx
c000e1a3:	5e                   	pop    esi
c000e1a4:	5f                   	pop    edi
c000e1a5:	c3                   	ret    

c000e1a6 <switchToThread(ThreadControlBlock*)>:
c000e1a6:	53                   	push   ebx
c000e1a7:	83 ec 08             	sub    esp,0x8
c000e1aa:	a1 b0 36 02 c0       	mov    eax,ds:0xc00236b0
c000e1af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e1b3:	85 c0                	test   eax,eax
c000e1b5:	75 30                	jne    c000e1e7 <switchToThread(ThreadControlBlock*)+0x41>
c000e1b7:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c000e1ba:	3c ff                	cmp    al,0xff
c000e1bc:	74 25                	je     c000e1e3 <switchToThread(ThreadControlBlock*)+0x3d>
c000e1be:	0f b6 d0             	movzx  edx,al
c000e1c1:	b8 84 03 00 00       	mov    eax,0x384
c000e1c6:	29 d0                	sub    eax,edx
c000e1c8:	c1 e0 10             	shl    eax,0x10
c000e1cb:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c000e1ce:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000e1d1:	e8 72 ff ff ff       	call   c000e148 <updateTimeUsed()>
c000e1d6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e1da:	83 c4 08             	add    esp,0x8
c000e1dd:	5b                   	pop    ebx
c000e1de:	e9 3c 20 ff ff       	jmp    c000021f <switchToThreadASM>
c000e1e3:	31 c0                	xor    eax,eax
c000e1e5:	eb e7                	jmp    c000e1ce <switchToThread(ThreadControlBlock*)+0x28>
c000e1e7:	c7 05 ac 36 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00236ac,0x1
c000e1f1:	83 c4 08             	add    esp,0x8
c000e1f4:	5b                   	pop    ebx
c000e1f5:	c3                   	ret    

c000e1f6 <Semaphore::Semaphore(int)>:
c000e1f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e1fe:	89 10                	mov    DWORD PTR [eax],edx
c000e200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e204:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000e20b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e20f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e216:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e21a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000e221:	90                   	nop
c000e222:	c3                   	ret    
c000e223:	90                   	nop

c000e224 <Mutex::Mutex()>:
c000e224:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e228:	6a 01                	push   0x1
c000e22a:	50                   	push   eax
c000e22b:	e8 c6 ff ff ff       	call   c000e1f6 <Semaphore::Semaphore(int)>
c000e230:	83 c4 08             	add    esp,0x8
c000e233:	90                   	nop
c000e234:	c3                   	ret    
c000e235:	90                   	nop

c000e236 <Process::createThread(void (*)(void*), void*, int)>:
c000e236:	55                   	push   ebp
c000e237:	31 c9                	xor    ecx,ecx
c000e239:	57                   	push   edi
c000e23a:	56                   	push   esi
c000e23b:	53                   	push   ebx
c000e23c:	83 ec 1c             	sub    esp,0x1c
c000e23f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e243:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c000e24a:	89 f2                	mov    edx,esi
c000e24c:	0f b7 c2             	movzx  eax,dx
c000e24f:	83 e2 01             	and    edx,0x1
c000e252:	74 14                	je     c000e268 <Process::createThread(void (*)(void*), void*, int)+0x32>
c000e254:	d1 f8                	sar    eax,1
c000e256:	41                   	inc    ecx
c000e257:	89 c2                	mov    edx,eax
c000e259:	83 f9 10             	cmp    ecx,0x10
c000e25c:	75 ee                	jne    c000e24c <Process::createThread(void (*)(void*), void*, int)+0x16>
c000e25e:	83 c4 1c             	add    esp,0x1c
c000e261:	31 c0                	xor    eax,eax
c000e263:	5b                   	pop    ebx
c000e264:	5e                   	pop    esi
c000e265:	5f                   	pop    edi
c000e266:	5d                   	pop    ebp
c000e267:	c3                   	ret    
c000e268:	83 ec 08             	sub    esp,0x8
c000e26b:	b8 01 00 00 00       	mov    eax,0x1
c000e270:	d3 e0                	shl    eax,cl
c000e272:	09 c6                	or     esi,eax
c000e274:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c000e27a:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c000e281:	8d 34 09             	lea    esi,[ecx+ecx*1]
c000e284:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e287:	01 ce                	add    esi,ecx
c000e289:	89 f0                	mov    eax,esi
c000e28b:	c1 e0 05             	shl    eax,0x5
c000e28e:	01 c6                	add    esi,eax
c000e290:	8d 04 33             	lea    eax,[ebx+esi*1]
c000e293:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c000e299:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c000e29f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e2a3:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c000e2a9:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c000e2af:	89 ca                	mov    edx,ecx
c000e2b1:	f7 da                	neg    edx
c000e2b3:	c1 e2 15             	shl    edx,0x15
c000e2b6:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c000e2bc:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c000e2c2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e2c6:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c000e2d0:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c000e2d6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e2da:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c000e2e0:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c000e2ea:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c000e2f4:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c000e2fb:	50                   	push   eax
c000e2fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e300:	68 d0 36 02 c0       	push   0xc00236d0
c000e305:	e8 84 01 01 00       	call   c001e48e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e30a:	83 c4 10             	add    esp,0x10
c000e30d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e311:	83 c4 1c             	add    esp,0x1c
c000e314:	5b                   	pop    ebx
c000e315:	5e                   	pop    esi
c000e316:	5f                   	pop    edi
c000e317:	5d                   	pop    ebp
c000e318:	c3                   	ret    
c000e319:	90                   	nop

c000e31a <Process::createUserThread()>:
c000e31a:	83 ec 0c             	sub    esp,0xc
c000e31d:	68 80 00 00 00       	push   0x80
c000e322:	6a 00                	push   0x0
c000e324:	68 10 e1 00 c0       	push   0xc000e110
c000e329:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e32d:	e8 04 ff ff ff       	call   c000e236 <Process::createThread(void (*)(void*), void*, int)>
c000e332:	83 c4 1c             	add    esp,0x1c
c000e335:	c3                   	ret    

c000e336 <setupMultitasking(void (*)())>:
c000e336:	56                   	push   esi
c000e337:	53                   	push   ebx
c000e338:	53                   	push   ebx
c000e339:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e33d:	eb 10                	jmp    c000e34f <setupMultitasking(void (*)())+0x19>
c000e33f:	83 ec 0c             	sub    esp,0xc
c000e342:	68 d0 36 02 c0       	push   0xc00236d0
c000e347:	e8 32 02 01 00       	call   c001e57e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e34c:	83 c4 10             	add    esp,0x10
c000e34f:	83 ec 0c             	sub    esp,0xc
c000e352:	68 d0 36 02 c0       	push   0xc00236d0
c000e357:	e8 06 02 01 00       	call   c001e562 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e35c:	83 c4 10             	add    esp,0x10
c000e35f:	84 c0                	test   al,al
c000e361:	74 dc                	je     c000e33f <setupMultitasking(void (*)())+0x9>
c000e363:	83 ec 0c             	sub    esp,0xc
c000e366:	68 3b 07 00 00       	push   0x73b
c000e36b:	e8 b4 3e 00 00       	call   c0012224 <operator new(unsigned long)>
c000e370:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e377:	89 c3                	mov    ebx,eax
c000e379:	6a 00                	push   0x0
c000e37b:	68 e0 03 02 c0       	push   0xc00203e0
c000e380:	6a 01                	push   0x1
c000e382:	50                   	push   eax
c000e383:	e8 e4 fb ff ff       	call   c000df6c <Process::Process(bool, char const*, Process*, char**)>
c000e388:	83 c4 18             	add    esp,0x18
c000e38b:	89 1d dc 36 02 c0    	mov    DWORD PTR ds:0xc00236dc,ebx
c000e391:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c000e397:	68 58 04 02 c0       	push   0xc0020458
c000e39c:	e8 c9 e8 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c000e3a1:	58                   	pop    eax
c000e3a2:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c000e3a8:	e8 4e 20 00 00       	call   c00103fb <setActiveTerminal(VgaText*)>
c000e3ad:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c000e3b5:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c000e3bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e3be:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c000e3c8:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c000e3ce:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c000e3d4:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c000e3de:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c000e3e8:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c000e3f2:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c000e3f8:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c000e3fe:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c000e408:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c000e40e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c000e418:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000e41e:	5a                   	pop    edx
c000e41f:	59                   	pop    ecx
c000e420:	68 dc 03 02 c0       	push   0xc00203dc
c000e425:	50                   	push   eax
c000e426:	e8 7c 22 ff ff       	call   c00006a7 <strcpy>
c000e42b:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c000e432:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e436:	83 c4 14             	add    esp,0x14
c000e439:	5b                   	pop    ebx
c000e43a:	5e                   	pop    esi
c000e43b:	e9 d1 1d ff ff       	jmp    c0000211 <switchToThreadASMFirstTime>

c000e440 <schedule()>:
c000e440:	a1 b0 36 02 c0       	mov    eax,ds:0xc00236b0
c000e445:	85 c0                	test   eax,eax
c000e447:	74 0b                	je     c000e454 <schedule()+0x14>
c000e449:	c7 05 ac 36 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00236ac,0x1
c000e453:	c3                   	ret    
c000e454:	53                   	push   ebx
c000e455:	83 ec 14             	sub    esp,0x14
c000e458:	68 d0 36 02 c0       	push   0xc00236d0
c000e45d:	e8 00 01 01 00       	call   c001e562 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e462:	83 c4 10             	add    esp,0x10
c000e465:	84 c0                	test   al,al
c000e467:	75 38                	jne    c000e4a1 <schedule()+0x61>
c000e469:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e46e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000e471:	4a                   	dec    edx
c000e472:	74 32                	je     c000e4a6 <schedule()+0x66>
c000e474:	83 ec 0c             	sub    esp,0xc
c000e477:	68 d0 36 02 c0       	push   0xc00236d0
c000e47c:	e8 ab 01 01 00       	call   c001e62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e481:	c7 04 24 d0 36 02 c0 	mov    DWORD PTR [esp],0xc00236d0
c000e488:	89 c3                	mov    ebx,eax
c000e48a:	e8 ef 00 01 00       	call   c001e57e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e48f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c000e496:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e499:	e8 08 fd ff ff       	call   c000e1a6 <switchToThread(ThreadControlBlock*)>
c000e49e:	83 c4 10             	add    esp,0x10
c000e4a1:	83 c4 08             	add    esp,0x8
c000e4a4:	5b                   	pop    ebx
c000e4a5:	c3                   	ret    
c000e4a6:	83 ec 08             	sub    esp,0x8
c000e4a9:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e4b0:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c000e4b6:	68 d0 36 02 c0       	push   0xc00236d0
c000e4bb:	e8 ce ff 00 00       	call   c001e48e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e4c0:	83 c4 10             	add    esp,0x10
c000e4c3:	eb af                	jmp    c000e474 <schedule()+0x34>

c000e4c5 <unlockStuff()>:
c000e4c5:	a1 b0 36 02 c0       	mov    eax,ds:0xc00236b0
c000e4ca:	48                   	dec    eax
c000e4cb:	a3 b0 36 02 c0       	mov    ds:0xc00236b0,eax
c000e4d0:	75 09                	jne    c000e4db <unlockStuff()+0x16>
c000e4d2:	a1 ac 36 02 c0       	mov    eax,ds:0xc00236ac
c000e4d7:	85 c0                	test   eax,eax
c000e4d9:	75 05                	jne    c000e4e0 <unlockStuff()+0x1b>
c000e4db:	e9 1d fc ff ff       	jmp    c000e0fd <enableIRQs()>
c000e4e0:	83 ec 0c             	sub    esp,0xc
c000e4e3:	c7 05 ac 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236ac,0x0
c000e4ed:	e8 4e ff ff ff       	call   c000e440 <schedule()>
c000e4f2:	83 c4 0c             	add    esp,0xc
c000e4f5:	e9 03 fc ff ff       	jmp    c000e0fd <enableIRQs()>

c000e4fa <forkProcess(regs*)>:
c000e4fa:	56                   	push   esi
c000e4fb:	53                   	push   ebx
c000e4fc:	50                   	push   eax
c000e4fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e502:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e505:	66 83 b8 24 05 00 00 01 	cmp    WORD PTR [eax+0x524],0x1
c000e50d:	0f 85 3e 01 00 00    	jne    c000e651 <forkProcess(regs*)+0x157>
c000e513:	e8 1b fc ff ff       	call   c000e133 <lockStuff()>
c000e518:	83 ec 0c             	sub    esp,0xc
c000e51b:	68 3b 07 00 00       	push   0x73b
c000e520:	e8 ff 3c 00 00       	call   c0012224 <operator new(unsigned long)>
c000e525:	89 c3                	mov    ebx,eax
c000e527:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e52c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e52f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e536:	50                   	push   eax
c000e537:	83 c0 0c             	add    eax,0xc
c000e53a:	50                   	push   eax
c000e53b:	6a 00                	push   0x0
c000e53d:	53                   	push   ebx
c000e53e:	e8 29 fa ff ff       	call   c000df6c <Process::Process(bool, char const*, Process*, char**)>
c000e543:	8b b3 32 05 00 00    	mov    esi,DWORD PTR [ebx+0x532]
c000e549:	83 c4 20             	add    esp,0x20
c000e54c:	85 f6                	test   esi,esi
c000e54e:	74 16                	je     c000e566 <forkProcess(regs*)+0x6c>
c000e550:	83 ec 0c             	sub    esp,0xc
c000e553:	56                   	push   esi
c000e554:	e8 05 30 00 00       	call   c001155e <VAS::~VAS()>
c000e559:	59                   	pop    ecx
c000e55a:	58                   	pop    eax
c000e55b:	6a 10                	push   0x10
c000e55d:	56                   	push   esi
c000e55e:	e8 d0 3c 00 00       	call   c0012233 <operator delete(void*, unsigned long)>
c000e563:	83 c4 10             	add    esp,0x10
c000e566:	83 ec 0c             	sub    esp,0xc
c000e569:	66 c7 83 24 05 00 00 01 00 	mov    WORD PTR [ebx+0x524],0x1
c000e572:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e577:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e57a:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c000e580:	89 83 2e 05 00 00    	mov    DWORD PTR [ebx+0x52e],eax
c000e586:	6a 10                	push   0x10
c000e588:	e8 97 3c 00 00       	call   c0012224 <operator new(unsigned long)>
c000e58d:	59                   	pop    ecx
c000e58e:	89 c6                	mov    esi,eax
c000e590:	58                   	pop    eax
c000e591:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e596:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e599:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000e59f:	56                   	push   esi
c000e5a0:	e8 db 34 00 00       	call   c0011a80 <VAS::VAS(VAS*)>
c000e5a5:	89 b3 32 05 00 00    	mov    DWORD PTR [ebx+0x532],esi
c000e5ab:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000e5ae:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e5b0:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c000e5b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e5bb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e5be:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c000e5c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e5c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e5cc:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c000e5d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e5d7:	8a 40 44             	mov    al,BYTE PTR [eax+0x44]
c000e5da:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c000e5e4:	88 83 50 02 00 00    	mov    BYTE PTR [ebx+0x250],al
c000e5ea:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c000e5f0:	81 c3 0c 02 00 00    	add    ebx,0x20c
c000e5f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e5fb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000e5fe:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000e605:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000e608:	c7 43 0c 01 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1
c000e60f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000e616:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000e61d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e622:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000e625:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e628:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e62d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000e630:	58                   	pop    eax
c000e631:	5a                   	pop    edx
c000e632:	53                   	push   ebx
c000e633:	68 d0 36 02 c0       	push   0xc00236d0
c000e638:	e8 51 fe 00 00       	call   c001e48e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e63d:	e8 83 fe ff ff       	call   c000e4c5 <unlockStuff()>
c000e642:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e647:	83 c4 10             	add    esp,0x10
c000e64a:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000e64d:	5a                   	pop    edx
c000e64e:	5b                   	pop    ebx
c000e64f:	5e                   	pop    esi
c000e650:	c3                   	ret    
c000e651:	83 ec 0c             	sub    esp,0xc
c000e654:	68 8c 04 02 c0       	push   0xc002048c
c000e659:	e8 0c e6 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c000e65e:	83 c4 10             	add    esp,0x10
c000e661:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e666:	eb e5                	jmp    c000e64d <forkProcess(regs*)+0x153>

c000e668 <Semaphore::tryAcquire()>:
c000e668:	83 ec 0c             	sub    esp,0xc
c000e66b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e66f:	e8 bf fa ff ff       	call   c000e133 <lockStuff()>
c000e674:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e677:	3b 10                	cmp    edx,DWORD PTR [eax]
c000e679:	7c 0b                	jl     c000e686 <Semaphore::tryAcquire()+0x1e>
c000e67b:	e8 45 fe ff ff       	call   c000e4c5 <unlockStuff()>
c000e680:	31 c0                	xor    eax,eax
c000e682:	83 c4 0c             	add    esp,0xc
c000e685:	c3                   	ret    
c000e686:	42                   	inc    edx
c000e687:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e68a:	e8 36 fe ff ff       	call   c000e4c5 <unlockStuff()>
c000e68f:	b0 01                	mov    al,0x1
c000e691:	83 c4 0c             	add    esp,0xc
c000e694:	c3                   	ret    
c000e695:	90                   	nop

c000e696 <Semaphore::assertLocked(char const*)>:
c000e696:	83 ec 0c             	sub    esp,0xc
c000e699:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e69d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e6a1:	e8 8d fa ff ff       	call   c000e133 <lockStuff()>
c000e6a6:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e6a8:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c000e6ab:	7c 08                	jl     c000e6b5 <Semaphore::assertLocked(char const*)+0x1f>
c000e6ad:	83 c4 0c             	add    esp,0xc
c000e6b0:	e9 10 fe ff ff       	jmp    c000e4c5 <unlockStuff()>
c000e6b5:	83 ec 0c             	sub    esp,0xc
c000e6b8:	52                   	push   edx
c000e6b9:	e8 ca e6 ff ff       	call   c000cd88 <panic(char const*)>
c000e6be:	83 c4 10             	add    esp,0x10
c000e6c1:	83 c4 0c             	add    esp,0xc
c000e6c4:	e9 fc fd ff ff       	jmp    c000e4c5 <unlockStuff()>

c000e6c9 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c000e6c9:	83 ec 0c             	sub    esp,0xc
c000e6cc:	e8 26 fa ff ff       	call   c000e0f7 <getIRQNestingLevel()>
c000e6d1:	83 ec 08             	sub    esp,0x8
c000e6d4:	50                   	push   eax
c000e6d5:	68 b8 04 02 c0       	push   0xc00204b8
c000e6da:	e8 8b e5 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c000e6df:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e6e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e6e8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000e6eb:	e8 50 fd ff ff       	call   c000e440 <schedule()>
c000e6f0:	e8 19 fa ff ff       	call   c000e10e <unlockScheduler()>
c000e6f5:	e8 fd f9 ff ff       	call   c000e0f7 <getIRQNestingLevel()>
c000e6fa:	5a                   	pop    edx
c000e6fb:	59                   	pop    ecx
c000e6fc:	50                   	push   eax
c000e6fd:	68 ec 04 02 c0       	push   0xc00204ec
c000e702:	e8 63 e5 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c000e707:	83 c4 1c             	add    esp,0x1c
c000e70a:	c3                   	ret    

c000e70b <blockTask(TaskState)>:
c000e70b:	83 ec 0c             	sub    esp,0xc
c000e70e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e712:	e8 f5 f9 ff ff       	call   c000e10c <lockScheduler()>
c000e717:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e71c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000e71f:	e8 1c fd ff ff       	call   c000e440 <schedule()>
c000e724:	83 c4 0c             	add    esp,0xc
c000e727:	e9 e2 f9 ff ff       	jmp    c000e10e <unlockScheduler()>

c000e72c <waitTask(int, int*, int)>:
c000e72c:	83 ec 18             	sub    esp,0x18
c000e72f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e734:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e738:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c000e73b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e73f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e744:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c000e747:	6a 07                	push   0x7
c000e749:	e8 bd ff ff ff       	call   c000e70b <blockTask(TaskState)>
c000e74e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e753:	83 c4 10             	add    esp,0x10
c000e756:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c000e759:	85 d2                	test   edx,edx
c000e75b:	74 0a                	je     c000e767 <waitTask(int, int*, int)+0x3b>
c000e75d:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c000e760:	89 02                	mov    DWORD PTR [edx],eax
c000e762:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e767:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c000e76a:	83 c4 0c             	add    esp,0xc
c000e76d:	c3                   	ret    

c000e76e <nanoSleepUntil(unsigned long long)>:
c000e76e:	83 ec 0c             	sub    esp,0xc
c000e771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e775:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e779:	3b 05 50 3e 02 c0    	cmp    eax,DWORD PTR ds:0xc0023e50
c000e77f:	89 d1                	mov    ecx,edx
c000e781:	1b 0d 54 3e 02 c0    	sbb    ecx,DWORD PTR ds:0xc0023e54
c000e787:	73 04                	jae    c000e78d <nanoSleepUntil(unsigned long long)+0x1f>
c000e789:	83 c4 0c             	add    esp,0xc
c000e78c:	c3                   	ret    
c000e78d:	e8 a1 f9 ff ff       	call   c000e133 <lockStuff()>
c000e792:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000e798:	83 ec 08             	sub    esp,0x8
c000e79b:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c000e79e:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c000e7a1:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c000e7a7:	68 c4 36 02 c0       	push   0xc00236c4
c000e7ac:	e8 dd fc 00 00       	call   c001e48e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e7b1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e7b8:	e8 4e ff ff ff       	call   c000e70b <blockTask(TaskState)>
c000e7bd:	83 c4 1c             	add    esp,0x1c
c000e7c0:	e9 00 fd ff ff       	jmp    c000e4c5 <unlockStuff()>

c000e7c5 <nanoSleep(unsigned long long)>:
c000e7c5:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c000e7ca:	8b 15 54 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e54
c000e7d0:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c000e7d4:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c000e7d8:	eb 94                	jmp    c000e76e <nanoSleepUntil(unsigned long long)>

c000e7da <sleep(unsigned long long)>:
c000e7da:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c000e7e2:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c000e7e7:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c000e7eb:	01 ca                	add    edx,ecx
c000e7ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e7f1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e7f5:	eb ce                	jmp    c000e7c5 <nanoSleep(unsigned long long)>
c000e7f7:	90                   	nop

c000e7f8 <Semaphore::acquire()>:
c000e7f8:	83 ec 0c             	sub    esp,0xc
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	e8 2f f9 ff ff       	call   c000e133 <lockStuff()>
c000e804:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e807:	3b 10                	cmp    edx,DWORD PTR [eax]
c000e809:	7d 0c                	jge    c000e817 <Semaphore::acquire()+0x1f>
c000e80b:	42                   	inc    edx
c000e80c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e80f:	83 c4 0c             	add    esp,0xc
c000e812:	e9 ae fc ff ff       	jmp    c000e4c5 <unlockStuff()>
c000e817:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e81d:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c000e824:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e827:	85 d2                	test   edx,edx
c000e829:	74 2a                	je     c000e855 <Semaphore::acquire()+0x5d>
c000e82b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000e82e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000e834:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c000e837:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e83d:	83 ec 0c             	sub    esp,0xc
c000e840:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e843:	6a 05                	push   0x5
c000e845:	e8 c1 fe ff ff       	call   c000e70b <blockTask(TaskState)>
c000e84a:	83 c4 10             	add    esp,0x10
c000e84d:	83 c4 0c             	add    esp,0xc
c000e850:	e9 70 fc ff ff       	jmp    c000e4c5 <unlockStuff()>
c000e855:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e85b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e85e:	eb d7                	jmp    c000e837 <Semaphore::acquire()+0x3f>

c000e860 <execveProcess(char const*, char* const*, char* const*)>:
c000e860:	56                   	push   esi
c000e861:	53                   	push   ebx
c000e862:	50                   	push   eax
c000e863:	e8 cb f8 ff ff       	call   c000e133 <lockStuff()>
c000e868:	83 ec 0c             	sub    esp,0xc
c000e86b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e870:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e873:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c000e879:	68 3b 07 00 00       	push   0x73b
c000e87e:	e8 a1 39 00 00       	call   c0012224 <operator new(unsigned long)>
c000e883:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e887:	89 c3                	mov    ebx,eax
c000e889:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e88e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e891:	ff b0 2a 05 00 00    	push   DWORD PTR [eax+0x52a]
c000e897:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e89b:	53                   	push   ebx
c000e89c:	e8 13 f5 ff ff       	call   c000ddb4 <Process::Process(char const*, Process*, char**)>
c000e8a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e8a6:	83 c4 20             	add    esp,0x20
c000e8a9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e8ac:	85 f6                	test   esi,esi
c000e8ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000e8b0:	89 03                	mov    DWORD PTR [ebx],eax
c000e8b2:	74 06                	je     c000e8ba <execveProcess(char const*, char* const*, char* const*)+0x5a>
c000e8b4:	89 b3 26 05 00 00    	mov    DWORD PTR [ebx+0x526],esi
c000e8ba:	83 ec 0c             	sub    esp,0xc
c000e8bd:	53                   	push   ebx
c000e8be:	e8 57 fa ff ff       	call   c000e31a <Process::createUserThread()>
c000e8c3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000e8ca:	e8 3c fe ff ff       	call   c000e70b <blockTask(TaskState)>
c000e8cf:	e8 f1 fb ff ff       	call   c000e4c5 <unlockStuff()>
c000e8d4:	e8 33 f8 ff ff       	call   c000e10c <lockScheduler()>
c000e8d9:	e8 62 fb ff ff       	call   c000e440 <schedule()>
c000e8de:	e8 2b f8 ff ff       	call   c000e10e <unlockScheduler()>
c000e8e3:	83 c4 14             	add    esp,0x14
c000e8e6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e8eb:	5b                   	pop    ebx
c000e8ec:	5e                   	pop    esi
c000e8ed:	c3                   	ret    

c000e8ee <taskReturned>:
c000e8ee:	83 ec 0c             	sub    esp,0xc
c000e8f1:	e8 18 f8 ff ff       	call   c000e10e <unlockScheduler()>
c000e8f6:	83 ec 08             	sub    esp,0x8
c000e8f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e8fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e901:	83 c0 0c             	add    eax,0xc
c000e904:	50                   	push   eax
c000e905:	68 e7 03 02 c0       	push   0xc00203e7
c000e90a:	e8 5b e3 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c000e90f:	83 c4 10             	add    esp,0x10
c000e912:	83 ec 0c             	sub    esp,0xc
c000e915:	6a 02                	push   0x2
c000e917:	e8 ef fd ff ff       	call   c000e70b <blockTask(TaskState)>
c000e91c:	e8 eb f7 ff ff       	call   c000e10c <lockScheduler()>
c000e921:	e8 1a fb ff ff       	call   c000e440 <schedule()>
c000e926:	e8 e3 f7 ff ff       	call   c000e10e <unlockScheduler()>
c000e92b:	83 c4 10             	add    esp,0x10
c000e92e:	eb e2                	jmp    c000e912 <taskReturned+0x24>

c000e930 <unblockTask(ThreadControlBlock*)>:
c000e930:	53                   	push   ebx
c000e931:	83 ec 08             	sub    esp,0x8
c000e934:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e938:	e8 cf f7 ff ff       	call   c000e10c <lockScheduler()>
c000e93d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e940:	85 c0                	test   eax,eax
c000e942:	74 5c                	je     c000e9a0 <unblockTask(ThreadControlBlock*)+0x70>
c000e944:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e947:	48                   	dec    eax
c000e948:	74 31                	je     c000e97b <unblockTask(ThreadControlBlock*)+0x4b>
c000e94a:	83 ec 0c             	sub    esp,0xc
c000e94d:	68 d0 36 02 c0       	push   0xc00236d0
c000e952:	e8 d5 fc 00 00       	call   c001e62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e957:	83 c4 10             	add    esp,0x10
c000e95a:	85 c0                	test   eax,eax
c000e95c:	75 17                	jne    c000e975 <unblockTask(ThreadControlBlock*)+0x45>
c000e95e:	eb 65                	jmp    c000e9c5 <unblockTask(ThreadControlBlock*)+0x95>
c000e960:	83 ec 08             	sub    esp,0x8
c000e963:	50                   	push   eax
c000e964:	68 d0 36 02 c0       	push   0xc00236d0
c000e969:	e8 c6 fc 00 00       	call   c001e634 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c000e96e:	83 c4 10             	add    esp,0x10
c000e971:	85 c0                	test   eax,eax
c000e973:	74 50                	je     c000e9c5 <unblockTask(ThreadControlBlock*)+0x95>
c000e975:	39 c3                	cmp    ebx,eax
c000e977:	75 e7                	jne    c000e960 <unblockTask(ThreadControlBlock*)+0x30>
c000e979:	eb 1c                	jmp    c000e997 <unblockTask(ThreadControlBlock*)+0x67>
c000e97b:	83 ec 0c             	sub    esp,0xc
c000e97e:	68 dc 05 02 c0       	push   0xc00205dc
c000e983:	e8 e2 e2 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c000e988:	c7 04 24 68 05 02 c0 	mov    DWORD PTR [esp],0xc0020568
c000e98f:	e8 d6 e2 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c000e994:	83 c4 10             	add    esp,0x10
c000e997:	83 c4 08             	add    esp,0x8
c000e99a:	5b                   	pop    ebx
c000e99b:	e9 6e f7 ff ff       	jmp    c000e10e <unlockScheduler()>
c000e9a0:	83 ec 0c             	sub    esp,0xc
c000e9a3:	68 20 05 02 c0       	push   0xc0020520
c000e9a8:	e8 bd e2 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c000e9ad:	c7 04 24 68 05 02 c0 	mov    DWORD PTR [esp],0xc0020568
c000e9b4:	e8 b1 e2 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c000e9b9:	83 c4 10             	add    esp,0x10
c000e9bc:	83 c4 08             	add    esp,0x8
c000e9bf:	5b                   	pop    ebx
c000e9c0:	e9 49 f7 ff ff       	jmp    c000e10e <unlockScheduler()>
c000e9c5:	83 ec 08             	sub    esp,0x8
c000e9c8:	53                   	push   ebx
c000e9c9:	68 d0 36 02 c0       	push   0xc00236d0
c000e9ce:	e8 bb fa 00 00       	call   c001e48e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	83 c4 08             	add    esp,0x8
c000e9d9:	5b                   	pop    ebx
c000e9da:	e9 2f f7 ff ff       	jmp    c000e10e <unlockScheduler()>

c000e9df <cleanupTerminatedTask(ThreadControlBlock*)>:
c000e9df:	55                   	push   ebp
c000e9e0:	57                   	push   edi
c000e9e1:	56                   	push   esi
c000e9e2:	53                   	push   ebx
c000e9e3:	83 ec 1c             	sub    esp,0x1c
c000e9e6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e9ea:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000e9ed:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c000e9f3:	85 c9                	test   ecx,ecx
c000e9f5:	7e 20                	jle    c000ea17 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c000e9f7:	31 f6                	xor    esi,esi
c000e9f9:	83 ec 0c             	sub    esp,0xc
c000e9fc:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c000ea03:	46                   	inc    esi
c000ea04:	e8 6c e8 ff ff       	call   c000d275 <free>
c000ea09:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ea0c:	83 c4 10             	add    esp,0x10
c000ea0f:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c000ea15:	7f e2                	jg     c000e9f9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c000ea17:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000ea21:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000ea26:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c000ea29:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000ea2c:	d3 c0                	rol    eax,cl
c000ea2e:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c000ea35:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000ea38:	89 f7                	mov    edi,esi
c000ea3a:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c000ea42:	0f 85 4f 01 00 00    	jne    c000eb97 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c000ea48:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000ea4e:	85 c0                	test   eax,eax
c000ea50:	0f 84 aa 00 00 00    	je     c000eb00 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c000ea56:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c000ea59:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ea5d:	31 c9                	xor    ecx,ecx
c000ea5f:	eb 10                	jmp    c000ea71 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c000ea61:	41                   	inc    ecx
c000ea62:	83 f9 10             	cmp    ecx,0x10
c000ea65:	0f 84 95 00 00 00    	je     c000eb00 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c000ea6b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000ea71:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c000ea78:	d3 fa                	sar    edx,cl
c000ea7a:	83 e2 01             	and    edx,0x1
c000ea7d:	74 e2                	je     c000ea61 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ea7f:	8d 14 09             	lea    edx,[ecx+ecx*1]
c000ea82:	01 ca                	add    edx,ecx
c000ea84:	89 d5                	mov    ebp,edx
c000ea86:	c1 e5 05             	shl    ebp,0x5
c000ea89:	01 ea                	add    edx,ebp
c000ea8b:	01 d0                	add    eax,edx
c000ea8d:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c000ea93:	83 fd 07             	cmp    ebp,0x7
c000ea96:	75 c9                	jne    c000ea61 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ea98:	05 40 02 00 00       	add    eax,0x240
c000ea9d:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c000eaa0:	83 fd ff             	cmp    ebp,0xffffffff
c000eaa3:	0f 8c 01 01 00 00    	jl     c000ebaa <cleanupTerminatedTask(ThreadControlBlock*)+0x1cb>
c000eaa9:	0f 84 b2 01 00 00    	je     c000ec61 <cleanupTerminatedTask(ThreadControlBlock*)+0x282>
c000eaaf:	85 ed                	test   ebp,ebp
c000eab1:	0f 84 99 01 00 00    	je     c000ec50 <cleanupTerminatedTask(ThreadControlBlock*)+0x271>
c000eab7:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c000eab9:	75 a6                	jne    c000ea61 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000eabb:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000eac1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000eac5:	01 d0                	add    eax,edx
c000eac7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000eacb:	83 ec 0c             	sub    esp,0xc
c000eace:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c000ead4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ead7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000eadd:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c000eae4:	50                   	push   eax
c000eae5:	e8 46 fe ff ff       	call   c000e930 <unblockTask(ThreadControlBlock*)>
c000eaea:	83 c4 10             	add    esp,0x10
c000eaed:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000eaf0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eaf4:	89 f7                	mov    edi,esi
c000eaf6:	41                   	inc    ecx
c000eaf7:	83 f9 10             	cmp    ecx,0x10
c000eafa:	0f 85 6b ff ff ff    	jne    c000ea6b <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c000eb00:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c000eb06:	85 c0                	test   eax,eax
c000eb08:	74 5d                	je     c000eb67 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c000eb0a:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c000eb10:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c000eb16:	74 4f                	je     c000eb67 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c000eb18:	83 ec 0c             	sub    esp,0xc
c000eb1b:	68 d0 36 02 c0       	push   0xc00236d0
c000eb20:	e8 07 fb 00 00       	call   c001e62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000eb25:	c7 04 24 d0 36 02 c0 	mov    DWORD PTR [esp],0xc00236d0
c000eb2c:	89 c7                	mov    edi,eax
c000eb2e:	e8 2f fa 00 00       	call   c001e562 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000eb33:	83 c4 10             	add    esp,0x10
c000eb36:	84 c0                	test   al,al
c000eb38:	0f 84 dd 00 00 00    	je     c000ec1b <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c000eb3e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000eb41:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000eb47:	85 d2                	test   edx,edx
c000eb49:	74 0f                	je     c000eb5a <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c000eb4b:	83 ec 0c             	sub    esp,0xc
c000eb4e:	8b 02                	mov    eax,DWORD PTR [edx]
c000eb50:	52                   	push   edx
c000eb51:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000eb54:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000eb57:	83 c4 10             	add    esp,0x10
c000eb5a:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c000eb64:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000eb67:	8b b7 32 05 00 00    	mov    esi,DWORD PTR [edi+0x532]
c000eb6d:	85 f6                	test   esi,esi
c000eb6f:	74 16                	je     c000eb87 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c000eb71:	83 ec 0c             	sub    esp,0xc
c000eb74:	56                   	push   esi
c000eb75:	e8 e4 29 00 00       	call   c001155e <VAS::~VAS()>
c000eb7a:	58                   	pop    eax
c000eb7b:	5a                   	pop    edx
c000eb7c:	6a 10                	push   0x10
c000eb7e:	56                   	push   esi
c000eb7f:	e8 af 36 00 00       	call   c0012233 <operator delete(void*, unsigned long)>
c000eb84:	83 c4 10             	add    esp,0x10
c000eb87:	83 ec 0c             	sub    esp,0xc
c000eb8a:	68 03 04 02 c0       	push   0xc0020403
c000eb8f:	e8 d6 e0 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c000eb94:	83 c4 10             	add    esp,0x10
c000eb97:	83 ec 08             	sub    esp,0x8
c000eb9a:	6a 63                	push   0x63
c000eb9c:	53                   	push   ebx
c000eb9d:	e8 91 36 00 00       	call   c0012233 <operator delete(void*, unsigned long)>
c000eba2:	83 c4 2c             	add    esp,0x2c
c000eba5:	5b                   	pop    ebx
c000eba6:	5e                   	pop    esi
c000eba7:	5f                   	pop    edi
c000eba8:	5d                   	pop    ebp
c000eba9:	c3                   	ret    
c000ebaa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ebae:	83 ec 0c             	sub    esp,0xc
c000ebb1:	68 20 06 02 c0       	push   0xc0020620
c000ebb6:	e8 cd e1 ff ff       	call   c000cd88 <panic(char const*)>
c000ebbb:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000ebbe:	83 c4 10             	add    esp,0x10
c000ebc1:	89 f7                	mov    edi,esi
c000ebc3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ebc7:	e9 95 fe ff ff       	jmp    c000ea61 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ebcc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000ebd2:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c000ebd8:	75 1c                	jne    c000ebf6 <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000ebda:	83 ec 0c             	sub    esp,0xc
c000ebdd:	68 88 06 02 c0       	push   0xc0020688
c000ebe2:	e8 83 e0 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c000ebe7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000ebee:	e8 18 fb ff ff       	call   c000e70b <blockTask(TaskState)>
c000ebf3:	83 c4 10             	add    esp,0x10
c000ebf6:	83 ec 08             	sub    esp,0x8
c000ebf9:	56                   	push   esi
c000ebfa:	68 d0 36 02 c0       	push   0xc00236d0
c000ebff:	e8 8a f8 00 00       	call   c001e48e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000ec04:	c7 04 24 d0 36 02 c0 	mov    DWORD PTR [esp],0xc00236d0
c000ec0b:	e8 1c fa 00 00       	call   c001e62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ec10:	83 c4 10             	add    esp,0x10
c000ec13:	39 f8                	cmp    eax,edi
c000ec15:	0f 84 23 ff ff ff    	je     c000eb3e <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c000ec1b:	83 ec 0c             	sub    esp,0xc
c000ec1e:	68 d0 36 02 c0       	push   0xc00236d0
c000ec23:	e8 04 fa 00 00       	call   c001e62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ec28:	c7 04 24 d0 36 02 c0 	mov    DWORD PTR [esp],0xc00236d0
c000ec2f:	89 c6                	mov    esi,eax
c000ec31:	e8 48 f9 00 00       	call   c001e57e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000ec36:	83 c4 10             	add    esp,0x10
c000ec39:	39 f3                	cmp    ebx,esi
c000ec3b:	74 b9                	je     c000ebf6 <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000ec3d:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c000ec40:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ec43:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c000ec49:	75 ab                	jne    c000ebf6 <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000ec4b:	e9 7c ff ff ff       	jmp    c000ebcc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ed>
c000ec50:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ec54:	83 ec 0c             	sub    esp,0xc
c000ec57:	68 54 06 02 c0       	push   0xc0020654
c000ec5c:	e9 55 ff ff ff       	jmp    c000ebb6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d7>
c000ec61:	8b 36                	mov    esi,DWORD PTR [esi]
c000ec63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ec67:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c000ec6a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ec6d:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c000ec73:	01 d7                	add    edi,edx
c000ec75:	89 f8                	mov    eax,edi
c000ec77:	e9 4b fe ff ff       	jmp    c000eac7 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c000ec7c <cleanerTaskFunction(void*)>:
c000ec7c:	53                   	push   ebx
c000ec7d:	83 ec 08             	sub    esp,0x8
c000ec80:	e8 89 f4 ff ff       	call   c000e10e <unlockScheduler()>
c000ec85:	e8 82 f4 ff ff       	call   c000e10c <lockScheduler()>
c000ec8a:	80 3d 94 36 02 c0 00 	cmp    BYTE PTR ds:0xc0023694,0x0
c000ec91:	75 72                	jne    c000ed05 <cleanerTaskFunction(void*)+0x89>
c000ec93:	83 ec 0c             	sub    esp,0xc
c000ec96:	6a 02                	push   0x2
c000ec98:	e8 2c fa ff ff       	call   c000e6c9 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c000ec9d:	83 c4 10             	add    esp,0x10
c000eca0:	c6 05 94 36 02 c0 00 	mov    BYTE PTR ds:0xc0023694,0x0
c000eca7:	e8 87 f4 ff ff       	call   c000e133 <lockStuff()>
c000ecac:	e8 5b f4 ff ff       	call   c000e10c <lockScheduler()>
c000ecb1:	83 ec 0c             	sub    esp,0xc
c000ecb4:	68 b8 36 02 c0       	push   0xc00236b8
c000ecb9:	e8 a4 f8 00 00       	call   c001e562 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000ecbe:	83 c4 10             	add    esp,0x10
c000ecc1:	84 c0                	test   al,al
c000ecc3:	75 28                	jne    c000eced <cleanerTaskFunction(void*)+0x71>
c000ecc5:	83 ec 0c             	sub    esp,0xc
c000ecc8:	68 b8 36 02 c0       	push   0xc00236b8
c000eccd:	e8 5a f9 00 00       	call   c001e62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ecd2:	c7 04 24 b8 36 02 c0 	mov    DWORD PTR [esp],0xc00236b8
c000ecd9:	89 c3                	mov    ebx,eax
c000ecdb:	e8 9e f8 00 00       	call   c001e57e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000ece0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ece3:	e8 f7 fc ff ff       	call   c000e9df <cleanupTerminatedTask(ThreadControlBlock*)>
c000ece8:	83 c4 10             	add    esp,0x10
c000eceb:	eb c4                	jmp    c000ecb1 <cleanerTaskFunction(void*)+0x35>
c000eced:	e8 1c f4 ff ff       	call   c000e10e <unlockScheduler()>
c000ecf2:	e8 ce f7 ff ff       	call   c000e4c5 <unlockStuff()>
c000ecf7:	e8 10 f4 ff ff       	call   c000e10c <lockScheduler()>
c000ecfc:	80 3d 94 36 02 c0 00 	cmp    BYTE PTR ds:0xc0023694,0x0
c000ed03:	74 8e                	je     c000ec93 <cleanerTaskFunction(void*)+0x17>
c000ed05:	e8 04 f4 ff ff       	call   c000e10e <unlockScheduler()>
c000ed0a:	eb 94                	jmp    c000eca0 <cleanerTaskFunction(void*)+0x24>

c000ed0c <terminateTask(int)>:
c000ed0c:	83 ec 0c             	sub    esp,0xc
c000ed0f:	e8 1f f4 ff ff       	call   c000e133 <lockStuff()>
c000ed14:	e8 f3 f3 ff ff       	call   c000e10c <lockScheduler()>
c000ed19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ed1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ed22:	83 ec 08             	sub    esp,0x8
c000ed25:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c000ed28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ed2d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000ed30:	50                   	push   eax
c000ed31:	68 b8 36 02 c0       	push   0xc00236b8
c000ed36:	e8 53 f7 00 00       	call   c001e48e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000ed3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ed40:	83 c4 10             	add    esp,0x10
c000ed43:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c000ed4a:	a1 90 36 02 c0       	mov    eax,ds:0xc0023690
c000ed4f:	85 c0                	test   eax,eax
c000ed51:	74 2e                	je     c000ed81 <terminateTask(int)+0x75>
c000ed53:	83 ec 0c             	sub    esp,0xc
c000ed56:	c6 05 94 36 02 c0 01 	mov    BYTE PTR ds:0xc0023694,0x1
c000ed5d:	50                   	push   eax
c000ed5e:	e8 cd fb ff ff       	call   c000e930 <unblockTask(ThreadControlBlock*)>
c000ed63:	83 c4 10             	add    esp,0x10
c000ed66:	e8 a3 f3 ff ff       	call   c000e10e <unlockScheduler()>
c000ed6b:	e8 55 f7 ff ff       	call   c000e4c5 <unlockStuff()>
c000ed70:	e8 97 f3 ff ff       	call   c000e10c <lockScheduler()>
c000ed75:	e8 c6 f6 ff ff       	call   c000e440 <schedule()>
c000ed7a:	e8 8f f3 ff ff       	call   c000e10e <unlockScheduler()>
c000ed7f:	eb ef                	jmp    c000ed70 <terminateTask(int)+0x64>
c000ed81:	83 ec 0c             	sub    esp,0xc
c000ed84:	68 11 04 02 c0       	push   0xc0020411
c000ed89:	e8 dc de ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c000ed8e:	83 c4 10             	add    esp,0x10
c000ed91:	eb d3                	jmp    c000ed66 <terminateTask(int)+0x5a>
c000ed93:	90                   	nop

c000ed94 <Semaphore::release()>:
c000ed94:	83 ec 0c             	sub    esp,0xc
c000ed97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed9b:	e8 93 f3 ff ff       	call   c000e133 <lockStuff()>
c000eda0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000eda3:	85 d2                	test   edx,edx
c000eda5:	74 1a                	je     c000edc1 <Semaphore::release()+0x2d>
c000eda7:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c000edaa:	83 ec 0c             	sub    esp,0xc
c000edad:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000edb0:	52                   	push   edx
c000edb1:	e8 7a fb ff ff       	call   c000e930 <unblockTask(ThreadControlBlock*)>
c000edb6:	83 c4 10             	add    esp,0x10
c000edb9:	83 c4 0c             	add    esp,0xc
c000edbc:	e9 04 f7 ff ff       	jmp    c000e4c5 <unlockStuff()>
c000edc1:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c000edc4:	83 c4 0c             	add    esp,0xc
c000edc7:	e9 f9 f6 ff ff       	jmp    c000e4c5 <unlockStuff()>

c000edcc <__static_initialization_and_destruction_0(int, int)>:
c000edcc:	83 ec 0c             	sub    esp,0xc
c000edcf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000edd4:	0f 85 88 00 00 00    	jne    c000ee62 <__static_initialization_and_destruction_0(int, int)+0x96>
c000edda:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000ede2:	75 7e                	jne    c000ee62 <__static_initialization_and_destruction_0(int, int)+0x96>
c000ede4:	83 ec 0c             	sub    esp,0xc
c000ede7:	68 d0 36 02 c0       	push   0xc00236d0
c000edec:	e8 45 f6 00 00       	call   c001e436 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000edf1:	83 c4 10             	add    esp,0x10
c000edf4:	83 ec 04             	sub    esp,0x4
c000edf7:	68 84 22 02 c0       	push   0xc0022284
c000edfc:	68 d0 36 02 c0       	push   0xc00236d0
c000ee01:	68 f6 e3 01 c0       	push   0xc001e3f6
c000ee06:	e8 a4 33 00 00       	call   c00121af <__cxa_atexit>
c000ee0b:	83 c4 10             	add    esp,0x10
c000ee0e:	83 ec 0c             	sub    esp,0xc
c000ee11:	68 c4 36 02 c0       	push   0xc00236c4
c000ee16:	e8 1b f6 00 00       	call   c001e436 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000ee1b:	83 c4 10             	add    esp,0x10
c000ee1e:	83 ec 04             	sub    esp,0x4
c000ee21:	68 84 22 02 c0       	push   0xc0022284
c000ee26:	68 c4 36 02 c0       	push   0xc00236c4
c000ee2b:	68 f6 e3 01 c0       	push   0xc001e3f6
c000ee30:	e8 7a 33 00 00       	call   c00121af <__cxa_atexit>
c000ee35:	83 c4 10             	add    esp,0x10
c000ee38:	83 ec 0c             	sub    esp,0xc
c000ee3b:	68 b8 36 02 c0       	push   0xc00236b8
c000ee40:	e8 f1 f5 00 00       	call   c001e436 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000ee45:	83 c4 10             	add    esp,0x10
c000ee48:	83 ec 04             	sub    esp,0x4
c000ee4b:	68 84 22 02 c0       	push   0xc0022284
c000ee50:	68 b8 36 02 c0       	push   0xc00236b8
c000ee55:	68 f6 e3 01 c0       	push   0xc001e3f6
c000ee5a:	e8 50 33 00 00       	call   c00121af <__cxa_atexit>
c000ee5f:	83 c4 10             	add    esp,0x10
c000ee62:	90                   	nop
c000ee63:	83 c4 0c             	add    esp,0xc
c000ee66:	c3                   	ret    

c000ee67 <_GLOBAL__sub_I_kernelProcess>:
c000ee67:	83 ec 0c             	sub    esp,0xc
c000ee6a:	83 ec 08             	sub    esp,0x8
c000ee6d:	68 ff ff 00 00       	push   0xffff
c000ee72:	6a 01                	push   0x1
c000ee74:	e8 53 ff ff ff       	call   c000edcc <__static_initialization_and_destruction_0(int, int)>
c000ee79:	83 c4 10             	add    esp,0x10
c000ee7c:	83 c4 0c             	add    esp,0xc
c000ee7f:	c3                   	ret    

c000ee80 <sysCallGetPID(regs*)>:
c000ee80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee85:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ee88:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee8a:	99                   	cdq    
c000ee8b:	c3                   	ret    

c000ee8c <sysCallSeekDir(regs*)>:
c000ee8c:	31 c0                	xor    eax,eax
c000ee8e:	31 d2                	xor    edx,edx
c000ee90:	c3                   	ret    

c000ee91 <sysCallTellDir(regs*)>:
c000ee91:	31 c0                	xor    eax,eax
c000ee93:	31 d2                	xor    edx,edx
c000ee95:	c3                   	ret    

c000ee96 <sysCallVerify(regs*)>:
c000ee96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee9a:	31 d2                	xor    edx,edx
c000ee9c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ee9f:	c3                   	ret    

c000eea0 <sysCallGetArgc(regs*)>:
c000eea0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eea5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eea8:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c000eeae:	99                   	cdq    
c000eeaf:	c3                   	ret    

c000eeb0 <sysFormatDisk(regs*)>:
c000eeb0:	56                   	push   esi
c000eeb1:	53                   	push   ebx
c000eeb2:	53                   	push   ebx
c000eeb3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eeb7:	8b 1d 40 39 02 c0    	mov    ebx,DWORD PTR ds:0xc0023940
c000eebd:	eb 25                	jmp    c000eee4 <sysFormatDisk(regs*)+0x34>
c000eebf:	83 ec 0c             	sub    esp,0xc
c000eec2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000eec5:	8b 13                	mov    edx,DWORD PTR [ebx]
c000eec7:	ff 76 28             	push   DWORD PTR [esi+0x28]
c000eeca:	ff 76 24             	push   DWORD PTR [esi+0x24]
c000eecd:	50                   	push   eax
c000eece:	ff 34 85 e0 3d 02 c0 	push   DWORD PTR [eax*4-0x3ffdc220]
c000eed5:	53                   	push   ebx
c000eed6:	ff 52 48             	call   DWORD PTR [edx+0x48]
c000eed9:	83 c4 20             	add    esp,0x20
c000eedc:	83 f8 08             	cmp    eax,0x8
c000eedf:	75 12                	jne    c000eef3 <sysFormatDisk(regs*)+0x43>
c000eee1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000eee4:	85 db                	test   ebx,ebx
c000eee6:	75 d7                	jne    c000eebf <sysFormatDisk(regs*)+0xf>
c000eee8:	59                   	pop    ecx
c000eee9:	b8 03 00 00 00       	mov    eax,0x3
c000eeee:	31 d2                	xor    edx,edx
c000eef0:	5b                   	pop    ebx
c000eef1:	5e                   	pop    esi
c000eef2:	c3                   	ret    
c000eef3:	85 c0                	test   eax,eax
c000eef5:	74 1b                	je     c000ef12 <sysFormatDisk(regs*)+0x62>
c000eef7:	83 f8 09             	cmp    eax,0x9
c000eefa:	74 0b                	je     c000ef07 <sysFormatDisk(regs*)+0x57>
c000eefc:	59                   	pop    ecx
c000eefd:	b8 02 00 00 00       	mov    eax,0x2
c000ef02:	31 d2                	xor    edx,edx
c000ef04:	5b                   	pop    ebx
c000ef05:	5e                   	pop    esi
c000ef06:	c3                   	ret    
c000ef07:	59                   	pop    ecx
c000ef08:	b8 01 00 00 00       	mov    eax,0x1
c000ef0d:	31 d2                	xor    edx,edx
c000ef0f:	5b                   	pop    ebx
c000ef10:	5e                   	pop    esi
c000ef11:	c3                   	ret    
c000ef12:	59                   	pop    ecx
c000ef13:	31 c0                	xor    eax,eax
c000ef15:	31 d2                	xor    edx,edx
c000ef17:	5b                   	pop    ebx
c000ef18:	5e                   	pop    esi
c000ef19:	c3                   	ret    

c000ef1a <sysSetDiskVolumeLabel(regs*)>:
c000ef1a:	56                   	push   esi
c000ef1b:	53                   	push   ebx
c000ef1c:	53                   	push   ebx
c000ef1d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ef21:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000ef24:	83 f8 19             	cmp    eax,0x19
c000ef27:	77 29                	ja     c000ef52 <sysSetDiskVolumeLabel(regs*)+0x38>
c000ef29:	8b 0c 85 e0 3d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdc220]
c000ef30:	85 c9                	test   ecx,ecx
c000ef32:	74 1e                	je     c000ef52 <sysSetDiskVolumeLabel(regs*)+0x38>
c000ef34:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000ef37:	85 d2                	test   edx,edx
c000ef39:	74 17                	je     c000ef52 <sysSetDiskVolumeLabel(regs*)+0x38>
c000ef3b:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c000ef41:	8b 33                	mov    esi,DWORD PTR [ebx]
c000ef43:	52                   	push   edx
c000ef44:	50                   	push   eax
c000ef45:	51                   	push   ecx
c000ef46:	53                   	push   ebx
c000ef47:	ff 56 58             	call   DWORD PTR [esi+0x58]
c000ef4a:	83 c4 10             	add    esp,0x10
c000ef4d:	99                   	cdq    
c000ef4e:	59                   	pop    ecx
c000ef4f:	5b                   	pop    ebx
c000ef50:	5e                   	pop    esi
c000ef51:	c3                   	ret    
c000ef52:	59                   	pop    ecx
c000ef53:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000ef58:	ba ff ff ff ff       	mov    edx,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <sysGetDiskVolumeLabel(regs*)>:
c000ef60:	57                   	push   edi
c000ef61:	56                   	push   esi
c000ef62:	53                   	push   ebx
c000ef63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef67:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000ef6a:	83 fa 19             	cmp    edx,0x19
c000ef6d:	77 34                	ja     c000efa3 <sysGetDiskVolumeLabel(regs*)+0x43>
c000ef6f:	8b 0c 95 e0 3d 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdc220]
c000ef76:	85 c9                	test   ecx,ecx
c000ef78:	74 29                	je     c000efa3 <sysGetDiskVolumeLabel(regs*)+0x43>
c000ef7a:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c000ef7d:	85 db                	test   ebx,ebx
c000ef7f:	74 22                	je     c000efa3 <sysGetDiskVolumeLabel(regs*)+0x43>
c000ef81:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ef84:	85 c0                	test   eax,eax
c000ef86:	74 1b                	je     c000efa3 <sysGetDiskVolumeLabel(regs*)+0x43>
c000ef88:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c000ef8e:	83 ec 0c             	sub    esp,0xc
c000ef91:	8b 3e                	mov    edi,DWORD PTR [esi]
c000ef93:	50                   	push   eax
c000ef94:	53                   	push   ebx
c000ef95:	52                   	push   edx
c000ef96:	51                   	push   ecx
c000ef97:	56                   	push   esi
c000ef98:	ff 57 54             	call   DWORD PTR [edi+0x54]
c000ef9b:	83 c4 20             	add    esp,0x20
c000ef9e:	99                   	cdq    
c000ef9f:	5b                   	pop    ebx
c000efa0:	5e                   	pop    esi
c000efa1:	5f                   	pop    edi
c000efa2:	c3                   	ret    
c000efa3:	5b                   	pop    ebx
c000efa4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000efa9:	ba ff ff ff ff       	mov    edx,0xffffffff
c000efae:	5e                   	pop    esi
c000efaf:	5f                   	pop    edi
c000efb0:	c3                   	ret    

c000efb1 <sysShutdown(regs*)>:
c000efb1:	83 ec 0c             	sub    esp,0xc
c000efb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efb8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000efbb:	85 c0                	test   eax,eax
c000efbd:	74 24                	je     c000efe3 <sysShutdown(regs*)+0x32>
c000efbf:	48                   	dec    eax
c000efc0:	74 0e                	je     c000efd0 <sysShutdown(regs*)+0x1f>
c000efc2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efc7:	ba ff ff ff ff       	mov    edx,0xffffffff
c000efcc:	83 c4 0c             	add    esp,0xc
c000efcf:	c3                   	ret    
c000efd0:	a1 60 3e 02 c0       	mov    eax,ds:0xc0023e60
c000efd5:	85 c0                	test   eax,eax
c000efd7:	74 02                	je     c000efdb <sysShutdown(regs*)+0x2a>
c000efd9:	ff d0                	call   eax
c000efdb:	31 c0                	xor    eax,eax
c000efdd:	31 d2                	xor    edx,edx
c000efdf:	83 c4 0c             	add    esp,0xc
c000efe2:	c3                   	ret    
c000efe3:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c000efe8:	8b 10                	mov    edx,DWORD PTR [eax]
c000efea:	6a 00                	push   0x0
c000efec:	6a 00                	push   0x0
c000efee:	6a 00                	push   0x0
c000eff0:	50                   	push   eax
c000eff1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000eff4:	83 c4 10             	add    esp,0x10
c000eff7:	eb c9                	jmp    c000efc2 <sysShutdown(regs*)+0x11>

c000eff9 <sysCallGetCwd(regs*)>:
c000eff9:	83 ec 10             	sub    esp,0x10
c000effc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f000:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000f003:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f006:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f00b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f00e:	e8 b0 39 00 00       	call   c00129c3 <getcwd(Process*, char*, int)>
c000f013:	83 c4 1c             	add    esp,0x1c
c000f016:	99                   	cdq    
c000f017:	c3                   	ret    

c000f018 <sysCallSetCwd(regs*)>:
c000f018:	83 ec 14             	sub    esp,0x14
c000f01b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f01f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f022:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f027:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f02a:	e8 be 39 00 00       	call   c00129ed <setcwd(Process*, char*)>
c000f02f:	83 c4 1c             	add    esp,0x1c
c000f032:	99                   	cdq    
c000f033:	c3                   	ret    

c000f034 <sysCallRealpath(regs*)>:
c000f034:	83 ec 0c             	sub    esp,0xc
c000f037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f03b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000f03e:	85 d2                	test   edx,edx
c000f040:	74 07                	je     c000f049 <sysCallRealpath(regs*)+0x15>
c000f042:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f045:	85 c0                	test   eax,eax
c000f047:	75 0b                	jne    c000f054 <sysCallRealpath(regs*)+0x20>
c000f049:	b8 01 00 00 00       	mov    eax,0x1
c000f04e:	31 d2                	xor    edx,edx
c000f050:	83 c4 0c             	add    esp,0xc
c000f053:	c3                   	ret    
c000f054:	51                   	push   ecx
c000f055:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000f05b:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000f05e:	81 c1 0c 01 00 00    	add    ecx,0x10c
c000f064:	51                   	push   ecx
c000f065:	52                   	push   edx
c000f066:	50                   	push   eax
c000f067:	e8 3c 34 00 00       	call   c00124a8 <standardiseFiles(char*, char const*, char const*)>
c000f06c:	83 c4 10             	add    esp,0x10
c000f06f:	31 c0                	xor    eax,eax
c000f071:	31 d2                	xor    edx,edx
c000f073:	83 c4 0c             	add    esp,0xc
c000f076:	c3                   	ret    

c000f077 <sysCallOpen(regs*)>:
c000f077:	56                   	push   esi
c000f078:	53                   	push   ebx
c000f079:	81 ec 04 01 00 00    	sub    esp,0x104
c000f07f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c000f086:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f089:	85 d2                	test   edx,edx
c000f08b:	0f 84 c3 00 00 00    	je     c000f154 <sysCallOpen(regs*)+0xdd>
c000f091:	50                   	push   eax
c000f092:	68 57 07 02 c0       	push   0xc0020757
c000f097:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f09a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f09e:	56                   	push   esi
c000f09f:	e8 04 34 00 00       	call   c00124a8 <standardiseFiles(char*, char const*, char const*)>
c000f0a4:	89 34 24             	mov    DWORD PTR [esp],esi
c000f0a7:	e8 79 15 ff ff       	call   c0000625 <strlen>
c000f0ac:	83 c4 10             	add    esp,0x10
c000f0af:	48                   	dec    eax
c000f0b0:	74 1d                	je     c000f0cf <sysCallOpen(regs*)+0x58>
c000f0b2:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c000f0b5:	eb 0f                	jmp    c000f0c6 <sysCallOpen(regs*)+0x4f>
c000f0b7:	80 fa 3a             	cmp    dl,0x3a
c000f0ba:	74 0f                	je     c000f0cb <sysCallOpen(regs*)+0x54>
c000f0bc:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000f0c0:	48                   	dec    eax
c000f0c1:	74 0c                	je     c000f0cf <sysCallOpen(regs*)+0x58>
c000f0c3:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c000f0c6:	80 fa 2e             	cmp    dl,0x2e
c000f0c9:	75 ec                	jne    c000f0b7 <sysCallOpen(regs*)+0x40>
c000f0cb:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c000f0cf:	83 ec 0c             	sub    esp,0xc
c000f0d2:	68 14 01 00 00       	push   0x114
c000f0d7:	e8 48 31 00 00       	call   c0012224 <operator new(unsigned long)>
c000f0dc:	83 c4 0c             	add    esp,0xc
c000f0df:	89 c6                	mov    esi,eax
c000f0e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f0e6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f0e9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f0ec:	56                   	push   esi
c000f0ed:	e8 60 35 00 00       	call   c0012652 <File::File(char const*, Process*)>
c000f0f2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000f0f5:	83 c4 10             	add    esp,0x10
c000f0f8:	0f b6 d0             	movzx  edx,al
c000f0fb:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c000f0fe:	89 c2                	mov    edx,eax
c000f100:	83 e2 01             	and    edx,0x1
c000f103:	a8 02                	test   al,0x2
c000f105:	74 03                	je     c000f10a <sysCallOpen(regs*)+0x93>
c000f107:	83 ca 02             	or     edx,0x2
c000f10a:	a8 04                	test   al,0x4
c000f10c:	74 03                	je     c000f111 <sysCallOpen(regs*)+0x9a>
c000f10e:	83 ca 04             	or     edx,0x4
c000f111:	a8 08                	test   al,0x8
c000f113:	74 03                	je     c000f118 <sysCallOpen(regs*)+0xa1>
c000f115:	83 ca 0a             	or     edx,0xa
c000f118:	a8 10                	test   al,0x10
c000f11a:	74 03                	je     c000f11f <sysCallOpen(regs*)+0xa8>
c000f11c:	83 ca 12             	or     edx,0x12
c000f11f:	83 ec 08             	sub    esp,0x8
c000f122:	52                   	push   edx
c000f123:	56                   	push   esi
c000f124:	e8 8d 35 00 00       	call   c00126b6 <File::open(FileOpenMode)>
c000f129:	83 c4 10             	add    esp,0x10
c000f12c:	85 c0                	test   eax,eax
c000f12e:	75 24                	jne    c000f154 <sysCallOpen(regs*)+0xdd>
c000f130:	83 ec 0c             	sub    esp,0xc
c000f133:	56                   	push   esi
c000f134:	e8 0f 1d 00 00       	call   c0010e48 <UnixFile::getFileDescriptor()>
c000f139:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f13c:	83 c4 10             	add    esp,0x10
c000f13f:	89 02                	mov    DWORD PTR [edx],eax
c000f141:	c1 f8 1f             	sar    eax,0x1f
c000f144:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000f147:	81 c4 04 01 00 00    	add    esp,0x104
c000f14d:	31 c0                	xor    eax,eax
c000f14f:	31 d2                	xor    edx,edx
c000f151:	5b                   	pop    ebx
c000f152:	5e                   	pop    esi
c000f153:	c3                   	ret    
c000f154:	81 c4 04 01 00 00    	add    esp,0x104
c000f15a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f15f:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f164:	5b                   	pop    ebx
c000f165:	5e                   	pop    esi
c000f166:	c3                   	ret    

c000f167 <sysCallReadDir(regs*)>:
c000f167:	53                   	push   ebx
c000f168:	83 ec 18             	sub    esp,0x18
c000f16b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f16f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000f172:	83 f8 02             	cmp    eax,0x2
c000f175:	77 0c                	ja     c000f183 <sysCallReadDir(regs*)+0x1c>
c000f177:	b8 01 00 00 00       	mov    eax,0x1
c000f17c:	31 d2                	xor    edx,edx
c000f17e:	83 c4 18             	add    esp,0x18
c000f181:	5b                   	pop    ebx
c000f182:	c3                   	ret    
c000f183:	83 ec 0c             	sub    esp,0xc
c000f186:	50                   	push   eax
c000f187:	e8 21 1e 00 00       	call   c0010fad <getFromFileDescriptor(int)>
c000f18c:	83 c4 10             	add    esp,0x10
c000f18f:	85 c0                	test   eax,eax
c000f191:	74 37                	je     c000f1ca <sysCallReadDir(regs*)+0x63>
c000f193:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f19b:	83 ec 0c             	sub    esp,0xc
c000f19e:	8b 10                	mov    edx,DWORD PTR [eax]
c000f1a0:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000f1a4:	51                   	push   ecx
c000f1a5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f1a8:	6a 00                	push   0x0
c000f1aa:	68 10 01 00 00       	push   0x110
c000f1af:	50                   	push   eax
c000f1b0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000f1b3:	83 c4 20             	add    esp,0x20
c000f1b6:	85 c0                	test   eax,eax
c000f1b8:	74 0c                	je     c000f1c6 <sysCallReadDir(regs*)+0x5f>
c000f1ba:	83 f8 07             	cmp    eax,0x7
c000f1bd:	74 b8                	je     c000f177 <sysCallReadDir(regs*)+0x10>
c000f1bf:	b8 02 00 00 00       	mov    eax,0x2
c000f1c4:	eb b6                	jmp    c000f17c <sysCallReadDir(regs*)+0x15>
c000f1c6:	31 c0                	xor    eax,eax
c000f1c8:	eb b2                	jmp    c000f17c <sysCallReadDir(regs*)+0x15>
c000f1ca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f1cf:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f1d4:	eb a8                	jmp    c000f17e <sysCallReadDir(regs*)+0x17>

c000f1d6 <sysCallIsATTY(regs*)>:
c000f1d6:	83 ec 0c             	sub    esp,0xc
c000f1d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1dd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f1e0:	83 f8 02             	cmp    eax,0x2
c000f1e3:	77 26                	ja     c000f20b <sysCallIsATTY(regs*)+0x35>
c000f1e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f1ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f1ed:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000f1f3:	85 c0                	test   eax,eax
c000f1f5:	74 24                	je     c000f21b <sysCallIsATTY(regs*)+0x45>
c000f1f7:	83 ec 0c             	sub    esp,0xc
c000f1fa:	8b 10                	mov    edx,DWORD PTR [eax]
c000f1fc:	50                   	push   eax
c000f1fd:	ff 12                	call   DWORD PTR [edx]
c000f1ff:	31 d2                	xor    edx,edx
c000f201:	0f b6 c0             	movzx  eax,al
c000f204:	83 c4 10             	add    esp,0x10
c000f207:	83 c4 0c             	add    esp,0xc
c000f20a:	c3                   	ret    
c000f20b:	83 ec 0c             	sub    esp,0xc
c000f20e:	50                   	push   eax
c000f20f:	e8 99 1d 00 00       	call   c0010fad <getFromFileDescriptor(int)>
c000f214:	83 c4 10             	add    esp,0x10
c000f217:	85 c0                	test   eax,eax
c000f219:	75 dc                	jne    c000f1f7 <sysCallIsATTY(regs*)+0x21>
c000f21b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f220:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f225:	83 c4 0c             	add    esp,0xc
c000f228:	c3                   	ret    

c000f229 <sysCallSeek(regs*)>:
c000f229:	53                   	push   ebx
c000f22a:	83 ec 08             	sub    esp,0x8
c000f22d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f231:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f234:	83 f8 02             	cmp    eax,0x2
c000f237:	76 32                	jbe    c000f26b <sysCallSeek(regs*)+0x42>
c000f239:	83 ec 0c             	sub    esp,0xc
c000f23c:	50                   	push   eax
c000f23d:	e8 6b 1d 00 00       	call   c0010fad <getFromFileDescriptor(int)>
c000f242:	83 c4 0c             	add    esp,0xc
c000f245:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c000f248:	31 db                	xor    ebx,ebx
c000f24a:	53                   	push   ebx
c000f24b:	51                   	push   ecx
c000f24c:	50                   	push   eax
c000f24d:	e8 22 35 00 00       	call   c0012774 <File::seek(unsigned long long)>
c000f252:	83 c4 10             	add    esp,0x10
c000f255:	85 c0                	test   eax,eax
c000f257:	0f 95 c0             	setne  al
c000f25a:	31 d2                	xor    edx,edx
c000f25c:	0f b6 c0             	movzx  eax,al
c000f25f:	f7 d8                	neg    eax
c000f261:	83 d2 00             	adc    edx,0x0
c000f264:	83 c4 08             	add    esp,0x8
c000f267:	f7 da                	neg    edx
c000f269:	5b                   	pop    ebx
c000f26a:	c3                   	ret    
c000f26b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f270:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f275:	83 c4 08             	add    esp,0x8
c000f278:	5b                   	pop    ebx
c000f279:	c3                   	ret    

c000f27a <sysCallTell(regs*)>:
c000f27a:	53                   	push   ebx
c000f27b:	83 ec 08             	sub    esp,0x8
c000f27e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f282:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f285:	83 f8 02             	cmp    eax,0x2
c000f288:	76 2d                	jbe    c000f2b7 <sysCallTell(regs*)+0x3d>
c000f28a:	83 ec 0c             	sub    esp,0xc
c000f28d:	50                   	push   eax
c000f28e:	e8 1a 1d 00 00       	call   c0010fad <getFromFileDescriptor(int)>
c000f293:	5a                   	pop    edx
c000f294:	59                   	pop    ecx
c000f295:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f298:	50                   	push   eax
c000f299:	e8 2c 35 00 00       	call   c00127ca <File::tell(unsigned long long*)>
c000f29e:	83 c4 10             	add    esp,0x10
c000f2a1:	85 c0                	test   eax,eax
c000f2a3:	0f 95 c0             	setne  al
c000f2a6:	31 d2                	xor    edx,edx
c000f2a8:	0f b6 c0             	movzx  eax,al
c000f2ab:	f7 d8                	neg    eax
c000f2ad:	83 d2 00             	adc    edx,0x0
c000f2b0:	83 c4 08             	add    esp,0x8
c000f2b3:	f7 da                	neg    edx
c000f2b5:	5b                   	pop    ebx
c000f2b6:	c3                   	ret    
c000f2b7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f2bc:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f2c1:	83 c4 08             	add    esp,0x8
c000f2c4:	5b                   	pop    ebx
c000f2c5:	c3                   	ret    

c000f2c6 <sysCallSizeFromFilename(regs*)>:
c000f2c6:	57                   	push   edi
c000f2c7:	56                   	push   esi
c000f2c8:	53                   	push   ebx
c000f2c9:	83 ec 10             	sub    esp,0x10
c000f2cc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000f2d0:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c000f2d3:	83 ff 02             	cmp    edi,0x2
c000f2d6:	76 56                	jbe    c000f32e <sysCallSizeFromFilename(regs*)+0x68>
c000f2d8:	83 ec 0c             	sub    esp,0xc
c000f2db:	68 14 01 00 00       	push   0x114
c000f2e0:	e8 3f 2f 00 00       	call   c0012224 <operator new(unsigned long)>
c000f2e5:	83 c4 0c             	add    esp,0xc
c000f2e8:	89 c3                	mov    ebx,eax
c000f2ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f2ef:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f2f2:	57                   	push   edi
c000f2f3:	53                   	push   ebx
c000f2f4:	e8 59 33 00 00       	call   c0012652 <File::File(char const*, Process*)>
c000f2f9:	83 c4 0c             	add    esp,0xc
c000f2fc:	8d 44 24 13          	lea    eax,[esp+0x13]
c000f300:	50                   	push   eax
c000f301:	ff 76 28             	push   DWORD PTR [esi+0x28]
c000f304:	53                   	push   ebx
c000f305:	e8 58 36 00 00       	call   c0012962 <File::stat(unsigned long long*, bool*)>
c000f30a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f30d:	89 c6                	mov    esi,eax
c000f30f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f311:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f314:	83 c4 10             	add    esp,0x10
c000f317:	31 c0                	xor    eax,eax
c000f319:	85 f6                	test   esi,esi
c000f31b:	0f 95 c0             	setne  al
c000f31e:	31 d2                	xor    edx,edx
c000f320:	f7 d8                	neg    eax
c000f322:	83 d2 00             	adc    edx,0x0
c000f325:	83 c4 10             	add    esp,0x10
c000f328:	f7 da                	neg    edx
c000f32a:	5b                   	pop    ebx
c000f32b:	5e                   	pop    esi
c000f32c:	5f                   	pop    edi
c000f32d:	c3                   	ret    
c000f32e:	83 c4 10             	add    esp,0x10
c000f331:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f336:	5b                   	pop    ebx
c000f337:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f33c:	5e                   	pop    esi
c000f33d:	5f                   	pop    edi
c000f33e:	c3                   	ret    

c000f33f <sysCallSize(regs*)>:
c000f33f:	53                   	push   ebx
c000f340:	83 ec 18             	sub    esp,0x18
c000f343:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f347:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f34a:	83 f8 02             	cmp    eax,0x2
c000f34d:	76 33                	jbe    c000f382 <sysCallSize(regs*)+0x43>
c000f34f:	83 ec 0c             	sub    esp,0xc
c000f352:	50                   	push   eax
c000f353:	e8 55 1c 00 00       	call   c0010fad <getFromFileDescriptor(int)>
c000f358:	83 c4 0c             	add    esp,0xc
c000f35b:	8d 54 24 13          	lea    edx,[esp+0x13]
c000f35f:	52                   	push   edx
c000f360:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f363:	50                   	push   eax
c000f364:	e8 f9 35 00 00       	call   c0012962 <File::stat(unsigned long long*, bool*)>
c000f369:	83 c4 10             	add    esp,0x10
c000f36c:	85 c0                	test   eax,eax
c000f36e:	0f 95 c0             	setne  al
c000f371:	31 d2                	xor    edx,edx
c000f373:	0f b6 c0             	movzx  eax,al
c000f376:	f7 d8                	neg    eax
c000f378:	83 d2 00             	adc    edx,0x0
c000f37b:	83 c4 18             	add    esp,0x18
c000f37e:	f7 da                	neg    edx
c000f380:	5b                   	pop    ebx
c000f381:	c3                   	ret    
c000f382:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f387:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f38c:	83 c4 18             	add    esp,0x18
c000f38f:	5b                   	pop    ebx
c000f390:	c3                   	ret    

c000f391 <sysCallClose(regs*)>:
c000f391:	53                   	push   ebx
c000f392:	83 ec 08             	sub    esp,0x8
c000f395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f399:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f39c:	83 f8 02             	cmp    eax,0x2
c000f39f:	76 2f                	jbe    c000f3d0 <sysCallClose(regs*)+0x3f>
c000f3a1:	83 ec 0c             	sub    esp,0xc
c000f3a4:	50                   	push   eax
c000f3a5:	e8 03 1c 00 00       	call   c0010fad <getFromFileDescriptor(int)>
c000f3aa:	89 c3                	mov    ebx,eax
c000f3ac:	89 04 24             	mov    DWORD PTR [esp],eax
c000f3af:	e8 60 33 00 00       	call   c0012714 <File::close()>
c000f3b4:	83 c4 10             	add    esp,0x10
c000f3b7:	85 db                	test   ebx,ebx
c000f3b9:	74 0c                	je     c000f3c7 <sysCallClose(regs*)+0x36>
c000f3bb:	83 ec 0c             	sub    esp,0xc
c000f3be:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f3c0:	53                   	push   ebx
c000f3c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f3c4:	83 c4 10             	add    esp,0x10
c000f3c7:	31 c0                	xor    eax,eax
c000f3c9:	31 d2                	xor    edx,edx
c000f3cb:	83 c4 08             	add    esp,0x8
c000f3ce:	5b                   	pop    ebx
c000f3cf:	c3                   	ret    
c000f3d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f3d5:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f3da:	83 c4 08             	add    esp,0x8
c000f3dd:	5b                   	pop    ebx
c000f3de:	c3                   	ret    

c000f3df <sysCallOpenDir(regs*)>:
c000f3df:	56                   	push   esi
c000f3e0:	53                   	push   ebx
c000f3e1:	53                   	push   ebx
c000f3e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f3e6:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c000f3e9:	85 f6                	test   esi,esi
c000f3eb:	74 51                	je     c000f43e <sysCallOpenDir(regs*)+0x5f>
c000f3ed:	83 ec 0c             	sub    esp,0xc
c000f3f0:	68 14 01 00 00       	push   0x114
c000f3f5:	e8 2a 2e 00 00       	call   c0012224 <operator new(unsigned long)>
c000f3fa:	83 c4 0c             	add    esp,0xc
c000f3fd:	89 c6                	mov    esi,eax
c000f3ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f404:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f407:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f40a:	56                   	push   esi
c000f40b:	e8 04 37 00 00       	call   c0012b14 <Directory::Directory(char const*, Process*)>
c000f410:	89 34 24             	mov    DWORD PTR [esp],esi
c000f413:	e8 60 37 00 00       	call   c0012b78 <Directory::open()>
c000f418:	83 c4 10             	add    esp,0x10
c000f41b:	85 c0                	test   eax,eax
c000f41d:	75 1f                	jne    c000f43e <sysCallOpenDir(regs*)+0x5f>
c000f41f:	83 ec 0c             	sub    esp,0xc
c000f422:	56                   	push   esi
c000f423:	e8 20 1a 00 00       	call   c0010e48 <UnixFile::getFileDescriptor()>
c000f428:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f42b:	83 c4 10             	add    esp,0x10
c000f42e:	89 02                	mov    DWORD PTR [edx],eax
c000f430:	c1 f8 1f             	sar    eax,0x1f
c000f433:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000f436:	31 c0                	xor    eax,eax
c000f438:	59                   	pop    ecx
c000f439:	31 d2                	xor    edx,edx
c000f43b:	5b                   	pop    ebx
c000f43c:	5e                   	pop    esi
c000f43d:	c3                   	ret    
c000f43e:	59                   	pop    ecx
c000f43f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f444:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f449:	5b                   	pop    ebx
c000f44a:	5e                   	pop    esi
c000f44b:	c3                   	ret    

c000f44c <sysCallMakeDir(regs*)>:
c000f44c:	56                   	push   esi
c000f44d:	53                   	push   ebx
c000f44e:	83 ec 10             	sub    esp,0x10
c000f451:	68 14 01 00 00       	push   0x114
c000f456:	e8 c9 2d 00 00       	call   c0012224 <operator new(unsigned long)>
c000f45b:	83 c4 0c             	add    esp,0xc
c000f45e:	89 c3                	mov    ebx,eax
c000f460:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f465:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f468:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f46c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f46f:	53                   	push   ebx
c000f470:	e8 9f 36 00 00       	call   c0012b14 <Directory::Directory(char const*, Process*)>
c000f475:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f478:	e8 db 38 00 00       	call   c0012d58 <Directory::create()>
c000f47d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f480:	89 c6                	mov    esi,eax
c000f482:	e8 4d 37 00 00       	call   c0012bd4 <Directory::close()>
c000f487:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f489:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f48c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f48f:	31 c0                	xor    eax,eax
c000f491:	85 f6                	test   esi,esi
c000f493:	0f 95 c0             	setne  al
c000f496:	31 d2                	xor    edx,edx
c000f498:	f7 d8                	neg    eax
c000f49a:	83 d2 00             	adc    edx,0x0
c000f49d:	83 c4 14             	add    esp,0x14
c000f4a0:	f7 da                	neg    edx
c000f4a2:	5b                   	pop    ebx
c000f4a3:	5e                   	pop    esi
c000f4a4:	c3                   	ret    

c000f4a5 <sysCallCloseDir(regs*)>:
c000f4a5:	53                   	push   ebx
c000f4a6:	83 ec 08             	sub    esp,0x8
c000f4a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4ad:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f4b0:	83 f8 02             	cmp    eax,0x2
c000f4b3:	76 2f                	jbe    c000f4e4 <sysCallCloseDir(regs*)+0x3f>
c000f4b5:	83 ec 0c             	sub    esp,0xc
c000f4b8:	50                   	push   eax
c000f4b9:	e8 ef 1a 00 00       	call   c0010fad <getFromFileDescriptor(int)>
c000f4be:	89 c3                	mov    ebx,eax
c000f4c0:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4c3:	e8 0c 37 00 00       	call   c0012bd4 <Directory::close()>
c000f4c8:	83 c4 10             	add    esp,0x10
c000f4cb:	85 db                	test   ebx,ebx
c000f4cd:	74 0c                	je     c000f4db <sysCallCloseDir(regs*)+0x36>
c000f4cf:	83 ec 0c             	sub    esp,0xc
c000f4d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f4d4:	53                   	push   ebx
c000f4d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f4d8:	83 c4 10             	add    esp,0x10
c000f4db:	31 c0                	xor    eax,eax
c000f4dd:	31 d2                	xor    edx,edx
c000f4df:	83 c4 08             	add    esp,0x8
c000f4e2:	5b                   	pop    ebx
c000f4e3:	c3                   	ret    
c000f4e4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f4e9:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f4ee:	83 c4 08             	add    esp,0x8
c000f4f1:	5b                   	pop    ebx
c000f4f2:	c3                   	ret    

c000f4f3 <sysCallWait(regs*)>:
c000f4f3:	83 ec 10             	sub    esp,0x10
c000f4f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f4fa:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000f4fd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f500:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f503:	e8 24 f2 ff ff       	call   c000e72c <waitTask(int, int*, int)>
c000f508:	83 c4 1c             	add    esp,0x1c
c000f50b:	99                   	cdq    
c000f50c:	c3                   	ret    

c000f50d <sysCallFork(regs*)>:
c000f50d:	83 ec 18             	sub    esp,0x18
c000f510:	68 5b 07 02 c0       	push   0xc002075b
c000f515:	e8 50 d7 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c000f51a:	58                   	pop    eax
c000f51b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f51f:	e8 d6 ef ff ff       	call   c000e4fa <forkProcess(regs*)>
c000f524:	83 c4 1c             	add    esp,0x1c
c000f527:	99                   	cdq    
c000f528:	c3                   	ret    

c000f529 <sysCallExecve(regs*)>:
c000f529:	53                   	push   ebx
c000f52a:	81 ec 24 01 00 00    	sub    esp,0x124
c000f530:	8b 9c 24 2c 01 00 00 	mov    ebx,DWORD PTR [esp+0x12c]
c000f537:	68 69 07 02 c0       	push   0xc0020769
c000f53c:	e8 29 d7 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c000f541:	83 c4 0c             	add    esp,0xc
c000f544:	68 00 01 00 00       	push   0x100
c000f549:	8d 44 24 17          	lea    eax,[esp+0x17]
c000f54d:	50                   	push   eax
c000f54e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f553:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f556:	e8 68 34 00 00       	call   c00129c3 <getcwd(Process*, char*, int)>
c000f55b:	83 c4 0c             	add    esp,0xc
c000f55e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f561:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f564:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f567:	e8 f4 f2 ff ff       	call   c000e860 <execveProcess(char const*, char* const*, char* const*)>
c000f56c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f571:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f576:	81 c4 28 01 00 00    	add    esp,0x128
c000f57c:	5b                   	pop    ebx
c000f57d:	c3                   	ret    

c000f57e <sysCallRmdir(regs*)>:
c000f57e:	56                   	push   esi
c000f57f:	53                   	push   ebx
c000f580:	83 ec 10             	sub    esp,0x10
c000f583:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f587:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c000f58a:	68 14 01 00 00       	push   0x114
c000f58f:	e8 90 2c 00 00       	call   c0012224 <operator new(unsigned long)>
c000f594:	83 c4 0c             	add    esp,0xc
c000f597:	89 c3                	mov    ebx,eax
c000f599:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f59e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f5a1:	56                   	push   esi
c000f5a2:	53                   	push   ebx
c000f5a3:	e8 aa 30 00 00       	call   c0012652 <File::File(char const*, Process*)>
c000f5a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f5ab:	e8 7e 32 00 00       	call   c001282e <File::unlink()>
c000f5b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f5b3:	89 c6                	mov    esi,eax
c000f5b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f5b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f5ba:	31 c0                	xor    eax,eax
c000f5bc:	85 f6                	test   esi,esi
c000f5be:	0f 95 c0             	setne  al
c000f5c1:	31 d2                	xor    edx,edx
c000f5c3:	f7 d8                	neg    eax
c000f5c5:	83 d2 00             	adc    edx,0x0
c000f5c8:	83 c4 14             	add    esp,0x14
c000f5cb:	f7 da                	neg    edx
c000f5cd:	5b                   	pop    ebx
c000f5ce:	5e                   	pop    esi
c000f5cf:	c3                   	ret    

c000f5d0 <sysCallUnlink(regs*)>:
c000f5d0:	56                   	push   esi
c000f5d1:	53                   	push   ebx
c000f5d2:	83 ec 10             	sub    esp,0x10
c000f5d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f5d9:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c000f5dc:	68 14 01 00 00       	push   0x114
c000f5e1:	e8 3e 2c 00 00       	call   c0012224 <operator new(unsigned long)>
c000f5e6:	83 c4 0c             	add    esp,0xc
c000f5e9:	89 c3                	mov    ebx,eax
c000f5eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f5f0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f5f3:	56                   	push   esi
c000f5f4:	53                   	push   ebx
c000f5f5:	e8 58 30 00 00       	call   c0012652 <File::File(char const*, Process*)>
c000f5fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f5fd:	e8 2c 32 00 00       	call   c001282e <File::unlink()>
c000f602:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f605:	89 c6                	mov    esi,eax
c000f607:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f609:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f60c:	31 c0                	xor    eax,eax
c000f60e:	85 f6                	test   esi,esi
c000f610:	0f 95 c0             	setne  al
c000f613:	31 d2                	xor    edx,edx
c000f615:	f7 d8                	neg    eax
c000f617:	83 d2 00             	adc    edx,0x0
c000f61a:	83 c4 14             	add    esp,0x14
c000f61d:	f7 da                	neg    edx
c000f61f:	5b                   	pop    ebx
c000f620:	5e                   	pop    esi
c000f621:	c3                   	ret    

c000f622 <sysCallGetArgv(regs*)>:
c000f622:	83 ec 0c             	sub    esp,0xc
c000f625:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f629:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000f62c:	85 c0                	test   eax,eax
c000f62e:	78 2b                	js     c000f65b <sysCallGetArgv(regs*)+0x39>
c000f630:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000f636:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000f639:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c000f63f:	7d 1a                	jge    c000f65b <sysCallGetArgv(regs*)+0x39>
c000f641:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c000f648:	85 c0                	test   eax,eax
c000f64a:	74 17                	je     c000f663 <sysCallGetArgv(regs*)+0x41>
c000f64c:	83 ec 08             	sub    esp,0x8
c000f64f:	50                   	push   eax
c000f650:	ff 72 24             	push   DWORD PTR [edx+0x24]
c000f653:	e8 4f 10 ff ff       	call   c00006a7 <strcpy>
c000f658:	83 c4 10             	add    esp,0x10
c000f65b:	31 c0                	xor    eax,eax
c000f65d:	31 d2                	xor    edx,edx
c000f65f:	83 c4 0c             	add    esp,0xc
c000f662:	c3                   	ret    
c000f663:	b8 01 00 00 00       	mov    eax,0x1
c000f668:	31 d2                	xor    edx,edx
c000f66a:	83 c4 0c             	add    esp,0xc
c000f66d:	c3                   	ret    

c000f66e <sysCallTTYName(regs*)>:
c000f66e:	56                   	push   esi
c000f66f:	53                   	push   ebx
c000f670:	53                   	push   ebx
c000f671:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f675:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000f678:	85 c0                	test   eax,eax
c000f67a:	74 58                	je     c000f6d4 <sysCallTTYName(regs*)+0x66>
c000f67c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000f67f:	83 f8 02             	cmp    eax,0x2
c000f682:	77 3e                	ja     c000f6c2 <sysCallTTYName(regs*)+0x54>
c000f684:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f689:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f68c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000f692:	85 db                	test   ebx,ebx
c000f694:	74 3e                	je     c000f6d4 <sysCallTTYName(regs*)+0x66>
c000f696:	83 ec 0c             	sub    esp,0xc
c000f699:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f69b:	53                   	push   ebx
c000f69c:	ff 10                	call   DWORD PTR [eax]
c000f69e:	83 c4 10             	add    esp,0x10
c000f6a1:	84 c0                	test   al,al
c000f6a3:	74 3a                	je     c000f6df <sysCallTTYName(regs*)+0x71>
c000f6a5:	83 ec 08             	sub    esp,0x8
c000f6a8:	81 c3 1e 10 00 00    	add    ebx,0x101e
c000f6ae:	53                   	push   ebx
c000f6af:	ff 76 24             	push   DWORD PTR [esi+0x24]
c000f6b2:	e8 f0 0f ff ff       	call   c00006a7 <strcpy>
c000f6b7:	83 c4 10             	add    esp,0x10
c000f6ba:	31 c0                	xor    eax,eax
c000f6bc:	59                   	pop    ecx
c000f6bd:	31 d2                	xor    edx,edx
c000f6bf:	5b                   	pop    ebx
c000f6c0:	5e                   	pop    esi
c000f6c1:	c3                   	ret    
c000f6c2:	83 ec 0c             	sub    esp,0xc
c000f6c5:	50                   	push   eax
c000f6c6:	e8 e2 18 00 00       	call   c0010fad <getFromFileDescriptor(int)>
c000f6cb:	83 c4 10             	add    esp,0x10
c000f6ce:	89 c3                	mov    ebx,eax
c000f6d0:	85 db                	test   ebx,ebx
c000f6d2:	75 c2                	jne    c000f696 <sysCallTTYName(regs*)+0x28>
c000f6d4:	59                   	pop    ecx
c000f6d5:	b8 01 00 00 00       	mov    eax,0x1
c000f6da:	31 d2                	xor    edx,edx
c000f6dc:	5b                   	pop    ebx
c000f6dd:	5e                   	pop    esi
c000f6de:	c3                   	ret    
c000f6df:	59                   	pop    ecx
c000f6e0:	b8 02 00 00 00       	mov    eax,0x2
c000f6e5:	31 d2                	xor    edx,edx
c000f6e7:	5b                   	pop    ebx
c000f6e8:	5e                   	pop    esi
c000f6e9:	c3                   	ret    

c000f6ea <sysCallGetEnv(regs*)>:
c000f6ea:	83 ec 0c             	sub    esp,0xc
c000f6ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6f1:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000f6f4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000f6f7:	85 c9                	test   ecx,ecx
c000f6f9:	75 0c                	jne    c000f707 <sysCallGetEnv(regs*)+0x1d>
c000f6fb:	85 d2                	test   edx,edx
c000f6fd:	74 14                	je     c000f713 <sysCallGetEnv(regs*)+0x29>
c000f6ff:	31 c0                	xor    eax,eax
c000f701:	31 d2                	xor    edx,edx
c000f703:	83 c4 0c             	add    esp,0xc
c000f706:	c3                   	ret    
c000f707:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f70a:	85 d2                	test   edx,edx
c000f70c:	74 1b                	je     c000f729 <sysCallGetEnv(regs*)+0x3f>
c000f70e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f711:	eb ec                	jmp    c000f6ff <sysCallGetEnv(regs*)+0x15>
c000f713:	83 ec 0c             	sub    esp,0xc
c000f716:	68 b4 07 02 c0       	push   0xc00207b4
c000f71b:	e8 05 0f ff ff       	call   c0000625 <strlen>
c000f720:	83 c4 10             	add    esp,0x10
c000f723:	31 d2                	xor    edx,edx
c000f725:	83 c4 0c             	add    esp,0xc
c000f728:	c3                   	ret    
c000f729:	83 ec 08             	sub    esp,0x8
c000f72c:	68 b4 07 02 c0       	push   0xc00207b4
c000f731:	50                   	push   eax
c000f732:	e8 70 0f ff ff       	call   c00006a7 <strcpy>
c000f737:	83 c4 10             	add    esp,0x10
c000f73a:	eb c3                	jmp    c000f6ff <sysCallGetEnv(regs*)+0x15>

c000f73c <sysCallUSleep(regs*)>:
c000f73c:	83 ec 14             	sub    esp,0x14
c000f73f:	b8 e8 03 00 00       	mov    eax,0x3e8
c000f744:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f748:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c000f74f:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c000f752:	01 ca                	add    edx,ecx
c000f754:	52                   	push   edx
c000f755:	50                   	push   eax
c000f756:	e8 6a f0 ff ff       	call   c000e7c5 <nanoSleep(unsigned long long)>
c000f75b:	31 c0                	xor    eax,eax
c000f75d:	31 d2                	xor    edx,edx
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	c3                   	ret    

c000f763 <sysCallSpawn(regs*)>:
c000f763:	56                   	push   esi
c000f764:	53                   	push   ebx
c000f765:	53                   	push   ebx
c000f766:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f76a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c000f76d:	85 f6                	test   esi,esi
c000f76f:	75 08                	jne    c000f779 <sysCallSpawn(regs*)+0x16>
c000f771:	59                   	pop    ecx
c000f772:	31 c0                	xor    eax,eax
c000f774:	31 d2                	xor    edx,edx
c000f776:	5b                   	pop    ebx
c000f777:	5e                   	pop    esi
c000f778:	c3                   	ret    
c000f779:	83 ec 0c             	sub    esp,0xc
c000f77c:	68 79 07 02 c0       	push   0xc0020779
c000f781:	e8 e4 d4 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c000f786:	c7 04 24 3b 07 00 00 	mov    DWORD PTR [esp],0x73b
c000f78d:	e8 92 2a 00 00       	call   c0012224 <operator new(unsigned long)>
c000f792:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f795:	89 c6                	mov    esi,eax
c000f797:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f79c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f79f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f7a2:	56                   	push   esi
c000f7a3:	e8 0c e6 ff ff       	call   c000ddb4 <Process::Process(char const*, Process*, char**)>
c000f7a8:	83 c4 20             	add    esp,0x20
c000f7ab:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c000f7b2:	75 bd                	jne    c000f771 <sysCallSpawn(regs*)+0xe>
c000f7b4:	83 ec 0c             	sub    esp,0xc
c000f7b7:	68 84 07 02 c0       	push   0xc0020784
c000f7bc:	e8 a9 d4 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c000f7c1:	89 34 24             	mov    DWORD PTR [esp],esi
c000f7c4:	e8 51 eb ff ff       	call   c000e31a <Process::createUserThread()>
c000f7c9:	8b 06                	mov    eax,DWORD PTR [esi]
c000f7cb:	83 c4 10             	add    esp,0x10
c000f7ce:	99                   	cdq    
c000f7cf:	59                   	pop    ecx
c000f7d0:	5b                   	pop    ebx
c000f7d1:	5e                   	pop    esi
c000f7d2:	c3                   	ret    

c000f7d3 <sysAppSettings(regs*)>:
c000f7d3:	53                   	push   ebx
c000f7d4:	83 ec 08             	sub    esp,0x8
c000f7d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7db:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c000f7de:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c000f7e4:	25 e0 1f 00 00       	and    eax,0x1fe0
c000f7e9:	66 3d c0 09          	cmp    ax,0x9c0
c000f7ed:	75 2f                	jne    c000f81e <sysAppSettings(regs*)+0x4b>
c000f7ef:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c000f7f5:	83 e0 1f             	and    eax,0x1f
c000f7f8:	3c 01                	cmp    al,0x1
c000f7fa:	74 2e                	je     c000f82a <sysAppSettings(regs*)+0x57>
c000f7fc:	3c 07                	cmp    al,0x7
c000f7fe:	0f 84 bd 00 00 00    	je     c000f8c1 <sysAppSettings(regs*)+0xee>
c000f804:	84 c0                	test   al,al
c000f806:	0f 84 dc 00 00 00    	je     c000f8e8 <sysAppSettings(regs*)+0x115>
c000f80c:	3c 08                	cmp    al,0x8
c000f80e:	74 6d                	je     c000f87d <sysAppSettings(regs*)+0xaa>
c000f810:	0f b6 c0             	movzx  eax,al
c000f813:	83 c4 08             	add    esp,0x8
c000f816:	05 e8 03 00 00       	add    eax,0x3e8
c000f81b:	5b                   	pop    ebx
c000f81c:	99                   	cdq    
c000f81d:	c3                   	ret    
c000f81e:	b8 01 00 00 00       	mov    eax,0x1
c000f823:	31 d2                	xor    edx,edx
c000f825:	83 c4 08             	add    esp,0x8
c000f828:	5b                   	pop    ebx
c000f829:	c3                   	ret    
c000f82a:	51                   	push   ecx
c000f82b:	68 00 01 00 00       	push   0x100
c000f830:	6a 00                	push   0x0
c000f832:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f837:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f83a:	83 c0 0c             	add    eax,0xc
c000f83d:	50                   	push   eax
c000f83e:	e8 c5 0d ff ff       	call   c0000608 <memset>
c000f843:	83 c4 0c             	add    esp,0xc
c000f846:	68 ff 00 00 00       	push   0xff
c000f84b:	53                   	push   ebx
c000f84c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f851:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f854:	83 c0 0c             	add    eax,0xc
c000f857:	50                   	push   eax
c000f858:	e8 75 0d ff ff       	call   c00005d2 <memcpy>
c000f85d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f862:	5b                   	pop    ebx
c000f863:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f866:	5a                   	pop    edx
c000f867:	8d 50 0c             	lea    edx,[eax+0xc]
c000f86a:	52                   	push   edx
c000f86b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000f871:	e8 f8 09 00 00       	call   c001026e <VgaText::setTitle(char*)>
c000f876:	83 c4 10             	add    esp,0x10
c000f879:	31 c0                	xor    eax,eax
c000f87b:	eb a6                	jmp    c000f823 <sysAppSettings(regs*)+0x50>
c000f87d:	83 ec 08             	sub    esp,0x8
c000f880:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c000f886:	83 e0 0f             	and    eax,0xf
c000f889:	50                   	push   eax
c000f88a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f88f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f892:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000f898:	e8 c1 09 00 00       	call   c001025e <VgaText::setTitleColour(VgaColour)>
c000f89d:	58                   	pop    eax
c000f89e:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c000f8a4:	5a                   	pop    edx
c000f8a5:	c1 e8 04             	shr    eax,0x4
c000f8a8:	83 e0 0f             	and    eax,0xf
c000f8ab:	50                   	push   eax
c000f8ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f8b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f8b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000f8ba:	e8 8f 09 00 00       	call   c001024e <VgaText::setTitleTextColour(VgaColour)>
c000f8bf:	eb b5                	jmp    c000f876 <sysAppSettings(regs*)+0xa3>
c000f8c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f8c6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f8c9:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000f8cf:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c000f8d5:	c0 e8 06             	shr    al,0x6
c000f8d8:	83 e0 01             	and    eax,0x1
c000f8db:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c000f8e1:	31 c0                	xor    eax,eax
c000f8e3:	e9 3b ff ff ff       	jmp    c000f823 <sysAppSettings(regs*)+0x50>
c000f8e8:	b8 02 00 00 00       	mov    eax,0x2
c000f8ed:	e9 31 ff ff ff       	jmp    c000f823 <sysAppSettings(regs*)+0x50>

c000f8f2 <sysSetFatAttrib(regs*)>:
c000f8f2:	57                   	push   edi
c000f8f3:	56                   	push   esi
c000f8f4:	53                   	push   ebx
c000f8f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f8f9:	83 ec 0c             	sub    esp,0xc
c000f8fc:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c000f8ff:	68 14 01 00 00       	push   0x114
c000f904:	e8 1b 29 00 00       	call   c0012224 <operator new(unsigned long)>
c000f909:	83 c4 0c             	add    esp,0xc
c000f90c:	89 c3                	mov    ebx,eax
c000f90e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f913:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f916:	57                   	push   edi
c000f917:	53                   	push   ebx
c000f918:	e8 35 2d 00 00       	call   c0012652 <File::File(char const*, Process*)>
c000f91d:	83 c4 0c             	add    esp,0xc
c000f920:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c000f923:	0f b6 d4             	movzx  edx,ah
c000f926:	0f b6 c0             	movzx  eax,al
c000f929:	52                   	push   edx
c000f92a:	50                   	push   eax
c000f92b:	53                   	push   ebx
c000f92c:	e8 97 2f 00 00       	call   c00128c8 <File::chfatattr(unsigned char, unsigned char)>
c000f931:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f934:	89 c6                	mov    esi,eax
c000f936:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f938:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f93b:	83 c4 10             	add    esp,0x10
c000f93e:	31 c0                	xor    eax,eax
c000f940:	5b                   	pop    ebx
c000f941:	85 f6                	test   esi,esi
c000f943:	5e                   	pop    esi
c000f944:	0f 95 c0             	setne  al
c000f947:	5f                   	pop    edi
c000f948:	31 d2                	xor    edx,edx
c000f94a:	f7 d8                	neg    eax
c000f94c:	83 d2 00             	adc    edx,0x0
c000f94f:	f7 da                	neg    edx
c000f951:	c3                   	ret    

c000f952 <sysPanic(regs*)>:
c000f952:	83 ec 18             	sub    esp,0x18
c000f955:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f959:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f95c:	e8 27 d4 ff ff       	call   c000cd88 <panic(char const*)>
c000f961:	c7 04 24 91 07 02 c0 	mov    DWORD PTR [esp],0xc0020791
c000f968:	e8 1b d4 ff ff       	call   c000cd88 <panic(char const*)>
c000f96d:	b8 01 00 00 00       	mov    eax,0x1
c000f972:	31 d2                	xor    edx,edx
c000f974:	83 c4 1c             	add    esp,0x1c
c000f977:	c3                   	ret    

c000f978 <sysPipe(regs*)>:
c000f978:	57                   	push   edi
c000f979:	56                   	push   esi
c000f97a:	53                   	push   ebx
c000f97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f97f:	83 ec 0c             	sub    esp,0xc
c000f982:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c000f985:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c000f988:	6a 20                	push   0x20
c000f98a:	e8 95 28 00 00       	call   c0012224 <operator new(unsigned long)>
c000f98f:	89 c3                	mov    ebx,eax
c000f991:	58                   	pop    eax
c000f992:	5a                   	pop    edx
c000f993:	68 00 50 00 00       	push   0x5000
c000f998:	53                   	push   ebx
c000f999:	e8 26 e3 ff ff       	call   c000dcc4 <Pipe::Pipe(int)>
c000f99e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9a1:	e8 a2 14 00 00       	call   c0010e48 <UnixFile::getFileDescriptor()>
c000f9a6:	89 07                	mov    DWORD PTR [edi],eax
c000f9a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9ab:	e8 98 14 00 00       	call   c0010e48 <UnixFile::getFileDescriptor()>
c000f9b0:	83 c4 10             	add    esp,0x10
c000f9b3:	89 06                	mov    DWORD PTR [esi],eax
c000f9b5:	31 d2                	xor    edx,edx
c000f9b7:	5b                   	pop    ebx
c000f9b8:	31 c0                	xor    eax,eax
c000f9ba:	5e                   	pop    esi
c000f9bb:	5f                   	pop    edi
c000f9bc:	c3                   	ret    

c000f9bd <sysGetUnixTime(regs*)>:
c000f9bd:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c000f9c2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000f9c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f9cc:	e9 49 36 00 00       	jmp    c001301a <Clock::timeInSecondsLocal()>

c000f9d1 <string_ends_with(char const*, char const*)>:
c000f9d1:	57                   	push   edi
c000f9d2:	56                   	push   esi
c000f9d3:	53                   	push   ebx
c000f9d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9d8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f9dc:	83 ec 0c             	sub    esp,0xc
c000f9df:	53                   	push   ebx
c000f9e0:	e8 40 0c ff ff       	call   c0000625 <strlen>
c000f9e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f9e8:	89 c6                	mov    esi,eax
c000f9ea:	e8 36 0c ff ff       	call   c0000625 <strlen>
c000f9ef:	83 c4 10             	add    esp,0x10
c000f9f2:	39 c6                	cmp    esi,eax
c000f9f4:	7d 06                	jge    c000f9fc <string_ends_with(char const*, char const*)+0x2b>
c000f9f6:	5b                   	pop    ebx
c000f9f7:	31 c0                	xor    eax,eax
c000f9f9:	5e                   	pop    esi
c000f9fa:	5f                   	pop    edi
c000f9fb:	c3                   	ret    
c000f9fc:	83 ec 08             	sub    esp,0x8
c000f9ff:	29 c6                	sub    esi,eax
c000fa01:	57                   	push   edi
c000fa02:	01 f3                	add    ebx,esi
c000fa04:	53                   	push   ebx
c000fa05:	e8 ee 0c ff ff       	call   c00006f8 <strcmp>
c000fa0a:	83 c4 10             	add    esp,0x10
c000fa0d:	85 c0                	test   eax,eax
c000fa0f:	5b                   	pop    ebx
c000fa10:	0f 94 c0             	sete   al
c000fa13:	5e                   	pop    esi
c000fa14:	0f b6 c0             	movzx  eax,al
c000fa17:	5f                   	pop    edi
c000fa18:	c3                   	ret    

c000fa19 <setupSystemCalls()>:
c000fa19:	c7 05 00 37 02 c0 61 83 01 c0 	mov    DWORD PTR ds:0xc0023700,0xc0018361
c000fa23:	c7 05 04 37 02 c0 8f 81 01 c0 	mov    DWORD PTR ds:0xc0023704,0xc001818f
c000fa2d:	c7 05 08 37 02 c0 a4 82 01 c0 	mov    DWORD PTR ds:0xc0023708,0xc00182a4
c000fa37:	c7 05 0c 37 02 c0 f9 82 01 c0 	mov    DWORD PTR ds:0xc002370c,0xc00182f9
c000fa41:	c7 05 10 37 02 c0 3c 82 01 c0 	mov    DWORD PTR ds:0xc0023710,0xc001823c
c000fa4b:	c7 05 14 37 02 c0 80 ee 00 c0 	mov    DWORD PTR ds:0xc0023714,0xc000ee80
c000fa55:	c7 05 18 37 02 c0 f9 ef 00 c0 	mov    DWORD PTR ds:0xc0023718,0xc000eff9
c000fa5f:	c7 05 1c 37 02 c0 18 f0 00 c0 	mov    DWORD PTR ds:0xc002371c,0xc000f018
c000fa69:	c7 05 24 37 02 c0 91 f3 00 c0 	mov    DWORD PTR ds:0xc0023724,0xc000f391
c000fa73:	c7 05 20 37 02 c0 77 f0 00 c0 	mov    DWORD PTR ds:0xc0023720,0xc000f077
c000fa7d:	c7 05 28 37 02 c0 df f3 00 c0 	mov    DWORD PTR ds:0xc0023728,0xc000f3df
c000fa87:	c7 05 2c 37 02 c0 67 f1 00 c0 	mov    DWORD PTR ds:0xc002372c,0xc000f167
c000fa91:	c7 05 30 37 02 c0 8c ee 00 c0 	mov    DWORD PTR ds:0xc0023730,0xc000ee8c
c000fa9b:	c7 05 34 37 02 c0 91 ee 00 c0 	mov    DWORD PTR ds:0xc0023734,0xc000ee91
c000faa5:	c7 05 38 37 02 c0 4c f4 00 c0 	mov    DWORD PTR ds:0xc0023738,0xc000f44c
c000faaf:	c7 05 3c 37 02 c0 a5 f4 00 c0 	mov    DWORD PTR ds:0xc002373c,0xc000f4a5
c000fab9:	c7 05 40 37 02 c0 29 f2 00 c0 	mov    DWORD PTR ds:0xc0023740,0xc000f229
c000fac3:	c7 05 44 37 02 c0 7a f2 00 c0 	mov    DWORD PTR ds:0xc0023744,0xc000f27a
c000facd:	c7 05 48 37 02 c0 3f f3 00 c0 	mov    DWORD PTR ds:0xc0023748,0xc000f33f
c000fad7:	c7 05 4c 37 02 c0 96 ee 00 c0 	mov    DWORD PTR ds:0xc002374c,0xc000ee96
c000fae1:	c7 05 50 37 02 c0 f3 f4 00 c0 	mov    DWORD PTR ds:0xc0023750,0xc000f4f3
c000faeb:	c7 05 54 37 02 c0 0d f5 00 c0 	mov    DWORD PTR ds:0xc0023754,0xc000f50d
c000faf5:	c7 05 58 37 02 c0 29 f5 00 c0 	mov    DWORD PTR ds:0xc0023758,0xc000f529
c000faff:	c7 05 5c 37 02 c0 7e f5 00 c0 	mov    DWORD PTR ds:0xc002375c,0xc000f57e
c000fb09:	c7 05 60 37 02 c0 d0 f5 00 c0 	mov    DWORD PTR ds:0xc0023760,0xc000f5d0
c000fb13:	c7 05 64 37 02 c0 a0 ee 00 c0 	mov    DWORD PTR ds:0xc0023764,0xc000eea0
c000fb1d:	c7 05 68 37 02 c0 22 f6 00 c0 	mov    DWORD PTR ds:0xc0023768,0xc000f622
c000fb27:	c7 05 6c 37 02 c0 34 f0 00 c0 	mov    DWORD PTR ds:0xc002376c,0xc000f034
c000fb31:	c7 05 70 37 02 c0 6e f6 00 c0 	mov    DWORD PTR ds:0xc0023770,0xc000f66e
c000fb3b:	c7 05 74 37 02 c0 d6 f1 00 c0 	mov    DWORD PTR ds:0xc0023774,0xc000f1d6
c000fb45:	c7 05 78 37 02 c0 3c f7 00 c0 	mov    DWORD PTR ds:0xc0023778,0xc000f73c
c000fb4f:	c7 05 7c 37 02 c0 c6 f2 00 c0 	mov    DWORD PTR ds:0xc002377c,0xc000f2c6
c000fb59:	c7 05 80 37 02 c0 63 f7 00 c0 	mov    DWORD PTR ds:0xc0023780,0xc000f763
c000fb63:	c7 05 84 37 02 c0 ea f6 00 c0 	mov    DWORD PTR ds:0xc0023784,0xc000f6ea
c000fb6d:	c7 05 88 37 02 c0 d3 f7 00 c0 	mov    DWORD PTR ds:0xc0023788,0xc000f7d3
c000fb77:	c7 05 8c 37 02 c0 b0 ee 00 c0 	mov    DWORD PTR ds:0xc002378c,0xc000eeb0
c000fb81:	c7 05 90 37 02 c0 1a ef 00 c0 	mov    DWORD PTR ds:0xc0023790,0xc000ef1a
c000fb8b:	c7 05 94 37 02 c0 60 ef 00 c0 	mov    DWORD PTR ds:0xc0023794,0xc000ef60
c000fb95:	c7 05 98 37 02 c0 f2 f8 00 c0 	mov    DWORD PTR ds:0xc0023798,0xc000f8f2
c000fb9f:	c7 05 9c 37 02 c0 52 f9 00 c0 	mov    DWORD PTR ds:0xc002379c,0xc000f952
c000fba9:	c7 05 a0 37 02 c0 b1 ef 00 c0 	mov    DWORD PTR ds:0xc00237a0,0xc000efb1
c000fbb3:	c7 05 a4 37 02 c0 78 f9 00 c0 	mov    DWORD PTR ds:0xc00237a4,0xc000f978
c000fbbd:	c7 05 a8 37 02 c0 bd f9 00 c0 	mov    DWORD PTR ds:0xc00237a8,0xc000f9bd
c000fbc7:	c7 05 ac 37 02 c0 a7 81 01 c0 	mov    DWORD PTR ds:0xc00237ac,0xc00181a7
c000fbd1:	c3                   	ret    

c000fbd2 <systemCall(regs*, void*)>:
c000fbd2:	53                   	push   ebx
c000fbd3:	83 ec 08             	sub    esp,0x8
c000fbd6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbda:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000fbdd:	83 f8 7f             	cmp    eax,0x7f
c000fbe0:	77 16                	ja     c000fbf8 <systemCall(regs*, void*)+0x26>
c000fbe2:	8b 14 85 00 37 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc900]
c000fbe9:	85 d2                	test   edx,edx
c000fbeb:	74 0b                	je     c000fbf8 <systemCall(regs*, void*)+0x26>
c000fbed:	83 ec 0c             	sub    esp,0xc
c000fbf0:	53                   	push   ebx
c000fbf1:	ff d2                	call   edx
c000fbf3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000fbf6:	eb 0d                	jmp    c000fc05 <systemCall(regs*, void*)+0x33>
c000fbf8:	52                   	push   edx
c000fbf9:	52                   	push   edx
c000fbfa:	50                   	push   eax
c000fbfb:	68 a0 07 02 c0       	push   0xc00207a0
c000fc00:	e8 65 d0 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c000fc05:	83 c4 10             	add    esp,0x10
c000fc08:	b8 ef be ad de       	mov    eax,0xdeadbeef
c000fc0d:	31 d2                	xor    edx,edx
c000fc0f:	83 c4 08             	add    esp,0x8
c000fc12:	5b                   	pop    ebx
c000fc13:	c3                   	ret    

c000fc14 <VgaText::isAtty()>:
c000fc14:	b0 01                	mov    al,0x1
c000fc16:	c3                   	ret    
c000fc17:	90                   	nop

c000fc18 <VgaText::~VgaText()>:
c000fc18:	83 ec 0c             	sub    esp,0xc
c000fc1b:	ba a8 08 02 c0       	mov    edx,0xc00208a8
c000fc20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc24:	89 10                	mov    DWORD PTR [eax],edx
c000fc26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc2a:	83 ec 0c             	sub    esp,0xc
c000fc2d:	50                   	push   eax
c000fc2e:	e8 81 12 00 00       	call   c0010eb4 <UnixFile::~UnixFile()>
c000fc33:	83 c4 10             	add    esp,0x10
c000fc36:	90                   	nop
c000fc37:	83 c4 0c             	add    esp,0xc
c000fc3a:	c3                   	ret    
c000fc3b:	90                   	nop

c000fc3c <VgaText::~VgaText()>:
c000fc3c:	83 ec 0c             	sub    esp,0xc
c000fc3f:	83 ec 0c             	sub    esp,0xc
c000fc42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc46:	e8 cd ff ff ff       	call   c000fc18 <VgaText::~VgaText()>
c000fc4b:	83 c4 10             	add    esp,0x10
c000fc4e:	83 ec 08             	sub    esp,0x8
c000fc51:	68 60 12 00 00       	push   0x1260
c000fc56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc5a:	e8 d4 25 00 00       	call   c0012233 <operator delete(void*, unsigned long)>
c000fc5f:	83 c4 10             	add    esp,0x10
c000fc62:	83 c4 0c             	add    esp,0xc
c000fc65:	c3                   	ret    

c000fc66 <VgaText::read(unsigned long long, void*, int*)>:
c000fc66:	83 ec 10             	sub    esp,0x10
c000fc69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc6d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fc71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc75:	e8 38 4f 00 00       	call   c0014bb2 <readKeyboard(VgaText*, char*, unsigned long)>
c000fc7a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fc7e:	89 02                	mov    DWORD PTR [edx],eax
c000fc80:	31 c0                	xor    eax,eax
c000fc82:	83 c4 1c             	add    esp,0x1c
c000fc85:	c3                   	ret    

c000fc86 <setTerminalScrollLock(bool)>:
c000fc86:	c3                   	ret    

c000fc87 <addToTerminalCycle(VgaText*)>:
c000fc87:	8b 15 20 39 02 c0    	mov    edx,DWORD PTR ds:0xc0023920
c000fc8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fc91:	85 d2                	test   edx,edx
c000fc93:	75 0c                	jne    c000fca1 <addToTerminalCycle(VgaText*)+0x1a>
c000fc95:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000fc9b:	a3 20 39 02 c0       	mov    ds:0xc0023920,eax
c000fca0:	c3                   	ret    
c000fca1:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000fca7:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000fcad:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000fcb3:	c3                   	ret    

c000fcb4 <installVgaTextImplementation()>:
c000fcb4:	83 ec 10             	sub    esp,0x10
c000fcb7:	6a 20                	push   0x20
c000fcb9:	6a 00                	push   0x0
c000fcbb:	68 00 39 02 c0       	push   0xc0023900
c000fcc0:	e8 43 09 ff ff       	call   c0000608 <memset>
c000fcc5:	83 c4 1c             	add    esp,0x1c
c000fcc8:	c3                   	ret    

c000fcc9 <scrollTerminalScrollLock(int)>:
c000fcc9:	c3                   	ret    

c000fcca <VgaText::load()>:
c000fcca:	53                   	push   ebx
c000fccb:	31 c0                	xor    eax,eax
c000fccd:	83 ec 58             	sub    esp,0x58
c000fcd0:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000fcd4:	89 e2                	mov    edx,esp
c000fcd6:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000fcda:	40                   	inc    eax
c000fcdb:	83 f8 50             	cmp    eax,0x50
c000fcde:	75 f6                	jne    c000fcd6 <VgaText::load()+0xc>
c000fce0:	31 c0                	xor    eax,eax
c000fce2:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000fce9:	84 c9                	test   cl,cl
c000fceb:	74 06                	je     c000fcf3 <VgaText::load()+0x29>
c000fced:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fcf0:	40                   	inc    eax
c000fcf1:	eb ef                	jmp    c000fce2 <VgaText::load()+0x18>
c000fcf3:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000fcf9:	85 c0                	test   eax,eax
c000fcfb:	74 09                	je     c000fd06 <VgaText::load()+0x3c>
c000fcfd:	51                   	push   ecx
c000fcfe:	51                   	push   ecx
c000fcff:	52                   	push   edx
c000fd00:	53                   	push   ebx
c000fd01:	ff d0                	call   eax
c000fd03:	83 c4 10             	add    esp,0x10
c000fd06:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000fd0c:	85 c0                	test   eax,eax
c000fd0e:	74 09                	je     c000fd19 <VgaText::load()+0x4f>
c000fd10:	83 ec 0c             	sub    esp,0xc
c000fd13:	53                   	push   ebx
c000fd14:	ff d0                	call   eax
c000fd16:	83 c4 10             	add    esp,0x10
c000fd19:	83 c4 58             	add    esp,0x58
c000fd1c:	5b                   	pop    ebx
c000fd1d:	c3                   	ret    

c000fd1e <VgaText::updateCursor()>:
c000fd1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd22:	39 05 24 39 02 c0    	cmp    DWORD PTR ds:0xc0023924,eax
c000fd28:	75 0c                	jne    c000fd36 <VgaText::updateCursor()+0x18>
c000fd2a:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000fd30:	85 c0                	test   eax,eax
c000fd32:	74 02                	je     c000fd36 <VgaText::updateCursor()+0x18>
c000fd34:	ff e0                	jmp    eax
c000fd36:	c3                   	ret    
c000fd37:	90                   	nop

c000fd38 <VgaText::showCursor(bool)>:
c000fd38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd40:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000fd46:	c3                   	ret    
c000fd47:	90                   	nop

c000fd48 <VgaText::disableBlink(bool)>:
c000fd48:	56                   	push   esi
c000fd49:	53                   	push   ebx
c000fd4a:	51                   	push   ecx
c000fd4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fd4f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fd53:	39 1d 24 39 02 c0    	cmp    DWORD PTR ds:0xc0023924,ebx
c000fd59:	75 18                	jne    c000fd73 <VgaText::disableBlink(bool)+0x2b>
c000fd5b:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000fd61:	85 c0                	test   eax,eax
c000fd63:	74 0e                	je     c000fd73 <VgaText::disableBlink(bool)+0x2b>
c000fd65:	89 f1                	mov    ecx,esi
c000fd67:	52                   	push   edx
c000fd68:	52                   	push   edx
c000fd69:	0f b6 d1             	movzx  edx,cl
c000fd6c:	52                   	push   edx
c000fd6d:	53                   	push   ebx
c000fd6e:	ff d0                	call   eax
c000fd70:	83 c4 10             	add    esp,0x10
c000fd73:	89 f0                	mov    eax,esi
c000fd75:	83 f0 01             	xor    eax,0x1
c000fd78:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000fd7e:	58                   	pop    eax
c000fd7f:	5b                   	pop    ebx
c000fd80:	5e                   	pop    esi
c000fd81:	c3                   	ret    

c000fd82 <VgaText::doANSI_SGR(int)>:
c000fd82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd8a:	85 d2                	test   edx,edx
c000fd8c:	75 14                	jne    c000fda2 <VgaText::doANSI_SGR(int)+0x20>
c000fd8e:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000fd94:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fd9a:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000fda0:	eb 65                	jmp    c000fe07 <VgaText::doANSI_SGR(int)+0x85>
c000fda2:	83 fa 07             	cmp    edx,0x7
c000fda5:	75 14                	jne    c000fdbb <VgaText::doANSI_SGR(int)+0x39>
c000fda7:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000fdad:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000fdb3:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000fdb9:	eb 4c                	jmp    c000fe07 <VgaText::doANSI_SGR(int)+0x85>
c000fdbb:	83 fa 1b             	cmp    edx,0x1b
c000fdbe:	74 ce                	je     c000fd8e <VgaText::doANSI_SGR(int)+0xc>
c000fdc0:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000fdc3:	83 f9 07             	cmp    ecx,0x7
c000fdc6:	77 09                	ja     c000fdd1 <VgaText::doANSI_SGR(int)+0x4f>
c000fdc8:	8b 14 8d c0 22 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffddd40]
c000fdcf:	eb 20                	jmp    c000fdf1 <VgaText::doANSI_SGR(int)+0x6f>
c000fdd1:	8d 4a d8             	lea    ecx,[edx-0x28]
c000fdd4:	83 f9 07             	cmp    ecx,0x7
c000fdd7:	77 09                	ja     c000fde2 <VgaText::doANSI_SGR(int)+0x60>
c000fdd9:	8b 14 8d c0 22 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffddd40]
c000fde0:	eb 25                	jmp    c000fe07 <VgaText::doANSI_SGR(int)+0x85>
c000fde2:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000fde5:	83 f9 07             	cmp    ecx,0x7
c000fde8:	77 0e                	ja     c000fdf8 <VgaText::doANSI_SGR(int)+0x76>
c000fdea:	8b 14 95 78 21 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdde88]
c000fdf1:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fdf7:	c3                   	ret    
c000fdf8:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000fdfb:	83 f9 07             	cmp    ecx,0x7
c000fdfe:	77 0d                	ja     c000fe0d <VgaText::doANSI_SGR(int)+0x8b>
c000fe00:	8b 14 95 50 21 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffddeb0]
c000fe07:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fe0d:	c3                   	ret    

c000fe0e <VgaText::setDefaultBgColour(VgaColour)>:
c000fe0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe16:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000fe1c:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fe22:	c3                   	ret    
c000fe23:	90                   	nop

c000fe24 <VgaText::setDefaultFgColour(VgaColour)>:
c000fe24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe2c:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000fe32:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe38:	c3                   	ret    
c000fe39:	90                   	nop

c000fe3a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000fe3a:	53                   	push   ebx
c000fe3b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fe3f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fe43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fe47:	51                   	push   ecx
c000fe48:	e8 c1 ff ff ff       	call   c000fe0e <VgaText::setDefaultBgColour(VgaColour)>
c000fe4d:	58                   	pop    eax
c000fe4e:	5a                   	pop    edx
c000fe4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fe53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000fe57:	5b                   	pop    ebx
c000fe58:	eb ca                	jmp    c000fe24 <VgaText::setDefaultFgColour(VgaColour)>

c000fe5a <VgaText::combineColours(unsigned char, unsigned char)>:
c000fe5a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000fe5e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000fe63:	83 e0 0f             	and    eax,0xf
c000fe66:	c1 e2 04             	shl    edx,0x4
c000fe69:	09 d0                	or     eax,edx
c000fe6b:	c3                   	ret    

c000fe6c <VgaText::scrollScreen()>:
c000fe6c:	57                   	push   edi
c000fe6d:	56                   	push   esi
c000fe6e:	be 01 00 00 00       	mov    esi,0x1
c000fe73:	53                   	push   ebx
c000fe74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe78:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000fe7e:	31 ff                	xor    edi,edi
c000fe80:	01 d9                	add    ecx,ebx
c000fe82:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000fe85:	83 fe 17             	cmp    esi,0x17
c000fe88:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000fe8e:	75 28                	jne    c000feb8 <VgaText::scrollScreen()+0x4c>
c000fe90:	f7 c7 01 00 00 00    	test   edi,0x1
c000fe96:	74 1c                	je     c000feb4 <VgaText::scrollScreen()+0x48>
c000fe98:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000fe9f:	50                   	push   eax
c000fea0:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000fea7:	50                   	push   eax
c000fea8:	e8 ad ff ff ff       	call   c000fe5a <VgaText::combineColours(unsigned char, unsigned char)>
c000fead:	5a                   	pop    edx
c000feae:	5a                   	pop    edx
c000feaf:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000feb2:	eb 04                	jmp    c000feb8 <VgaText::scrollScreen()+0x4c>
c000feb4:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000feb8:	47                   	inc    edi
c000feb9:	41                   	inc    ecx
c000feba:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000fec0:	75 c0                	jne    c000fe82 <VgaText::scrollScreen()+0x16>
c000fec2:	46                   	inc    esi
c000fec3:	83 fe 18             	cmp    esi,0x18
c000fec6:	75 b0                	jne    c000fe78 <VgaText::scrollScreen()+0xc>
c000fec8:	39 1d 24 39 02 c0    	cmp    DWORD PTR ds:0xc0023924,ebx
c000fece:	75 24                	jne    c000fef4 <VgaText::scrollScreen()+0x88>
c000fed0:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000fed7:	74 08                	je     c000fee1 <VgaText::scrollScreen()+0x75>
c000fed9:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000fedf:	eb 13                	jmp    c000fef4 <VgaText::scrollScreen()+0x88>
c000fee1:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000fee7:	85 c0                	test   eax,eax
c000fee9:	74 09                	je     c000fef4 <VgaText::scrollScreen()+0x88>
c000feeb:	83 ec 0c             	sub    esp,0xc
c000feee:	53                   	push   ebx
c000feef:	ff d0                	call   eax
c000fef1:	83 c4 10             	add    esp,0x10
c000fef4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000fef8:	5b                   	pop    ebx
c000fef9:	5e                   	pop    esi
c000fefa:	5f                   	pop    edi
c000fefb:	e9 1e fe ff ff       	jmp    c000fd1e <VgaText::updateCursor()>

c000ff00 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ff00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ff05:	c1 e0 08             	shl    eax,0x8
c000ff08:	89 c2                	mov    edx,eax
c000ff0a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ff0f:	09 d0                	or     eax,edx
c000ff11:	c3                   	ret    

c000ff12 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ff12:	53                   	push   ebx
c000ff13:	83 ec 08             	sub    esp,0x8
c000ff16:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff1a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ff1f:	50                   	push   eax
c000ff20:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ff25:	50                   	push   eax
c000ff26:	e8 2f ff ff ff       	call   c000fe5a <VgaText::combineColours(unsigned char, unsigned char)>
c000ff2b:	5a                   	pop    edx
c000ff2c:	0f b6 c0             	movzx  eax,al
c000ff2f:	5b                   	pop    ebx
c000ff30:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ff35:	50                   	push   eax
c000ff36:	53                   	push   ebx
c000ff37:	e8 c4 ff ff ff       	call   c000ff00 <VgaText::combineCharAndColour(char, unsigned char)>
c000ff3c:	5a                   	pop    edx
c000ff3d:	5a                   	pop    edx
c000ff3e:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ff44:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ff48:	0f b7 d2             	movzx  edx,dx
c000ff4b:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ff50:	39 0d 24 39 02 c0    	cmp    DWORD PTR ds:0xc0023924,ecx
c000ff56:	75 14                	jne    c000ff6c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ff58:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ff5e:	85 c0                	test   eax,eax
c000ff60:	74 0a                	je     c000ff6c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ff62:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ff66:	83 c4 08             	add    esp,0x8
c000ff69:	5b                   	pop    ebx
c000ff6a:	ff e0                	jmp    eax
c000ff6c:	83 c4 08             	add    esp,0x8
c000ff6f:	5b                   	pop    ebx
c000ff70:	c3                   	ret    
c000ff71:	90                   	nop

c000ff72 <VgaText::getCursorX()>:
c000ff72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff76:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ff7c:	c3                   	ret    
c000ff7d:	90                   	nop

c000ff7e <VgaText::getCursorY()>:
c000ff7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff82:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000ff88:	c3                   	ret    
c000ff89:	90                   	nop

c000ff8a <VgaText::setCursor(int, int)>:
c000ff8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff92:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000ff98:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ff9c:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000ffa2:	e9 77 fd ff ff       	jmp    c000fd1e <VgaText::updateCursor()>
c000ffa7:	90                   	nop

c000ffa8 <VgaText::setCursorX(int)>:
c000ffa8:	83 ec 10             	sub    esp,0x10
c000ffab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffaf:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000ffb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffb9:	50                   	push   eax
c000ffba:	e8 cb ff ff ff       	call   c000ff8a <VgaText::setCursor(int, int)>
c000ffbf:	83 c4 1c             	add    esp,0x1c
c000ffc2:	c3                   	ret    
c000ffc3:	90                   	nop

c000ffc4 <VgaText::setCursorY(int)>:
c000ffc4:	83 ec 10             	sub    esp,0x10
c000ffc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffcb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffcf:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000ffd5:	50                   	push   eax
c000ffd6:	e8 af ff ff ff       	call   c000ff8a <VgaText::setCursor(int, int)>
c000ffdb:	83 c4 1c             	add    esp,0x1c
c000ffde:	c3                   	ret    
c000ffdf:	90                   	nop

c000ffe0 <VgaText::incrementCursor(bool)>:
c000ffe0:	56                   	push   esi
c000ffe1:	53                   	push   ebx
c000ffe2:	51                   	push   ecx
c000ffe3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffe7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ffeb:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000fff1:	40                   	inc    eax
c000fff2:	83 f8 50             	cmp    eax,0x50
c000fff5:	74 08                	je     c000ffff <VgaText::incrementCursor(bool)+0x1f>
c000fff7:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000fffd:	eb 33                	jmp    c0010032 <VgaText::incrementCursor(bool)+0x52>
c000ffff:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010005:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001000f:	8d 50 01             	lea    edx,[eax+0x1]
c0010012:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010018:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001001e:	75 12                	jne    c0010032 <VgaText::incrementCursor(bool)+0x52>
c0010020:	83 ec 0c             	sub    esp,0xc
c0010023:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010029:	53                   	push   ebx
c001002a:	e8 3d fe ff ff       	call   c000fe6c <VgaText::scrollScreen()>
c001002f:	83 c4 10             	add    esp,0x10
c0010032:	89 f0                	mov    eax,esi
c0010034:	84 c0                	test   al,al
c0010036:	74 0c                	je     c0010044 <VgaText::incrementCursor(bool)+0x64>
c0010038:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001003c:	5a                   	pop    edx
c001003d:	5b                   	pop    ebx
c001003e:	5e                   	pop    esi
c001003f:	e9 da fc ff ff       	jmp    c000fd1e <VgaText::updateCursor()>
c0010044:	58                   	pop    eax
c0010045:	5b                   	pop    ebx
c0010046:	5e                   	pop    esi
c0010047:	c3                   	ret    

c0010048 <VgaText::updateRAMUsageDisplay(int)>:
c0010048:	53                   	push   ebx
c0010049:	bb 0a 00 00 00       	mov    ebx,0xa
c001004e:	6a 0f                	push   0xf
c0010050:	6a 00                	push   0x0
c0010052:	e8 03 fe ff ff       	call   c000fe5a <VgaText::combineColours(unsigned char, unsigned char)>
c0010057:	5a                   	pop    edx
c0010058:	59                   	pop    ecx
c0010059:	0f b6 c8             	movzx  ecx,al
c001005c:	51                   	push   ecx
c001005d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010061:	99                   	cdq    
c0010062:	f7 fb                	idiv   ebx
c0010064:	89 d3                	mov    ebx,edx
c0010066:	83 c0 30             	add    eax,0x30
c0010069:	83 c3 30             	add    ebx,0x30
c001006c:	0f be c0             	movsx  eax,al
c001006f:	0f b6 db             	movzx  ebx,bl
c0010072:	50                   	push   eax
c0010073:	e8 88 fe ff ff       	call   c000ff00 <VgaText::combineCharAndColour(char, unsigned char)>
c0010078:	5a                   	pop    edx
c0010079:	5a                   	pop    edx
c001007a:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c0010080:	51                   	push   ecx
c0010081:	53                   	push   ebx
c0010082:	e8 79 fe ff ff       	call   c000ff00 <VgaText::combineCharAndColour(char, unsigned char)>
c0010087:	5b                   	pop    ebx
c0010088:	5a                   	pop    edx
c0010089:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c001008f:	51                   	push   ecx
c0010090:	6a 25                	push   0x25
c0010092:	e8 69 fe ff ff       	call   c000ff00 <VgaText::combineCharAndColour(char, unsigned char)>
c0010097:	59                   	pop    ecx
c0010098:	5b                   	pop    ebx
c0010099:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c001009f:	5b                   	pop    ebx
c00100a0:	c3                   	ret    
c00100a1:	90                   	nop

c00100a2 <VgaText::updateDiskUsage()>:
c00100a2:	55                   	push   ebp
c00100a3:	bd 10 27 00 00       	mov    ebp,0x2710
c00100a8:	57                   	push   edi
c00100a9:	56                   	push   esi
c00100aa:	53                   	push   ebx
c00100ab:	6a 0f                	push   0xf
c00100ad:	6a 00                	push   0x0
c00100af:	e8 a6 fd ff ff       	call   c000fe5a <VgaText::combineColours(unsigned char, unsigned char)>
c00100b4:	5a                   	pop    edx
c00100b5:	0f b6 d8             	movzx  ebx,al
c00100b8:	59                   	pop    ecx
c00100b9:	a1 64 4b 02 c0       	mov    eax,ds:0xc0024b64
c00100be:	53                   	push   ebx
c00100bf:	b9 0a 00 00 00       	mov    ecx,0xa
c00100c4:	99                   	cdq    
c00100c5:	f7 fd                	idiv   ebp
c00100c7:	99                   	cdq    
c00100c8:	f7 f9                	idiv   ecx
c00100ca:	8d 42 30             	lea    eax,[edx+0x30]
c00100cd:	0f b6 c0             	movzx  eax,al
c00100d0:	50                   	push   eax
c00100d1:	e8 2a fe ff ff       	call   c000ff00 <VgaText::combineCharAndColour(char, unsigned char)>
c00100d6:	5e                   	pop    esi
c00100d7:	5f                   	pop    edi
c00100d8:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c00100de:	bf e8 03 00 00       	mov    edi,0x3e8
c00100e3:	53                   	push   ebx
c00100e4:	a1 64 4b 02 c0       	mov    eax,ds:0xc0024b64
c00100e9:	99                   	cdq    
c00100ea:	f7 ff                	idiv   edi
c00100ec:	99                   	cdq    
c00100ed:	f7 f9                	idiv   ecx
c00100ef:	8d 42 30             	lea    eax,[edx+0x30]
c00100f2:	0f b6 c0             	movzx  eax,al
c00100f5:	50                   	push   eax
c00100f6:	e8 05 fe ff ff       	call   c000ff00 <VgaText::combineCharAndColour(char, unsigned char)>
c00100fb:	5a                   	pop    edx
c00100fc:	5e                   	pop    esi
c00100fd:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c0010103:	be 64 00 00 00       	mov    esi,0x64
c0010108:	53                   	push   ebx
c0010109:	a1 64 4b 02 c0       	mov    eax,ds:0xc0024b64
c001010e:	99                   	cdq    
c001010f:	f7 fe                	idiv   esi
c0010111:	99                   	cdq    
c0010112:	f7 f9                	idiv   ecx
c0010114:	8d 42 30             	lea    eax,[edx+0x30]
c0010117:	0f b6 c0             	movzx  eax,al
c001011a:	50                   	push   eax
c001011b:	e8 e0 fd ff ff       	call   c000ff00 <VgaText::combineCharAndColour(char, unsigned char)>
c0010120:	5a                   	pop    edx
c0010121:	5a                   	pop    edx
c0010122:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c0010128:	53                   	push   ebx
c0010129:	a1 64 4b 02 c0       	mov    eax,ds:0xc0024b64
c001012e:	99                   	cdq    
c001012f:	f7 f9                	idiv   ecx
c0010131:	99                   	cdq    
c0010132:	f7 f9                	idiv   ecx
c0010134:	8d 42 30             	lea    eax,[edx+0x30]
c0010137:	0f b6 c0             	movzx  eax,al
c001013a:	50                   	push   eax
c001013b:	e8 c0 fd ff ff       	call   c000ff00 <VgaText::combineCharAndColour(char, unsigned char)>
c0010140:	5a                   	pop    edx
c0010141:	5a                   	pop    edx
c0010142:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c0010148:	53                   	push   ebx
c0010149:	a1 64 4b 02 c0       	mov    eax,ds:0xc0024b64
c001014e:	99                   	cdq    
c001014f:	f7 f9                	idiv   ecx
c0010151:	8d 42 30             	lea    eax,[edx+0x30]
c0010154:	0f b6 c0             	movzx  eax,al
c0010157:	50                   	push   eax
c0010158:	e8 a3 fd ff ff       	call   c000ff00 <VgaText::combineCharAndColour(char, unsigned char)>
c001015d:	5a                   	pop    edx
c001015e:	5a                   	pop    edx
c001015f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c0010165:	53                   	push   ebx
c0010166:	a1 60 4b 02 c0       	mov    eax,ds:0xc0024b60
c001016b:	99                   	cdq    
c001016c:	f7 fd                	idiv   ebp
c001016e:	99                   	cdq    
c001016f:	f7 f9                	idiv   ecx
c0010171:	8d 42 30             	lea    eax,[edx+0x30]
c0010174:	0f b6 c0             	movzx  eax,al
c0010177:	50                   	push   eax
c0010178:	e8 83 fd ff ff       	call   c000ff00 <VgaText::combineCharAndColour(char, unsigned char)>
c001017d:	5d                   	pop    ebp
c001017e:	5a                   	pop    edx
c001017f:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c0010185:	53                   	push   ebx
c0010186:	a1 60 4b 02 c0       	mov    eax,ds:0xc0024b60
c001018b:	99                   	cdq    
c001018c:	f7 ff                	idiv   edi
c001018e:	99                   	cdq    
c001018f:	f7 f9                	idiv   ecx
c0010191:	8d 42 30             	lea    eax,[edx+0x30]
c0010194:	0f b6 c0             	movzx  eax,al
c0010197:	50                   	push   eax
c0010198:	e8 63 fd ff ff       	call   c000ff00 <VgaText::combineCharAndColour(char, unsigned char)>
c001019d:	5f                   	pop    edi
c001019e:	5d                   	pop    ebp
c001019f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c00101a5:	53                   	push   ebx
c00101a6:	a1 60 4b 02 c0       	mov    eax,ds:0xc0024b60
c00101ab:	99                   	cdq    
c00101ac:	f7 fe                	idiv   esi
c00101ae:	99                   	cdq    
c00101af:	f7 f9                	idiv   ecx
c00101b1:	8d 42 30             	lea    eax,[edx+0x30]
c00101b4:	0f b6 c0             	movzx  eax,al
c00101b7:	50                   	push   eax
c00101b8:	e8 43 fd ff ff       	call   c000ff00 <VgaText::combineCharAndColour(char, unsigned char)>
c00101bd:	5a                   	pop    edx
c00101be:	5e                   	pop    esi
c00101bf:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c00101c5:	53                   	push   ebx
c00101c6:	a1 60 4b 02 c0       	mov    eax,ds:0xc0024b60
c00101cb:	99                   	cdq    
c00101cc:	f7 f9                	idiv   ecx
c00101ce:	99                   	cdq    
c00101cf:	f7 f9                	idiv   ecx
c00101d1:	8d 42 30             	lea    eax,[edx+0x30]
c00101d4:	0f b6 c0             	movzx  eax,al
c00101d7:	50                   	push   eax
c00101d8:	e8 23 fd ff ff       	call   c000ff00 <VgaText::combineCharAndColour(char, unsigned char)>
c00101dd:	5f                   	pop    edi
c00101de:	5d                   	pop    ebp
c00101df:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c00101e5:	53                   	push   ebx
c00101e6:	a1 60 4b 02 c0       	mov    eax,ds:0xc0024b60
c00101eb:	99                   	cdq    
c00101ec:	f7 f9                	idiv   ecx
c00101ee:	83 c2 30             	add    edx,0x30
c00101f1:	0f b6 d2             	movzx  edx,dl
c00101f4:	52                   	push   edx
c00101f5:	e8 06 fd ff ff       	call   c000ff00 <VgaText::combineCharAndColour(char, unsigned char)>
c00101fa:	5a                   	pop    edx
c00101fb:	59                   	pop    ecx
c00101fc:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c0010202:	5b                   	pop    ebx
c0010203:	5e                   	pop    esi
c0010204:	5f                   	pop    edi
c0010205:	5d                   	pop    ebp
c0010206:	c3                   	ret    
c0010207:	90                   	nop

c0010208 <VgaText::updateTitle()>:
c0010208:	53                   	push   ebx
c0010209:	31 c0                	xor    eax,eax
c001020b:	83 ec 58             	sub    esp,0x58
c001020e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010212:	89 e1                	mov    ecx,esp
c0010214:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010218:	40                   	inc    eax
c0010219:	83 f8 50             	cmp    eax,0x50
c001021c:	75 f6                	jne    c0010214 <VgaText::updateTitle()+0xc>
c001021e:	31 c0                	xor    eax,eax
c0010220:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010227:	84 db                	test   bl,bl
c0010229:	74 06                	je     c0010231 <VgaText::updateTitle()+0x29>
c001022b:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c001022e:	40                   	inc    eax
c001022f:	eb ef                	jmp    c0010220 <VgaText::updateTitle()+0x18>
c0010231:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010237:	85 c0                	test   eax,eax
c0010239:	74 09                	je     c0010244 <VgaText::updateTitle()+0x3c>
c001023b:	53                   	push   ebx
c001023c:	53                   	push   ebx
c001023d:	51                   	push   ecx
c001023e:	52                   	push   edx
c001023f:	ff d0                	call   eax
c0010241:	83 c4 10             	add    esp,0x10
c0010244:	e8 59 fe ff ff       	call   c00100a2 <VgaText::updateDiskUsage()>
c0010249:	83 c4 58             	add    esp,0x58
c001024c:	5b                   	pop    ebx
c001024d:	c3                   	ret    

c001024e <VgaText::setTitleTextColour(VgaColour)>:
c001024e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010252:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010256:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c001025c:	eb aa                	jmp    c0010208 <VgaText::updateTitle()>

c001025e <VgaText::setTitleColour(VgaColour)>:
c001025e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010262:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010266:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c001026c:	eb 9a                	jmp    c0010208 <VgaText::updateTitle()>

c001026e <VgaText::setTitle(char*)>:
c001026e:	53                   	push   ebx
c001026f:	83 ec 10             	sub    esp,0x10
c0010272:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001027a:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010280:	50                   	push   eax
c0010281:	e8 21 04 ff ff       	call   c00006a7 <strcpy>
c0010286:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001028a:	83 c4 18             	add    esp,0x18
c001028d:	5b                   	pop    ebx
c001028e:	e9 75 ff ff ff       	jmp    c0010208 <VgaText::updateTitle()>
c0010293:	90                   	nop

c0010294 <VgaText::decrementCursor(bool)>:
c0010294:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010298:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001029c:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c00102a2:	85 c0                	test   eax,eax
c00102a4:	74 07                	je     c00102ad <VgaText::decrementCursor(bool)+0x19>
c00102a6:	48                   	dec    eax
c00102a7:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c00102ad:	84 c9                	test   cl,cl
c00102af:	74 09                	je     c00102ba <VgaText::decrementCursor(bool)+0x26>
c00102b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00102b5:	e9 64 fa ff ff       	jmp    c000fd1e <VgaText::updateCursor()>
c00102ba:	c3                   	ret    
c00102bb:	90                   	nop

c00102bc <VgaText::putchar(char, VgaColour, VgaColour)>:
c00102bc:	53                   	push   ebx
c00102bd:	83 ec 08             	sub    esp,0x8
c00102c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00102cc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00102d0:	3c 07                	cmp    al,0x7
c00102d2:	75 2a                	jne    c00102fe <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c00102d4:	a1 44 39 02 c0       	mov    eax,ds:0xc0023944
c00102d9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00102e1:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00102e9:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00102f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00102f5:	83 c4 08             	add    esp,0x8
c00102f8:	5b                   	pop    ebx
c00102f9:	e9 10 2c 00 00       	jmp    c0012f0e <Buzzer::beep(int, int, bool)>
c00102fe:	3c 0d                	cmp    al,0xd
c0010300:	75 0c                	jne    c001030e <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010302:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001030c:	eb 3b                	jmp    c0010349 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c001030e:	3c 0a                	cmp    al,0xa
c0010310:	75 40                	jne    c0010352 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010312:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010318:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010322:	8d 50 01             	lea    edx,[eax+0x1]
c0010325:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001032b:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010331:	75 12                	jne    c0010345 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010333:	83 ec 0c             	sub    esp,0xc
c0010336:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001033c:	53                   	push   ebx
c001033d:	e8 2a fb ff ff       	call   c000fe6c <VgaText::scrollScreen()>
c0010342:	83 c4 10             	add    esp,0x10
c0010345:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010349:	83 c4 08             	add    esp,0x8
c001034c:	5b                   	pop    ebx
c001034d:	e9 cc f9 ff ff       	jmp    c000fd1e <VgaText::updateCursor()>
c0010352:	3c 08                	cmp    al,0x8
c0010354:	75 31                	jne    c0010387 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010356:	50                   	push   eax
c0010357:	50                   	push   eax
c0010358:	6a 01                	push   0x1
c001035a:	53                   	push   ebx
c001035b:	e8 34 ff ff ff       	call   c0010294 <VgaText::decrementCursor(bool)>
c0010360:	5a                   	pop    edx
c0010361:	59                   	pop    ecx
c0010362:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010368:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c001036e:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010374:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001037a:	6a 20                	push   0x20
c001037c:	53                   	push   ebx
c001037d:	e8 90 fb ff ff       	call   c000ff12 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010382:	83 c4 28             	add    esp,0x28
c0010385:	5b                   	pop    ebx
c0010386:	c3                   	ret    
c0010387:	83 ec 08             	sub    esp,0x8
c001038a:	0f be c0             	movsx  eax,al
c001038d:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010393:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010399:	51                   	push   ecx
c001039a:	52                   	push   edx
c001039b:	50                   	push   eax
c001039c:	53                   	push   ebx
c001039d:	e8 70 fb ff ff       	call   c000ff12 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00103a2:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00103a6:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00103ae:	83 c4 28             	add    esp,0x28
c00103b1:	5b                   	pop    ebx
c00103b2:	e9 29 fc ff ff       	jmp    c000ffe0 <VgaText::incrementCursor(bool)>
c00103b7:	90                   	nop

c00103b8 <VgaText::isShowingCursor()>:
c00103b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103bc:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c00103c2:	c3                   	ret    
c00103c3:	90                   	nop

c00103c4 <VgaText::isBlinkDisabled()>:
c00103c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103c8:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c00103ce:	83 f0 01             	xor    eax,0x1
c00103d1:	c3                   	ret    

c00103d2 <VgaText::setCursorHeight(int)>:
c00103d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103da:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c00103e0:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c00103e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00103eb:	e9 48 f9 ff ff       	jmp    c000fd38 <VgaText::showCursor(bool)>

c00103f0 <VgaText::getCursorHeight()>:
c00103f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103f4:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c00103fa:	c3                   	ret    

c00103fb <setActiveTerminal(VgaText*)>:
c00103fb:	53                   	push   ebx
c00103fc:	83 ec 08             	sub    esp,0x8
c00103ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010403:	85 db                	test   ebx,ebx
c0010405:	75 11                	jne    c0010418 <setActiveTerminal(VgaText*)+0x1d>
c0010407:	c7 44 24 10 00 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020800
c001040f:	83 c4 08             	add    esp,0x8
c0010412:	5b                   	pop    ebx
c0010413:	e9 70 c9 ff ff       	jmp    c000cd88 <panic(char const*)>
c0010418:	50                   	push   eax
c0010419:	50                   	push   eax
c001041a:	53                   	push   ebx
c001041b:	68 0e 08 02 c0       	push   0xc002080e
c0010420:	e8 45 c8 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0010425:	a1 24 39 02 c0       	mov    eax,ds:0xc0023924
c001042a:	83 c4 10             	add    esp,0x10
c001042d:	85 c0                	test   eax,eax
c001042f:	74 0c                	je     c001043d <setActiveTerminal(VgaText*)+0x42>
c0010431:	83 ec 0c             	sub    esp,0xc
c0010434:	50                   	push   eax
c0010435:	e8 e4 f8 ff ff       	call   c000fd1e <VgaText::updateCursor()>
c001043a:	83 c4 10             	add    esp,0x10
c001043d:	89 1d 24 39 02 c0    	mov    DWORD PTR ds:0xc0023924,ebx
c0010443:	51                   	push   ecx
c0010444:	51                   	push   ecx
c0010445:	53                   	push   ebx
c0010446:	68 26 08 02 c0       	push   0xc0020826
c001044b:	e8 1a c8 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0010450:	83 c4 0c             	add    esp,0xc
c0010453:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010459:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c001045f:	53                   	push   ebx
c0010460:	e8 25 fb ff ff       	call   c000ff8a <VgaText::setCursor(int, int)>
c0010465:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010468:	e8 57 ff ff ff       	call   c00103c4 <VgaText::isBlinkDisabled()>
c001046d:	5a                   	pop    edx
c001046e:	0f b6 c0             	movzx  eax,al
c0010471:	59                   	pop    ecx
c0010472:	50                   	push   eax
c0010473:	53                   	push   ebx
c0010474:	e8 cf f8 ff ff       	call   c000fd48 <VgaText::disableBlink(bool)>
c0010479:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001047c:	e8 6f ff ff ff       	call   c00103f0 <VgaText::getCursorHeight()>
c0010481:	5a                   	pop    edx
c0010482:	59                   	pop    ecx
c0010483:	50                   	push   eax
c0010484:	53                   	push   ebx
c0010485:	e8 48 ff ff ff       	call   c00103d2 <VgaText::setCursorHeight(int)>
c001048a:	83 c4 10             	add    esp,0x10
c001048d:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010494:	75 0a                	jne    c00104a0 <setActiveTerminal(VgaText*)+0xa5>
c0010496:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c00104a0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104a4:	83 c4 08             	add    esp,0x8
c00104a7:	5b                   	pop    ebx
c00104a8:	e9 1d f8 ff ff       	jmp    c000fcca <VgaText::load()>

c00104ad <doTerminalCycle()>:
c00104ad:	83 ec 18             	sub    esp,0x18
c00104b0:	a1 20 39 02 c0       	mov    eax,ds:0xc0023920
c00104b5:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c00104bb:	50                   	push   eax
c00104bc:	a3 20 39 02 c0       	mov    ds:0xc0023920,eax
c00104c1:	e8 35 ff ff ff       	call   c00103fb <setActiveTerminal(VgaText*)>
c00104c6:	83 c4 1c             	add    esp,0x1c
c00104c9:	c3                   	ret    

c00104ca <VgaText::doUpdate()>:
c00104ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104ce:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c00104d4:	85 c0                	test   eax,eax
c00104d6:	74 02                	je     c00104da <VgaText::doUpdate()+0x10>
c00104d8:	ff e0                	jmp    eax
c00104da:	c3                   	ret    
c00104db:	90                   	nop

c00104dc <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00104dc:	55                   	push   ebp
c00104dd:	57                   	push   edi
c00104de:	56                   	push   esi
c00104df:	53                   	push   ebx
c00104e0:	83 ec 1c             	sub    esp,0x1c
c00104e3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00104e7:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00104ec:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c00104f3:	8d 7d 0c             	lea    edi,[ebp+0xc]
c00104f6:	50                   	push   eax
c00104f7:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00104fc:	50                   	push   eax
c00104fd:	e8 58 f9 ff ff       	call   c000fe5a <VgaText::combineColours(unsigned char, unsigned char)>
c0010502:	59                   	pop    ecx
c0010503:	0f b6 c0             	movzx  eax,al
c0010506:	5b                   	pop    ebx
c0010507:	31 c9                	xor    ecx,ecx
c0010509:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010511:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010515:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c001051b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001051f:	0f b7 db             	movzx  ebx,bx
c0010522:	01 db                	add    ebx,ebx
c0010524:	01 fb                	add    ebx,edi
c0010526:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010529:	84 c0                	test   al,al
c001052b:	0f 84 38 01 00 00    	je     c0010669 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010531:	3c 0d                	cmp    al,0xd
c0010533:	75 0f                	jne    c0010544 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010535:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c001053f:	e9 1f 01 00 00       	jmp    c0010663 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010544:	3c 0a                	cmp    al,0xa
c0010546:	75 5b                	jne    c00105a3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010548:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c001054e:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010558:	8d 48 01             	lea    ecx,[eax+0x1]
c001055b:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010561:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010567:	75 12                	jne    c001057b <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010569:	83 ec 0c             	sub    esp,0xc
c001056c:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010572:	55                   	push   ebp
c0010573:	e8 f4 f8 ff ff       	call   c000fe6c <VgaText::scrollScreen()>
c0010578:	83 c4 10             	add    esp,0x10
c001057b:	83 ec 0c             	sub    esp,0xc
c001057e:	55                   	push   ebp
c001057f:	e8 9a f7 ff ff       	call   c000fd1e <VgaText::updateCursor()>
c0010584:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001058c:	83 c4 10             	add    esp,0x10
c001058f:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010595:	31 c9                	xor    ecx,ecx
c0010597:	0f b7 db             	movzx  ebx,bx
c001059a:	01 db                	add    ebx,ebx
c001059c:	01 fb                	add    ebx,edi
c001059e:	e9 c0 00 00 00       	jmp    c0010663 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00105a3:	3c 08                	cmp    al,0x8
c00105a5:	75 4e                	jne    c00105f5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c00105a7:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00105ab:	53                   	push   ebx
c00105ac:	53                   	push   ebx
c00105ad:	6a 01                	push   0x1
c00105af:	55                   	push   ebp
c00105b0:	e8 df fc ff ff       	call   c0010294 <VgaText::decrementCursor(bool)>
c00105b5:	58                   	pop    eax
c00105b6:	5a                   	pop    edx
c00105b7:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c00105bd:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c00105c3:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c00105c9:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c00105cf:	6a 20                	push   0x20
c00105d1:	55                   	push   ebp
c00105d2:	e8 3b f9 ff ff       	call   c000ff12 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00105d7:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00105df:	83 c4 20             	add    esp,0x20
c00105e2:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00105e8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00105ec:	0f b7 db             	movzx  ebx,bx
c00105ef:	01 db                	add    ebx,ebx
c00105f1:	01 fb                	add    ebx,edi
c00105f3:	eb 6e                	jmp    c0010663 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00105f5:	51                   	push   ecx
c00105f6:	51                   	push   ecx
c00105f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00105fb:	50                   	push   eax
c00105fc:	e8 ff f8 ff ff       	call   c000ff00 <VgaText::combineCharAndColour(char, unsigned char)>
c0010601:	83 c4 10             	add    esp,0x10
c0010604:	66 89 03             	mov    WORD PTR [ebx],ax
c0010607:	39 2d 24 39 02 c0    	cmp    DWORD PTR ds:0xc0023924,ebp
c001060d:	75 2a                	jne    c0010639 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c001060f:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010615:	85 c0                	test   eax,eax
c0010617:	74 20                	je     c0010639 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010619:	52                   	push   edx
c001061a:	52                   	push   edx
c001061b:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010621:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010627:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001062b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001062f:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010632:	51                   	push   ecx
c0010633:	55                   	push   ebp
c0010634:	ff d0                	call   eax
c0010636:	83 c4 20             	add    esp,0x20
c0010639:	83 c3 02             	add    ebx,0x2
c001063c:	50                   	push   eax
c001063d:	50                   	push   eax
c001063e:	6a 00                	push   0x0
c0010640:	55                   	push   ebp
c0010641:	e8 9a f9 ff ff       	call   c000ffe0 <VgaText::incrementCursor(bool)>
c0010646:	83 c4 10             	add    esp,0x10
c0010649:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010650:	75 0f                	jne    c0010661 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010652:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001065a:	0f b7 db             	movzx  ebx,bx
c001065d:	01 db                	add    ebx,ebx
c001065f:	01 fb                	add    ebx,edi
c0010661:	b1 01                	mov    cl,0x1
c0010663:	46                   	inc    esi
c0010664:	e9 bd fe ff ff       	jmp    c0010526 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010669:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001066d:	83 ec 0c             	sub    esp,0xc
c0010670:	55                   	push   ebp
c0010671:	e8 a8 f6 ff ff       	call   c000fd1e <VgaText::updateCursor()>
c0010676:	83 c4 10             	add    esp,0x10
c0010679:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001067d:	84 c9                	test   cl,cl
c001067f:	74 0c                	je     c001068d <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010681:	83 ec 0c             	sub    esp,0xc
c0010684:	55                   	push   ebp
c0010685:	e8 40 fe ff ff       	call   c00104ca <VgaText::doUpdate()>
c001068a:	83 c4 10             	add    esp,0x10
c001068d:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010694:	83 c4 1c             	add    esp,0x1c
c0010697:	5b                   	pop    ebx
c0010698:	5e                   	pop    esi
c0010699:	5f                   	pop    edi
c001069a:	5d                   	pop    ebp
c001069b:	c3                   	ret    

c001069c <VgaText::clearScreen()>:
c001069c:	57                   	push   edi
c001069d:	56                   	push   esi
c001069e:	31 f6                	xor    esi,esi
c00106a0:	53                   	push   ebx
c00106a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106a5:	52                   	push   edx
c00106a6:	6a 00                	push   0x0
c00106a8:	6a 00                	push   0x0
c00106aa:	53                   	push   ebx
c00106ab:	e8 da f8 ff ff       	call   c000ff8a <VgaText::setCursor(int, int)>
c00106b0:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c00106b7:	83 c4 10             	add    esp,0x10
c00106ba:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c00106c0:	7e 26                	jle    c00106e8 <VgaText::clearScreen()+0x4c>
c00106c2:	31 ff                	xor    edi,edi
c00106c4:	50                   	push   eax
c00106c5:	50                   	push   eax
c00106c6:	56                   	push   esi
c00106c7:	57                   	push   edi
c00106c8:	47                   	inc    edi
c00106c9:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00106cf:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00106d5:	6a 20                	push   0x20
c00106d7:	53                   	push   ebx
c00106d8:	e8 35 f8 ff ff       	call   c000ff12 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00106dd:	83 c4 20             	add    esp,0x20
c00106e0:	83 ff 50             	cmp    edi,0x50
c00106e3:	75 df                	jne    c00106c4 <VgaText::clearScreen()+0x28>
c00106e5:	46                   	inc    esi
c00106e6:	eb d2                	jmp    c00106ba <VgaText::clearScreen()+0x1e>
c00106e8:	83 ec 0c             	sub    esp,0xc
c00106eb:	53                   	push   ebx
c00106ec:	e8 d9 fd ff ff       	call   c00104ca <VgaText::doUpdate()>
c00106f1:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c00106f8:	83 c4 10             	add    esp,0x10
c00106fb:	5b                   	pop    ebx
c00106fc:	5e                   	pop    esi
c00106fd:	5f                   	pop    edi
c00106fe:	c3                   	ret    
c00106ff:	90                   	nop

c0010700 <VgaText::putchar(char)>:
c0010700:	56                   	push   esi
c0010701:	53                   	push   ebx
c0010702:	83 ec 14             	sub    esp,0x14
c0010705:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010709:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001070d:	3c 5b                	cmp    al,0x5b
c001070f:	75 21                	jne    c0010732 <VgaText::putchar(char)+0x32>
c0010711:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010718:	74 28                	je     c0010742 <VgaText::putchar(char)+0x42>
c001071a:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010723:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001072d:	e9 e2 00 00 00       	jmp    c0010814 <VgaText::putchar(char)+0x114>
c0010732:	3c 1b                	cmp    al,0x1b
c0010734:	75 0c                	jne    c0010742 <VgaText::putchar(char)+0x42>
c0010736:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001073d:	e9 d2 00 00 00       	jmp    c0010814 <VgaText::putchar(char)+0x114>
c0010742:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010748:	84 c9                	test   cl,cl
c001074a:	0f 84 ab 00 00 00    	je     c00107fb <VgaText::putchar(char)+0xfb>
c0010750:	8d 50 c0             	lea    edx,[eax-0x40]
c0010753:	80 fa 3e             	cmp    dl,0x3e
c0010756:	0f 87 82 00 00 00    	ja     c00107de <VgaText::putchar(char)+0xde>
c001075c:	3c 6d                	cmp    al,0x6d
c001075e:	75 4d                	jne    c00107ad <VgaText::putchar(char)+0xad>
c0010760:	31 f6                	xor    esi,esi
c0010762:	31 d2                	xor    edx,edx
c0010764:	31 c0                	xor    eax,eax
c0010766:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c001076c:	7e 30                	jle    c001079e <VgaText::putchar(char)+0x9e>
c001076e:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010776:	80 fa 3b             	cmp    dl,0x3b
c0010779:	75 17                	jne    c0010792 <VgaText::putchar(char)+0x92>
c001077b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001077f:	50                   	push   eax
c0010780:	53                   	push   ebx
c0010781:	e8 fc f5 ff ff       	call   c000fd82 <VgaText::doANSI_SGR(int)>
c0010786:	59                   	pop    ecx
c0010787:	31 d2                	xor    edx,edx
c0010789:	58                   	pop    eax
c001078a:	31 c0                	xor    eax,eax
c001078c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010790:	eb 09                	jmp    c001079b <VgaText::putchar(char)+0x9b>
c0010792:	6b c0 0a             	imul   eax,eax,0xa
c0010795:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010799:	88 ca                	mov    dl,cl
c001079b:	46                   	inc    esi
c001079c:	eb c8                	jmp    c0010766 <VgaText::putchar(char)+0x66>
c001079e:	84 d2                	test   dl,dl
c00107a0:	74 31                	je     c00107d3 <VgaText::putchar(char)+0xd3>
c00107a2:	50                   	push   eax
c00107a3:	53                   	push   ebx
c00107a4:	e8 d9 f5 ff ff       	call   c000fd82 <VgaText::doANSI_SGR(int)>
c00107a9:	58                   	pop    eax
c00107aa:	5a                   	pop    edx
c00107ab:	eb 26                	jmp    c00107d3 <VgaText::putchar(char)+0xd3>
c00107ad:	3c 4a                	cmp    al,0x4a
c00107af:	75 22                	jne    c00107d3 <VgaText::putchar(char)+0xd3>
c00107b1:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00107b8:	75 19                	jne    c00107d3 <VgaText::putchar(char)+0xd3>
c00107ba:	83 ec 0c             	sub    esp,0xc
c00107bd:	53                   	push   ebx
c00107be:	e8 d9 fe ff ff       	call   c001069c <VgaText::clearScreen()>
c00107c3:	83 c4 0c             	add    esp,0xc
c00107c6:	6a 00                	push   0x0
c00107c8:	6a 00                	push   0x0
c00107ca:	53                   	push   ebx
c00107cb:	e8 ba f7 ff ff       	call   c000ff8a <VgaText::setCursor(int, int)>
c00107d0:	83 c4 10             	add    esp,0x10
c00107d3:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00107dc:	eb 36                	jmp    c0010814 <VgaText::putchar(char)+0x114>
c00107de:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00107e4:	83 fa 0e             	cmp    edx,0xe
c00107e7:	7f 2b                	jg     c0010814 <VgaText::putchar(char)+0x114>
c00107e9:	8d 4a 01             	lea    ecx,[edx+0x1]
c00107ec:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00107f2:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00107f9:	eb 19                	jmp    c0010814 <VgaText::putchar(char)+0x114>
c00107fb:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010801:	0f be c0             	movsx  eax,al
c0010804:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001080a:	50                   	push   eax
c001080b:	53                   	push   ebx
c001080c:	e8 ab fa ff ff       	call   c00102bc <VgaText::putchar(char, VgaColour, VgaColour)>
c0010811:	83 c4 10             	add    esp,0x10
c0010814:	83 c4 14             	add    esp,0x14
c0010817:	5b                   	pop    ebx
c0010818:	5e                   	pop    esi
c0010819:	c3                   	ret    

c001081a <VgaText::puts(char const*)>:
c001081a:	53                   	push   ebx
c001081b:	83 ec 08             	sub    esp,0x8
c001081e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010822:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010825:	84 c0                	test   al,al
c0010827:	74 12                	je     c001083b <VgaText::puts(char const*)+0x21>
c0010829:	43                   	inc    ebx
c001082a:	51                   	push   ecx
c001082b:	51                   	push   ecx
c001082c:	50                   	push   eax
c001082d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010831:	e8 ca fe ff ff       	call   c0010700 <VgaText::putchar(char)>
c0010836:	83 c4 10             	add    esp,0x10
c0010839:	eb e7                	jmp    c0010822 <VgaText::puts(char const*)+0x8>
c001083b:	83 c4 08             	add    esp,0x8
c001083e:	5b                   	pop    ebx
c001083f:	c3                   	ret    

c0010840 <VgaText::putx(unsigned int)>:
c0010840:	57                   	push   edi
c0010841:	b9 11 00 00 00       	mov    ecx,0x11
c0010846:	56                   	push   esi
c0010847:	be 42 08 02 c0       	mov    esi,0xc0020842
c001084c:	53                   	push   ebx
c001084d:	83 ec 20             	sub    esp,0x20
c0010850:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010854:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010858:	fc                   	cld    
c0010859:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001085b:	be 08 00 00 00       	mov    esi,0x8
c0010860:	50                   	push   eax
c0010861:	50                   	push   eax
c0010862:	89 d8                	mov    eax,ebx
c0010864:	c1 e3 04             	shl    ebx,0x4
c0010867:	c1 e8 1c             	shr    eax,0x1c
c001086a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001086f:	50                   	push   eax
c0010870:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010874:	e8 87 fe ff ff       	call   c0010700 <VgaText::putchar(char)>
c0010879:	83 c4 10             	add    esp,0x10
c001087c:	4e                   	dec    esi
c001087d:	75 e1                	jne    c0010860 <VgaText::putx(unsigned int)+0x20>
c001087f:	83 c4 20             	add    esp,0x20
c0010882:	5b                   	pop    ebx
c0010883:	5e                   	pop    esi
c0010884:	5f                   	pop    edi
c0010885:	c3                   	ret    

c0010886 <VgaText::VgaText(char const*)>:
c0010886:	57                   	push   edi
c0010887:	56                   	push   esi
c0010888:	53                   	push   ebx
c0010889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088d:	83 ec 08             	sub    esp,0x8
c0010890:	6a 00                	push   0x0
c0010892:	50                   	push   eax
c0010893:	e8 b8 05 00 00       	call   c0010e50 <UnixFile::UnixFile(int)>
c0010898:	83 c4 10             	add    esp,0x10
c001089b:	ba a8 08 02 c0       	mov    edx,0xc00208a8
c00108a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a4:	89 10                	mov    DWORD PTR [eax],edx
c00108a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108aa:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00108b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b8:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c00108c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c6:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00108cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d1:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00108d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108dc:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00108e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ea:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00108f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f8:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c00108ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010903:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c001090a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001090e:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010914:	bb 00 39 02 c0       	mov    ebx,0xc0023900
c0010919:	b8 08 00 00 00       	mov    eax,0x8
c001091e:	fc                   	cld    
c001091f:	89 d7                	mov    edi,edx
c0010921:	89 de                	mov    esi,ebx
c0010923:	89 c1                	mov    ecx,eax
c0010925:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092b:	05 1e 10 00 00       	add    eax,0x101e
c0010930:	83 ec 08             	sub    esp,0x8
c0010933:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010937:	50                   	push   eax
c0010938:	e8 6a fd fe ff       	call   c00006a7 <strcpy>
c001093d:	83 c4 10             	add    esp,0x10
c0010940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010944:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c001094e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010952:	83 c0 0c             	add    eax,0xc
c0010955:	83 ec 04             	sub    esp,0x4
c0010958:	68 00 0f 00 00       	push   0xf00
c001095d:	6a 00                	push   0x0
c001095f:	50                   	push   eax
c0010960:	e8 a3 fc fe ff       	call   c0000608 <memset>
c0010965:	83 c4 10             	add    esp,0x10
c0010968:	83 ec 04             	sub    esp,0x4
c001096b:	6a 00                	push   0x0
c001096d:	6a 07                	push   0x7
c001096f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010973:	e8 c2 f4 ff ff       	call   c000fe3a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010978:	83 c4 10             	add    esp,0x10
c001097b:	83 ec 08             	sub    esp,0x8
c001097e:	6a 02                	push   0x2
c0010980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010984:	e8 49 fa ff ff       	call   c00103d2 <VgaText::setCursorHeight(int)>
c0010989:	83 c4 10             	add    esp,0x10
c001098c:	83 ec 04             	sub    esp,0x4
c001098f:	6a 00                	push   0x0
c0010991:	6a 00                	push   0x0
c0010993:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010997:	e8 ee f5 ff ff       	call   c000ff8a <VgaText::setCursor(int, int)>
c001099c:	83 c4 10             	add    esp,0x10
c001099f:	83 ec 08             	sub    esp,0x8
c00109a2:	6a 01                	push   0x1
c00109a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109a8:	e8 8b f3 ff ff       	call   c000fd38 <VgaText::showCursor(bool)>
c00109ad:	83 c4 10             	add    esp,0x10
c00109b0:	83 ec 08             	sub    esp,0x8
c00109b3:	6a 01                	push   0x1
c00109b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109b9:	e8 8a f3 ff ff       	call   c000fd48 <VgaText::disableBlink(bool)>
c00109be:	83 c4 10             	add    esp,0x10
c00109c1:	83 ec 0c             	sub    esp,0xc
c00109c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109c8:	e8 cf fc ff ff       	call   c001069c <VgaText::clearScreen()>
c00109cd:	83 c4 10             	add    esp,0x10
c00109d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109d4:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00109db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109df:	05 9e 10 00 00       	add    eax,0x109e
c00109e4:	83 ec 04             	sub    esp,0x4
c00109e7:	68 96 00 00 00       	push   0x96
c00109ec:	6a 00                	push   0x0
c00109ee:	50                   	push   eax
c00109ef:	e8 14 fc fe ff       	call   c0000608 <memset>
c00109f4:	83 c4 10             	add    esp,0x10
c00109f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109fb:	05 34 11 00 00       	add    eax,0x1134
c0010a00:	83 ec 04             	sub    esp,0x4
c0010a03:	68 2c 01 00 00       	push   0x12c
c0010a08:	6a 00                	push   0x0
c0010a0a:	50                   	push   eax
c0010a0b:	e8 f8 fb fe ff       	call   c0000608 <memset>
c0010a10:	83 c4 10             	add    esp,0x10
c0010a13:	90                   	nop
c0010a14:	5b                   	pop    ebx
c0010a15:	5e                   	pop    esi
c0010a16:	5f                   	pop    edi
c0010a17:	c3                   	ret    

c0010a18 <VgaText::receiveKey(unsigned char)>:
c0010a18:	55                   	push   ebp
c0010a19:	57                   	push   edi
c0010a1a:	56                   	push   esi
c0010a1b:	53                   	push   ebx
c0010a1c:	83 ec 1c             	sub    esp,0x1c
c0010a1f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a23:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010a27:	84 db                	test   bl,bl
c0010a29:	0f 84 c9 00 00 00    	je     c0010af8 <VgaText::receiveKey(unsigned char)+0xe0>
c0010a2f:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010a35:	80 fb 08             	cmp    bl,0x8
c0010a38:	75 2c                	jne    c0010a66 <VgaText::receiveKey(unsigned char)+0x4e>
c0010a3a:	83 ec 0c             	sub    esp,0xc
c0010a3d:	57                   	push   edi
c0010a3e:	e8 e2 fb fe ff       	call   c0000625 <strlen>
c0010a43:	83 c4 10             	add    esp,0x10
c0010a46:	85 c0                	test   eax,eax
c0010a48:	74 41                	je     c0010a8b <VgaText::receiveKey(unsigned char)+0x73>
c0010a4a:	50                   	push   eax
c0010a4b:	50                   	push   eax
c0010a4c:	6a 08                	push   0x8
c0010a4e:	56                   	push   esi
c0010a4f:	e8 ac fc ff ff       	call   c0010700 <VgaText::putchar(char)>
c0010a54:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a57:	e8 c9 fb fe ff       	call   c0000625 <strlen>
c0010a5c:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010a64:	eb 22                	jmp    c0010a88 <VgaText::receiveKey(unsigned char)+0x70>
c0010a66:	0f be c3             	movsx  eax,bl
c0010a69:	52                   	push   edx
c0010a6a:	52                   	push   edx
c0010a6b:	50                   	push   eax
c0010a6c:	56                   	push   esi
c0010a6d:	e8 8e fc ff ff       	call   c0010700 <VgaText::putchar(char)>
c0010a72:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010a76:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a7b:	59                   	pop    ecx
c0010a7c:	5d                   	pop    ebp
c0010a7d:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010a81:	50                   	push   eax
c0010a82:	57                   	push   edi
c0010a83:	e8 d6 fc fe ff       	call   c000075e <strcat>
c0010a88:	83 c4 10             	add    esp,0x10
c0010a8b:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010a92:	75 05                	jne    c0010a99 <VgaText::receiveKey(unsigned char)+0x81>
c0010a94:	80 fb 0a             	cmp    bl,0xa
c0010a97:	75 53                	jne    c0010aec <VgaText::receiveKey(unsigned char)+0xd4>
c0010a99:	83 ec 0c             	sub    esp,0xc
c0010a9c:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010aa2:	53                   	push   ebx
c0010aa3:	e8 7d fb fe ff       	call   c0000625 <strlen>
c0010aa8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010aab:	89 c5                	mov    ebp,eax
c0010aad:	e8 73 fb fe ff       	call   c0000625 <strlen>
c0010ab2:	83 c4 10             	add    esp,0x10
c0010ab5:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010ab9:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010abe:	76 10                	jbe    c0010ad0 <VgaText::receiveKey(unsigned char)+0xb8>
c0010ac0:	83 ec 0c             	sub    esp,0xc
c0010ac3:	68 53 08 02 c0       	push   0xc0020853
c0010ac8:	e8 bb c2 ff ff       	call   c000cd88 <panic(char const*)>
c0010acd:	83 c4 10             	add    esp,0x10
c0010ad0:	50                   	push   eax
c0010ad1:	50                   	push   eax
c0010ad2:	57                   	push   edi
c0010ad3:	53                   	push   ebx
c0010ad4:	e8 85 fc fe ff       	call   c000075e <strcat>
c0010ad9:	83 c4 0c             	add    esp,0xc
c0010adc:	68 96 00 00 00       	push   0x96
c0010ae1:	6a 00                	push   0x0
c0010ae3:	57                   	push   edi
c0010ae4:	e8 1f fb fe ff       	call   c0000608 <memset>
c0010ae9:	83 c4 10             	add    esp,0x10
c0010aec:	83 ec 0c             	sub    esp,0xc
c0010aef:	56                   	push   esi
c0010af0:	e8 d5 f9 ff ff       	call   c00104ca <VgaText::doUpdate()>
c0010af5:	83 c4 10             	add    esp,0x10
c0010af8:	83 c4 1c             	add    esp,0x1c
c0010afb:	5b                   	pop    ebx
c0010afc:	5e                   	pop    esi
c0010afd:	5f                   	pop    edi
c0010afe:	5d                   	pop    ebp
c0010aff:	c3                   	ret    

c0010b00 <VgaText::write(unsigned long long, void*, int*)>:
c0010b00:	55                   	push   ebp
c0010b01:	57                   	push   edi
c0010b02:	56                   	push   esi
c0010b03:	53                   	push   ebx
c0010b04:	83 ec 0c             	sub    esp,0xc
c0010b07:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010b0b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010b0f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010b13:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010b1a:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010b1d:	39 eb                	cmp    ebx,ebp
c0010b1f:	74 13                	je     c0010b34 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010b21:	43                   	inc    ebx
c0010b22:	50                   	push   eax
c0010b23:	50                   	push   eax
c0010b24:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010b28:	50                   	push   eax
c0010b29:	56                   	push   esi
c0010b2a:	e8 d1 fb ff ff       	call   c0010700 <VgaText::putchar(char)>
c0010b2f:	83 c4 10             	add    esp,0x10
c0010b32:	eb e9                	jmp    c0010b1d <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010b34:	83 ec 0c             	sub    esp,0xc
c0010b37:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010b3e:	56                   	push   esi
c0010b3f:	e8 86 f9 ff ff       	call   c00104ca <VgaText::doUpdate()>
c0010b44:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010b48:	89 38                	mov    DWORD PTR [eax],edi
c0010b4a:	83 c4 1c             	add    esp,0x1c
c0010b4d:	31 c0                	xor    eax,eax
c0010b4f:	5b                   	pop    ebx
c0010b50:	5e                   	pop    esi
c0010b51:	5f                   	pop    edi
c0010b52:	5d                   	pop    ebp
c0010b53:	c3                   	ret    

c0010b54 <newTerminal(char*)>:
c0010b54:	83 ec 28             	sub    esp,0x28
c0010b57:	68 60 12 00 00       	push   0x1260
c0010b5c:	e8 c3 16 00 00       	call   c0012224 <operator new(unsigned long)>
c0010b61:	5a                   	pop    edx
c0010b62:	59                   	pop    ecx
c0010b63:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010b67:	50                   	push   eax
c0010b68:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010b6c:	e8 15 fd ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c0010b71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b75:	83 c4 2c             	add    esp,0x2c
c0010b78:	c3                   	ret    
c0010b79:	90                   	nop

c0010b7a <TSS::TSS()>:
c0010b7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b7e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b85:	90                   	nop
c0010b86:	c3                   	ret    
c0010b87:	90                   	nop

c0010b88 <TSS::setESP(unsigned long)>:
c0010b88:	55                   	push   ebp
c0010b89:	89 e5                	mov    ebp,esp
c0010b8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b91:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b94:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b97:	90                   	nop
c0010b98:	5d                   	pop    ebp
c0010b99:	c3                   	ret    

c0010b9a <TSS::flush()>:
c0010b9a:	55                   	push   ebp
c0010b9b:	89 e5                	mov    ebp,esp
c0010b9d:	83 ec 10             	sub    esp,0x10
c0010ba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ba3:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ba5:	83 c8 03             	or     eax,0x3
c0010ba8:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010bac:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010bb0:	66 89 d0             	mov    ax,dx
c0010bb3:	0f 00 d8             	ltr    ax
c0010bb6:	90                   	nop
c0010bb7:	c9                   	leave  
c0010bb8:	c3                   	ret    
c0010bb9:	90                   	nop

c0010bba <TSS::setup(unsigned long, unsigned long)>:
c0010bba:	55                   	push   ebp
c0010bbb:	89 e5                	mov    ebp,esp
c0010bbd:	53                   	push   ebx
c0010bbe:	83 ec 14             	sub    esp,0x14
c0010bc1:	83 ec 0c             	sub    esp,0xc
c0010bc4:	6a 68                	push   0x68
c0010bc6:	e8 9a c6 ff ff       	call   c000d265 <malloc>
c0010bcb:	83 c4 10             	add    esp,0x10
c0010bce:	89 c2                	mov    edx,eax
c0010bd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bd3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bd9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bdc:	83 ec 04             	sub    esp,0x4
c0010bdf:	6a 68                	push   0x68
c0010be1:	6a 00                	push   0x0
c0010be3:	50                   	push   eax
c0010be4:	e8 1f fa fe ff       	call   c0000608 <memset>
c0010be9:	83 c4 10             	add    esp,0x10
c0010bec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf2:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010bf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bfe:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010c04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c07:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c0a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c0d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c16:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010c1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c22:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010c28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c2b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c2e:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010c34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c37:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c3a:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010c40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c43:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c46:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010c49:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010c4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c52:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c55:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010c58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c5e:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010c65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c68:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c0010c6b:	e8 59 d7 00 00       	call   c001e3c9 <CPU::readCR3()>
c0010c70:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0010c73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c79:	83 ec 08             	sub    esp,0x8
c0010c7c:	50                   	push   eax
c0010c7d:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010c80:	50                   	push   eax
c0010c81:	e8 9c b8 ff ff       	call   c000c522 <GDTEntry::setBase(unsigned int)>
c0010c86:	83 c4 10             	add    esp,0x10
c0010c89:	83 ec 08             	sub    esp,0x8
c0010c8c:	6a 68                	push   0x68
c0010c8e:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010c91:	50                   	push   eax
c0010c92:	e8 a7 b8 ff ff       	call   c000c53e <GDTEntry::setLimit(unsigned int)>
c0010c97:	83 c4 10             	add    esp,0x10
c0010c9a:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c0010c9e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010ca1:	83 e0 0f             	and    eax,0xf
c0010ca4:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010ca7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010caa:	83 c8 40             	or     eax,0x40
c0010cad:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010cb0:	e8 d1 62 00 00       	call   c0016f86 <thisCPU()>
c0010cb5:	05 78 01 00 00       	add    eax,0x178
c0010cba:	83 ec 04             	sub    esp,0x4
c0010cbd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0010cc0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010cc3:	50                   	push   eax
c0010cc4:	e8 a9 b8 ff ff       	call   c000c572 <GDT::addEntry(GDTEntry)>
c0010cc9:	83 c4 10             	add    esp,0x10
c0010ccc:	89 c2                	mov    edx,eax
c0010cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cd1:	89 10                	mov    DWORD PTR [eax],edx
c0010cd3:	e8 ae 62 00 00       	call   c0016f86 <thisCPU()>
c0010cd8:	05 78 01 00 00       	add    eax,0x178
c0010cdd:	83 ec 0c             	sub    esp,0xc
c0010ce0:	50                   	push   eax
c0010ce1:	e8 d0 b8 ff ff       	call   c000c5b6 <GDT::flush()>
c0010ce6:	83 c4 10             	add    esp,0x10
c0010ce9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cec:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cee:	83 ec 08             	sub    esp,0x8
c0010cf1:	50                   	push   eax
c0010cf2:	68 bc 08 02 c0       	push   0xc00208bc
c0010cf7:	e8 6e bf ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0010cfc:	83 c4 10             	add    esp,0x10
c0010cff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d02:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d04:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010d07:	c9                   	leave  
c0010d08:	c3                   	ret    
c0010d09:	90                   	nop

c0010d0a <ReservedFilename::isAtty()>:
c0010d0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d0e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d11:	31 c0                	xor    eax,eax
c0010d13:	83 fa 08             	cmp    edx,0x8
c0010d16:	74 06                	je     c0010d1e <ReservedFilename::isAtty()+0x14>
c0010d18:	83 fa 06             	cmp    edx,0x6
c0010d1b:	0f 94 c0             	sete   al
c0010d1e:	c3                   	ret    
c0010d1f:	90                   	nop

c0010d20 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010d20:	55                   	push   ebp
c0010d21:	57                   	push   edi
c0010d22:	56                   	push   esi
c0010d23:	53                   	push   ebx
c0010d24:	83 ec 0c             	sub    esp,0xc
c0010d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d2b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010d2f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d32:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010d36:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0010d3a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010d3e:	83 f8 08             	cmp    eax,0x8
c0010d41:	75 08                	jne    c0010d4b <ReservedFilename::read(unsigned long long, void*, int*)+0x2b>
c0010d43:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010d49:	eb 5c                	jmp    c0010da7 <ReservedFilename::read(unsigned long long, void*, int*)+0x87>
c0010d4b:	83 f8 06             	cmp    eax,0x6
c0010d4e:	75 3d                	jne    c0010d8d <ReservedFilename::read(unsigned long long, void*, int*)+0x6d>
c0010d50:	83 ec 0c             	sub    esp,0xc
c0010d53:	68 da 08 02 c0       	push   0xc00208da
c0010d58:	e8 0d bf ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0010d5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d62:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d65:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d6d:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0010d71:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c0010d75:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c0010d79:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0010d7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010d81:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0010d84:	83 c4 1c             	add    esp,0x1c
c0010d87:	5b                   	pop    ebx
c0010d88:	5e                   	pop    esi
c0010d89:	5f                   	pop    edi
c0010d8a:	5d                   	pop    ebp
c0010d8b:	ff e0                	jmp    eax
c0010d8d:	89 c2                	mov    edx,eax
c0010d8f:	83 e2 fd             	and    edx,0xfffffffd
c0010d92:	83 fa 05             	cmp    edx,0x5
c0010d95:	74 ac                	je     c0010d43 <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010d97:	8d 50 f5             	lea    edx,[eax-0xb]
c0010d9a:	83 fa 08             	cmp    edx,0x8
c0010d9d:	76 a4                	jbe    c0010d43 <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010d9f:	83 e8 15             	sub    eax,0x15
c0010da2:	83 f8 08             	cmp    eax,0x8
c0010da5:	76 9c                	jbe    c0010d43 <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010da7:	83 c4 0c             	add    esp,0xc
c0010daa:	31 c0                	xor    eax,eax
c0010dac:	5b                   	pop    ebx
c0010dad:	5e                   	pop    esi
c0010dae:	5f                   	pop    edi
c0010daf:	5d                   	pop    ebp
c0010db0:	c3                   	ret    
c0010db1:	90                   	nop

c0010db2 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010db2:	55                   	push   ebp
c0010db3:	57                   	push   edi
c0010db4:	56                   	push   esi
c0010db5:	53                   	push   ebx
c0010db6:	83 ec 0c             	sub    esp,0xc
c0010db9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dbd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010dc1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dc4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010dc8:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0010dcc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010dd0:	83 f8 08             	cmp    eax,0x8
c0010dd3:	75 08                	jne    c0010ddd <ReservedFilename::write(unsigned long long, void*, int*)+0x2b>
c0010dd5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010ddb:	eb 60                	jmp    c0010e3d <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c0010ddd:	83 f8 06             	cmp    eax,0x6
c0010de0:	75 3d                	jne    c0010e1f <ReservedFilename::write(unsigned long long, void*, int*)+0x6d>
c0010de2:	83 ec 0c             	sub    esp,0xc
c0010de5:	68 e7 08 02 c0       	push   0xc00208e7
c0010dea:	e8 7b be ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0010def:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010df4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010df7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010dfd:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dff:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0010e03:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c0010e07:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c0010e0b:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0010e0f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010e13:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0010e16:	83 c4 1c             	add    esp,0x1c
c0010e19:	5b                   	pop    ebx
c0010e1a:	5e                   	pop    esi
c0010e1b:	5f                   	pop    edi
c0010e1c:	5d                   	pop    ebp
c0010e1d:	ff e0                	jmp    eax
c0010e1f:	83 f8 05             	cmp    eax,0x5
c0010e22:	75 04                	jne    c0010e28 <ReservedFilename::write(unsigned long long, void*, int*)+0x76>
c0010e24:	89 33                	mov    DWORD PTR [ebx],esi
c0010e26:	eb 15                	jmp    c0010e3d <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c0010e28:	83 f8 07             	cmp    eax,0x7
c0010e2b:	74 a8                	je     c0010dd5 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c0010e2d:	8d 50 f5             	lea    edx,[eax-0xb]
c0010e30:	83 fa 08             	cmp    edx,0x8
c0010e33:	76 a0                	jbe    c0010dd5 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c0010e35:	83 e8 15             	sub    eax,0x15
c0010e38:	83 f8 08             	cmp    eax,0x8
c0010e3b:	76 98                	jbe    c0010dd5 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c0010e3d:	83 c4 0c             	add    esp,0xc
c0010e40:	31 c0                	xor    eax,eax
c0010e42:	5b                   	pop    ebx
c0010e43:	5e                   	pop    esi
c0010e44:	5f                   	pop    edi
c0010e45:	5d                   	pop    ebp
c0010e46:	c3                   	ret    
c0010e47:	90                   	nop

c0010e48 <UnixFile::getFileDescriptor()>:
c0010e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e4f:	c3                   	ret    

c0010e50 <UnixFile::UnixFile(int)>:
c0010e50:	83 ec 0c             	sub    esp,0xc
c0010e53:	ba 4c 09 02 c0       	mov    edx,0xc002094c
c0010e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e5c:	89 10                	mov    DWORD PTR [eax],edx
c0010e5e:	a1 00 23 02 c0       	mov    eax,ds:0xc0022300
c0010e63:	8d 50 01             	lea    edx,[eax+0x1]
c0010e66:	89 15 00 23 02 c0    	mov    DWORD PTR ds:0xc0022300,edx
c0010e6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010e70:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e73:	83 ec 08             	sub    esp,0x8
c0010e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e7a:	68 30 39 02 c0       	push   0xc0023930
c0010e7f:	e8 c4 d8 00 00       	call   c001e748 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010e84:	83 c4 10             	add    esp,0x10
c0010e87:	90                   	nop
c0010e88:	83 c4 0c             	add    esp,0xc
c0010e8b:	c3                   	ret    

c0010e8c <ReservedFilename::ReservedFilename(int)>:
c0010e8c:	83 ec 0c             	sub    esp,0xc
c0010e8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e93:	83 ec 08             	sub    esp,0x8
c0010e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e9a:	50                   	push   eax
c0010e9b:	e8 b0 ff ff ff       	call   c0010e50 <UnixFile::UnixFile(int)>
c0010ea0:	83 c4 10             	add    esp,0x10
c0010ea3:	ba 68 09 02 c0       	mov    edx,0xc0020968
c0010ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010eac:	89 10                	mov    DWORD PTR [eax],edx
c0010eae:	90                   	nop
c0010eaf:	83 c4 0c             	add    esp,0xc
c0010eb2:	c3                   	ret    
c0010eb3:	90                   	nop

c0010eb4 <UnixFile::~UnixFile()>:
c0010eb4:	83 ec 1c             	sub    esp,0x1c
c0010eb7:	ba 4c 09 02 c0       	mov    edx,0xc002094c
c0010ebc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ec0:	89 10                	mov    DWORD PTR [eax],edx
c0010ec2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010eca:	83 ec 0c             	sub    esp,0xc
c0010ecd:	68 30 39 02 c0       	push   0xc0023930
c0010ed2:	e8 bf d7 00 00       	call   c001e696 <LinkedList<UnixFile>::getFirstElement()>
c0010ed7:	83 c4 10             	add    esp,0x10
c0010eda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ede:	83 ec 0c             	sub    esp,0xc
c0010ee1:	68 30 39 02 c0       	push   0xc0023930
c0010ee6:	e8 b3 d7 00 00       	call   c001e69e <LinkedList<UnixFile>::removeFirst()>
c0010eeb:	83 c4 10             	add    esp,0x10
c0010eee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ef2:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010ef6:	74 3d                	je     c0010f35 <UnixFile::~UnixFile()+0x81>
c0010ef8:	83 ec 08             	sub    esp,0x8
c0010efb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010eff:	68 30 39 02 c0       	push   0xc0023930
c0010f04:	e8 3f d8 00 00       	call   c001e748 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010f09:	83 c4 10             	add    esp,0x10
c0010f0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f10:	8d 50 01             	lea    edx,[eax+0x1]
c0010f13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010f17:	3d 88 13 00 00       	cmp    eax,0x1388
c0010f1c:	0f 94 c0             	sete   al
c0010f1f:	84 c0                	test   al,al
c0010f21:	74 a7                	je     c0010eca <UnixFile::~UnixFile()+0x16>
c0010f23:	83 ec 0c             	sub    esp,0xc
c0010f26:	68 24 09 02 c0       	push   0xc0020924
c0010f2b:	e8 58 be ff ff       	call   c000cd88 <panic(char const*)>
c0010f30:	83 c4 10             	add    esp,0x10
c0010f33:	eb 95                	jmp    c0010eca <UnixFile::~UnixFile()+0x16>
c0010f35:	90                   	nop
c0010f36:	83 c4 1c             	add    esp,0x1c
c0010f39:	c3                   	ret    

c0010f3a <UnixFile::~UnixFile()>:
c0010f3a:	83 ec 0c             	sub    esp,0xc
c0010f3d:	83 ec 0c             	sub    esp,0xc
c0010f40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f44:	e8 6b ff ff ff       	call   c0010eb4 <UnixFile::~UnixFile()>
c0010f49:	83 c4 10             	add    esp,0x10
c0010f4c:	83 ec 08             	sub    esp,0x8
c0010f4f:	6a 0c                	push   0xc
c0010f51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f55:	e8 d9 12 00 00       	call   c0012233 <operator delete(void*, unsigned long)>
c0010f5a:	83 c4 10             	add    esp,0x10
c0010f5d:	83 c4 0c             	add    esp,0xc
c0010f60:	c3                   	ret    
c0010f61:	90                   	nop

c0010f62 <ReservedFilename::~ReservedFilename()>:
c0010f62:	83 ec 0c             	sub    esp,0xc
c0010f65:	ba 68 09 02 c0       	mov    edx,0xc0020968
c0010f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f6e:	89 10                	mov    DWORD PTR [eax],edx
c0010f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f74:	83 ec 0c             	sub    esp,0xc
c0010f77:	50                   	push   eax
c0010f78:	e8 37 ff ff ff       	call   c0010eb4 <UnixFile::~UnixFile()>
c0010f7d:	83 c4 10             	add    esp,0x10
c0010f80:	90                   	nop
c0010f81:	83 c4 0c             	add    esp,0xc
c0010f84:	c3                   	ret    
c0010f85:	90                   	nop

c0010f86 <ReservedFilename::~ReservedFilename()>:
c0010f86:	83 ec 0c             	sub    esp,0xc
c0010f89:	83 ec 0c             	sub    esp,0xc
c0010f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f90:	e8 cd ff ff ff       	call   c0010f62 <ReservedFilename::~ReservedFilename()>
c0010f95:	83 c4 10             	add    esp,0x10
c0010f98:	83 ec 08             	sub    esp,0x8
c0010f9b:	6a 0c                	push   0xc
c0010f9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fa1:	e8 8d 12 00 00       	call   c0012233 <operator delete(void*, unsigned long)>
c0010fa6:	83 c4 10             	add    esp,0x10
c0010fa9:	83 c4 0c             	add    esp,0xc
c0010fac:	c3                   	ret    

c0010fad <getFromFileDescriptor(int)>:
c0010fad:	83 ec 18             	sub    esp,0x18
c0010fb0:	68 30 39 02 c0       	push   0xc0023930
c0010fb5:	e8 dc d6 00 00       	call   c001e696 <LinkedList<UnixFile>::getFirstElement()>
c0010fba:	83 c4 10             	add    esp,0x10
c0010fbd:	85 c0                	test   eax,eax
c0010fbf:	74 18                	je     c0010fd9 <getFromFileDescriptor(int)+0x2c>
c0010fc1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010fc5:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
c0010fc8:	74 0f                	je     c0010fd9 <getFromFileDescriptor(int)+0x2c>
c0010fca:	52                   	push   edx
c0010fcb:	52                   	push   edx
c0010fcc:	50                   	push   eax
c0010fcd:	68 30 39 02 c0       	push   0xc0023930
c0010fd2:	e8 69 d7 00 00       	call   c001e740 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0010fd7:	eb e1                	jmp    c0010fba <getFromFileDescriptor(int)+0xd>
c0010fd9:	83 c4 0c             	add    esp,0xc
c0010fdc:	c3                   	ret    

c0010fdd <__static_initialization_and_destruction_0(int, int)>:
c0010fdd:	83 ec 0c             	sub    esp,0xc
c0010fe0:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0010fe5:	75 34                	jne    c001101b <__static_initialization_and_destruction_0(int, int)+0x3e>
c0010fe7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0010fef:	75 2a                	jne    c001101b <__static_initialization_and_destruction_0(int, int)+0x3e>
c0010ff1:	83 ec 0c             	sub    esp,0xc
c0010ff4:	68 30 39 02 c0       	push   0xc0023930
c0010ff9:	e8 40 d6 00 00       	call   c001e63e <LinkedList<UnixFile>::LinkedList()>
c0010ffe:	83 c4 10             	add    esp,0x10
c0011001:	83 ec 04             	sub    esp,0x4
c0011004:	68 84 22 02 c0       	push   0xc0022284
c0011009:	68 30 39 02 c0       	push   0xc0023930
c001100e:	68 3c e6 01 c0       	push   0xc001e63c
c0011013:	e8 97 11 00 00       	call   c00121af <__cxa_atexit>
c0011018:	83 c4 10             	add    esp,0x10
c001101b:	90                   	nop
c001101c:	83 c4 0c             	add    esp,0xc
c001101f:	c3                   	ret    

c0011020 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011020:	83 ec 0c             	sub    esp,0xc
c0011023:	83 ec 08             	sub    esp,0x8
c0011026:	68 ff ff 00 00       	push   0xffff
c001102b:	6a 01                	push   0x1
c001102d:	e8 ab ff ff ff       	call   c0010fdd <__static_initialization_and_destruction_0(int, int)>
c0011032:	83 c4 10             	add    esp,0x10
c0011035:	83 c4 0c             	add    esp,0xc
c0011038:	c3                   	ret    
c0011039:	90                   	nop

c001103a <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001103a:	53                   	push   ebx
c001103b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001103f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011043:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011049:	89 c8                	mov    eax,ecx
c001104b:	d1 e8                	shr    eax,1
c001104d:	03 05 08 23 02 c0    	add    eax,DWORD PTR ds:0xc0022308
c0011053:	83 e1 01             	and    ecx,0x1
c0011056:	8a 10                	mov    dl,BYTE PTR [eax]
c0011058:	75 09                	jne    c0011063 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c001105a:	83 e2 f0             	and    edx,0xfffffff0
c001105d:	09 da                	or     edx,ebx
c001105f:	88 10                	mov    BYTE PTR [eax],dl
c0011061:	5b                   	pop    ebx
c0011062:	c3                   	ret    
c0011063:	c1 e3 04             	shl    ebx,0x4
c0011066:	83 e2 0f             	and    edx,0xf
c0011069:	09 da                	or     edx,ebx
c001106b:	88 10                	mov    BYTE PTR [eax],dl
c001106d:	5b                   	pop    ebx
c001106e:	c3                   	ret    

c001106f <Virt::getPageState(unsigned long)>:
c001106f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011073:	8b 0d 08 23 02 c0    	mov    ecx,DWORD PTR ds:0xc0022308
c0011079:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001107f:	89 d0                	mov    eax,edx
c0011081:	d1 e8                	shr    eax,1
c0011083:	83 e2 01             	and    edx,0x1
c0011086:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011089:	75 04                	jne    c001108f <Virt::getPageState(unsigned long)+0x20>
c001108b:	83 e0 0f             	and    eax,0xf
c001108e:	c3                   	ret    
c001108f:	c0 e8 04             	shr    al,0x4
c0011092:	c3                   	ret    

c0011093 <Virt::allocateKernelVirtualPages(int)>:
c0011093:	55                   	push   ebp
c0011094:	31 ed                	xor    ebp,ebp
c0011096:	57                   	push   edi
c0011097:	56                   	push   esi
c0011098:	53                   	push   ebx
c0011099:	31 db                	xor    ebx,ebx
c001109b:	83 ec 1c             	sub    esp,0x1c
c001109e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00110a2:	8b 3d 04 23 02 c0    	mov    edi,DWORD PTR ds:0xc0022304
c00110a8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00110ad:	57                   	push   edi
c00110ae:	e8 bc ff ff ff       	call   c001106f <Virt::getPageState(unsigned long)>
c00110b3:	5a                   	pop    edx
c00110b4:	84 c0                	test   al,al
c00110b6:	75 3a                	jne    c00110f2 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00110b8:	85 db                	test   ebx,ebx
c00110ba:	75 02                	jne    c00110be <Virt::allocateKernelVirtualPages(int)+0x2b>
c00110bc:	89 fd                	mov    ebp,edi
c00110be:	43                   	inc    ebx
c00110bf:	39 f3                	cmp    ebx,esi
c00110c1:	74 5a                	je     c001111d <Virt::allocateKernelVirtualPages(int)+0x8a>
c00110c3:	47                   	inc    edi
c00110c4:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00110ca:	76 31                	jbe    c00110fd <Virt::allocateKernelVirtualPages(int)+0x6a>
c00110cc:	c7 05 04 23 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022304,0xc8000
c00110d6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00110db:	75 28                	jne    c0011105 <Virt::allocateKernelVirtualPages(int)+0x72>
c00110dd:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00110e2:	bf 00 80 0c 00       	mov    edi,0xc8000
c00110e7:	57                   	push   edi
c00110e8:	e8 82 ff ff ff       	call   c001106f <Virt::getPageState(unsigned long)>
c00110ed:	5a                   	pop    edx
c00110ee:	84 c0                	test   al,al
c00110f0:	74 c6                	je     c00110b8 <Virt::allocateKernelVirtualPages(int)+0x25>
c00110f2:	31 db                	xor    ebx,ebx
c00110f4:	47                   	inc    edi
c00110f5:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00110fb:	77 cf                	ja     c00110cc <Virt::allocateKernelVirtualPages(int)+0x39>
c00110fd:	89 3d 04 23 02 c0    	mov    DWORD PTR ds:0xc0022304,edi
c0011103:	eb a8                	jmp    c00110ad <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011105:	83 ec 0c             	sub    esp,0xc
c0011108:	68 7c 09 02 c0       	push   0xc002097c
c001110d:	e8 76 bc ff ff       	call   c000cd88 <panic(char const*)>
c0011112:	8b 3d 04 23 02 c0    	mov    edi,DWORD PTR ds:0xc0022304
c0011118:	83 c4 10             	add    esp,0x10
c001111b:	eb 90                	jmp    c00110ad <Virt::allocateKernelVirtualPages(int)+0x1a>
c001111d:	89 2d 04 23 02 c0    	mov    DWORD PTR ds:0xc0022304,ebp
c0011123:	4b                   	dec    ebx
c0011124:	74 5f                	je     c0011185 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011126:	85 f6                	test   esi,esi
c0011128:	74 3d                	je     c0011167 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001112a:	89 e8                	mov    eax,ebp
c001112c:	31 db                	xor    ebx,ebx
c001112e:	8d 7e ff             	lea    edi,[esi-0x1]
c0011131:	eb 14                	jmp    c0011147 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011133:	6a 01                	push   0x1
c0011135:	43                   	inc    ebx
c0011136:	50                   	push   eax
c0011137:	e8 fe fe ff ff       	call   c001103a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001113c:	58                   	pop    eax
c001113d:	39 f3                	cmp    ebx,esi
c001113f:	5a                   	pop    edx
c0011140:	74 25                	je     c0011167 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011142:	a1 04 23 02 c0       	mov    eax,ds:0xc0022304
c0011147:	8d 50 01             	lea    edx,[eax+0x1]
c001114a:	85 db                	test   ebx,ebx
c001114c:	89 15 04 23 02 c0    	mov    DWORD PTR ds:0xc0022304,edx
c0011152:	74 20                	je     c0011174 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011154:	39 df                	cmp    edi,ebx
c0011156:	75 db                	jne    c0011133 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011158:	6a 03                	push   0x3
c001115a:	43                   	inc    ebx
c001115b:	50                   	push   eax
c001115c:	e8 d9 fe ff ff       	call   c001103a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011161:	59                   	pop    ecx
c0011162:	39 f3                	cmp    ebx,esi
c0011164:	58                   	pop    eax
c0011165:	75 db                	jne    c0011142 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011167:	83 c4 1c             	add    esp,0x1c
c001116a:	89 e8                	mov    eax,ebp
c001116c:	5b                   	pop    ebx
c001116d:	c1 e0 0c             	shl    eax,0xc
c0011170:	5e                   	pop    esi
c0011171:	5f                   	pop    edi
c0011172:	5d                   	pop    ebp
c0011173:	c3                   	ret    
c0011174:	6a 02                	push   0x2
c0011176:	bb 01 00 00 00       	mov    ebx,0x1
c001117b:	50                   	push   eax
c001117c:	e8 b9 fe ff ff       	call   c001103a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011181:	58                   	pop    eax
c0011182:	5a                   	pop    edx
c0011183:	eb bd                	jmp    c0011142 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011185:	6a 04                	push   0x4
c0011187:	8d 45 01             	lea    eax,[ebp+0x1]
c001118a:	55                   	push   ebp
c001118b:	a3 04 23 02 c0       	mov    ds:0xc0022304,eax
c0011190:	e8 a5 fe ff ff       	call   c001103a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011195:	59                   	pop    ecx
c0011196:	89 e8                	mov    eax,ebp
c0011198:	5b                   	pop    ebx
c0011199:	c1 e0 0c             	shl    eax,0xc
c001119c:	83 c4 1c             	add    esp,0x1c
c001119f:	5b                   	pop    ebx
c00111a0:	5e                   	pop    esi
c00111a1:	5f                   	pop    edi
c00111a2:	5d                   	pop    ebp
c00111a3:	c3                   	ret    

c00111a4 <Virt::virtualMemorySetup()>:
c00111a4:	53                   	push   ebx
c00111a5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00111aa:	83 ec 08             	sub    esp,0x8
c00111ad:	6a 0f                	push   0xf
c00111af:	53                   	push   ebx
c00111b0:	43                   	inc    ebx
c00111b1:	e8 84 fe ff ff       	call   c001103a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00111b6:	59                   	pop    ecx
c00111b7:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00111bd:	58                   	pop    eax
c00111be:	75 ed                	jne    c00111ad <Virt::virtualMemorySetup()+0x9>
c00111c0:	83 ec 08             	sub    esp,0x8
c00111c3:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00111c8:	68 00 00 00 c8       	push   0xc8000000
c00111cd:	68 27 0b 02 c0       	push   0xc0020b27
c00111d2:	e8 93 ba ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c00111d7:	58                   	pop    eax
c00111d8:	5a                   	pop    edx
c00111d9:	68 00 f0 ff ef       	push   0xeffff000
c00111de:	68 3b 0b 02 c0       	push   0xc0020b3b
c00111e3:	e8 82 ba ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c00111e8:	83 c4 10             	add    esp,0x10
c00111eb:	83 ec 08             	sub    esp,0x8
c00111ee:	6a 00                	push   0x0
c00111f0:	53                   	push   ebx
c00111f1:	43                   	inc    ebx
c00111f2:	e8 43 fe ff ff       	call   c001103a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00111f7:	83 c4 10             	add    esp,0x10
c00111fa:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011200:	75 e9                	jne    c00111eb <Virt::virtualMemorySetup()+0x47>
c0011202:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011207:	83 ec 08             	sub    esp,0x8
c001120a:	6a 0f                	push   0xf
c001120c:	53                   	push   ebx
c001120d:	43                   	inc    ebx
c001120e:	e8 27 fe ff ff       	call   c001103a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011213:	83 c4 10             	add    esp,0x10
c0011216:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001121c:	75 e9                	jne    c0011207 <Virt::virtualMemorySetup()+0x63>
c001121e:	83 c4 08             	add    esp,0x8
c0011221:	5b                   	pop    ebx
c0011222:	c3                   	ret    

c0011223 <Virt::getAKernelVAS()>:
c0011223:	a1 3c 39 02 c0       	mov    eax,ds:0xc002393c
c0011228:	c3                   	ret    

c0011229 <Virt::setupPageSwapping(int)>:
c0011229:	57                   	push   edi
c001122a:	56                   	push   esi
c001122b:	53                   	push   ebx
c001122c:	83 ec 1c             	sub    esp,0x1c
c001122f:	68 14 01 00 00       	push   0x114
c0011234:	e8 eb 0f 00 00       	call   c0012224 <operator new(unsigned long)>
c0011239:	83 c4 0c             	add    esp,0xc
c001123c:	89 c6                	mov    esi,eax
c001123e:	ff 35 dc 36 02 c0    	push   DWORD PTR ds:0xc00236dc
c0011244:	68 4f 0b 02 c0       	push   0xc0020b4f
c0011249:	50                   	push   eax
c001124a:	e8 03 14 00 00       	call   c0012652 <File::File(char const*, Process*)>
c001124f:	89 34 24             	mov    DWORD PTR [esp],esi
c0011252:	e8 d7 15 00 00       	call   c001282e <File::unlink()>
c0011257:	58                   	pop    eax
c0011258:	5a                   	pop    edx
c0011259:	6a 12                	push   0x12
c001125b:	56                   	push   esi
c001125c:	e8 55 14 00 00       	call   c00126b6 <File::open(FileOpenMode)>
c0011261:	83 c4 10             	add    esp,0x10
c0011264:	85 c0                	test   eax,eax
c0011266:	0f 85 bf 00 00 00    	jne    c001132b <Virt::setupPageSwapping(int)+0x102>
c001126c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011270:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011278:	c1 e3 08             	shl    ebx,0x8
c001127b:	83 ec 0c             	sub    esp,0xc
c001127e:	68 00 00 01 00       	push   0x10000
c0011283:	e8 dd bf ff ff       	call   c000d265 <malloc>
c0011288:	83 c4 0c             	add    esp,0xc
c001128b:	89 c7                	mov    edi,eax
c001128d:	68 00 00 01 00       	push   0x10000
c0011292:	6a 00                	push   0x0
c0011294:	50                   	push   eax
c0011295:	e8 6e f3 fe ff       	call   c0000608 <memset>
c001129a:	83 c4 10             	add    esp,0x10
c001129d:	85 db                	test   ebx,ebx
c001129f:	79 03                	jns    c00112a4 <Virt::setupPageSwapping(int)+0x7b>
c00112a1:	83 c3 0f             	add    ebx,0xf
c00112a4:	c1 fb 04             	sar    ebx,0x4
c00112a7:	4b                   	dec    ebx
c00112a8:	83 fb ff             	cmp    ebx,0xffffffff
c00112ab:	74 4b                	je     c00112f8 <Virt::setupPageSwapping(int)+0xcf>
c00112ad:	83 ec 0c             	sub    esp,0xc
c00112b0:	8b 06                	mov    eax,DWORD PTR [esi]
c00112b2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00112b6:	52                   	push   edx
c00112b7:	57                   	push   edi
c00112b8:	6a 00                	push   0x0
c00112ba:	68 00 00 01 00       	push   0x10000
c00112bf:	56                   	push   esi
c00112c0:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00112c3:	83 c4 20             	add    esp,0x20
c00112c6:	85 c0                	test   eax,eax
c00112c8:	75 4e                	jne    c0011318 <Virt::setupPageSwapping(int)+0xef>
c00112ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112ce:	3d 00 00 01 00       	cmp    eax,0x10000
c00112d3:	74 d2                	je     c00112a7 <Virt::setupPageSwapping(int)+0x7e>
c00112d5:	83 ec 08             	sub    esp,0x8
c00112d8:	4b                   	dec    ebx
c00112d9:	50                   	push   eax
c00112da:	68 a2 0b 02 c0       	push   0xc0020ba2
c00112df:	e8 86 b9 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c00112e4:	c7 04 24 ab 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bab
c00112eb:	e8 98 ba ff ff       	call   c000cd88 <panic(char const*)>
c00112f0:	83 c4 10             	add    esp,0x10
c00112f3:	83 fb ff             	cmp    ebx,0xffffffff
c00112f6:	75 b5                	jne    c00112ad <Virt::setupPageSwapping(int)+0x84>
c00112f8:	83 ec 0c             	sub    esp,0xc
c00112fb:	56                   	push   esi
c00112fc:	e8 13 14 00 00       	call   c0012714 <File::close()>
c0011301:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011304:	e8 7c bf ff ff       	call   c000d285 <rfree>
c0011309:	89 34 24             	mov    DWORD PTR [esp],esi
c001130c:	8b 06                	mov    eax,DWORD PTR [esi]
c001130e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011311:	83 c4 20             	add    esp,0x20
c0011314:	5b                   	pop    ebx
c0011315:	5e                   	pop    esi
c0011316:	5f                   	pop    edi
c0011317:	c3                   	ret    
c0011318:	83 ec 08             	sub    esp,0x8
c001131b:	50                   	push   eax
c001131c:	68 8a 0b 02 c0       	push   0xc0020b8a
c0011321:	e8 44 b9 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0011326:	83 c4 10             	add    esp,0x10
c0011329:	eb 9f                	jmp    c00112ca <Virt::setupPageSwapping(int)+0xa1>
c001132b:	83 ec 08             	sub    esp,0x8
c001132e:	50                   	push   eax
c001132f:	68 66 0b 02 c0       	push   0xc0020b66
c0011334:	e8 31 b9 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0011339:	c7 04 24 6f 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b6f
c0011340:	e8 43 ba ff ff       	call   c000cd88 <panic(char const*)>
c0011345:	83 c4 10             	add    esp,0x10
c0011348:	e9 1f ff ff ff       	jmp    c001126c <Virt::setupPageSwapping(int)+0x43>
c001134d:	90                   	nop

c001134e <VAS::VAS()>:
c001134e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011352:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011359:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001135d:	a3 3c 39 02 c0       	mov    ds:0xc002393c,eax
c0011362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011366:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001136a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001136e:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011371:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011375:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c001137c:	90                   	nop
c001137d:	c3                   	ret    

c001137e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001137e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011382:	89 c2                	mov    edx,eax
c0011384:	c1 e8 0a             	shr    eax,0xa
c0011387:	c1 ea 16             	shr    edx,0x16
c001138a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001138f:	19 c9                	sbb    ecx,ecx
c0011391:	c1 e2 0c             	shl    edx,0xc
c0011394:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001139a:	25 fc 0f 00 00       	and    eax,0xffc
c001139f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00113a6:	01 d0                	add    eax,edx
c00113a8:	c3                   	ret    
c00113a9:	90                   	nop

c00113aa <VAS::getPageTableEntry(unsigned long)>:
c00113aa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00113ae:	89 ca                	mov    edx,ecx
c00113b0:	c1 e9 0a             	shr    ecx,0xa
c00113b3:	c1 ea 16             	shr    edx,0x16
c00113b6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00113bc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00113c2:	c1 e0 0c             	shl    eax,0xc
c00113c5:	8d 04 08             	lea    eax,[eax+ecx*1]
c00113c8:	c3                   	ret    

c00113c9 <Virt::freeKernelVirtualPages(unsigned long)>:
c00113c9:	57                   	push   edi
c00113ca:	56                   	push   esi
c00113cb:	be 01 00 00 00       	mov    esi,0x1
c00113d0:	53                   	push   ebx
c00113d1:	83 ec 10             	sub    esp,0x10
c00113d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00113d8:	c1 eb 0c             	shr    ebx,0xc
c00113db:	eb 3f                	jmp    c001141c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00113dd:	e8 41 fe ff ff       	call   c0011223 <Virt::getAKernelVAS()>
c00113e2:	83 ec 08             	sub    esp,0x8
c00113e5:	57                   	push   edi
c00113e6:	50                   	push   eax
c00113e7:	e8 be ff ff ff       	call   c00113aa <VAS::getPageTableEntry(unsigned long)>
c00113ec:	83 c4 10             	add    esp,0x10
c00113ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00113f1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00113f5:	f6 c4 04             	test   ah,0x4
c00113f8:	75 5f                	jne    c0011459 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c00113fa:	80 fa 04             	cmp    dl,0x4
c00113fd:	74 78                	je     c0011477 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c00113ff:	80 fa 02             	cmp    dl,0x2
c0011402:	0f 84 88 00 00 00    	je     c0011490 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011408:	80 fa 03             	cmp    dl,0x3
c001140b:	0f 84 ad 00 00 00    	je     c00114be <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011411:	fe ca                	dec    dl
c0011413:	0f 84 92 00 00 00    	je     c00114ab <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011419:	43                   	inc    ebx
c001141a:	31 f6                	xor    esi,esi
c001141c:	53                   	push   ebx
c001141d:	e8 4d fc ff ff       	call   c001106f <Virt::getPageState(unsigned long)>
c0011422:	5f                   	pop    edi
c0011423:	89 df                	mov    edi,ebx
c0011425:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011429:	c1 e7 0c             	shl    edi,0xc
c001142c:	84 c0                	test   al,al
c001142e:	75 ad                	jne    c00113dd <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011430:	83 ec 0c             	sub    esp,0xc
c0011433:	68 b1 0b 02 c0       	push   0xc0020bb1
c0011438:	e8 4b b9 ff ff       	call   c000cd88 <panic(char const*)>
c001143d:	e8 e1 fd ff ff       	call   c0011223 <Virt::getAKernelVAS()>
c0011442:	5a                   	pop    edx
c0011443:	59                   	pop    ecx
c0011444:	57                   	push   edi
c0011445:	50                   	push   eax
c0011446:	e8 5f ff ff ff       	call   c00113aa <VAS::getPageTableEntry(unsigned long)>
c001144b:	83 c4 10             	add    esp,0x10
c001144e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011450:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011454:	f6 c4 04             	test   ah,0x4
c0011457:	74 c0                	je     c0011419 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011459:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001145d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011462:	83 ec 0c             	sub    esp,0xc
c0011465:	50                   	push   eax
c0011466:	e8 1a c3 ff ff       	call   c000d785 <Phys::freePage(unsigned long)>
c001146b:	83 c4 10             	add    esp,0x10
c001146e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011472:	80 fa 04             	cmp    dl,0x4
c0011475:	75 88                	jne    c00113ff <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011477:	89 f0                	mov    eax,esi
c0011479:	84 c0                	test   al,al
c001147b:	75 47                	jne    c00114c4 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001147d:	c7 44 24 20 9c 09 02 c0 	mov    DWORD PTR [esp+0x20],0xc002099c
c0011485:	83 c4 10             	add    esp,0x10
c0011488:	5b                   	pop    ebx
c0011489:	5e                   	pop    esi
c001148a:	5f                   	pop    edi
c001148b:	e9 f8 b8 ff ff       	jmp    c000cd88 <panic(char const*)>
c0011490:	89 f0                	mov    eax,esi
c0011492:	84 c0                	test   al,al
c0011494:	75 15                	jne    c00114ab <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011496:	83 ec 0c             	sub    esp,0xc
c0011499:	68 cd 0b 02 c0       	push   0xc0020bcd
c001149e:	e8 e5 b8 ff ff       	call   c000cd88 <panic(char const*)>
c00114a3:	83 c4 10             	add    esp,0x10
c00114a6:	e9 6e ff ff ff       	jmp    c0011419 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00114ab:	83 ec 08             	sub    esp,0x8
c00114ae:	6a 00                	push   0x0
c00114b0:	53                   	push   ebx
c00114b1:	e8 84 fb ff ff       	call   c001103a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00114b6:	83 c4 10             	add    esp,0x10
c00114b9:	e9 5b ff ff ff       	jmp    c0011419 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00114be:	89 f0                	mov    eax,esi
c00114c0:	84 c0                	test   al,al
c00114c2:	75 15                	jne    c00114d9 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00114c4:	83 ec 08             	sub    esp,0x8
c00114c7:	6a 00                	push   0x0
c00114c9:	53                   	push   ebx
c00114ca:	e8 6b fb ff ff       	call   c001103a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00114cf:	83 c4 10             	add    esp,0x10
c00114d2:	83 c4 10             	add    esp,0x10
c00114d5:	5b                   	pop    ebx
c00114d6:	5e                   	pop    esi
c00114d7:	5f                   	pop    edi
c00114d8:	c3                   	ret    
c00114d9:	c7 44 24 20 e9 0b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020be9
c00114e1:	83 c4 10             	add    esp,0x10
c00114e4:	5b                   	pop    ebx
c00114e5:	5e                   	pop    esi
c00114e6:	5f                   	pop    edi
c00114e7:	e9 9c b8 ff ff       	jmp    c000cd88 <panic(char const*)>

c00114ec <VAS::freeAllocatedPages(unsigned long)>:
c00114ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00114f4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00114f8:	74 09                	je     c0011503 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00114fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00114fe:	e9 c6 fe ff ff       	jmp    c00113c9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011503:	c7 44 24 04 c0 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc00209c0
c001150b:	e9 5a b7 ff ff       	jmp    c000cc6a <kprintf(char const*, ...)>

c0011510 <VAS::virtualToPhysical(unsigned long)>:
c0011510:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011514:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011518:	e8 8d fe ff ff       	call   c00113aa <VAS::getPageTableEntry(unsigned long)>
c001151d:	5a                   	pop    edx
c001151e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011520:	59                   	pop    ecx
c0011521:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011526:	c3                   	ret    
c0011527:	90                   	nop

c0011528 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011528:	83 ec 0c             	sub    esp,0xc
c001152b:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0011530:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011534:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001153b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c001153e:	19 c0                	sbb    eax,eax
c0011540:	83 ca 03             	or     edx,0x3
c0011543:	83 e0 fc             	and    eax,0xfffffffc
c0011546:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001154d:	e8 77 ce 00 00       	call   c001e3c9 <CPU::readCR3()>
c0011552:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011556:	83 c4 0c             	add    esp,0xc
c0011559:	e9 8f ce 00 00       	jmp    c001e3ed <CPU::writeCR3(unsigned long)>

c001155e <VAS::~VAS()>:
c001155e:	83 ec 2c             	sub    esp,0x2c
c0011561:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011569:	e8 9e cb ff ff       	call   c000e10c <lockScheduler()>
c001156e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011573:	8b 00                	mov    eax,DWORD PTR [eax]
c0011575:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011578:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001157e:	83 ec 04             	sub    esp,0x4
c0011581:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011585:	6a 01                	push   0x1
c0011587:	50                   	push   eax
c0011588:	e8 9b ff ff ff       	call   c0011528 <VAS::mapOtherVASIn(bool, VAS*)>
c001158d:	83 c4 10             	add    esp,0x10
c0011590:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011598:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00115a0:	0f 8f d7 00 00 00    	jg     c001167d <VAS::~VAS()+0x11f>
c00115a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00115ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00115b1:	c1 e2 02             	shl    edx,0x2
c00115b4:	01 d0                	add    eax,edx
c00115b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00115b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00115bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115c0:	83 e0 01             	and    eax,0x1
c00115c3:	0f 84 ab 00 00 00    	je     c0011674 <VAS::~VAS()+0x116>
c00115c9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00115d1:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00115d9:	7f 75                	jg     c0011650 <VAS::~VAS()+0xf2>
c00115db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00115df:	c1 e0 0a             	shl    eax,0xa
c00115e2:	89 c2                	mov    edx,eax
c00115e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00115e8:	01 d0                	add    eax,edx
c00115ea:	c1 e0 0c             	shl    eax,0xc
c00115ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00115f1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00115f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00115f8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00115fb:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011601:	83 ec 04             	sub    esp,0x4
c0011604:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011608:	6a 01                	push   0x1
c001160a:	50                   	push   eax
c001160b:	e8 6e fd ff ff       	call   c001137e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011610:	83 c4 10             	add    esp,0x10
c0011613:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001161b:	8b 00                	mov    eax,DWORD PTR [eax]
c001161d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011621:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011625:	25 01 04 00 00       	and    eax,0x401
c001162a:	3d 01 04 00 00       	cmp    eax,0x401
c001162f:	75 19                	jne    c001164a <VAS::~VAS()+0xec>
c0011631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011635:	25 00 f0 ff ff       	and    eax,0xfffff000
c001163a:	83 ec 0c             	sub    esp,0xc
c001163d:	50                   	push   eax
c001163e:	e8 42 c1 ff ff       	call   c000d785 <Phys::freePage(unsigned long)>
c0011643:	83 c4 10             	add    esp,0x10
c0011646:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001164a:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001164e:	eb 81                	jmp    c00115d1 <VAS::~VAS()+0x73>
c0011650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011654:	25 00 04 00 00       	and    eax,0x400
c0011659:	74 19                	je     c0011674 <VAS::~VAS()+0x116>
c001165b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001165f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011664:	83 ec 0c             	sub    esp,0xc
c0011667:	50                   	push   eax
c0011668:	e8 18 c1 ff ff       	call   c000d785 <Phys::freePage(unsigned long)>
c001166d:	83 c4 10             	add    esp,0x10
c0011670:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011674:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011678:	e9 1b ff ff ff       	jmp    c0011598 <VAS::~VAS()+0x3a>
c001167d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011681:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011684:	83 ec 0c             	sub    esp,0xc
c0011687:	50                   	push   eax
c0011688:	e8 3c fd ff ff       	call   c00113c9 <Virt::freeKernelVirtualPages(unsigned long)>
c001168d:	83 c4 10             	add    esp,0x10
c0011690:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011694:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011697:	83 ec 0c             	sub    esp,0xc
c001169a:	50                   	push   eax
c001169b:	e8 e5 c0 ff ff       	call   c000d785 <Phys::freePage(unsigned long)>
c00116a0:	83 c4 10             	add    esp,0x10
c00116a3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00116a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00116ab:	c1 e0 02             	shl    eax,0x2
c00116ae:	83 ec 08             	sub    esp,0x8
c00116b1:	50                   	push   eax
c00116b2:	68 e4 09 02 c0       	push   0xc00209e4
c00116b7:	e8 ae b5 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c00116bc:	83 c4 10             	add    esp,0x10
c00116bf:	e8 4a ca ff ff       	call   c000e10e <unlockScheduler()>
c00116c4:	90                   	nop
c00116c5:	83 c4 2c             	add    esp,0x2c
c00116c8:	c3                   	ret    
c00116c9:	90                   	nop

c00116ca <VAS::mapPage(unsigned long, unsigned long, int)>:
c00116ca:	55                   	push   ebp
c00116cb:	57                   	push   edi
c00116cc:	56                   	push   esi
c00116cd:	53                   	push   ebx
c00116ce:	83 ec 1c             	sub    esp,0x1c
c00116d1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00116d5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00116d9:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00116df:	77 08                	ja     c00116e9 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00116e1:	0f 20 d8             	mov    eax,cr3
c00116e4:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c00116e7:	75 47                	jne    c0011730 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00116e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00116ed:	09 d8                	or     eax,ebx
c00116ef:	a9 ff 0f 00 00       	test   eax,0xfff
c00116f4:	75 57                	jne    c001174d <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00116f6:	89 de                	mov    esi,ebx
c00116f8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00116fb:	c1 ee 16             	shr    esi,0x16
c00116fe:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011705:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011709:	74 54                	je     c001175f <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001170b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001170f:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011715:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011719:	c1 e6 0c             	shl    esi,0xc
c001171c:	c1 eb 0a             	shr    ebx,0xa
c001171f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011725:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011728:	83 c4 1c             	add    esp,0x1c
c001172b:	5b                   	pop    ebx
c001172c:	5e                   	pop    esi
c001172d:	5f                   	pop    edi
c001172e:	5d                   	pop    ebp
c001172f:	c3                   	ret    
c0011730:	83 ec 0c             	sub    esp,0xc
c0011733:	68 04 0a 02 c0       	push   0xc0020a04
c0011738:	e8 2d b5 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001173d:	83 c4 10             	add    esp,0x10
c0011740:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011744:	09 d8                	or     eax,ebx
c0011746:	a9 ff 0f 00 00       	test   eax,0xfff
c001174b:	74 a9                	je     c00116f6 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001174d:	83 ec 0c             	sub    esp,0xc
c0011750:	68 6c 0a 02 c0       	push   0xc0020a6c
c0011755:	e8 2e b6 ff ff       	call   c000cd88 <panic(char const*)>
c001175a:	83 c4 10             	add    esp,0x10
c001175d:	eb 97                	jmp    c00116f6 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001175f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011763:	e8 a7 c0 ff ff       	call   c000d80f <Phys::allocatePage()>
c0011768:	89 c5                	mov    ebp,eax
c001176a:	e8 b4 fa ff ff       	call   c0011223 <Virt::getAKernelVAS()>
c001176f:	83 ec 0c             	sub    esp,0xc
c0011772:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011776:	6a 01                	push   0x1
c0011778:	e8 16 f9 ff ff       	call   c0011093 <Virt::allocateKernelVirtualPages(int)>
c001177d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011784:	6a 01                	push   0x1
c0011786:	50                   	push   eax
c0011787:	55                   	push   ebp
c0011788:	81 cd 07 04 00 00    	or     ebp,0x407
c001178e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011792:	51                   	push   ecx
c0011793:	e8 1e 02 00 00       	call   c00119b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011798:	83 c4 1c             	add    esp,0x1c
c001179b:	68 00 10 00 00       	push   0x1000
c00117a0:	6a 00                	push   0x0
c00117a2:	50                   	push   eax
c00117a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00117a7:	e8 5c ee fe ff       	call   c0000608 <memset>
c00117ac:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00117b0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00117b3:	e8 11 fc ff ff       	call   c00113c9 <Virt::freeKernelVirtualPages(unsigned long)>
c00117b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00117bc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00117bf:	83 c4 10             	add    esp,0x10
c00117c2:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00117c5:	e9 41 ff ff ff       	jmp    c001170b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00117ca <VAS::allocatePages(int, int)>:
c00117ca:	55                   	push   ebp
c00117cb:	57                   	push   edi
c00117cc:	56                   	push   esi
c00117cd:	53                   	push   ebx
c00117ce:	83 ec 1c             	sub    esp,0x1c
c00117d1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00117d5:	e8 ac 57 00 00       	call   c0016f86 <thisCPU()>
c00117da:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00117e0:	83 e0 01             	and    eax,0x1
c00117e3:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00117e7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00117eb:	0f 85 d7 00 00 00    	jne    c00118c8 <VAS::allocatePages(int, int)+0xfe>
c00117f1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00117f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00117f8:	85 c0                	test   eax,eax
c00117fa:	0f 84 ac 00 00 00    	je     c00118ac <VAS::allocatePages(int, int)+0xe2>
c0011800:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011804:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011808:	c1 e6 0c             	shl    esi,0xc
c001180b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001180f:	85 c0                	test   eax,eax
c0011811:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011814:	7e 33                	jle    c0011849 <VAS::allocatePages(int, int)+0x7f>
c0011816:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001181a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001181e:	81 cd 00 04 00 00    	or     ebp,0x400
c0011824:	e8 e6 bf ff ff       	call   c000d80f <Phys::allocatePage()>
c0011829:	55                   	push   ebp
c001182a:	53                   	push   ebx
c001182b:	50                   	push   eax
c001182c:	57                   	push   edi
c001182d:	e8 98 fe ff ff       	call   c00116ca <VAS::mapPage(unsigned long, unsigned long, int)>
c0011832:	83 c4 10             	add    esp,0x10
c0011835:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001183a:	74 03                	je     c001183f <VAS::allocatePages(int, int)+0x75>
c001183c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001183f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011845:	39 de                	cmp    esi,ebx
c0011847:	75 db                	jne    c0011824 <VAS::allocatePages(int, int)+0x5a>
c0011849:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001184e:	74 3f                	je     c001188f <VAS::allocatePages(int, int)+0xc5>
c0011850:	c1 ee 0a             	shr    esi,0xa
c0011853:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011857:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001185d:	c1 eb 0a             	shr    ebx,0xa
c0011860:	81 ee 00 00 40 00    	sub    esi,0x400000
c0011866:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001186c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011872:	39 f3                	cmp    ebx,esi
c0011874:	77 0d                	ja     c0011883 <VAS::allocatePages(int, int)+0xb9>
c0011876:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011879:	81 c3 00 10 00 00    	add    ebx,0x1000
c001187f:	39 de                	cmp    esi,ebx
c0011881:	73 f3                	jae    c0011876 <VAS::allocatePages(int, int)+0xac>
c0011883:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011887:	83 c4 1c             	add    esp,0x1c
c001188a:	5b                   	pop    ebx
c001188b:	5e                   	pop    esi
c001188c:	5f                   	pop    edi
c001188d:	5d                   	pop    ebp
c001188e:	c3                   	ret    
c001188f:	e8 35 cb 00 00       	call   c001e3c9 <CPU::readCR3()>
c0011894:	83 ec 0c             	sub    esp,0xc
c0011897:	50                   	push   eax
c0011898:	e8 50 cb 00 00       	call   c001e3ed <CPU::writeCR3(unsigned long)>
c001189d:	83 c4 10             	add    esp,0x10
c00118a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118a4:	83 c4 1c             	add    esp,0x1c
c00118a7:	5b                   	pop    ebx
c00118a8:	5e                   	pop    esi
c00118a9:	5f                   	pop    edi
c00118aa:	5d                   	pop    ebp
c00118ab:	c3                   	ret    
c00118ac:	83 ec 0c             	sub    esp,0xc
c00118af:	68 90 0a 02 c0       	push   0xc0020a90
c00118b4:	e8 cf b4 ff ff       	call   c000cd88 <panic(char const*)>
c00118b9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00118bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00118c0:	83 c4 10             	add    esp,0x10
c00118c3:	e9 38 ff ff ff       	jmp    c0011800 <VAS::allocatePages(int, int)+0x36>
c00118c8:	83 ec 0c             	sub    esp,0xc
c00118cb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00118cf:	e8 bf f7 ff ff       	call   c0011093 <Virt::allocateKernelVirtualPages(int)>
c00118d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00118d8:	83 c4 10             	add    esp,0x10
c00118db:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00118e0:	0f 87 94 00 00 00    	ja     c001197a <VAS::allocatePages(int, int)+0x1b0>
c00118e6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00118ea:	85 d2                	test   edx,edx
c00118ec:	7e 3c                	jle    c001192a <VAS::allocatePages(int, int)+0x160>
c00118ee:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00118f2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00118f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00118fa:	c1 e5 0c             	shl    ebp,0xc
c00118fd:	81 ce 00 04 00 00    	or     esi,0x400
c0011903:	01 dd                	add    ebp,ebx
c0011905:	e8 05 bf ff ff       	call   c000d80f <Phys::allocatePage()>
c001190a:	56                   	push   esi
c001190b:	53                   	push   ebx
c001190c:	50                   	push   eax
c001190d:	57                   	push   edi
c001190e:	e8 b7 fd ff ff       	call   c00116ca <VAS::mapPage(unsigned long, unsigned long, int)>
c0011913:	83 c4 10             	add    esp,0x10
c0011916:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001191b:	74 03                	je     c0011920 <VAS::allocatePages(int, int)+0x156>
c001191d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011920:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011926:	39 dd                	cmp    ebp,ebx
c0011928:	75 db                	jne    c0011905 <VAS::allocatePages(int, int)+0x13b>
c001192a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001192f:	0f 84 5a ff ff ff    	je     c001188f <VAS::allocatePages(int, int)+0xc5>
c0011935:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011939:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001193d:	89 d3                	mov    ebx,edx
c001193f:	c1 e0 0c             	shl    eax,0xc
c0011942:	c1 eb 0a             	shr    ebx,0xa
c0011945:	01 d0                	add    eax,edx
c0011947:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001194d:	c1 e8 0a             	shr    eax,0xa
c0011950:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011956:	25 00 f0 ff ff       	and    eax,0xfffff000
c001195b:	2d 00 00 40 00       	sub    eax,0x400000
c0011960:	39 c3                	cmp    ebx,eax
c0011962:	0f 87 1b ff ff ff    	ja     c0011883 <VAS::allocatePages(int, int)+0xb9>
c0011968:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001196b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011971:	39 d8                	cmp    eax,ebx
c0011973:	73 f3                	jae    c0011968 <VAS::allocatePages(int, int)+0x19e>
c0011975:	e9 09 ff ff ff       	jmp    c0011883 <VAS::allocatePages(int, int)+0xb9>
c001197a:	e8 07 56 00 00       	call   c0016f86 <thisCPU()>
c001197f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011986:	0f 84 5a ff ff ff    	je     c00118e6 <VAS::allocatePages(int, int)+0x11c>
c001198c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011994:	e9 4d ff ff ff       	jmp    c00118e6 <VAS::allocatePages(int, int)+0x11c>
c0011999:	90                   	nop

c001199a <VAS::setCPUSpecific(unsigned long)>:
c001199a:	83 ec 0c             	sub    esp,0xc
c001199d:	6a 05                	push   0x5
c001199f:	68 00 00 40 c2       	push   0xc2400000
c00119a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119ac:	e8 19 fd ff ff       	call   c00116ca <VAS::mapPage(unsigned long, unsigned long, int)>
c00119b1:	83 c4 1c             	add    esp,0x1c
c00119b4:	c3                   	ret    
c00119b5:	90                   	nop

c00119b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00119b6:	55                   	push   ebp
c00119b7:	57                   	push   edi
c00119b8:	56                   	push   esi
c00119b9:	53                   	push   ebx
c00119ba:	83 ec 1c             	sub    esp,0x1c
c00119bd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00119c1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00119c5:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00119c9:	e8 b8 55 00 00       	call   c0016f86 <thisCPU()>
c00119ce:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00119d4:	83 e0 01             	and    eax,0x1
c00119d7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00119db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00119df:	85 c0                	test   eax,eax
c00119e1:	7e 39                	jle    c0011a1c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c00119e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00119e7:	89 f3                	mov    ebx,esi
c00119e9:	c1 e0 0c             	shl    eax,0xc
c00119ec:	01 f0                	add    eax,esi
c00119ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119f2:	55                   	push   ebp
c00119f3:	53                   	push   ebx
c00119f4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00119f8:	29 f0                	sub    eax,esi
c00119fa:	01 d8                	add    eax,ebx
c00119fc:	50                   	push   eax
c00119fd:	57                   	push   edi
c00119fe:	e8 c7 fc ff ff       	call   c00116ca <VAS::mapPage(unsigned long, unsigned long, int)>
c0011a03:	83 c4 10             	add    esp,0x10
c0011a06:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011a0b:	74 03                	je     c0011a10 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c0011a0d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011a10:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011a16:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011a1a:	75 d6                	jne    c00119f2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c0011a1c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011a21:	74 42                	je     c0011a65 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c0011a23:	89 f3                	mov    ebx,esi
c0011a25:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011a29:	c1 eb 0a             	shr    ebx,0xa
c0011a2c:	c1 e0 0c             	shl    eax,0xc
c0011a2f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011a35:	01 f0                	add    eax,esi
c0011a37:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011a3d:	c1 e8 0a             	shr    eax,0xa
c0011a40:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a45:	2d 00 00 40 00       	sub    eax,0x400000
c0011a4a:	39 c3                	cmp    ebx,eax
c0011a4c:	77 0d                	ja     c0011a5b <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c0011a4e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011a51:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011a57:	39 d8                	cmp    eax,ebx
c0011a59:	73 f3                	jae    c0011a4e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c0011a5b:	83 c4 1c             	add    esp,0x1c
c0011a5e:	89 f0                	mov    eax,esi
c0011a60:	5b                   	pop    ebx
c0011a61:	5e                   	pop    esi
c0011a62:	5f                   	pop    edi
c0011a63:	5d                   	pop    ebp
c0011a64:	c3                   	ret    
c0011a65:	e8 5f c9 00 00       	call   c001e3c9 <CPU::readCR3()>
c0011a6a:	83 ec 0c             	sub    esp,0xc
c0011a6d:	50                   	push   eax
c0011a6e:	e8 7a c9 00 00       	call   c001e3ed <CPU::writeCR3(unsigned long)>
c0011a73:	89 f0                	mov    eax,esi
c0011a75:	83 c4 10             	add    esp,0x10
c0011a78:	83 c4 1c             	add    esp,0x1c
c0011a7b:	5b                   	pop    ebx
c0011a7c:	5e                   	pop    esi
c0011a7d:	5f                   	pop    edi
c0011a7e:	5d                   	pop    ebp
c0011a7f:	c3                   	ret    

c0011a80 <VAS::VAS(VAS*)>:
c0011a80:	53                   	push   ebx
c0011a81:	83 ec 38             	sub    esp,0x38
c0011a84:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011a88:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011a8f:	e8 9f c6 ff ff       	call   c000e133 <lockStuff()>
c0011a94:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011a98:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011a9b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011a9f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011aa2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011aa6:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c0011aa9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011aad:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011ab0:	e8 5a bd ff ff       	call   c000d80f <Phys::allocatePage()>
c0011ab5:	89 c2                	mov    edx,eax
c0011ab7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011abb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011abe:	e8 60 f7 ff ff       	call   c0011223 <Virt::getAKernelVAS()>
c0011ac3:	89 c3                	mov    ebx,eax
c0011ac5:	83 ec 0c             	sub    esp,0xc
c0011ac8:	6a 01                	push   0x1
c0011aca:	e8 c4 f5 ff ff       	call   c0011093 <Virt::allocateKernelVirtualPages(int)>
c0011acf:	83 c4 10             	add    esp,0x10
c0011ad2:	89 c2                	mov    edx,eax
c0011ad4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011ad8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011adb:	83 ec 0c             	sub    esp,0xc
c0011ade:	6a 03                	push   0x3
c0011ae0:	6a 01                	push   0x1
c0011ae2:	52                   	push   edx
c0011ae3:	50                   	push   eax
c0011ae4:	53                   	push   ebx
c0011ae5:	e8 cc fe ff ff       	call   c00119b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011aea:	83 c4 20             	add    esp,0x20
c0011aed:	89 c2                	mov    edx,eax
c0011aef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011af3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011af6:	83 ec 04             	sub    esp,0x4
c0011af9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011afd:	6a 01                	push   0x1
c0011aff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011b03:	e8 20 fa ff ff       	call   c0011528 <VAS::mapOtherVASIn(bool, VAS*)>
c0011b08:	83 c4 10             	add    esp,0x10
c0011b0b:	83 ec 0c             	sub    esp,0xc
c0011b0e:	6a 01                	push   0x1
c0011b10:	e8 7e f5 ff ff       	call   c0011093 <Virt::allocateKernelVirtualPages(int)>
c0011b15:	83 c4 10             	add    esp,0x10
c0011b18:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011b1c:	83 ec 0c             	sub    esp,0xc
c0011b1f:	6a 01                	push   0x1
c0011b21:	e8 6d f5 ff ff       	call   c0011093 <Virt::allocateKernelVirtualPages(int)>
c0011b26:	83 c4 10             	add    esp,0x10
c0011b29:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011b2d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011b35:	81 7c 24 2c ff 03 00 00 	cmp    DWORD PTR [esp+0x2c],0x3ff
c0011b3d:	0f 8f 5e 02 00 00    	jg     c0011da1 <VAS::VAS(VAS*)+0x321>
c0011b43:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011b48:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b4a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b4d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011b53:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011b56:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011b5a:	c1 e2 02             	shl    edx,0x2
c0011b5d:	01 d0                	add    eax,edx
c0011b5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b61:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b65:	83 ec 08             	sub    esp,0x8
c0011b68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011b6c:	68 03 0c 02 c0       	push   0xc0020c03
c0011b71:	e8 f4 b0 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0011b76:	83 c4 10             	add    esp,0x10
c0011b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011b7d:	25 01 04 00 00       	and    eax,0x401
c0011b82:	3d 01 04 00 00       	cmp    eax,0x401
c0011b87:	0f 85 e5 01 00 00    	jne    c0011d72 <VAS::VAS(VAS*)+0x2f2>
c0011b8d:	83 ec 0c             	sub    esp,0xc
c0011b90:	68 14 0c 02 c0       	push   0xc0020c14
c0011b95:	e8 d0 b0 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0011b9a:	83 c4 10             	add    esp,0x10
c0011b9d:	e8 6d bc ff ff       	call   c000d80f <Phys::allocatePage()>
c0011ba2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011ba6:	83 ec 08             	sub    esp,0x8
c0011ba9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011bad:	68 2a 0c 02 c0       	push   0xc0020c2a
c0011bb2:	e8 b3 b0 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0011bb7:	83 c4 10             	add    esp,0x10
c0011bba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011bbe:	25 ff 0f 00 00       	and    eax,0xfff
c0011bc3:	89 c1                	mov    ecx,eax
c0011bc5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011bc9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011bcc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011bd0:	c1 e2 02             	shl    edx,0x2
c0011bd3:	01 c2                	add    edx,eax
c0011bd5:	89 c8                	mov    eax,ecx
c0011bd7:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0011bdb:	89 02                	mov    DWORD PTR [edx],eax
c0011bdd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011be5:	81 7c 24 28 ff 03 00 00 	cmp    DWORD PTR [esp+0x28],0x3ff
c0011bed:	0f 8f a5 01 00 00    	jg     c0011d98 <VAS::VAS(VAS*)+0x318>
c0011bf3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bf7:	c1 e0 0a             	shl    eax,0xa
c0011bfa:	89 c2                	mov    edx,eax
c0011bfc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c00:	01 d0                	add    eax,edx
c0011c02:	c1 e0 0c             	shl    eax,0xc
c0011c05:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011c09:	83 ec 08             	sub    esp,0x8
c0011c0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c10:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011c14:	e8 91 f7 ff ff       	call   c00113aa <VAS::getPageTableEntry(unsigned long)>
c0011c19:	83 c4 10             	add    esp,0x10
c0011c1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c1e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011c22:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c27:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c29:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c2c:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c32:	83 ec 04             	sub    esp,0x4
c0011c35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011c39:	6a 01                	push   0x1
c0011c3b:	50                   	push   eax
c0011c3c:	e8 3d f7 ff ff       	call   c001137e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011c41:	83 c4 10             	add    esp,0x10
c0011c44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c48:	83 ec 04             	sub    esp,0x4
c0011c4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011c4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c53:	68 bc 0a 02 c0       	push   0xc0020abc
c0011c58:	e8 0d b0 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0011c5d:	83 c4 10             	add    esp,0x10
c0011c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c64:	25 01 04 00 00       	and    eax,0x401
c0011c69:	3d 01 04 00 00       	cmp    eax,0x401
c0011c6e:	0f 85 db 00 00 00    	jne    c0011d4f <VAS::VAS(VAS*)+0x2cf>
c0011c74:	83 ec 0c             	sub    esp,0xc
c0011c77:	68 39 0c 02 c0       	push   0xc0020c39
c0011c7c:	e8 e9 af ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0011c81:	83 c4 10             	add    esp,0x10
c0011c84:	e8 86 bb ff ff       	call   c000d80f <Phys::allocatePage()>
c0011c89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011c8d:	83 ec 08             	sub    esp,0x8
c0011c90:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011c94:	68 48 0c 02 c0       	push   0xc0020c48
c0011c99:	e8 cc af ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0011c9e:	83 c4 10             	add    esp,0x10
c0011ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ca5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011caa:	83 ec 08             	sub    esp,0x8
c0011cad:	50                   	push   eax
c0011cae:	68 5c 0c 02 c0       	push   0xc0020c5c
c0011cb3:	e8 b2 af ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0011cb8:	83 c4 10             	add    esp,0x10
c0011cbb:	e8 63 f5 ff ff       	call   c0011223 <Virt::getAKernelVAS()>
c0011cc0:	83 ec 0c             	sub    esp,0xc
c0011cc3:	6a 03                	push   0x3
c0011cc5:	6a 01                	push   0x1
c0011cc7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011ccb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011ccf:	50                   	push   eax
c0011cd0:	e8 e1 fc ff ff       	call   c00119b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011cd5:	83 c4 20             	add    esp,0x20
c0011cd8:	e8 46 f5 ff ff       	call   c0011223 <Virt::getAKernelVAS()>
c0011cdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011ce1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011ce7:	83 ec 0c             	sub    esp,0xc
c0011cea:	6a 03                	push   0x3
c0011cec:	6a 01                	push   0x1
c0011cee:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011cf2:	52                   	push   edx
c0011cf3:	50                   	push   eax
c0011cf4:	e8 bd fc ff ff       	call   c00119b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011cf9:	83 c4 20             	add    esp,0x20
c0011cfc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011d00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d04:	83 ec 04             	sub    esp,0x4
c0011d07:	68 00 10 00 00       	push   0x1000
c0011d0c:	52                   	push   edx
c0011d0d:	50                   	push   eax
c0011d0e:	e8 bf e8 fe ff       	call   c00005d2 <memcpy>
c0011d13:	83 c4 10             	add    esp,0x10
c0011d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d1a:	25 ff 0f 00 00       	and    eax,0xfff
c0011d1f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0011d23:	89 c2                	mov    edx,eax
c0011d25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d29:	89 10                	mov    DWORD PTR [eax],edx
c0011d2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d2f:	25 ff 0f 00 00       	and    eax,0xfff
c0011d34:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0011d38:	83 ec 04             	sub    esp,0x4
c0011d3b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011d3f:	50                   	push   eax
c0011d40:	68 e0 0a 02 c0       	push   0xc0020ae0
c0011d45:	e8 20 af ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0011d4a:	83 c4 10             	add    esp,0x10
c0011d4d:	eb 1a                	jmp    c0011d69 <VAS::VAS(VAS*)+0x2e9>
c0011d4f:	83 ec 0c             	sub    esp,0xc
c0011d52:	68 70 0c 02 c0       	push   0xc0020c70
c0011d57:	e8 0e af ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0011d5c:	83 c4 10             	add    esp,0x10
c0011d5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011d67:	89 10                	mov    DWORD PTR [eax],edx
c0011d69:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0011d6d:	e9 73 fe ff ff       	jmp    c0011be5 <VAS::VAS(VAS*)+0x165>
c0011d72:	83 ec 0c             	sub    esp,0xc
c0011d75:	68 74 0c 02 c0       	push   0xc0020c74
c0011d7a:	e8 eb ae ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0011d7f:	83 c4 10             	add    esp,0x10
c0011d82:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d86:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011d89:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011d8d:	c1 e2 02             	shl    edx,0x2
c0011d90:	01 c2                	add    edx,eax
c0011d92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d96:	89 02                	mov    DWORD PTR [edx],eax
c0011d98:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011d9c:	e9 94 fd ff ff       	jmp    c0011b35 <VAS::VAS(VAS*)+0xb5>
c0011da1:	83 ec 0c             	sub    esp,0xc
c0011da4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011da8:	e8 1c f6 ff ff       	call   c00113c9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011dad:	83 c4 10             	add    esp,0x10
c0011db0:	83 ec 0c             	sub    esp,0xc
c0011db3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011db7:	e8 0d f6 ff ff       	call   c00113c9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011dbc:	83 c4 10             	add    esp,0x10
c0011dbf:	e8 01 c7 ff ff       	call   c000e4c5 <unlockStuff()>
c0011dc4:	90                   	nop
c0011dc5:	83 c4 38             	add    esp,0x38
c0011dc8:	5b                   	pop    ebx
c0011dc9:	c3                   	ret    

c0011dca <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011dca:	55                   	push   ebp
c0011dcb:	57                   	push   edi
c0011dcc:	56                   	push   esi
c0011dcd:	53                   	push   ebx
c0011dce:	83 ec 1c             	sub    esp,0x1c
c0011dd1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011dd5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011dd9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011ddd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011de1:	a9 ff 0f 00 00       	test   eax,0xfff
c0011de6:	75 4a                	jne    c0011e32 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011de8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011dec:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011def:	c1 eb 16             	shr    ebx,0x16
c0011df2:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011df9:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011dfd:	74 4d                	je     c0011e4c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011dff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011e03:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011e07:	c1 e8 0a             	shr    eax,0xa
c0011e0a:	80 fa 01             	cmp    dl,0x1
c0011e0d:	19 d2                	sbb    edx,edx
c0011e0f:	c1 e3 0c             	shl    ebx,0xc
c0011e12:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011e16:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011e1c:	25 fc 0f 00 00       	and    eax,0xffc
c0011e21:	01 d8                	add    eax,ebx
c0011e23:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011e2a:	83 c4 1c             	add    esp,0x1c
c0011e2d:	5b                   	pop    ebx
c0011e2e:	5e                   	pop    esi
c0011e2f:	5f                   	pop    edi
c0011e30:	5d                   	pop    ebp
c0011e31:	c3                   	ret    
c0011e32:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011e36:	83 ec 0c             	sub    esp,0xc
c0011e39:	68 04 0b 02 c0       	push   0xc0020b04
c0011e3e:	e8 45 af ff ff       	call   c000cd88 <panic(char const*)>
c0011e43:	83 c4 10             	add    esp,0x10
c0011e46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011e4a:	eb 9c                	jmp    c0011de8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011e4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011e50:	e8 ba b9 ff ff       	call   c000d80f <Phys::allocatePage()>
c0011e55:	89 c5                	mov    ebp,eax
c0011e57:	e8 c7 f3 ff ff       	call   c0011223 <Virt::getAKernelVAS()>
c0011e5c:	83 ec 0c             	sub    esp,0xc
c0011e5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011e63:	6a 01                	push   0x1
c0011e65:	e8 29 f2 ff ff       	call   c0011093 <Virt::allocateKernelVirtualPages(int)>
c0011e6a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011e71:	6a 01                	push   0x1
c0011e73:	50                   	push   eax
c0011e74:	55                   	push   ebp
c0011e75:	81 cd 07 04 00 00    	or     ebp,0x407
c0011e7b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011e7f:	51                   	push   ecx
c0011e80:	e8 31 fb ff ff       	call   c00119b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e85:	83 c4 1c             	add    esp,0x1c
c0011e88:	68 00 10 00 00       	push   0x1000
c0011e8d:	6a 00                	push   0x0
c0011e8f:	50                   	push   eax
c0011e90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e94:	e8 6f e7 fe ff       	call   c0000608 <memset>
c0011e99:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e9d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011ea0:	e8 24 f5 ff ff       	call   c00113c9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011ea5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011ea8:	83 c4 10             	add    esp,0x10
c0011eab:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011eae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011eb2:	e9 48 ff ff ff       	jmp    c0011dff <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0011eb7:	90                   	nop

c0011eb8 <VAS::VAS(bool)>:
c0011eb8:	53                   	push   ebx
c0011eb9:	83 ec 28             	sub    esp,0x28
c0011ebc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ec0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011ec4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ec8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ecf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ed3:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011ed7:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011eda:	e8 30 b9 ff ff       	call   c000d80f <Phys::allocatePage()>
c0011edf:	89 c2                	mov    edx,eax
c0011ee1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ee5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011ee8:	e8 36 f3 ff ff       	call   c0011223 <Virt::getAKernelVAS()>
c0011eed:	89 c3                	mov    ebx,eax
c0011eef:	83 ec 0c             	sub    esp,0xc
c0011ef2:	6a 01                	push   0x1
c0011ef4:	e8 9a f1 ff ff       	call   c0011093 <Virt::allocateKernelVirtualPages(int)>
c0011ef9:	83 c4 10             	add    esp,0x10
c0011efc:	89 c2                	mov    edx,eax
c0011efe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f02:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f05:	83 ec 0c             	sub    esp,0xc
c0011f08:	6a 03                	push   0x3
c0011f0a:	6a 01                	push   0x1
c0011f0c:	52                   	push   edx
c0011f0d:	50                   	push   eax
c0011f0e:	53                   	push   ebx
c0011f0f:	e8 a2 fa ff ff       	call   c00119b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f14:	83 c4 20             	add    esp,0x20
c0011f17:	89 c2                	mov    edx,eax
c0011f19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f1d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011f20:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011f28:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011f30:	7f 1c                	jg     c0011f4e <VAS::VAS(bool)+0x96>
c0011f32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f36:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f39:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f3d:	c1 e2 02             	shl    edx,0x2
c0011f40:	01 d0                	add    eax,edx
c0011f42:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f48:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f4c:	eb da                	jmp    c0011f28 <VAS::VAS(bool)+0x70>
c0011f4e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011f56:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011f5e:	7f 71                	jg     c0011fd1 <VAS::VAS(bool)+0x119>
c0011f60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f64:	2d 00 02 00 00       	sub    eax,0x200
c0011f69:	c1 e0 0c             	shl    eax,0xc
c0011f6c:	83 c8 03             	or     eax,0x3
c0011f6f:	89 c3                	mov    ebx,eax
c0011f71:	e8 10 50 00 00       	call   c0016f86 <thisCPU()>
c0011f76:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f7c:	83 e0 10             	and    eax,0x10
c0011f7f:	84 c0                	test   al,al
c0011f81:	74 07                	je     c0011f8a <VAS::VAS(bool)+0xd2>
c0011f83:	b8 00 01 00 00       	mov    eax,0x100
c0011f88:	eb 05                	jmp    c0011f8f <VAS::VAS(bool)+0xd7>
c0011f8a:	b8 00 00 00 00       	mov    eax,0x0
c0011f8f:	09 d8                	or     eax,ebx
c0011f91:	89 c1                	mov    ecx,eax
c0011f93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f97:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f9a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f9e:	c1 e2 02             	shl    edx,0x2
c0011fa1:	01 d0                	add    eax,edx
c0011fa3:	89 ca                	mov    edx,ecx
c0011fa5:	89 10                	mov    DWORD PTR [eax],edx
c0011fa7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011fab:	2d 40 03 00 00       	sub    eax,0x340
c0011fb0:	83 f8 7f             	cmp    eax,0x7f
c0011fb3:	77 16                	ja     c0011fcb <VAS::VAS(bool)+0x113>
c0011fb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fb9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011fbc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011fc0:	c1 e2 02             	shl    edx,0x2
c0011fc3:	01 d0                	add    eax,edx
c0011fc5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011fcb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011fcf:	eb 85                	jmp    c0011f56 <VAS::VAS(bool)+0x9e>
c0011fd1:	e8 b0 4f 00 00       	call   c0016f86 <thisCPU()>
c0011fd6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011fdc:	83 e0 10             	and    eax,0x10
c0011fdf:	84 c0                	test   al,al
c0011fe1:	74 07                	je     c0011fea <VAS::VAS(bool)+0x132>
c0011fe3:	b8 03 41 00 00       	mov    eax,0x4103
c0011fe8:	eb 05                	jmp    c0011fef <VAS::VAS(bool)+0x137>
c0011fea:	b8 03 40 00 00       	mov    eax,0x4003
c0011fef:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011ff3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011ff6:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011ffc:	89 02                	mov    DWORD PTR [edx],eax
c0011ffe:	e8 83 4f 00 00       	call   c0016f86 <thisCPU()>
c0012003:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012009:	83 ec 08             	sub    esp,0x8
c001200c:	50                   	push   eax
c001200d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012011:	e8 84 f9 ff ff       	call   c001199a <VAS::setCPUSpecific(unsigned long)>
c0012016:	83 c4 10             	add    esp,0x10
c0012019:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001201d:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c0012020:	e8 61 4f 00 00       	call   c0016f86 <thisCPU()>
c0012025:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001202b:	83 e0 10             	and    eax,0x10
c001202e:	84 c0                	test   al,al
c0012030:	74 07                	je     c0012039 <VAS::VAS(bool)+0x181>
c0012032:	b8 00 01 00 00       	mov    eax,0x100
c0012037:	eb 05                	jmp    c001203e <VAS::VAS(bool)+0x186>
c0012039:	b8 00 00 00 00       	mov    eax,0x0
c001203e:	09 d8                	or     eax,ebx
c0012040:	89 c2                	mov    edx,eax
c0012042:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012046:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012049:	05 fc 0f 00 00       	add    eax,0xffc
c001204e:	83 ca 03             	or     edx,0x3
c0012051:	89 10                	mov    DWORD PTR [eax],edx
c0012053:	e8 2e 4f 00 00       	call   c0016f86 <thisCPU()>
c0012058:	83 ec 0c             	sub    esp,0xc
c001205b:	50                   	push   eax
c001205c:	e8 af 17 00 00       	call   c0013810 <Device::getName()>
c0012061:	83 c4 10             	add    esp,0x10
c0012064:	83 ec 08             	sub    esp,0x8
c0012067:	68 84 0c 02 c0       	push   0xc0020c84
c001206c:	50                   	push   eax
c001206d:	e8 86 e6 fe ff       	call   c00006f8 <strcmp>
c0012072:	83 c4 10             	add    esp,0x10
c0012075:	85 c0                	test   eax,eax
c0012077:	0f 94 c0             	sete   al
c001207a:	84 c0                	test   al,al
c001207c:	74 64                	je     c00120e2 <VAS::VAS(bool)+0x22a>
c001207e:	e8 6c c0 ff ff       	call   c000e0ef <disableIRQs()>
c0012083:	e8 fe 4e 00 00       	call   c0016f86 <thisCPU()>
c0012088:	05 7c 09 00 00       	add    eax,0x97c
c001208d:	83 ec 0c             	sub    esp,0xc
c0012090:	50                   	push   eax
c0012091:	e8 28 a7 ff ff       	call   c000c7be <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012096:	83 c4 10             	add    esp,0x10
c0012099:	25 00 f0 ff ff       	and    eax,0xfffff000
c001209e:	89 c3                	mov    ebx,eax
c00120a0:	e8 e1 4e 00 00       	call   c0016f86 <thisCPU()>
c00120a5:	05 7c 09 00 00       	add    eax,0x97c
c00120aa:	83 ec 0c             	sub    esp,0xc
c00120ad:	50                   	push   eax
c00120ae:	e8 0b a7 ff ff       	call   c000c7be <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00120b3:	83 c4 10             	add    esp,0x10
c00120b6:	83 ec 08             	sub    esp,0x8
c00120b9:	50                   	push   eax
c00120ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120be:	e8 e7 f2 ff ff       	call   c00113aa <VAS::getPageTableEntry(unsigned long)>
c00120c3:	83 c4 10             	add    esp,0x10
c00120c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00120c8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120cd:	6a 11                	push   0x11
c00120cf:	53                   	push   ebx
c00120d0:	50                   	push   eax
c00120d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120d5:	e8 f0 f5 ff ff       	call   c00116ca <VAS::mapPage(unsigned long, unsigned long, int)>
c00120da:	83 c4 10             	add    esp,0x10
c00120dd:	e8 1b c0 ff ff       	call   c000e0fd <enableIRQs()>
c00120e2:	90                   	nop
c00120e3:	83 c4 28             	add    esp,0x28
c00120e6:	5b                   	pop    ebx
c00120e7:	c3                   	ret    

c00120e8 <mapVASFirstTime>:
c00120e8:	55                   	push   ebp
c00120e9:	57                   	push   edi
c00120ea:	56                   	push   esi
c00120eb:	53                   	push   ebx
c00120ec:	83 ec 0c             	sub    esp,0xc
c00120ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120f4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00120f7:	4a                   	dec    edx
c00120f8:	0f 84 99 00 00 00    	je     c0012197 <mapVASFirstTime+0xaf>
c00120fe:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012101:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012104:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012109:	c1 e5 15             	shl    ebp,0x15
c001210c:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c0012111:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012117:	29 eb                	sub    ebx,ebp
c0012119:	29 ee                	sub    esi,ebp
c001211b:	e8 ef b6 ff ff       	call   c000d80f <Phys::allocatePage()>
c0012120:	83 ec 0c             	sub    esp,0xc
c0012123:	68 03 04 00 00       	push   0x403
c0012128:	6a 01                	push   0x1
c001212a:	53                   	push   ebx
c001212b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012131:	50                   	push   eax
c0012132:	57                   	push   edi
c0012133:	e8 7e f8 ff ff       	call   c00119b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012138:	83 c4 20             	add    esp,0x20
c001213b:	39 f3                	cmp    ebx,esi
c001213d:	75 dc                	jne    c001211b <mapVASFirstTime+0x33>
c001213f:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012144:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012149:	29 ee                	sub    esi,ebp
c001214b:	29 e8                	sub    eax,ebp
c001214d:	89 c5                	mov    ebp,eax
c001214f:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012153:	19 db                	sbb    ebx,ebx
c0012155:	e8 b5 b6 ff ff       	call   c000d80f <Phys::allocatePage()>
c001215a:	83 e3 04             	and    ebx,0x4
c001215d:	83 ec 0c             	sub    esp,0xc
c0012160:	81 c3 03 04 00 00    	add    ebx,0x403
c0012166:	53                   	push   ebx
c0012167:	6a 01                	push   0x1
c0012169:	56                   	push   esi
c001216a:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012170:	50                   	push   eax
c0012171:	57                   	push   edi
c0012172:	e8 3f f8 ff ff       	call   c00119b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012177:	83 c4 20             	add    esp,0x20
c001217a:	39 f5                	cmp    ebp,esi
c001217c:	75 d1                	jne    c001214f <mapVASFirstTime+0x67>
c001217e:	e8 46 c2 00 00       	call   c001e3c9 <CPU::readCR3()>
c0012183:	83 ec 0c             	sub    esp,0xc
c0012186:	50                   	push   eax
c0012187:	e8 61 c2 00 00       	call   c001e3ed <CPU::writeCR3(unsigned long)>
c001218c:	83 c4 10             	add    esp,0x10
c001218f:	83 c4 0c             	add    esp,0xc
c0012192:	5b                   	pop    ebx
c0012193:	5e                   	pop    esi
c0012194:	5f                   	pop    edi
c0012195:	5d                   	pop    ebp
c0012196:	c3                   	ret    
c0012197:	83 ec 0c             	sub    esp,0xc
c001219a:	68 92 0c 02 c0       	push   0xc0020c92
c001219f:	e8 c6 aa ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c00121a4:	83 c4 10             	add    esp,0x10
c00121a7:	83 c4 0c             	add    esp,0xc
c00121aa:	5b                   	pop    ebx
c00121ab:	5e                   	pop    esi
c00121ac:	5f                   	pop    edi
c00121ad:	5d                   	pop    ebp
c00121ae:	c3                   	ret    

c00121af <__cxa_atexit>:
c00121af:	31 c0                	xor    eax,eax
c00121b1:	c3                   	ret    

c00121b2 <__cxa_finalize>:
c00121b2:	c3                   	ret    

c00121b3 <__stack_chk_fail>:
c00121b3:	55                   	push   ebp
c00121b4:	89 e5                	mov    ebp,esp
c00121b6:	83 ec 10             	sub    esp,0x10
c00121b9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00121bc:	68 ab 0c 02 c0       	push   0xc0020cab
c00121c1:	e8 a4 aa ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c00121c6:	58                   	pop    eax
c00121c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00121ca:	5a                   	pop    edx
c00121cb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00121ce:	68 ab 0c 02 c0       	push   0xc0020cab
c00121d3:	e8 92 aa ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c00121d8:	59                   	pop    ecx
c00121d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00121dc:	5a                   	pop    edx
c00121dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00121df:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00121e2:	68 ab 0c 02 c0       	push   0xc0020cab
c00121e7:	e8 7e aa ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c00121ec:	59                   	pop    ecx
c00121ed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00121f0:	5a                   	pop    edx
c00121f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00121f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00121f5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00121f8:	68 ab 0c 02 c0       	push   0xc0020cab
c00121fd:	e8 68 aa ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0012202:	c7 04 24 b3 0c 02 c0 	mov    DWORD PTR [esp],0xc0020cb3
c0012209:	e8 7a ab ff ff       	call   c000cd88 <panic(char const*)>
c001220e:	83 c4 10             	add    esp,0x10
c0012211:	c9                   	leave  
c0012212:	c3                   	ret    

c0012213 <__cxa_pure_virtual>:
c0012213:	83 ec 18             	sub    esp,0x18
c0012216:	68 cb 0c 02 c0       	push   0xc0020ccb
c001221b:	e8 68 ab ff ff       	call   c000cd88 <panic(char const*)>
c0012220:	83 c4 1c             	add    esp,0x1c
c0012223:	c3                   	ret    

c0012224 <operator new(unsigned long)>:
c0012224:	e9 3c b0 ff ff       	jmp    c000d265 <malloc>

c0012229 <operator new[](unsigned long)>:
c0012229:	e9 37 b0 ff ff       	jmp    c000d265 <malloc>

c001222e <operator delete(void*)>:
c001222e:	e9 52 b0 ff ff       	jmp    c000d285 <rfree>

c0012233 <operator delete(void*, unsigned long)>:
c0012233:	e9 4d b0 ff ff       	jmp    c000d285 <rfree>

c0012238 <operator delete[](void*)>:
c0012238:	e9 48 b0 ff ff       	jmp    c000d285 <rfree>

c001223d <operator delete[](void*, unsigned long)>:
c001223d:	e9 43 b0 ff ff       	jmp    c000d285 <rfree>

c0012242 <File::read(unsigned long long, void*, int*)>:
c0012242:	53                   	push   ebx
c0012243:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012247:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001224b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012252:	3c 19                	cmp    al,0x19
c0012254:	77 35                	ja     c001228b <File::read(unsigned long long, void*, int*)+0x49>
c0012256:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c001225d:	85 c0                	test   eax,eax
c001225f:	74 2a                	je     c001228b <File::read(unsigned long long, void*, int*)+0x49>
c0012261:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012267:	85 c0                	test   eax,eax
c0012269:	74 20                	je     c001228b <File::read(unsigned long long, void*, int*)+0x49>
c001226b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001226f:	74 21                	je     c0012292 <File::read(unsigned long long, void*, int*)+0x50>
c0012271:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012273:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012277:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001227d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012281:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012285:	5b                   	pop    ebx
c0012286:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012289:	ff e0                	jmp    eax
c001228b:	b8 0b 00 00 00       	mov    eax,0xb
c0012290:	eb 05                	jmp    c0012297 <File::read(unsigned long long, void*, int*)+0x55>
c0012292:	b8 05 00 00 00       	mov    eax,0x5
c0012297:	5b                   	pop    ebx
c0012298:	c3                   	ret    
c0012299:	90                   	nop

c001229a <File::write(unsigned long long, void*, int*)>:
c001229a:	53                   	push   ebx
c001229b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001229f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00122a3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00122aa:	3c 19                	cmp    al,0x19
c00122ac:	77 35                	ja     c00122e3 <File::write(unsigned long long, void*, int*)+0x49>
c00122ae:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c00122b5:	85 c0                	test   eax,eax
c00122b7:	74 2a                	je     c00122e3 <File::write(unsigned long long, void*, int*)+0x49>
c00122b9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00122bf:	85 c0                	test   eax,eax
c00122c1:	74 20                	je     c00122e3 <File::write(unsigned long long, void*, int*)+0x49>
c00122c3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00122c7:	74 21                	je     c00122ea <File::write(unsigned long long, void*, int*)+0x50>
c00122c9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00122cb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00122cf:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00122d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00122dd:	5b                   	pop    ebx
c00122de:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00122e1:	ff e0                	jmp    eax
c00122e3:	b8 0b 00 00 00       	mov    eax,0xb
c00122e8:	eb 05                	jmp    c00122ef <File::write(unsigned long long, void*, int*)+0x55>
c00122ea:	b8 05 00 00 00       	mov    eax,0x5
c00122ef:	5b                   	pop    ebx
c00122f0:	c3                   	ret    
c00122f1:	90                   	nop

c00122f2 <Directory::read(unsigned long long, void*, int*)>:
c00122f2:	53                   	push   ebx
c00122f3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00122f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00122fb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012302:	3c 19                	cmp    al,0x19
c0012304:	77 35                	ja     c001233b <Directory::read(unsigned long long, void*, int*)+0x49>
c0012306:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c001230d:	85 c0                	test   eax,eax
c001230f:	74 2a                	je     c001233b <Directory::read(unsigned long long, void*, int*)+0x49>
c0012311:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012317:	85 c0                	test   eax,eax
c0012319:	74 20                	je     c001233b <Directory::read(unsigned long long, void*, int*)+0x49>
c001231b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001231f:	74 21                	je     c0012342 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012321:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012323:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012327:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001232d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012331:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012335:	5b                   	pop    ebx
c0012336:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012339:	ff e0                	jmp    eax
c001233b:	b8 0b 00 00 00       	mov    eax,0xb
c0012340:	eb 05                	jmp    c0012347 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012342:	b8 05 00 00 00       	mov    eax,0x5
c0012347:	5b                   	pop    ebx
c0012348:	c3                   	ret    
c0012349:	90                   	nop

c001234a <Directory::write(unsigned long long, void*, int*)>:
c001234a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001234e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012355:	b8 0b 00 00 00       	mov    eax,0xb
c001235a:	80 fa 19             	cmp    dl,0x19
c001235d:	77 18                	ja     c0012377 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001235f:	8b 14 95 e0 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc220]
c0012366:	85 d2                	test   edx,edx
c0012368:	74 0d                	je     c0012377 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001236a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012371:	19 c0                	sbb    eax,eax
c0012373:	83 e0 0a             	and    eax,0xa
c0012376:	40                   	inc    eax
c0012377:	c3                   	ret    

c0012378 <File::isAtty()>:
c0012378:	31 c0                	xor    eax,eax
c001237a:	c3                   	ret    
c001237b:	90                   	nop

c001237c <Directory::isAtty()>:
c001237c:	31 c0                	xor    eax,eax
c001237e:	c3                   	ret    
c001237f:	90                   	nop

c0012380 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012380:	b8 0a 00 00 00       	mov    eax,0xa
c0012385:	c3                   	ret    

c0012386 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012386:	b8 0a 00 00 00       	mov    eax,0xa
c001238b:	c3                   	ret    

c001238c <File::~File()>:
c001238c:	83 ec 0c             	sub    esp,0xc
c001238f:	ba 4c 0d 02 c0       	mov    edx,0xc0020d4c
c0012394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012398:	89 10                	mov    DWORD PTR [eax],edx
c001239a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001239e:	83 ec 0c             	sub    esp,0xc
c00123a1:	50                   	push   eax
c00123a2:	e8 0d eb ff ff       	call   c0010eb4 <UnixFile::~UnixFile()>
c00123a7:	83 c4 10             	add    esp,0x10
c00123aa:	90                   	nop
c00123ab:	83 c4 0c             	add    esp,0xc
c00123ae:	c3                   	ret    
c00123af:	90                   	nop

c00123b0 <File::~File()>:
c00123b0:	83 ec 0c             	sub    esp,0xc
c00123b3:	83 ec 0c             	sub    esp,0xc
c00123b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00123ba:	e8 cd ff ff ff       	call   c001238c <File::~File()>
c00123bf:	83 c4 10             	add    esp,0x10
c00123c2:	83 ec 08             	sub    esp,0x8
c00123c5:	68 14 01 00 00       	push   0x114
c00123ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00123ce:	e8 60 fe ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c00123d3:	83 c4 10             	add    esp,0x10
c00123d6:	83 c4 0c             	add    esp,0xc
c00123d9:	c3                   	ret    

c00123da <Directory::~Directory()>:
c00123da:	83 ec 0c             	sub    esp,0xc
c00123dd:	ba 68 0d 02 c0       	mov    edx,0xc0020d68
c00123e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123e6:	89 10                	mov    DWORD PTR [eax],edx
c00123e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123ec:	83 ec 0c             	sub    esp,0xc
c00123ef:	50                   	push   eax
c00123f0:	e8 bf ea ff ff       	call   c0010eb4 <UnixFile::~UnixFile()>
c00123f5:	83 c4 10             	add    esp,0x10
c00123f8:	90                   	nop
c00123f9:	83 c4 0c             	add    esp,0xc
c00123fc:	c3                   	ret    
c00123fd:	90                   	nop

c00123fe <Directory::~Directory()>:
c00123fe:	83 ec 0c             	sub    esp,0xc
c0012401:	83 ec 0c             	sub    esp,0xc
c0012404:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012408:	e8 cd ff ff ff       	call   c00123da <Directory::~Directory()>
c001240d:	83 c4 10             	add    esp,0x10
c0012410:	83 ec 08             	sub    esp,0x8
c0012413:	68 14 01 00 00       	push   0x114
c0012418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001241c:	e8 12 fe ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c0012421:	83 c4 10             	add    esp,0x10
c0012424:	83 c4 0c             	add    esp,0xc
c0012427:	c3                   	ret    

c0012428 <Filesystem::Filesystem()>:
c0012428:	ba e8 0c 02 c0       	mov    edx,0xc0020ce8
c001242d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012431:	89 10                	mov    DWORD PTR [eax],edx
c0012433:	8b 15 40 39 02 c0    	mov    edx,DWORD PTR ds:0xc0023940
c0012439:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001243d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012444:	a3 40 39 02 c0       	mov    ds:0xc0023940,eax
c0012449:	90                   	nop
c001244a:	c3                   	ret    
c001244b:	90                   	nop

c001244c <Filesystem::~Filesystem()>:
c001244c:	ba e8 0c 02 c0       	mov    edx,0xc0020ce8
c0012451:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012455:	89 10                	mov    DWORD PTR [eax],edx
c0012457:	90                   	nop
c0012458:	c3                   	ret    
c0012459:	90                   	nop

c001245a <Filesystem::~Filesystem()>:
c001245a:	83 ec 0c             	sub    esp,0xc
c001245d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012461:	e8 e6 ff ff ff       	call   c001244c <Filesystem::~Filesystem()>
c0012466:	83 c4 04             	add    esp,0x4
c0012469:	83 ec 08             	sub    esp,0x8
c001246c:	6a 08                	push   0x8
c001246e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012472:	e8 bc fd ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c0012477:	83 c4 10             	add    esp,0x10
c001247a:	83 c4 0c             	add    esp,0xc
c001247d:	c3                   	ret    

c001247e <initVFS()>:
c001247e:	83 ec 18             	sub    esp,0x18
c0012481:	6a 08                	push   0x8
c0012483:	e8 9c fd ff ff       	call   c0012224 <operator new(unsigned long)>
c0012488:	89 04 24             	mov    DWORD PTR [esp],eax
c001248b:	e8 e4 71 00 00       	call   c0019674 <FAT::FAT()>
c0012490:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012497:	e8 88 fd ff ff       	call   c0012224 <operator new(unsigned long)>
c001249c:	89 04 24             	mov    DWORD PTR [esp],eax
c001249f:	e8 da 83 00 00       	call   c001a87e <ISO9660::ISO9660()>
c00124a4:	83 c4 1c             	add    esp,0x1c
c00124a7:	c3                   	ret    

c00124a8 <standardiseFiles(char*, char const*, char const*)>:
c00124a8:	55                   	push   ebp
c00124a9:	57                   	push   edi
c00124aa:	56                   	push   esi
c00124ab:	53                   	push   ebx
c00124ac:	81 ec 10 04 00 00    	sub    esp,0x410
c00124b2:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00124b9:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00124c0:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00124c7:	68 00 04 00 00       	push   0x400
c00124cc:	6a 00                	push   0x0
c00124ce:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00124d2:	56                   	push   esi
c00124d3:	e8 30 e1 fe ff       	call   c0000608 <memset>
c00124d8:	83 c4 10             	add    esp,0x10
c00124db:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00124df:	75 0b                	jne    c00124ec <standardiseFiles(char*, char const*, char const*)+0x44>
c00124e1:	50                   	push   eax
c00124e2:	50                   	push   eax
c00124e3:	57                   	push   edi
c00124e4:	56                   	push   esi
c00124e5:	e8 bd e1 fe ff       	call   c00006a7 <strcpy>
c00124ea:	eb 41                	jmp    c001252d <standardiseFiles(char*, char const*, char const*)+0x85>
c00124ec:	8a 07                	mov    al,BYTE PTR [edi]
c00124ee:	3c 5c                	cmp    al,0x5c
c00124f0:	74 04                	je     c00124f6 <standardiseFiles(char*, char const*, char const*)+0x4e>
c00124f2:	3c 2f                	cmp    al,0x2f
c00124f4:	75 18                	jne    c001250e <standardiseFiles(char*, char const*, char const*)+0x66>
c00124f6:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00124f9:	3c 60                	cmp    al,0x60
c00124fb:	7e 03                	jle    c0012500 <standardiseFiles(char*, char const*, char const*)+0x58>
c00124fd:	83 e8 20             	sub    eax,0x20
c0012500:	88 04 24             	mov    BYTE PTR [esp],al
c0012503:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001250a:	50                   	push   eax
c001250b:	50                   	push   eax
c001250c:	eb 18                	jmp    c0012526 <standardiseFiles(char*, char const*, char const*)+0x7e>
c001250e:	50                   	push   eax
c001250f:	50                   	push   eax
c0012510:	55                   	push   ebp
c0012511:	56                   	push   esi
c0012512:	e8 90 e1 fe ff       	call   c00006a7 <strcpy>
c0012517:	5a                   	pop    edx
c0012518:	59                   	pop    ecx
c0012519:	68 de 03 02 c0       	push   0xc00203de
c001251e:	56                   	push   esi
c001251f:	e8 3a e2 fe ff       	call   c000075e <strcat>
c0012524:	5d                   	pop    ebp
c0012525:	58                   	pop    eax
c0012526:	57                   	push   edi
c0012527:	56                   	push   esi
c0012528:	e8 31 e2 fe ff       	call   c000075e <strcat>
c001252d:	83 c4 10             	add    esp,0x10
c0012530:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012533:	3c 60                	cmp    al,0x60
c0012535:	7e 03                	jle    c001253a <standardiseFiles(char*, char const*, char const*)+0x92>
c0012537:	83 e8 20             	sub    eax,0x20
c001253a:	88 04 24             	mov    BYTE PTR [esp],al
c001253d:	88 03                	mov    BYTE PTR [ebx],al
c001253f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012546:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001254c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012550:	bf 03 00 00 00       	mov    edi,0x3
c0012555:	b8 03 00 00 00       	mov    eax,0x3
c001255a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001255d:	84 d2                	test   dl,dl
c001255f:	0f 84 91 00 00 00    	je     c00125f6 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012565:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012568:	80 fa 5c             	cmp    dl,0x5c
c001256b:	74 05                	je     c0012572 <standardiseFiles(char*, char const*, char const*)+0xca>
c001256d:	80 fa 2f             	cmp    dl,0x2f
c0012570:	75 12                	jne    c0012584 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012572:	89 c5                	mov    ebp,eax
c0012574:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012579:	74 09                	je     c0012584 <standardiseFiles(char*, char const*, char const*)+0xdc>
c001257b:	40                   	inc    eax
c001257c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012580:	89 cf                	mov    edi,ecx
c0012582:	eb d6                	jmp    c001255a <standardiseFiles(char*, char const*, char const*)+0xb2>
c0012584:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012589:	75 5b                	jne    c00125e6 <standardiseFiles(char*, char const*, char const*)+0x13e>
c001258b:	80 fa 2e             	cmp    dl,0x2e
c001258e:	75 56                	jne    c00125e6 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012590:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012594:	74 19                	je     c00125af <standardiseFiles(char*, char const*, char const*)+0x107>
c0012596:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001259b:	74 53                	je     c00125f0 <standardiseFiles(char*, char const*, char const*)+0x148>
c001259d:	89 f9                	mov    ecx,edi
c001259f:	41                   	inc    ecx
c00125a0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00125a3:	80 fa 2f             	cmp    dl,0x2f
c00125a6:	74 f7                	je     c001259f <standardiseFiles(char*, char const*, char const*)+0xf7>
c00125a8:	80 fa 5c             	cmp    dl,0x5c
c00125ab:	74 f2                	je     c001259f <standardiseFiles(char*, char const*, char const*)+0xf7>
c00125ad:	eb d1                	jmp    c0012580 <standardiseFiles(char*, char const*, char const*)+0xd8>
c00125af:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00125b4:	74 3a                	je     c00125f0 <standardiseFiles(char*, char const*, char const*)+0x148>
c00125b6:	83 f8 03             	cmp    eax,0x3
c00125b9:	74 c5                	je     c0012580 <standardiseFiles(char*, char const*, char const*)+0xd8>
c00125bb:	41                   	inc    ecx
c00125bc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00125bf:	80 fa 2f             	cmp    dl,0x2f
c00125c2:	74 f7                	je     c00125bb <standardiseFiles(char*, char const*, char const*)+0x113>
c00125c4:	80 fa 5c             	cmp    dl,0x5c
c00125c7:	74 f2                	je     c00125bb <standardiseFiles(char*, char const*, char const*)+0x113>
c00125c9:	48                   	dec    eax
c00125ca:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00125ce:	75 06                	jne    c00125d6 <standardiseFiles(char*, char const*, char const*)+0x12e>
c00125d0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00125d4:	eb f3                	jmp    c00125c9 <standardiseFiles(char*, char const*, char const*)+0x121>
c00125d6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00125da:	74 07                	je     c00125e3 <standardiseFiles(char*, char const*, char const*)+0x13b>
c00125dc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00125e0:	48                   	dec    eax
c00125e1:	eb f3                	jmp    c00125d6 <standardiseFiles(char*, char const*, char const*)+0x12e>
c00125e3:	40                   	inc    eax
c00125e4:	eb 9a                	jmp    c0012580 <standardiseFiles(char*, char const*, char const*)+0xd8>
c00125e6:	80 fa 2f             	cmp    dl,0x2f
c00125e9:	74 95                	je     c0012580 <standardiseFiles(char*, char const*, char const*)+0xd8>
c00125eb:	80 fa 5c             	cmp    dl,0x5c
c00125ee:	74 90                	je     c0012580 <standardiseFiles(char*, char const*, char const*)+0xd8>
c00125f0:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00125f3:	40                   	inc    eax
c00125f4:	eb 8a                	jmp    c0012580 <standardiseFiles(char*, char const*, char const*)+0xd8>
c00125f6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00125fa:	83 ec 0c             	sub    esp,0xc
c00125fd:	53                   	push   ebx
c00125fe:	e8 22 e0 fe ff       	call   c0000625 <strlen>
c0012603:	83 c4 10             	add    esp,0x10
c0012606:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001260b:	75 26                	jne    c0012633 <standardiseFiles(char*, char const*, char const*)+0x18b>
c001260d:	83 ec 0c             	sub    esp,0xc
c0012610:	53                   	push   ebx
c0012611:	e8 0f e0 fe ff       	call   c0000625 <strlen>
c0012616:	83 c4 10             	add    esp,0x10
c0012619:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001261e:	74 26                	je     c0012646 <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012620:	83 ec 0c             	sub    esp,0xc
c0012623:	53                   	push   ebx
c0012624:	e8 fc df fe ff       	call   c0000625 <strlen>
c0012629:	83 c4 10             	add    esp,0x10
c001262c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012631:	eb c7                	jmp    c00125fa <standardiseFiles(char*, char const*, char const*)+0x152>
c0012633:	83 ec 0c             	sub    esp,0xc
c0012636:	53                   	push   ebx
c0012637:	e8 e9 df fe ff       	call   c0000625 <strlen>
c001263c:	83 c4 10             	add    esp,0x10
c001263f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012644:	74 c7                	je     c001260d <standardiseFiles(char*, char const*, char const*)+0x165>
c0012646:	81 c4 0c 04 00 00    	add    esp,0x40c
c001264c:	5b                   	pop    ebx
c001264d:	5e                   	pop    esi
c001264e:	5f                   	pop    edi
c001264f:	5d                   	pop    ebp
c0012650:	c3                   	ret    
c0012651:	90                   	nop

c0012652 <File::File(char const*, Process*)>:
c0012652:	83 ec 0c             	sub    esp,0xc
c0012655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012659:	83 ec 08             	sub    esp,0x8
c001265c:	6a 00                	push   0x0
c001265e:	50                   	push   eax
c001265f:	e8 ec e7 ff ff       	call   c0010e50 <UnixFile::UnixFile(int)>
c0012664:	83 c4 10             	add    esp,0x10
c0012667:	ba 4c 0d 02 c0       	mov    edx,0xc0020d4c
c001266c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012670:	89 10                	mov    DWORD PTR [eax],edx
c0012672:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012676:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001267c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012680:	83 c0 0d             	add    eax,0xd
c0012683:	83 ec 04             	sub    esp,0x4
c0012686:	52                   	push   edx
c0012687:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001268b:	50                   	push   eax
c001268c:	e8 17 fe ff ff       	call   c00124a8 <standardiseFiles(char*, char const*, char const*)>
c0012691:	83 c4 10             	add    esp,0x10
c0012694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012698:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001269b:	8d 50 bf             	lea    edx,[eax-0x41]
c001269e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126a2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00126a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126ac:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00126b0:	90                   	nop
c00126b1:	83 c4 0c             	add    esp,0xc
c00126b4:	c3                   	ret    
c00126b5:	90                   	nop

c00126b6 <File::open(FileOpenMode)>:
c00126b6:	53                   	push   ebx
c00126b7:	b8 0b 00 00 00       	mov    eax,0xb
c00126bc:	83 ec 08             	sub    esp,0x8
c00126bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00126c3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00126ca:	80 fa 19             	cmp    dl,0x19
c00126cd:	77 40                	ja     c001270f <File::open(FileOpenMode)+0x59>
c00126cf:	8b 14 95 e0 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc220]
c00126d6:	85 d2                	test   edx,edx
c00126d8:	74 35                	je     c001270f <File::open(FileOpenMode)+0x59>
c00126da:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00126e0:	85 d2                	test   edx,edx
c00126e2:	74 2b                	je     c001270f <File::open(FileOpenMode)+0x59>
c00126e4:	b8 06 00 00 00       	mov    eax,0x6
c00126e9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00126ed:	75 20                	jne    c001270f <File::open(FileOpenMode)+0x59>
c00126ef:	8b 02                	mov    eax,DWORD PTR [edx]
c00126f1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00126f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00126fb:	51                   	push   ecx
c00126fc:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00126ff:	51                   	push   ecx
c0012700:	52                   	push   edx
c0012701:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012704:	83 c4 10             	add    esp,0x10
c0012707:	85 c0                	test   eax,eax
c0012709:	75 04                	jne    c001270f <File::open(FileOpenMode)+0x59>
c001270b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001270f:	83 c4 08             	add    esp,0x8
c0012712:	5b                   	pop    ebx
c0012713:	c3                   	ret    

c0012714 <File::close()>:
c0012714:	53                   	push   ebx
c0012715:	b8 0b 00 00 00       	mov    eax,0xb
c001271a:	83 ec 08             	sub    esp,0x8
c001271d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012721:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012728:	80 fa 19             	cmp    dl,0x19
c001272b:	77 41                	ja     c001276e <File::close()+0x5a>
c001272d:	8b 1c 95 e0 3d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc220]
c0012734:	85 db                	test   ebx,ebx
c0012736:	74 36                	je     c001276e <File::close()+0x5a>
c0012738:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001273f:	74 2d                	je     c001276e <File::close()+0x5a>
c0012741:	b8 05 00 00 00       	mov    eax,0x5
c0012746:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001274a:	74 22                	je     c001276e <File::close()+0x5a>
c001274c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012750:	8b 04 95 e0 3d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc220]
c0012757:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001275d:	53                   	push   ebx
c001275e:	53                   	push   ebx
c001275f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012761:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012767:	50                   	push   eax
c0012768:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001276b:	83 c4 10             	add    esp,0x10
c001276e:	83 c4 08             	add    esp,0x8
c0012771:	5b                   	pop    ebx
c0012772:	c3                   	ret    
c0012773:	90                   	nop

c0012774 <File::seek(unsigned long long)>:
c0012774:	56                   	push   esi
c0012775:	53                   	push   ebx
c0012776:	b8 0b 00 00 00       	mov    eax,0xb
c001277b:	51                   	push   ecx
c001277c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012780:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012784:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001278b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001278f:	80 fa 19             	cmp    dl,0x19
c0012792:	77 31                	ja     c00127c5 <File::seek(unsigned long long)+0x51>
c0012794:	8b 14 95 e0 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc220]
c001279b:	85 d2                	test   edx,edx
c001279d:	74 26                	je     c00127c5 <File::seek(unsigned long long)+0x51>
c001279f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00127a5:	85 d2                	test   edx,edx
c00127a7:	74 1c                	je     c00127c5 <File::seek(unsigned long long)+0x51>
c00127a9:	b8 05 00 00 00       	mov    eax,0x5
c00127ae:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00127b2:	74 11                	je     c00127c5 <File::seek(unsigned long long)+0x51>
c00127b4:	8b 02                	mov    eax,DWORD PTR [edx]
c00127b6:	53                   	push   ebx
c00127b7:	51                   	push   ecx
c00127b8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00127be:	52                   	push   edx
c00127bf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00127c2:	83 c4 10             	add    esp,0x10
c00127c5:	5a                   	pop    edx
c00127c6:	5b                   	pop    ebx
c00127c7:	5e                   	pop    esi
c00127c8:	c3                   	ret    
c00127c9:	90                   	nop

c00127ca <File::tell(unsigned long long*)>:
c00127ca:	83 ec 0c             	sub    esp,0xc
c00127cd:	b8 0b 00 00 00       	mov    eax,0xb
c00127d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00127d6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00127dd:	80 fa 19             	cmp    dl,0x19
c00127e0:	77 34                	ja     c0012816 <File::tell(unsigned long long*)+0x4c>
c00127e2:	8b 14 95 e0 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc220]
c00127e9:	85 d2                	test   edx,edx
c00127eb:	74 29                	je     c0012816 <File::tell(unsigned long long*)+0x4c>
c00127ed:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00127f3:	85 d2                	test   edx,edx
c00127f5:	74 1f                	je     c0012816 <File::tell(unsigned long long*)+0x4c>
c00127f7:	b8 05 00 00 00       	mov    eax,0x5
c00127fc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012800:	74 14                	je     c0012816 <File::tell(unsigned long long*)+0x4c>
c0012802:	50                   	push   eax
c0012803:	8b 02                	mov    eax,DWORD PTR [edx]
c0012805:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012809:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001280f:	52                   	push   edx
c0012810:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012813:	83 c4 10             	add    esp,0x10
c0012816:	83 c4 0c             	add    esp,0xc
c0012819:	c3                   	ret    

c001281a <File::rewind()>:
c001281a:	83 ec 10             	sub    esp,0x10
c001281d:	6a 00                	push   0x0
c001281f:	6a 00                	push   0x0
c0012821:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012825:	e8 4a ff ff ff       	call   c0012774 <File::seek(unsigned long long)>
c001282a:	83 c4 1c             	add    esp,0x1c
c001282d:	c3                   	ret    

c001282e <File::unlink()>:
c001282e:	83 ec 0c             	sub    esp,0xc
c0012831:	b8 0b 00 00 00       	mov    eax,0xb
c0012836:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001283a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012841:	80 f9 19             	cmp    cl,0x19
c0012844:	77 2f                	ja     c0012875 <File::unlink()+0x47>
c0012846:	8b 0c 8d e0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc220]
c001284d:	85 c9                	test   ecx,ecx
c001284f:	74 24                	je     c0012875 <File::unlink()+0x47>
c0012851:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012857:	85 c9                	test   ecx,ecx
c0012859:	74 1a                	je     c0012875 <File::unlink()+0x47>
c001285b:	b8 06 00 00 00       	mov    eax,0x6
c0012860:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012864:	75 0f                	jne    c0012875 <File::unlink()+0x47>
c0012866:	83 c2 0d             	add    edx,0xd
c0012869:	50                   	push   eax
c001286a:	50                   	push   eax
c001286b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001286d:	52                   	push   edx
c001286e:	51                   	push   ecx
c001286f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012872:	83 c4 10             	add    esp,0x10
c0012875:	83 c4 0c             	add    esp,0xc
c0012878:	c3                   	ret    
c0012879:	90                   	nop

c001287a <File::rename(char const*)>:
c001287a:	83 ec 0c             	sub    esp,0xc
c001287d:	b8 0b 00 00 00       	mov    eax,0xb
c0012882:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012886:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001288d:	80 f9 19             	cmp    cl,0x19
c0012890:	77 32                	ja     c00128c4 <File::rename(char const*)+0x4a>
c0012892:	8b 0c 8d e0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc220]
c0012899:	85 c9                	test   ecx,ecx
c001289b:	74 27                	je     c00128c4 <File::rename(char const*)+0x4a>
c001289d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00128a3:	85 c9                	test   ecx,ecx
c00128a5:	74 1d                	je     c00128c4 <File::rename(char const*)+0x4a>
c00128a7:	b8 06 00 00 00       	mov    eax,0x6
c00128ac:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128b0:	75 12                	jne    c00128c4 <File::rename(char const*)+0x4a>
c00128b2:	83 c2 0d             	add    edx,0xd
c00128b5:	50                   	push   eax
c00128b6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00128b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128bc:	52                   	push   edx
c00128bd:	51                   	push   ecx
c00128be:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00128c1:	83 c4 10             	add    esp,0x10
c00128c4:	83 c4 0c             	add    esp,0xc
c00128c7:	c3                   	ret    

c00128c8 <File::chfatattr(unsigned char, unsigned char)>:
c00128c8:	57                   	push   edi
c00128c9:	b8 0b 00 00 00       	mov    eax,0xb
c00128ce:	56                   	push   esi
c00128cf:	53                   	push   ebx
c00128d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00128d4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00128d8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00128df:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00128e3:	80 f9 19             	cmp    cl,0x19
c00128e6:	77 37                	ja     c001291f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00128e8:	8b 0c 8d e0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc220]
c00128ef:	85 c9                	test   ecx,ecx
c00128f1:	74 2c                	je     c001291f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00128f3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00128f9:	85 c9                	test   ecx,ecx
c00128fb:	74 22                	je     c001291f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00128fd:	b8 06 00 00 00       	mov    eax,0x6
c0012902:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012906:	75 17                	jne    c001291f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012908:	8b 39                	mov    edi,DWORD PTR [ecx]
c001290a:	89 f0                	mov    eax,esi
c001290c:	83 c2 0d             	add    edx,0xd
c001290f:	0f b6 f0             	movzx  esi,al
c0012912:	0f b6 db             	movzx  ebx,bl
c0012915:	56                   	push   esi
c0012916:	53                   	push   ebx
c0012917:	52                   	push   edx
c0012918:	51                   	push   ecx
c0012919:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001291c:	83 c4 10             	add    esp,0x10
c001291f:	5b                   	pop    ebx
c0012920:	5e                   	pop    esi
c0012921:	5f                   	pop    edi
c0012922:	c3                   	ret    
c0012923:	90                   	nop

c0012924 <File::exists()>:
c0012924:	83 ec 0c             	sub    esp,0xc
c0012927:	31 c0                	xor    eax,eax
c0012929:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001292d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012934:	80 f9 19             	cmp    cl,0x19
c0012937:	77 24                	ja     c001295d <File::exists()+0x39>
c0012939:	8b 0c 8d e0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc220]
c0012940:	85 c9                	test   ecx,ecx
c0012942:	74 19                	je     c001295d <File::exists()+0x39>
c0012944:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001294a:	85 c9                	test   ecx,ecx
c001294c:	74 0f                	je     c001295d <File::exists()+0x39>
c001294e:	83 c2 0d             	add    edx,0xd
c0012951:	50                   	push   eax
c0012952:	50                   	push   eax
c0012953:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012955:	52                   	push   edx
c0012956:	51                   	push   ecx
c0012957:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001295a:	83 c4 10             	add    esp,0x10
c001295d:	83 c4 0c             	add    esp,0xc
c0012960:	c3                   	ret    
c0012961:	90                   	nop

c0012962 <File::stat(unsigned long long*, bool*)>:
c0012962:	56                   	push   esi
c0012963:	53                   	push   ebx
c0012964:	50                   	push   eax
c0012965:	b8 0b 00 00 00       	mov    eax,0xb
c001296a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001296e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012972:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012979:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001297d:	80 f9 19             	cmp    cl,0x19
c0012980:	77 3d                	ja     c00129bf <File::stat(unsigned long long*, bool*)+0x5d>
c0012982:	8b 0c 8d e0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc220]
c0012989:	85 c9                	test   ecx,ecx
c001298b:	74 32                	je     c00129bf <File::stat(unsigned long long*, bool*)+0x5d>
c001298d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012993:	85 c9                	test   ecx,ecx
c0012995:	74 28                	je     c00129bf <File::stat(unsigned long long*, bool*)+0x5d>
c0012997:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012999:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001299d:	74 13                	je     c00129b2 <File::stat(unsigned long long*, bool*)+0x50>
c001299f:	83 ec 04             	sub    esp,0x4
c00129a2:	56                   	push   esi
c00129a3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00129a9:	51                   	push   ecx
c00129aa:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00129ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00129b0:	eb 0a                	jmp    c00129bc <File::stat(unsigned long long*, bool*)+0x5a>
c00129b2:	53                   	push   ebx
c00129b3:	83 c2 0d             	add    edx,0xd
c00129b6:	56                   	push   esi
c00129b7:	52                   	push   edx
c00129b8:	51                   	push   ecx
c00129b9:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00129bc:	83 c4 10             	add    esp,0x10
c00129bf:	5a                   	pop    edx
c00129c0:	5b                   	pop    ebx
c00129c1:	5e                   	pop    esi
c00129c2:	c3                   	ret    

c00129c3 <getcwd(Process*, char*, int)>:
c00129c3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129c7:	31 c0                	xor    eax,eax
c00129c9:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00129cc:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00129d0:	7d 15                	jge    c00129e7 <getcwd(Process*, char*, int)+0x24>
c00129d2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00129d6:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00129dd:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00129e0:	84 c9                	test   cl,cl
c00129e2:	74 06                	je     c00129ea <getcwd(Process*, char*, int)+0x27>
c00129e4:	40                   	inc    eax
c00129e5:	eb e2                	jmp    c00129c9 <getcwd(Process*, char*, int)+0x6>
c00129e7:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00129ea:	31 c0                	xor    eax,eax
c00129ec:	c3                   	ret    

c00129ed <setcwd(Process*, char*)>:
c00129ed:	55                   	push   ebp
c00129ee:	57                   	push   edi
c00129ef:	56                   	push   esi
c00129f0:	53                   	push   ebx
c00129f1:	81 ec 20 02 00 00    	sub    esp,0x220
c00129f7:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00129fe:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012a04:	57                   	push   edi
c0012a05:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012a0c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012a10:	56                   	push   esi
c0012a11:	e8 92 fa ff ff       	call   c00124a8 <standardiseFiles(char*, char const*, char const*)>
c0012a16:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a19:	e8 07 dc fe ff       	call   c0000625 <strlen>
c0012a1e:	83 c4 10             	add    esp,0x10
c0012a21:	83 f8 02             	cmp    eax,0x2
c0012a24:	77 17                	ja     c0012a3d <setcwd(Process*, char*)+0x50>
c0012a26:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012a2b:	83 e8 41             	sub    eax,0x41
c0012a2e:	83 f8 19             	cmp    eax,0x19
c0012a31:	76 24                	jbe    c0012a57 <setcwd(Process*, char*)+0x6a>
c0012a33:	b8 03 00 00 00       	mov    eax,0x3
c0012a38:	e9 cb 00 00 00       	jmp    c0012b08 <setcwd(Process*, char*)+0x11b>
c0012a3d:	83 ec 0c             	sub    esp,0xc
c0012a40:	56                   	push   esi
c0012a41:	e8 df db fe ff       	call   c0000625 <strlen>
c0012a46:	83 c4 10             	add    esp,0x10
c0012a49:	83 f8 03             	cmp    eax,0x3
c0012a4c:	75 33                	jne    c0012a81 <setcwd(Process*, char*)+0x94>
c0012a4e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012a53:	75 2c                	jne    c0012a81 <setcwd(Process*, char*)+0x94>
c0012a55:	eb cf                	jmp    c0012a26 <setcwd(Process*, char*)+0x39>
c0012a57:	8b 14 85 e0 3d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc220]
c0012a5e:	b8 05 00 00 00       	mov    eax,0x5
c0012a63:	85 d2                	test   edx,edx
c0012a65:	0f 84 9d 00 00 00    	je     c0012b08 <setcwd(Process*, char*)+0x11b>
c0012a6b:	b8 06 00 00 00       	mov    eax,0x6
c0012a70:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012a77:	0f 84 8b 00 00 00    	je     c0012b08 <setcwd(Process*, char*)+0x11b>
c0012a7d:	51                   	push   ecx
c0012a7e:	51                   	push   ecx
c0012a7f:	eb 7b                	jmp    c0012afc <setcwd(Process*, char*)+0x10f>
c0012a81:	83 ec 0c             	sub    esp,0xc
c0012a84:	68 14 01 00 00       	push   0x114
c0012a89:	e8 96 f7 ff ff       	call   c0012224 <operator new(unsigned long)>
c0012a8e:	83 c4 0c             	add    esp,0xc
c0012a91:	89 c3                	mov    ebx,eax
c0012a93:	55                   	push   ebp
c0012a94:	56                   	push   esi
c0012a95:	50                   	push   eax
c0012a96:	e8 b7 fb ff ff       	call   c0012652 <File::File(char const*, Process*)>
c0012a9b:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012aa0:	83 c4 0c             	add    esp,0xc
c0012aa3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012aa7:	50                   	push   eax
c0012aa8:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012aac:	50                   	push   eax
c0012aad:	53                   	push   ebx
c0012aae:	e8 af fe ff ff       	call   c0012962 <File::stat(unsigned long long*, bool*)>
c0012ab3:	83 c4 10             	add    esp,0x10
c0012ab6:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012ab8:	83 f8 02             	cmp    eax,0x2
c0012abb:	75 09                	jne    c0012ac6 <setcwd(Process*, char*)+0xd9>
c0012abd:	83 ec 0c             	sub    esp,0xc
c0012ac0:	53                   	push   ebx
c0012ac1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012ac4:	eb 0d                	jmp    c0012ad3 <setcwd(Process*, char*)+0xe6>
c0012ac6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012ac9:	85 c0                	test   eax,eax
c0012acb:	74 10                	je     c0012add <setcwd(Process*, char*)+0xf0>
c0012acd:	83 ec 0c             	sub    esp,0xc
c0012ad0:	53                   	push   ebx
c0012ad1:	ff d2                	call   edx
c0012ad3:	83 c4 10             	add    esp,0x10
c0012ad6:	b8 01 00 00 00       	mov    eax,0x1
c0012adb:	eb 2b                	jmp    c0012b08 <setcwd(Process*, char*)+0x11b>
c0012add:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012ae2:	75 10                	jne    c0012af4 <setcwd(Process*, char*)+0x107>
c0012ae4:	83 ec 0c             	sub    esp,0xc
c0012ae7:	53                   	push   ebx
c0012ae8:	ff d2                	call   edx
c0012aea:	83 c4 10             	add    esp,0x10
c0012aed:	b8 02 00 00 00       	mov    eax,0x2
c0012af2:	eb 14                	jmp    c0012b08 <setcwd(Process*, char*)+0x11b>
c0012af4:	83 ec 0c             	sub    esp,0xc
c0012af7:	53                   	push   ebx
c0012af8:	ff d2                	call   edx
c0012afa:	58                   	pop    eax
c0012afb:	5a                   	pop    edx
c0012afc:	56                   	push   esi
c0012afd:	57                   	push   edi
c0012afe:	e8 a4 db fe ff       	call   c00006a7 <strcpy>
c0012b03:	83 c4 10             	add    esp,0x10
c0012b06:	31 c0                	xor    eax,eax
c0012b08:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012b0e:	5b                   	pop    ebx
c0012b0f:	5e                   	pop    esi
c0012b10:	5f                   	pop    edi
c0012b11:	5d                   	pop    ebp
c0012b12:	c3                   	ret    
c0012b13:	90                   	nop

c0012b14 <Directory::Directory(char const*, Process*)>:
c0012b14:	83 ec 0c             	sub    esp,0xc
c0012b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b1b:	83 ec 08             	sub    esp,0x8
c0012b1e:	6a 00                	push   0x0
c0012b20:	50                   	push   eax
c0012b21:	e8 2a e3 ff ff       	call   c0010e50 <UnixFile::UnixFile(int)>
c0012b26:	83 c4 10             	add    esp,0x10
c0012b29:	ba 68 0d 02 c0       	mov    edx,0xc0020d68
c0012b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b32:	89 10                	mov    DWORD PTR [eax],edx
c0012b34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b38:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012b3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b42:	83 c0 0d             	add    eax,0xd
c0012b45:	83 ec 04             	sub    esp,0x4
c0012b48:	52                   	push   edx
c0012b49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b4d:	50                   	push   eax
c0012b4e:	e8 55 f9 ff ff       	call   c00124a8 <standardiseFiles(char*, char const*, char const*)>
c0012b53:	83 c4 10             	add    esp,0x10
c0012b56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b5a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012b5d:	8d 50 bf             	lea    edx,[eax-0x41]
c0012b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b64:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b6e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012b72:	90                   	nop
c0012b73:	83 c4 0c             	add    esp,0xc
c0012b76:	c3                   	ret    
c0012b77:	90                   	nop

c0012b78 <Directory::open()>:
c0012b78:	53                   	push   ebx
c0012b79:	b8 0b 00 00 00       	mov    eax,0xb
c0012b7e:	83 ec 08             	sub    esp,0x8
c0012b81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b85:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012b8c:	80 fa 19             	cmp    dl,0x19
c0012b8f:	77 3d                	ja     c0012bce <Directory::open()+0x56>
c0012b91:	8b 14 95 e0 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc220]
c0012b98:	85 d2                	test   edx,edx
c0012b9a:	74 32                	je     c0012bce <Directory::open()+0x56>
c0012b9c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012ba2:	85 d2                	test   edx,edx
c0012ba4:	74 28                	je     c0012bce <Directory::open()+0x56>
c0012ba6:	b8 06 00 00 00       	mov    eax,0x6
c0012bab:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012baf:	75 1d                	jne    c0012bce <Directory::open()+0x56>
c0012bb1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012bb7:	50                   	push   eax
c0012bb8:	8b 02                	mov    eax,DWORD PTR [edx]
c0012bba:	51                   	push   ecx
c0012bbb:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012bbe:	51                   	push   ecx
c0012bbf:	52                   	push   edx
c0012bc0:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012bc3:	83 c4 10             	add    esp,0x10
c0012bc6:	85 c0                	test   eax,eax
c0012bc8:	75 04                	jne    c0012bce <Directory::open()+0x56>
c0012bca:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012bce:	83 c4 08             	add    esp,0x8
c0012bd1:	5b                   	pop    ebx
c0012bd2:	c3                   	ret    
c0012bd3:	90                   	nop

c0012bd4 <Directory::close()>:
c0012bd4:	53                   	push   ebx
c0012bd5:	b8 0b 00 00 00       	mov    eax,0xb
c0012bda:	83 ec 08             	sub    esp,0x8
c0012bdd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012be1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012be8:	80 fa 19             	cmp    dl,0x19
c0012beb:	77 41                	ja     c0012c2e <Directory::close()+0x5a>
c0012bed:	8b 1c 95 e0 3d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc220]
c0012bf4:	85 db                	test   ebx,ebx
c0012bf6:	74 36                	je     c0012c2e <Directory::close()+0x5a>
c0012bf8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012bff:	74 2d                	je     c0012c2e <Directory::close()+0x5a>
c0012c01:	b8 05 00 00 00       	mov    eax,0x5
c0012c06:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012c0a:	74 22                	je     c0012c2e <Directory::close()+0x5a>
c0012c0c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012c10:	8b 04 95 e0 3d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc220]
c0012c17:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012c1d:	53                   	push   ebx
c0012c1e:	53                   	push   ebx
c0012c1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c21:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012c27:	50                   	push   eax
c0012c28:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0012c2b:	83 c4 10             	add    esp,0x10
c0012c2e:	83 c4 08             	add    esp,0x8
c0012c31:	5b                   	pop    ebx
c0012c32:	c3                   	ret    
c0012c33:	90                   	nop

c0012c34 <Directory::unlink()>:
c0012c34:	83 ec 0c             	sub    esp,0xc
c0012c37:	b8 0b 00 00 00       	mov    eax,0xb
c0012c3c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012c40:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012c47:	80 f9 19             	cmp    cl,0x19
c0012c4a:	77 2f                	ja     c0012c7b <Directory::unlink()+0x47>
c0012c4c:	8b 0c 8d e0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc220]
c0012c53:	85 c9                	test   ecx,ecx
c0012c55:	74 24                	je     c0012c7b <Directory::unlink()+0x47>
c0012c57:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012c5d:	85 c9                	test   ecx,ecx
c0012c5f:	74 1a                	je     c0012c7b <Directory::unlink()+0x47>
c0012c61:	b8 06 00 00 00       	mov    eax,0x6
c0012c66:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012c6a:	75 0f                	jne    c0012c7b <Directory::unlink()+0x47>
c0012c6c:	83 c2 0d             	add    edx,0xd
c0012c6f:	50                   	push   eax
c0012c70:	50                   	push   eax
c0012c71:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012c73:	52                   	push   edx
c0012c74:	51                   	push   ecx
c0012c75:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012c78:	83 c4 10             	add    esp,0x10
c0012c7b:	83 c4 0c             	add    esp,0xc
c0012c7e:	c3                   	ret    
c0012c7f:	90                   	nop

c0012c80 <Directory::rename(char const*)>:
c0012c80:	83 ec 0c             	sub    esp,0xc
c0012c83:	b8 0b 00 00 00       	mov    eax,0xb
c0012c88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012c8c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012c93:	80 f9 19             	cmp    cl,0x19
c0012c96:	77 32                	ja     c0012cca <Directory::rename(char const*)+0x4a>
c0012c98:	8b 0c 8d e0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc220]
c0012c9f:	85 c9                	test   ecx,ecx
c0012ca1:	74 27                	je     c0012cca <Directory::rename(char const*)+0x4a>
c0012ca3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ca9:	85 c9                	test   ecx,ecx
c0012cab:	74 1d                	je     c0012cca <Directory::rename(char const*)+0x4a>
c0012cad:	b8 06 00 00 00       	mov    eax,0x6
c0012cb2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012cb6:	75 12                	jne    c0012cca <Directory::rename(char const*)+0x4a>
c0012cb8:	83 c2 0d             	add    edx,0xd
c0012cbb:	50                   	push   eax
c0012cbc:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012cbe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cc2:	52                   	push   edx
c0012cc3:	51                   	push   ecx
c0012cc4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012cc7:	83 c4 10             	add    esp,0x10
c0012cca:	83 c4 0c             	add    esp,0xc
c0012ccd:	c3                   	ret    

c0012cce <Directory::exists()>:
c0012cce:	83 ec 0c             	sub    esp,0xc
c0012cd1:	31 c0                	xor    eax,eax
c0012cd3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012cd7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012cde:	80 f9 19             	cmp    cl,0x19
c0012ce1:	77 24                	ja     c0012d07 <Directory::exists()+0x39>
c0012ce3:	8b 0c 8d e0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc220]
c0012cea:	85 c9                	test   ecx,ecx
c0012cec:	74 19                	je     c0012d07 <Directory::exists()+0x39>
c0012cee:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012cf4:	85 c9                	test   ecx,ecx
c0012cf6:	74 0f                	je     c0012d07 <Directory::exists()+0x39>
c0012cf8:	83 c2 0d             	add    edx,0xd
c0012cfb:	50                   	push   eax
c0012cfc:	50                   	push   eax
c0012cfd:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012cff:	52                   	push   edx
c0012d00:	51                   	push   ecx
c0012d01:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012d04:	83 c4 10             	add    esp,0x10
c0012d07:	83 c4 0c             	add    esp,0xc
c0012d0a:	c3                   	ret    
c0012d0b:	90                   	nop

c0012d0c <Directory::read(dirent*)>:
c0012d0c:	83 ec 1c             	sub    esp,0x1c
c0012d0f:	b8 0b 00 00 00       	mov    eax,0xb
c0012d14:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012d18:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d1f:	80 fa 19             	cmp    dl,0x19
c0012d22:	77 30                	ja     c0012d54 <Directory::read(dirent*)+0x48>
c0012d24:	8b 14 95 e0 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc220]
c0012d2b:	85 d2                	test   edx,edx
c0012d2d:	74 25                	je     c0012d54 <Directory::read(dirent*)+0x48>
c0012d2f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012d36:	74 1c                	je     c0012d54 <Directory::read(dirent*)+0x48>
c0012d38:	83 ec 0c             	sub    esp,0xc
c0012d3b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d3d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012d41:	52                   	push   edx
c0012d42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012d46:	6a 00                	push   0x0
c0012d48:	68 10 01 00 00       	push   0x110
c0012d4d:	51                   	push   ecx
c0012d4e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012d51:	83 c4 20             	add    esp,0x20
c0012d54:	83 c4 1c             	add    esp,0x1c
c0012d57:	c3                   	ret    

c0012d58 <Directory::create()>:
c0012d58:	83 ec 0c             	sub    esp,0xc
c0012d5b:	b8 0b 00 00 00       	mov    eax,0xb
c0012d60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d64:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d6b:	80 f9 19             	cmp    cl,0x19
c0012d6e:	77 2f                	ja     c0012d9f <Directory::create()+0x47>
c0012d70:	8b 0c 8d e0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc220]
c0012d77:	85 c9                	test   ecx,ecx
c0012d79:	74 24                	je     c0012d9f <Directory::create()+0x47>
c0012d7b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d81:	85 c9                	test   ecx,ecx
c0012d83:	74 1a                	je     c0012d9f <Directory::create()+0x47>
c0012d85:	b8 06 00 00 00       	mov    eax,0x6
c0012d8a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d8e:	75 0f                	jne    c0012d9f <Directory::create()+0x47>
c0012d90:	83 c2 0d             	add    edx,0xd
c0012d93:	50                   	push   eax
c0012d94:	50                   	push   eax
c0012d95:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d97:	52                   	push   edx
c0012d98:	51                   	push   ecx
c0012d99:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0012d9c:	83 c4 10             	add    esp,0x10
c0012d9f:	83 c4 0c             	add    esp,0xc
c0012da2:	c3                   	ret    
c0012da3:	90                   	nop

c0012da4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0012da4:	b8 0a 00 00 00       	mov    eax,0xa
c0012da9:	c3                   	ret    

c0012daa <Bus::Bus(char const*)>:
c0012daa:	83 ec 0c             	sub    esp,0xc
c0012dad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012db1:	83 ec 08             	sub    esp,0x8
c0012db4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012db8:	50                   	push   eax
c0012db9:	e8 60 09 00 00       	call   c001371e <Device::Device(char const*)>
c0012dbe:	83 c4 10             	add    esp,0x10
c0012dc1:	ba 84 0d 02 c0       	mov    edx,0xc0020d84
c0012dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dca:	89 10                	mov    DWORD PTR [eax],edx
c0012dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dd0:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0012dda:	90                   	nop
c0012ddb:	83 c4 0c             	add    esp,0xc
c0012dde:	c3                   	ret    
c0012ddf:	90                   	nop

c0012de0 <Bus::~Bus()>:
c0012de0:	83 ec 0c             	sub    esp,0xc
c0012de3:	ba 84 0d 02 c0       	mov    edx,0xc0020d84
c0012de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dec:	89 10                	mov    DWORD PTR [eax],edx
c0012dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012df2:	83 ec 0c             	sub    esp,0xc
c0012df5:	50                   	push   eax
c0012df6:	e8 d5 05 00 00       	call   c00133d0 <Device::~Device()>
c0012dfb:	83 c4 10             	add    esp,0x10
c0012dfe:	90                   	nop
c0012dff:	83 c4 0c             	add    esp,0xc
c0012e02:	c3                   	ret    
c0012e03:	90                   	nop

c0012e04 <Bus::~Bus()>:
c0012e04:	83 ec 0c             	sub    esp,0xc
c0012e07:	83 ec 0c             	sub    esp,0xc
c0012e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e0e:	e8 cd ff ff ff       	call   c0012de0 <Bus::~Bus()>
c0012e13:	83 c4 10             	add    esp,0x10
c0012e16:	83 ec 08             	sub    esp,0x8
c0012e19:	68 58 01 00 00       	push   0x158
c0012e1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e22:	e8 0c f4 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c0012e27:	83 c4 10             	add    esp,0x10
c0012e2a:	83 c4 0c             	add    esp,0xc
c0012e2d:	c3                   	ret    

c0012e2e <Buzzer::Buzzer(char const*)>:
c0012e2e:	83 ec 0c             	sub    esp,0xc
c0012e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e35:	83 ec 08             	sub    esp,0x8
c0012e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e3c:	50                   	push   eax
c0012e3d:	e8 dc 08 00 00       	call   c001371e <Device::Device(char const*)>
c0012e42:	83 c4 10             	add    esp,0x10
c0012e45:	ba b0 0d 02 c0       	mov    edx,0xc0020db0
c0012e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e4e:	89 10                	mov    DWORD PTR [eax],edx
c0012e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e54:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0012e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e62:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0012e6c:	90                   	nop
c0012e6d:	83 c4 0c             	add    esp,0xc
c0012e70:	c3                   	ret    
c0012e71:	90                   	nop

c0012e72 <Buzzer::~Buzzer()>:
c0012e72:	83 ec 0c             	sub    esp,0xc
c0012e75:	ba b0 0d 02 c0       	mov    edx,0xc0020db0
c0012e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e7e:	89 10                	mov    DWORD PTR [eax],edx
c0012e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e84:	83 ec 0c             	sub    esp,0xc
c0012e87:	50                   	push   eax
c0012e88:	e8 43 05 00 00       	call   c00133d0 <Device::~Device()>
c0012e8d:	83 c4 10             	add    esp,0x10
c0012e90:	90                   	nop
c0012e91:	83 c4 0c             	add    esp,0xc
c0012e94:	c3                   	ret    
c0012e95:	90                   	nop

c0012e96 <Buzzer::~Buzzer()>:
c0012e96:	83 ec 0c             	sub    esp,0xc
c0012e99:	83 ec 0c             	sub    esp,0xc
c0012e9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ea0:	e8 cd ff ff ff       	call   c0012e72 <Buzzer::~Buzzer()>
c0012ea5:	83 c4 10             	add    esp,0x10
c0012ea8:	83 ec 08             	sub    esp,0x8
c0012eab:	68 5c 01 00 00       	push   0x15c
c0012eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012eb4:	e8 7a f3 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c0012eb9:	83 c4 10             	add    esp,0x10
c0012ebc:	83 c4 0c             	add    esp,0xc
c0012ebf:	c3                   	ret    

c0012ec0 <Buzzer::stop()>:
c0012ec0:	83 ec 14             	sub    esp,0x14
c0012ec3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ec7:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ec9:	6a 00                	push   0x0
c0012ecb:	50                   	push   eax
c0012ecc:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012ecf:	83 c4 1c             	add    esp,0x1c
c0012ed2:	c3                   	ret    

c0012ed3 <beepThread(void*)>:
c0012ed3:	53                   	push   ebx
c0012ed4:	83 ec 08             	sub    esp,0x8
c0012ed7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012edb:	e8 2e b2 ff ff       	call   c000e10e <unlockScheduler()>
c0012ee0:	b8 40 42 0f 00       	mov    eax,0xf4240
c0012ee5:	52                   	push   edx
c0012ee6:	52                   	push   edx
c0012ee7:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0012eed:	52                   	push   edx
c0012eee:	50                   	push   eax
c0012eef:	e8 d1 b8 ff ff       	call   c000e7c5 <nanoSleep(unsigned long long)>
c0012ef4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012ef7:	e8 c4 ff ff ff       	call   c0012ec0 <Buzzer::stop()>
c0012efc:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0012f04:	83 c4 18             	add    esp,0x18
c0012f07:	5b                   	pop    ebx
c0012f08:	e9 fe b7 ff ff       	jmp    c000e70b <blockTask(TaskState)>
c0012f0d:	90                   	nop

c0012f0e <Buzzer::beep(int, int, bool)>:
c0012f0e:	57                   	push   edi
c0012f0f:	56                   	push   esi
c0012f10:	53                   	push   ebx
c0012f11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012f15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012f19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f1d:	52                   	push   edx
c0012f1e:	52                   	push   edx
c0012f1f:	8b 06                	mov    eax,DWORD PTR [esi]
c0012f21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f25:	56                   	push   esi
c0012f26:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012f29:	83 c4 10             	add    esp,0x10
c0012f2c:	89 f8                	mov    eax,edi
c0012f2e:	84 c0                	test   al,al
c0012f30:	74 1f                	je     c0012f51 <Buzzer::beep(int, int, bool)+0x43>
c0012f32:	50                   	push   eax
c0012f33:	50                   	push   eax
c0012f34:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0012f3a:	99                   	cdq    
c0012f3b:	52                   	push   edx
c0012f3c:	50                   	push   eax
c0012f3d:	e8 83 b8 ff ff       	call   c000e7c5 <nanoSleep(unsigned long long)>
c0012f42:	83 c4 10             	add    esp,0x10
c0012f45:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0012f49:	5b                   	pop    ebx
c0012f4a:	5e                   	pop    esi
c0012f4b:	5f                   	pop    edi
c0012f4c:	e9 6f ff ff ff       	jmp    c0012ec0 <Buzzer::stop()>
c0012f51:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0012f57:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c0012f5c:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0012f64:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0012f68:	c7 44 24 14 d3 2e 01 c0 	mov    DWORD PTR [esp+0x14],0xc0012ed3
c0012f70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012f74:	5b                   	pop    ebx
c0012f75:	5e                   	pop    esi
c0012f76:	5f                   	pop    edi
c0012f77:	e9 ba b2 ff ff       	jmp    c000e236 <Process::createThread(void (*)(void*), void*, int)>

c0012f7c <loadClockSettings()>:
c0012f7c:	c7 05 4c 39 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002394c,0xa
c0012f86:	c6 05 49 39 02 c0 00 	mov    BYTE PTR ds:0xc0023949,0x0
c0012f8d:	c6 05 48 39 02 c0 01 	mov    BYTE PTR ds:0xc0023948,0x1
c0012f94:	c3                   	ret    
c0012f95:	90                   	nop

c0012f96 <Clock::Clock(char const*)>:
c0012f96:	83 ec 0c             	sub    esp,0xc
c0012f99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f9d:	83 ec 08             	sub    esp,0x8
c0012fa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fa4:	50                   	push   eax
c0012fa5:	e8 74 07 00 00       	call   c001371e <Device::Device(char const*)>
c0012faa:	83 c4 10             	add    esp,0x10
c0012fad:	ba e0 0d 02 c0       	mov    edx,0xc0020de0
c0012fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fb6:	89 10                	mov    DWORD PTR [eax],edx
c0012fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fbc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0012fc6:	90                   	nop
c0012fc7:	83 c4 0c             	add    esp,0xc
c0012fca:	c3                   	ret    
c0012fcb:	90                   	nop

c0012fcc <Clock::~Clock()>:
c0012fcc:	83 ec 0c             	sub    esp,0xc
c0012fcf:	ba e0 0d 02 c0       	mov    edx,0xc0020de0
c0012fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fd8:	89 10                	mov    DWORD PTR [eax],edx
c0012fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fde:	83 ec 0c             	sub    esp,0xc
c0012fe1:	50                   	push   eax
c0012fe2:	e8 e9 03 00 00       	call   c00133d0 <Device::~Device()>
c0012fe7:	83 c4 10             	add    esp,0x10
c0012fea:	90                   	nop
c0012feb:	83 c4 0c             	add    esp,0xc
c0012fee:	c3                   	ret    
c0012fef:	90                   	nop

c0012ff0 <Clock::~Clock()>:
c0012ff0:	83 ec 0c             	sub    esp,0xc
c0012ff3:	83 ec 0c             	sub    esp,0xc
c0012ff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ffa:	e8 cd ff ff ff       	call   c0012fcc <Clock::~Clock()>
c0012fff:	83 c4 10             	add    esp,0x10
c0013002:	83 ec 08             	sub    esp,0x8
c0013005:	68 58 01 00 00       	push   0x158
c001300a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001300e:	e8 20 f2 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c0013013:	83 c4 10             	add    esp,0x10
c0013016:	83 c4 0c             	add    esp,0xc
c0013019:	c3                   	ret    

c001301a <Clock::timeInSecondsLocal()>:
c001301a:	53                   	push   ebx
c001301b:	83 ec 14             	sub    esp,0x14
c001301e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013022:	8b 10                	mov    edx,DWORD PTR [eax]
c0013024:	50                   	push   eax
c0013025:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013028:	0f b6 0d 48 39 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023948
c001302f:	03 0d 4c 39 02 c0    	add    ecx,DWORD PTR ds:0xc002394c
c0013035:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001303b:	89 cb                	mov    ebx,ecx
c001303d:	c1 fb 1f             	sar    ebx,0x1f
c0013040:	01 c8                	add    eax,ecx
c0013042:	11 da                	adc    edx,ebx
c0013044:	83 c4 10             	add    esp,0x10
c0013047:	31 c9                	xor    ecx,ecx
c0013049:	80 3d 49 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023949,0x0
c0013050:	74 05                	je     c0013057 <Clock::timeInSecondsLocal()+0x3d>
c0013052:	b9 08 07 00 00       	mov    ecx,0x708
c0013057:	31 db                	xor    ebx,ebx
c0013059:	01 c8                	add    eax,ecx
c001305b:	11 da                	adc    edx,ebx
c001305d:	83 c4 08             	add    esp,0x8
c0013060:	5b                   	pop    ebx
c0013061:	c3                   	ret    

c0013062 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013062:	57                   	push   edi
c0013063:	56                   	push   esi
c0013064:	53                   	push   ebx
c0013065:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013069:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001306d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001306f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013073:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013076:	0f b6 05 48 39 02 c0 	movzx  eax,BYTE PTR ds:0xc0023948
c001307d:	03 05 4c 39 02 c0    	add    eax,DWORD PTR ds:0xc002394c
c0013083:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013089:	99                   	cdq    
c001308a:	29 c6                	sub    esi,eax
c001308c:	19 d7                	sbb    edi,edx
c001308e:	89 f0                	mov    eax,esi
c0013090:	89 fa                	mov    edx,edi
c0013092:	31 f6                	xor    esi,esi
c0013094:	80 3d 49 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023949,0x0
c001309b:	74 05                	je     c00130a2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001309d:	be 08 07 00 00       	mov    esi,0x708
c00130a2:	31 ff                	xor    edi,edi
c00130a4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00130a8:	29 f0                	sub    eax,esi
c00130aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00130ae:	19 fa                	sbb    edx,edi
c00130b0:	89 d8                	mov    eax,ebx
c00130b2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00130b6:	5b                   	pop    ebx
c00130b7:	5e                   	pop    esi
c00130b8:	5f                   	pop    edi
c00130b9:	ff e0                	jmp    eax

c00130bb <datetimeToSeconds(datetime_t)>:
c00130bb:	55                   	push   ebp
c00130bc:	57                   	push   edi
c00130bd:	56                   	push   esi
c00130be:	53                   	push   ebx
c00130bf:	83 ec 14             	sub    esp,0x14
c00130c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00130c6:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00130ca:	89 d3                	mov    ebx,edx
c00130cc:	0f b6 c6             	movzx  eax,dh
c00130cf:	c1 eb 10             	shr    ebx,0x10
c00130d2:	48                   	dec    eax
c00130d3:	66 81 eb 6c 07       	sub    bx,0x76c
c00130d8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00130dc:	0f b6 f5             	movzx  esi,ch
c00130df:	89 cf                	mov    edi,ecx
c00130e1:	6b f6 3c             	imul   esi,esi,0x3c
c00130e4:	c1 ef 10             	shr    edi,0x10
c00130e7:	0f b6 c9             	movzx  ecx,cl
c00130ea:	89 f8                	mov    eax,edi
c00130ec:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00130f2:	0f b6 f8             	movzx  edi,al
c00130f5:	0f b6 d2             	movzx  edx,dl
c00130f8:	01 fe                	add    esi,edi
c00130fa:	01 f1                	add    ecx,esi
c00130fc:	0f b7 f3             	movzx  esi,bx
c00130ff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013103:	c1 f9 1f             	sar    ecx,0x1f
c0013106:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001310b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001310f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013114:	8b 0c 8d 20 0e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdf1e0]
c001311b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001311f:	76 29                	jbe    c001314a <datetimeToSeconds(datetime_t)+0x8f>
c0013121:	f6 c3 03             	test   bl,0x3
c0013124:	75 24                	jne    c001314a <datetimeToSeconds(datetime_t)+0x8f>
c0013126:	31 d2                	xor    edx,edx
c0013128:	bf 64 00 00 00       	mov    edi,0x64
c001312d:	89 d8                	mov    eax,ebx
c001312f:	66 f7 f7             	div    di
c0013132:	66 85 d2             	test   dx,dx
c0013135:	75 12                	jne    c0013149 <datetimeToSeconds(datetime_t)+0x8e>
c0013137:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001313d:	bf 90 01 00 00       	mov    edi,0x190
c0013142:	99                   	cdq    
c0013143:	f7 ff                	idiv   edi
c0013145:	85 d2                	test   edx,edx
c0013147:	75 01                	jne    c001314a <datetimeToSeconds(datetime_t)+0x8f>
c0013149:	41                   	inc    ecx
c001314a:	66 83 fb 46          	cmp    bx,0x46
c001314e:	76 45                	jbe    c0013195 <datetimeToSeconds(datetime_t)+0xda>
c0013150:	bb 46 00 00 00       	mov    ebx,0x46
c0013155:	bf 64 00 00 00       	mov    edi,0x64
c001315a:	bd 90 01 00 00       	mov    ebp,0x190
c001315f:	b8 6d 01 00 00       	mov    eax,0x16d
c0013164:	f6 c3 03             	test   bl,0x3
c0013167:	75 23                	jne    c001318c <datetimeToSeconds(datetime_t)+0xd1>
c0013169:	89 d8                	mov    eax,ebx
c001316b:	99                   	cdq    
c001316c:	f7 ff                	idiv   edi
c001316e:	b8 6e 01 00 00       	mov    eax,0x16e
c0013173:	85 d2                	test   edx,edx
c0013175:	75 15                	jne    c001318c <datetimeToSeconds(datetime_t)+0xd1>
c0013177:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001317d:	99                   	cdq    
c001317e:	f7 fd                	idiv   ebp
c0013180:	83 fa 01             	cmp    edx,0x1
c0013183:	19 c0                	sbb    eax,eax
c0013185:	f7 d0                	not    eax
c0013187:	05 6e 01 00 00       	add    eax,0x16e
c001318c:	01 c1                	add    ecx,eax
c001318e:	43                   	inc    ebx
c001318f:	39 f3                	cmp    ebx,esi
c0013191:	7c cc                	jl     c001315f <datetimeToSeconds(datetime_t)+0xa4>
c0013193:	eb 35                	jmp    c00131ca <datetimeToSeconds(datetime_t)+0x10f>
c0013195:	74 33                	je     c00131ca <datetimeToSeconds(datetime_t)+0x10f>
c0013197:	b8 45 00 00 00       	mov    eax,0x45
c001319c:	89 c2                	mov    edx,eax
c001319e:	83 e2 03             	and    edx,0x3
c00131a1:	39 f0                	cmp    eax,esi
c00131a3:	7e 0f                	jle    c00131b4 <datetimeToSeconds(datetime_t)+0xf9>
c00131a5:	83 fa 01             	cmp    edx,0x1
c00131a8:	19 d2                	sbb    edx,edx
c00131aa:	48                   	dec    eax
c00131ab:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00131b2:	eb e8                	jmp    c001319c <datetimeToSeconds(datetime_t)+0xe1>
c00131b4:	b8 6d 01 00 00       	mov    eax,0x16d
c00131b9:	85 d2                	test   edx,edx
c00131bb:	75 0b                	jne    c00131c8 <datetimeToSeconds(datetime_t)+0x10d>
c00131bd:	66 83 fb 01          	cmp    bx,0x1
c00131c1:	19 c0                	sbb    eax,eax
c00131c3:	05 6e 01 00 00       	add    eax,0x16e
c00131c8:	29 c1                	sub    ecx,eax
c00131ca:	b8 80 51 01 00       	mov    eax,0x15180
c00131cf:	f7 e9                	imul   ecx
c00131d1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00131d5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00131d9:	83 c4 14             	add    esp,0x14
c00131dc:	5b                   	pop    ebx
c00131dd:	5e                   	pop    esi
c00131de:	5f                   	pop    edi
c00131df:	5d                   	pop    ebp
c00131e0:	c3                   	ret    
c00131e1:	90                   	nop

c00131e2 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00131e2:	57                   	push   edi
c00131e3:	56                   	push   esi
c00131e4:	53                   	push   ebx
c00131e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00131e9:	8b 06                	mov    eax,DWORD PTR [esi]
c00131eb:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00131ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00131f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00131f6:	e8 c0 fe ff ff       	call   c00130bb <datetimeToSeconds(datetime_t)>
c00131fb:	59                   	pop    ecx
c00131fc:	0f b6 0d 48 39 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023948
c0013203:	5b                   	pop    ebx
c0013204:	03 0d 4c 39 02 c0    	add    ecx,DWORD PTR ds:0xc002394c
c001320a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013210:	89 cb                	mov    ebx,ecx
c0013212:	c1 fb 1f             	sar    ebx,0x1f
c0013215:	29 c8                	sub    eax,ecx
c0013217:	19 da                	sbb    edx,ebx
c0013219:	31 c9                	xor    ecx,ecx
c001321b:	80 3d 49 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023949,0x0
c0013222:	74 05                	je     c0013229 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013224:	b9 08 07 00 00       	mov    ecx,0x708
c0013229:	31 db                	xor    ebx,ebx
c001322b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001322f:	29 c8                	sub    eax,ecx
c0013231:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013235:	19 da                	sbb    edx,ebx
c0013237:	89 f8                	mov    eax,edi
c0013239:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001323d:	5b                   	pop    ebx
c001323e:	5e                   	pop    esi
c001323f:	5f                   	pop    edi
c0013240:	ff e0                	jmp    eax

c0013242 <secondsToDatetime(unsigned long long)>:
c0013242:	55                   	push   ebp
c0013243:	57                   	push   edi
c0013244:	56                   	push   esi
c0013245:	53                   	push   ebx
c0013246:	83 ec 1c             	sub    esp,0x1c
c0013249:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001324d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013251:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013255:	6a 00                	push   0x0
c0013257:	68 80 51 01 00       	push   0x15180
c001325c:	55                   	push   ebp
c001325d:	57                   	push   edi
c001325e:	e8 69 ae 00 00       	call   c001e0cc <__udivdi3>
c0013263:	83 c4 10             	add    esp,0x10
c0013266:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001326c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013270:	6a 00                	push   0x0
c0013272:	68 80 51 01 00       	push   0x15180
c0013277:	55                   	push   ebp
c0013278:	57                   	push   edi
c0013279:	bf 10 0e 00 00       	mov    edi,0xe10
c001327e:	e8 49 af 00 00       	call   c001e1cc <__umoddi3>
c0013283:	83 c4 10             	add    esp,0x10
c0013286:	99                   	cdq    
c0013287:	f7 ff                	idiv   edi
c0013289:	bf 3c 00 00 00       	mov    edi,0x3c
c001328e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013291:	89 d0                	mov    eax,edx
c0013293:	99                   	cdq    
c0013294:	f7 ff                	idiv   edi
c0013296:	85 db                	test   ebx,ebx
c0013298:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001329b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001329e:	79 11                	jns    c00132b1 <secondsToDatetime(unsigned long long)+0x6f>
c00132a0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00132a4:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00132aa:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00132af:	eb 07                	jmp    c00132b8 <secondsToDatetime(unsigned long long)+0x76>
c00132b1:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00132b6:	89 d8                	mov    eax,ebx
c00132b8:	bf b4 05 00 00       	mov    edi,0x5b4
c00132bd:	99                   	cdq    
c00132be:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00132c3:	f7 f9                	idiv   ecx
c00132c5:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00132ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00132ce:	31 d2                	xor    edx,edx
c00132d0:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00132d8:	01 c3                	add    ebx,eax
c00132da:	89 d8                	mov    eax,ebx
c00132dc:	f7 f1                	div    ecx
c00132de:	31 d2                	xor    edx,edx
c00132e0:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00132e3:	89 d8                	mov    eax,ebx
c00132e5:	f7 f7                	div    edi
c00132e7:	31 d2                	xor    edx,edx
c00132e9:	29 c1                	sub    ecx,eax
c00132eb:	89 d8                	mov    eax,ebx
c00132ed:	f7 f5                	div    ebp
c00132ef:	bd 6d 01 00 00       	mov    ebp,0x16d
c00132f4:	29 c1                	sub    ecx,eax
c00132f6:	31 d2                	xor    edx,edx
c00132f8:	89 c8                	mov    eax,ecx
c00132fa:	f7 f5                	div    ebp
c00132fc:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013301:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013305:	31 d2                	xor    edx,edx
c0013307:	89 c8                	mov    eax,ecx
c0013309:	f7 f5                	div    ebp
c001330b:	31 d2                	xor    edx,edx
c001330d:	01 c3                	add    ebx,eax
c001330f:	89 c8                	mov    eax,ecx
c0013311:	f7 f7                	div    edi
c0013313:	bf 99 00 00 00       	mov    edi,0x99
c0013318:	29 c3                	sub    ebx,eax
c001331a:	31 d2                	xor    edx,edx
c001331c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013324:	29 c3                	sub    ebx,eax
c0013326:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013329:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001332c:	bb 05 00 00 00       	mov    ebx,0x5
c0013331:	83 c1 02             	add    ecx,0x2
c0013334:	89 c8                	mov    eax,ecx
c0013336:	f7 f7                	div    edi
c0013338:	31 d2                	xor    edx,edx
c001333a:	89 c7                	mov    edi,eax
c001333c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013342:	83 c0 02             	add    eax,0x2
c0013345:	f7 f3                	div    ebx
c0013347:	89 eb                	mov    ebx,ebp
c0013349:	29 c3                	sub    ebx,eax
c001334b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013351:	88 1e                	mov    BYTE PTR [esi],bl
c0013353:	19 c0                	sbb    eax,eax
c0013355:	31 d2                	xor    edx,edx
c0013357:	83 e0 0c             	and    eax,0xc
c001335a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001335e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013366:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001336a:	83 f9 01             	cmp    ecx,0x1
c001336d:	0f 96 c2             	setbe  dl
c0013370:	41                   	inc    ecx
c0013371:	01 d0                	add    eax,edx
c0013373:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013376:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001337a:	83 c4 1c             	add    esp,0x1c
c001337d:	89 f0                	mov    eax,esi
c001337f:	5b                   	pop    ebx
c0013380:	5e                   	pop    esi
c0013381:	5f                   	pop    edi
c0013382:	5d                   	pop    ebp
c0013383:	c2 04 00             	ret    0x4

c0013386 <Clock::timeInDatetimeLocal()>:
c0013386:	53                   	push   ebx
c0013387:	83 ec 14             	sub    esp,0x14
c001338a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001338e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013392:	e8 83 fc ff ff       	call   c001301a <Clock::timeInSecondsLocal()>
c0013397:	83 c4 0c             	add    esp,0xc
c001339a:	52                   	push   edx
c001339b:	50                   	push   eax
c001339c:	53                   	push   ebx
c001339d:	e8 a0 fe ff ff       	call   c0013242 <secondsToDatetime(unsigned long long)>
c00133a2:	89 d8                	mov    eax,ebx
c00133a4:	83 c4 14             	add    esp,0x14
c00133a7:	5b                   	pop    ebx
c00133a8:	c2 04 00             	ret    0x4
c00133ab:	90                   	nop

c00133ac <Device::hibernate()>:
c00133ac:	c3                   	ret    
c00133ad:	90                   	nop

c00133ae <Device::wake()>:
c00133ae:	c3                   	ret    
c00133af:	90                   	nop

c00133b0 <Device::detect()>:
c00133b0:	c3                   	ret    
c00133b1:	90                   	nop

c00133b2 <Device::disableLegacy()>:
c00133b2:	c3                   	ret    
c00133b3:	90                   	nop

c00133b4 <Device::powerSaving(PowerSavingLevel)>:
c00133b4:	c3                   	ret    
c00133b5:	90                   	nop

c00133b6 <DriverlessDevice::close(int, int, void*)>:
c00133b6:	31 c0                	xor    eax,eax
c00133b8:	c3                   	ret    
c00133b9:	90                   	nop

c00133ba <DriverlessDevice::detect()>:
c00133ba:	c3                   	ret    
c00133bb:	90                   	nop

c00133bc <DriverlessDevice::open(int, int, void*)>:
c00133bc:	83 ec 18             	sub    esp,0x18
c00133bf:	68 50 0e 02 c0       	push   0xc0020e50
c00133c4:	e8 bf 99 ff ff       	call   c000cd88 <panic(char const*)>
c00133c9:	83 c8 ff             	or     eax,0xffffffff
c00133cc:	83 c4 1c             	add    esp,0x1c
c00133cf:	c3                   	ret    

c00133d0 <Device::~Device()>:
c00133d0:	ba 78 0e 02 c0       	mov    edx,0xc0020e78
c00133d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00133d9:	89 10                	mov    DWORD PTR [eax],edx
c00133db:	90                   	nop
c00133dc:	c3                   	ret    
c00133dd:	90                   	nop

c00133de <Device::~Device()>:
c00133de:	83 ec 0c             	sub    esp,0xc
c00133e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00133e5:	e8 e6 ff ff ff       	call   c00133d0 <Device::~Device()>
c00133ea:	83 c4 04             	add    esp,0x4
c00133ed:	83 ec 08             	sub    esp,0x8
c00133f0:	68 58 01 00 00       	push   0x158
c00133f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133f9:	e8 35 ee ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c00133fe:	83 c4 10             	add    esp,0x10
c0013401:	83 c4 0c             	add    esp,0xc
c0013404:	c3                   	ret    
c0013405:	90                   	nop

c0013406 <Device::findAndLoadDriver()>:
c0013406:	c3                   	ret    
c0013407:	90                   	nop

c0013408 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013408:	57                   	push   edi
c0013409:	b9 09 00 00 00       	mov    ecx,0x9
c001340e:	56                   	push   esi
c001340f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013413:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013417:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013421:	81 c7 18 01 00 00    	add    edi,0x118
c0013427:	fc                   	cld    
c0013428:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001342a:	5e                   	pop    esi
c001342b:	5f                   	pop    edi
c001342c:	c3                   	ret    
c001342d:	90                   	nop

c001342e <Device::preOpenACPI(void*, char*, char*)>:
c001342e:	56                   	push   esi
c001342f:	53                   	push   ebx
c0013430:	83 ec 08             	sub    esp,0x8
c0013433:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013437:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001343b:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013445:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013449:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001344f:	6a 1e                	push   0x1e
c0013451:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013457:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001345b:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013461:	50                   	push   eax
c0013462:	e8 6b d1 fe ff       	call   c00005d2 <memcpy>
c0013467:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001346b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001346f:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013477:	83 c4 14             	add    esp,0x14
c001347a:	5b                   	pop    ebx
c001347b:	5e                   	pop    esi
c001347c:	e9 51 d1 fe ff       	jmp    c00005d2 <memcpy>
c0013481:	90                   	nop

c0013482 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013482:	55                   	push   ebp
c0013483:	57                   	push   edi
c0013484:	56                   	push   esi
c0013485:	53                   	push   ebx
c0013486:	83 ec 0c             	sub    esp,0xc
c0013489:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001348d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0013491:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013495:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013499:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c001349e:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00134a5:	75 0b                	jne    c00134b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00134a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00134a9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00134ad:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00134b0:	eb 24                	jmp    c00134d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00134b2:	e8 cf 3a 00 00       	call   c0016f86 <thisCPU()>
c00134b7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00134bd:	8b 10                	mov    edx,DWORD PTR [eax]
c00134bf:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00134c3:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00134c7:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00134cb:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00134cf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00134d3:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00134d6:	83 c4 0c             	add    esp,0xc
c00134d9:	5b                   	pop    ebx
c00134da:	5e                   	pop    esi
c00134db:	5f                   	pop    edi
c00134dc:	5d                   	pop    ebp
c00134dd:	ff e0                	jmp    eax
c00134df:	90                   	nop

c00134e0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00134e0:	57                   	push   edi
c00134e1:	56                   	push   esi
c00134e2:	53                   	push   ebx
c00134e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00134eb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00134ef:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00134f4:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00134fb:	75 0b                	jne    c0013508 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c00134fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00134ff:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013503:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013506:	eb 20                	jmp    c0013528 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0013508:	e8 79 3a 00 00       	call   c0016f86 <thisCPU()>
c001350d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013513:	8b 10                	mov    edx,DWORD PTR [eax]
c0013515:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013519:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001351d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0013521:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013525:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0013528:	5b                   	pop    ebx
c0013529:	5e                   	pop    esi
c001352a:	5f                   	pop    edi
c001352b:	ff e0                	jmp    eax
c001352d:	90                   	nop

c001352e <Device::addChild(Device*)>:
c001352e:	53                   	push   ebx
c001352f:	83 ec 08             	sub    esp,0x8
c0013532:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013536:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001353a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013540:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013546:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013548:	85 d2                	test   edx,edx
c001354a:	74 04                	je     c0013550 <Device::addChild(Device*)+0x22>
c001354c:	89 d3                	mov    ebx,edx
c001354e:	eb f6                	jmp    c0013546 <Device::addChild(Device*)+0x18>
c0013550:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013553:	83 ec 0c             	sub    esp,0xc
c0013556:	6a 08                	push   0x8
c0013558:	e8 c7 ec ff ff       	call   c0012224 <operator new(unsigned long)>
c001355d:	89 03                	mov    DWORD PTR [ebx],eax
c001355f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013565:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001356c:	83 c4 18             	add    esp,0x18
c001356f:	5b                   	pop    ebx
c0013570:	c3                   	ret    
c0013571:	90                   	nop

c0013572 <Device::removeAllChildren()>:
c0013572:	56                   	push   esi
c0013573:	53                   	push   ebx
c0013574:	52                   	push   edx
c0013575:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013579:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001357f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013582:	74 17                	je     c001359b <Device::removeAllChildren()+0x29>
c0013584:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013587:	85 c0                	test   eax,eax
c0013589:	74 0c                	je     c0013597 <Device::removeAllChildren()+0x25>
c001358b:	83 ec 0c             	sub    esp,0xc
c001358e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013590:	50                   	push   eax
c0013591:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013594:	83 c4 10             	add    esp,0x10
c0013597:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013599:	eb e4                	jmp    c001357f <Device::removeAllChildren()+0xd>
c001359b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00135a1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00135a7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00135ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00135b4:	58                   	pop    eax
c00135b5:	5b                   	pop    ebx
c00135b6:	5e                   	pop    esi
c00135b7:	c3                   	ret    

c00135b8 <Device::hibernateAll()>:
c00135b8:	53                   	push   ebx
c00135b9:	83 ec 14             	sub    esp,0x14
c00135bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00135c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00135c2:	53                   	push   ebx
c00135c3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00135c6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00135cc:	83 c4 10             	add    esp,0x10
c00135cf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00135d2:	74 0f                	je     c00135e3 <Device::hibernateAll()+0x2b>
c00135d4:	83 ec 0c             	sub    esp,0xc
c00135d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00135da:	e8 d9 ff ff ff       	call   c00135b8 <Device::hibernateAll()>
c00135df:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00135e1:	eb e9                	jmp    c00135cc <Device::hibernateAll()+0x14>
c00135e3:	83 c4 08             	add    esp,0x8
c00135e6:	5b                   	pop    ebx
c00135e7:	c3                   	ret    

c00135e8 <Device::wakeAll()>:
c00135e8:	53                   	push   ebx
c00135e9:	83 ec 14             	sub    esp,0x14
c00135ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00135f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00135f2:	53                   	push   ebx
c00135f3:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00135f6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00135fc:	83 c4 10             	add    esp,0x10
c00135ff:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013602:	74 0f                	je     c0013613 <Device::wakeAll()+0x2b>
c0013604:	83 ec 0c             	sub    esp,0xc
c0013607:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001360a:	e8 d9 ff ff ff       	call   c00135e8 <Device::wakeAll()>
c001360f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013611:	eb e9                	jmp    c00135fc <Device::wakeAll()+0x14>
c0013613:	83 c4 08             	add    esp,0x8
c0013616:	5b                   	pop    ebx
c0013617:	c3                   	ret    

c0013618 <Device::detectAll()>:
c0013618:	53                   	push   ebx
c0013619:	83 ec 14             	sub    esp,0x14
c001361c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013620:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013622:	53                   	push   ebx
c0013623:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013626:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001362c:	83 c4 10             	add    esp,0x10
c001362f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013632:	74 0f                	je     c0013643 <Device::detectAll()+0x2b>
c0013634:	83 ec 0c             	sub    esp,0xc
c0013637:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001363a:	e8 d9 ff ff ff       	call   c0013618 <Device::detectAll()>
c001363f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013641:	eb e9                	jmp    c001362c <Device::detectAll()+0x14>
c0013643:	83 c4 08             	add    esp,0x8
c0013646:	5b                   	pop    ebx
c0013647:	c3                   	ret    

c0013648 <Device::disableLegacyAll()>:
c0013648:	53                   	push   ebx
c0013649:	83 ec 14             	sub    esp,0x14
c001364c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013650:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013652:	53                   	push   ebx
c0013653:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013656:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001365c:	83 c4 10             	add    esp,0x10
c001365f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013662:	74 0f                	je     c0013673 <Device::disableLegacyAll()+0x2b>
c0013664:	83 ec 0c             	sub    esp,0xc
c0013667:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001366a:	e8 d9 ff ff ff       	call   c0013648 <Device::disableLegacyAll()>
c001366f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013671:	eb e9                	jmp    c001365c <Device::disableLegacyAll()+0x14>
c0013673:	83 c4 08             	add    esp,0x8
c0013676:	5b                   	pop    ebx
c0013677:	c3                   	ret    

c0013678 <Device::loadDriversForAll()>:
c0013678:	53                   	push   ebx
c0013679:	83 ec 08             	sub    esp,0x8
c001367c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013680:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013686:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013688:	85 db                	test   ebx,ebx
c001368a:	74 12                	je     c001369e <Device::loadDriversForAll()+0x26>
c001368c:	83 ec 0c             	sub    esp,0xc
c001368f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013692:	e8 e1 ff ff ff       	call   c0013678 <Device::loadDriversForAll()>
c0013697:	83 c4 10             	add    esp,0x10
c001369a:	89 d8                	mov    eax,ebx
c001369c:	eb e8                	jmp    c0013686 <Device::loadDriversForAll()+0xe>
c001369e:	83 c4 08             	add    esp,0x8
c00136a1:	5b                   	pop    ebx
c00136a2:	c3                   	ret    
c00136a3:	90                   	nop

c00136a4 <Device::closeAll()>:
c00136a4:	53                   	push   ebx
c00136a5:	83 ec 08             	sub    esp,0x8
c00136a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136ae:	6a 00                	push   0x0
c00136b0:	6a 00                	push   0x0
c00136b2:	6a 00                	push   0x0
c00136b4:	53                   	push   ebx
c00136b5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00136b8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00136be:	83 c4 10             	add    esp,0x10
c00136c1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00136c4:	74 0f                	je     c00136d5 <Device::closeAll()+0x31>
c00136c6:	83 ec 0c             	sub    esp,0xc
c00136c9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00136cc:	e8 d3 ff ff ff       	call   c00136a4 <Device::closeAll()>
c00136d1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00136d3:	eb e9                	jmp    c00136be <Device::closeAll()+0x1a>
c00136d5:	83 c4 08             	add    esp,0x8
c00136d8:	5b                   	pop    ebx
c00136d9:	c3                   	ret    

c00136da <Device::powerSavingAll(PowerSavingLevel)>:
c00136da:	56                   	push   esi
c00136db:	53                   	push   ebx
c00136dc:	83 ec 0c             	sub    esp,0xc
c00136df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136e3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00136e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136e9:	56                   	push   esi
c00136ea:	53                   	push   ebx
c00136eb:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00136ee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00136f4:	83 c4 10             	add    esp,0x10
c00136f7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00136fa:	74 0f                	je     c001370b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00136fc:	52                   	push   edx
c00136fd:	52                   	push   edx
c00136fe:	56                   	push   esi
c00136ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013702:	e8 d3 ff ff ff       	call   c00136da <Device::powerSavingAll(PowerSavingLevel)>
c0013707:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013709:	eb e9                	jmp    c00136f4 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001370b:	58                   	pop    eax
c001370c:	5b                   	pop    ebx
c001370d:	5e                   	pop    esi
c001370e:	c3                   	ret    
c001370f:	90                   	nop

c0013710 <Device::setName(char const*)>:
c0013710:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013718:	e9 8a cf fe ff       	jmp    c00006a7 <strcpy>
c001371d:	90                   	nop

c001371e <Device::Device(char const*)>:
c001371e:	83 ec 0c             	sub    esp,0xc
c0013721:	ba 78 0e 02 c0       	mov    edx,0xc0020e78
c0013726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001372a:	89 10                	mov    DWORD PTR [eax],edx
c001372c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013730:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001373a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001373e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001374c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001375a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013764:	83 ec 08             	sub    esp,0x8
c0013767:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001376b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001376f:	e8 9c ff ff ff       	call   c0013710 <Device::setName(char const*)>
c0013774:	83 c4 10             	add    esp,0x10
c0013777:	83 ec 0c             	sub    esp,0xc
c001377a:	6a 08                	push   0x8
c001377c:	e8 a3 ea ff ff       	call   c0012224 <operator new(unsigned long)>
c0013781:	83 c4 10             	add    esp,0x10
c0013784:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001378a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013791:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013795:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001379b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001379f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00137a5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00137ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137af:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00137b5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00137bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137c0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00137c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137cb:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00137d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00137e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137e4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00137ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00137fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013800:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001380a:	90                   	nop
c001380b:	83 c4 0c             	add    esp,0xc
c001380e:	c3                   	ret    
c001380f:	90                   	nop

c0013810 <Device::getName()>:
c0013810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013814:	05 d0 00 00 00       	add    eax,0xd0
c0013819:	c3                   	ret    

c001381a <DriverlessDevice::DriverlessDevice(char const*)>:
c001381a:	83 ec 0c             	sub    esp,0xc
c001381d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013821:	83 ec 08             	sub    esp,0x8
c0013824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013828:	50                   	push   eax
c0013829:	e8 f0 fe ff ff       	call   c001371e <Device::Device(char const*)>
c001382e:	83 c4 10             	add    esp,0x10
c0013831:	ba a4 0e 02 c0       	mov    edx,0xc0020ea4
c0013836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001383a:	89 10                	mov    DWORD PTR [eax],edx
c001383c:	90                   	nop
c001383d:	83 c4 0c             	add    esp,0xc
c0013840:	c3                   	ret    
c0013841:	90                   	nop

c0013842 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013842:	57                   	push   edi
c0013843:	56                   	push   esi
c0013844:	53                   	push   ebx
c0013845:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013849:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001384d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013851:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013857:	75 0c                	jne    c0013865 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013859:	52                   	push   edx
c001385a:	52                   	push   edx
c001385b:	53                   	push   ebx
c001385c:	56                   	push   esi
c001385d:	e8 5a b0 00 00       	call   c001e8bc <LinkedList<Device>::addElement(Device*)>
c0013862:	83 c4 10             	add    esp,0x10
c0013865:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001386b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001386e:	74 12                	je     c0013882 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013870:	50                   	push   eax
c0013871:	57                   	push   edi
c0013872:	56                   	push   esi
c0013873:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013876:	e8 c7 ff ff ff       	call   c0013842 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001387b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001387d:	83 c4 10             	add    esp,0x10
c0013880:	eb e9                	jmp    c001386b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013882:	5b                   	pop    ebx
c0013883:	5e                   	pop    esi
c0013884:	5f                   	pop    edi
c0013885:	c3                   	ret    

c0013886 <getDevicesOfType(DeviceType)>:
c0013886:	53                   	push   ebx
c0013887:	83 ec 14             	sub    esp,0x14
c001388a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001388e:	53                   	push   ebx
c001388f:	e8 04 b1 00 00       	call   c001e998 <LinkedList<Device>::LinkedList()>
c0013894:	83 c4 0c             	add    esp,0xc
c0013897:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001389b:	53                   	push   ebx
c001389c:	ff 35 68 2e 02 c0    	push   DWORD PTR ds:0xc0022e68
c00138a2:	e8 9b ff ff ff       	call   c0013842 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00138a7:	89 d8                	mov    eax,ebx
c00138a9:	83 c4 18             	add    esp,0x18
c00138ac:	5b                   	pop    ebx
c00138ad:	c2 04 00             	ret    0x4

c00138b0 <HardDiskController::HardDiskController(char const*)>:
c00138b0:	83 ec 0c             	sub    esp,0xc
c00138b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138b7:	83 ec 08             	sub    esp,0x8
c00138ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138be:	50                   	push   eax
c00138bf:	e8 5a fe ff ff       	call   c001371e <Device::Device(char const*)>
c00138c4:	83 c4 10             	add    esp,0x10
c00138c7:	ba d0 0e 02 c0       	mov    edx,0xc0020ed0
c00138cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d0:	89 10                	mov    DWORD PTR [eax],edx
c00138d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00138e0:	90                   	nop
c00138e1:	83 c4 0c             	add    esp,0xc
c00138e4:	c3                   	ret    
c00138e5:	90                   	nop

c00138e6 <HardDiskController::~HardDiskController()>:
c00138e6:	83 ec 0c             	sub    esp,0xc
c00138e9:	ba d0 0e 02 c0       	mov    edx,0xc0020ed0
c00138ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f2:	89 10                	mov    DWORD PTR [eax],edx
c00138f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f8:	83 ec 0c             	sub    esp,0xc
c00138fb:	50                   	push   eax
c00138fc:	e8 cf fa ff ff       	call   c00133d0 <Device::~Device()>
c0013901:	83 c4 10             	add    esp,0x10
c0013904:	90                   	nop
c0013905:	83 c4 0c             	add    esp,0xc
c0013908:	c3                   	ret    
c0013909:	90                   	nop

c001390a <HardDiskController::~HardDiskController()>:
c001390a:	83 ec 0c             	sub    esp,0xc
c001390d:	83 ec 0c             	sub    esp,0xc
c0013910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013914:	e8 cd ff ff ff       	call   c00138e6 <HardDiskController::~HardDiskController()>
c0013919:	83 c4 10             	add    esp,0x10
c001391c:	83 ec 08             	sub    esp,0x8
c001391f:	68 58 01 00 00       	push   0x158
c0013924:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013928:	e8 06 e9 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c001392d:	83 c4 10             	add    esp,0x10
c0013930:	83 c4 0c             	add    esp,0xc
c0013933:	c3                   	ret    

c0013934 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013934:	83 ec 0c             	sub    esp,0xc
c0013937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001393b:	83 ec 08             	sub    esp,0x8
c001393e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013942:	50                   	push   eax
c0013943:	e8 d6 fd ff ff       	call   c001371e <Device::Device(char const*)>
c0013948:	83 c4 10             	add    esp,0x10
c001394b:	ba fc 0e 02 c0       	mov    edx,0xc0020efc
c0013950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013954:	89 10                	mov    DWORD PTR [eax],edx
c0013956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001395a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013965:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001396c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013970:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001397a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001397e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013982:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001398c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013996:	90                   	nop
c0013997:	83 c4 0c             	add    esp,0xc
c001399a:	c3                   	ret    
c001399b:	90                   	nop

c001399c <PhysicalDisk::startCache()>:
c001399c:	56                   	push   esi
c001399d:	53                   	push   ebx
c001399e:	83 ec 10             	sub    esp,0x10
c00139a1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139a5:	6a 30                	push   0x30
c00139a7:	e8 78 e8 ff ff       	call   c0012224 <operator new(unsigned long)>
c00139ac:	89 c6                	mov    esi,eax
c00139ae:	58                   	pop    eax
c00139af:	5a                   	pop    edx
c00139b0:	53                   	push   ebx
c00139b1:	56                   	push   esi
c00139b2:	e8 bb 1d 00 00       	call   c0015772 <VCache::VCache(PhysicalDisk*)>
c00139b7:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00139bd:	83 c4 14             	add    esp,0x14
c00139c0:	5b                   	pop    ebx
c00139c1:	5e                   	pop    esi
c00139c2:	c3                   	ret    
c00139c3:	90                   	nop

c00139c4 <PhysicalDisk::~PhysicalDisk()>:
c00139c4:	83 ec 0c             	sub    esp,0xc
c00139c7:	ba fc 0e 02 c0       	mov    edx,0xc0020efc
c00139cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139d0:	89 10                	mov    DWORD PTR [eax],edx
c00139d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139d6:	83 ec 0c             	sub    esp,0xc
c00139d9:	50                   	push   eax
c00139da:	e8 f1 f9 ff ff       	call   c00133d0 <Device::~Device()>
c00139df:	83 c4 10             	add    esp,0x10
c00139e2:	90                   	nop
c00139e3:	83 c4 0c             	add    esp,0xc
c00139e6:	c3                   	ret    
c00139e7:	90                   	nop

c00139e8 <PhysicalDisk::~PhysicalDisk()>:
c00139e8:	83 ec 0c             	sub    esp,0xc
c00139eb:	83 ec 0c             	sub    esp,0xc
c00139ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139f2:	e8 cd ff ff ff       	call   c00139c4 <PhysicalDisk::~PhysicalDisk()>
c00139f7:	83 c4 10             	add    esp,0x10
c00139fa:	83 ec 08             	sub    esp,0x8
c00139fd:	68 6c 01 00 00       	push   0x16c
c0013a02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a06:	e8 28 e8 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c0013a0b:	83 c4 10             	add    esp,0x10
c0013a0e:	83 c4 0c             	add    esp,0xc
c0013a11:	c3                   	ret    

c0013a12 <FPU::FPU(char const*)>:
c0013a12:	83 ec 0c             	sub    esp,0xc
c0013a15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a19:	83 ec 08             	sub    esp,0x8
c0013a1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a20:	50                   	push   eax
c0013a21:	e8 f8 fc ff ff       	call   c001371e <Device::Device(char const*)>
c0013a26:	83 c4 10             	add    esp,0x10
c0013a29:	ba 38 0f 02 c0       	mov    edx,0xc0020f38
c0013a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a32:	89 10                	mov    DWORD PTR [eax],edx
c0013a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a38:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013a42:	90                   	nop
c0013a43:	83 c4 0c             	add    esp,0xc
c0013a46:	c3                   	ret    
c0013a47:	90                   	nop

c0013a48 <FPU::~FPU()>:
c0013a48:	83 ec 0c             	sub    esp,0xc
c0013a4b:	ba 38 0f 02 c0       	mov    edx,0xc0020f38
c0013a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a54:	89 10                	mov    DWORD PTR [eax],edx
c0013a56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a5a:	83 ec 0c             	sub    esp,0xc
c0013a5d:	50                   	push   eax
c0013a5e:	e8 6d f9 ff ff       	call   c00133d0 <Device::~Device()>
c0013a63:	83 c4 10             	add    esp,0x10
c0013a66:	90                   	nop
c0013a67:	83 c4 0c             	add    esp,0xc
c0013a6a:	c3                   	ret    
c0013a6b:	90                   	nop

c0013a6c <FPU::~FPU()>:
c0013a6c:	83 ec 0c             	sub    esp,0xc
c0013a6f:	83 ec 0c             	sub    esp,0xc
c0013a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a76:	e8 cd ff ff ff       	call   c0013a48 <FPU::~FPU()>
c0013a7b:	83 c4 10             	add    esp,0x10
c0013a7e:	83 ec 08             	sub    esp,0x8
c0013a81:	68 58 01 00 00       	push   0x158
c0013a86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a8a:	e8 a4 e7 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c0013a8f:	83 c4 10             	add    esp,0x10
c0013a92:	83 c4 0c             	add    esp,0xc
c0013a95:	c3                   	ret    

c0013a96 <setupFPU()>:
c0013a96:	53                   	push   ebx
c0013a97:	83 ec 08             	sub    esp,0x8
c0013a9a:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c0013a9f:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0013aa6:	74 19                	je     c0013ac1 <setupFPU()+0x2b>
c0013aa8:	83 ec 0c             	sub    esp,0xc
c0013aab:	68 58 01 00 00       	push   0x158
c0013ab0:	e8 6f e7 ff ff       	call   c0012224 <operator new(unsigned long)>
c0013ab5:	89 c3                	mov    ebx,eax
c0013ab7:	89 04 24             	mov    DWORD PTR [esp],eax
c0013aba:	e8 db 92 00 00       	call   c001cd9a <AVX::AVX()>
c0013abf:	eb 5b                	jmp    c0013b1c <setupFPU()+0x86>
c0013ac1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013ac7:	84 c0                	test   al,al
c0013ac9:	79 19                	jns    c0013ae4 <setupFPU()+0x4e>
c0013acb:	83 ec 0c             	sub    esp,0xc
c0013ace:	68 58 01 00 00       	push   0x158
c0013ad3:	e8 4c e7 ff ff       	call   c0012224 <operator new(unsigned long)>
c0013ad8:	89 c3                	mov    ebx,eax
c0013ada:	89 04 24             	mov    DWORD PTR [esp],eax
c0013add:	e8 de 93 00 00       	call   c001cec0 <SSE::SSE()>
c0013ae2:	eb 38                	jmp    c0013b1c <setupFPU()+0x86>
c0013ae4:	a8 20                	test   al,0x20
c0013ae6:	74 19                	je     c0013b01 <setupFPU()+0x6b>
c0013ae8:	83 ec 0c             	sub    esp,0xc
c0013aeb:	68 58 01 00 00       	push   0x158
c0013af0:	e8 2f e7 ff ff       	call   c0012224 <operator new(unsigned long)>
c0013af5:	89 c3                	mov    ebx,eax
c0013af7:	89 04 24             	mov    DWORD PTR [esp],eax
c0013afa:	e8 2b 93 00 00       	call   c001ce2a <MMX::MMX()>
c0013aff:	eb 1b                	jmp    c0013b1c <setupFPU()+0x86>
c0013b01:	a8 10                	test   al,0x10
c0013b03:	74 1c                	je     c0013b21 <setupFPU()+0x8b>
c0013b05:	83 ec 0c             	sub    esp,0xc
c0013b08:	68 58 01 00 00       	push   0x158
c0013b0d:	e8 12 e7 ff ff       	call   c0012224 <operator new(unsigned long)>
c0013b12:	89 c3                	mov    ebx,eax
c0013b14:	89 04 24             	mov    DWORD PTR [esp],eax
c0013b17:	e8 32 94 00 00       	call   c001cf4e <x87::x87()>
c0013b1c:	83 c4 10             	add    esp,0x10
c0013b1f:	eb 12                	jmp    c0013b33 <setupFPU()+0x9d>
c0013b21:	83 ec 0c             	sub    esp,0xc
c0013b24:	31 db                	xor    ebx,ebx
c0013b26:	68 28 0f 02 c0       	push   0xc0020f28
c0013b2b:	e8 58 92 ff ff       	call   c000cd88 <panic(char const*)>
c0013b30:	83 c4 10             	add    esp,0x10
c0013b33:	89 d8                	mov    eax,ebx
c0013b35:	83 c4 08             	add    esp,0x8
c0013b38:	5b                   	pop    ebx
c0013b39:	c3                   	ret    

c0013b3a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013b3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013b3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013b42:	c1 e0 04             	shl    eax,0x4
c0013b45:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013b49:	8d 50 10             	lea    edx,[eax+0x10]
c0013b4c:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013b52:	74 08                	je     c0013b5c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013b54:	83 c0 04             	add    eax,0x4
c0013b57:	39 d0                	cmp    eax,edx
c0013b59:	75 f1                	jne    c0013b4c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013b5b:	c3                   	ret    
c0013b5c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013b66:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013b70:	eb e2                	jmp    c0013b54 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013b72 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013b72:	57                   	push   edi
c0013b73:	31 c0                	xor    eax,eax
c0013b75:	56                   	push   esi
c0013b76:	53                   	push   ebx
c0013b77:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013b7b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013b7f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013b83:	89 da                	mov    edx,ebx
c0013b85:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013b89:	c1 e2 04             	shl    edx,0x4
c0013b8c:	01 ca                	add    edx,ecx
c0013b8e:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0013b96:	74 16                	je     c0013bae <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0013b98:	40                   	inc    eax
c0013b99:	83 f8 04             	cmp    eax,0x4
c0013b9c:	75 f0                	jne    c0013b8e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0013b9e:	c7 44 24 10 68 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020f68
c0013ba6:	5b                   	pop    ebx
c0013ba7:	5e                   	pop    esi
c0013ba8:	5f                   	pop    edi
c0013ba9:	e9 da 91 ff ff       	jmp    c000cd88 <panic(char const*)>
c0013bae:	8d 04 98             	lea    eax,[eax+ebx*4]
c0013bb1:	8d 04 81             	lea    eax,[ecx+eax*4]
c0013bb4:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0013bba:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0013bc0:	5b                   	pop    ebx
c0013bc1:	5e                   	pop    esi
c0013bc2:	5f                   	pop    edi
c0013bc3:	c3                   	ret    

c0013bc4 <doubleFault(regs*, void*)>:
c0013bc4:	c7 44 24 04 98 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021098
c0013bcc:	e9 b7 91 ff ff       	jmp    c000cd88 <panic(char const*)>
c0013bd1:	90                   	nop

c0013bd2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013bd2:	56                   	push   esi
c0013bd3:	53                   	push   ebx
c0013bd4:	50                   	push   eax
c0013bd5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013bd9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013bdd:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013be2:	75 35                	jne    c0013c19 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0013be4:	8d 43 20             	lea    eax,[ebx+0x20]
c0013be7:	31 d2                	xor    edx,edx
c0013be9:	89 c1                	mov    ecx,eax
c0013beb:	c1 e1 04             	shl    ecx,0x4
c0013bee:	01 f1                	add    ecx,esi
c0013bf0:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0013bf8:	74 3e                	je     c0013c38 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0013bfa:	42                   	inc    edx
c0013bfb:	83 fa 04             	cmp    edx,0x4
c0013bfe:	75 f0                	jne    c0013bf0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0013c00:	83 ec 0c             	sub    esp,0xc
c0013c03:	68 dc 0f 02 c0       	push   0xc0020fdc
c0013c08:	e8 7b 91 ff ff       	call   c000cd88 <panic(char const*)>
c0013c0d:	83 c4 10             	add    esp,0x10
c0013c10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013c15:	5a                   	pop    edx
c0013c16:	5b                   	pop    ebx
c0013c17:	5e                   	pop    esi
c0013c18:	c3                   	ret    
c0013c19:	83 ec 0c             	sub    esp,0xc
c0013c1c:	56                   	push   esi
c0013c1d:	e8 ee fb ff ff       	call   c0013810 <Device::getName()>
c0013c22:	83 c4 10             	add    esp,0x10
c0013c25:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013c28:	75 ba                	jne    c0013be4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013c2a:	83 fb 0f             	cmp    ebx,0xf
c0013c2d:	7f 29                	jg     c0013c58 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0013c2f:	0f b6 9b c0 25 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdda40]
c0013c36:	eb ac                	jmp    c0013be4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013c38:	8d 04 82             	lea    eax,[edx+eax*4]
c0013c3b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c3f:	8d 04 86             	lea    eax,[esi+eax*4]
c0013c42:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0013c48:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c4c:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0013c52:	89 d8                	mov    eax,ebx
c0013c54:	5a                   	pop    edx
c0013c55:	5b                   	pop    ebx
c0013c56:	5e                   	pop    esi
c0013c57:	c3                   	ret    
c0013c58:	83 ec 0c             	sub    esp,0xc
c0013c5b:	68 a4 0f 02 c0       	push   0xc0020fa4
c0013c60:	e8 23 91 ff ff       	call   c000cd88 <panic(char const*)>
c0013c65:	83 c4 10             	add    esp,0x10
c0013c68:	e9 77 ff ff ff       	jmp    c0013be4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013c6d:	90                   	nop

c0013c6e <InterruptController::clearAllHandlers(int, bool)>:
c0013c6e:	56                   	push   esi
c0013c6f:	53                   	push   ebx
c0013c70:	52                   	push   edx
c0013c71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c75:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c79:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013c7e:	75 61                	jne    c0013ce1 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0013c80:	8d 46 20             	lea    eax,[esi+0x20]
c0013c83:	c1 e6 04             	shl    esi,0x4
c0013c86:	c1 e0 04             	shl    eax,0x4
c0013c89:	01 de                	add    esi,ebx
c0013c8b:	01 d8                	add    eax,ebx
c0013c8d:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0013c97:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0013ca1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0013cab:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0013cb5:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0013cbf:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0013cc9:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0013cd3:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0013cdd:	58                   	pop    eax
c0013cde:	5b                   	pop    ebx
c0013cdf:	5e                   	pop    esi
c0013ce0:	c3                   	ret    
c0013ce1:	83 ec 0c             	sub    esp,0xc
c0013ce4:	53                   	push   ebx
c0013ce5:	e8 26 fb ff ff       	call   c0013810 <Device::getName()>
c0013cea:	83 c4 10             	add    esp,0x10
c0013ced:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013cf0:	75 8e                	jne    c0013c80 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013cf2:	83 fe 0f             	cmp    esi,0xf
c0013cf5:	7f 09                	jg     c0013d00 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0013cf7:	0f b6 b6 c0 25 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdda40]
c0013cfe:	eb 80                	jmp    c0013c80 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013d00:	83 ec 0c             	sub    esp,0xc
c0013d03:	68 18 10 02 c0       	push   0xc0021018
c0013d08:	e8 7b 90 ff ff       	call   c000cd88 <panic(char const*)>
c0013d0d:	83 c4 10             	add    esp,0x10
c0013d10:	e9 6b ff ff ff       	jmp    c0013c80 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013d15:	90                   	nop

c0013d16 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013d16:	56                   	push   esi
c0013d17:	53                   	push   ebx
c0013d18:	52                   	push   edx
c0013d19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d1d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d21:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013d26:	75 3a                	jne    c0013d62 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0013d28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d2c:	8d 50 20             	lea    edx,[eax+0x20]
c0013d2f:	c1 e2 04             	shl    edx,0x4
c0013d32:	8d 04 16             	lea    eax,[esi+edx*1]
c0013d35:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0013d39:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0013d3f:	74 0b                	je     c0013d4c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0013d41:	83 c0 04             	add    eax,0x4
c0013d44:	39 d0                	cmp    eax,edx
c0013d46:	75 f1                	jne    c0013d39 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0013d48:	58                   	pop    eax
c0013d49:	5b                   	pop    ebx
c0013d4a:	5e                   	pop    esi
c0013d4b:	c3                   	ret    
c0013d4c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013d56:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013d60:	eb df                	jmp    c0013d41 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0013d62:	83 ec 0c             	sub    esp,0xc
c0013d65:	56                   	push   esi
c0013d66:	e8 a5 fa ff ff       	call   c0013810 <Device::getName()>
c0013d6b:	83 c4 10             	add    esp,0x10
c0013d6e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013d71:	75 b5                	jne    c0013d28 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013d73:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0013d78:	7f 11                	jg     c0013d8b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0013d7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d7e:	0f b6 80 c0 25 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdda40]
c0013d85:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d89:	eb 9d                	jmp    c0013d28 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013d8b:	83 ec 0c             	sub    esp,0xc
c0013d8e:	68 18 10 02 c0       	push   0xc0021018
c0013d93:	e8 f0 8f ff ff       	call   c000cd88 <panic(char const*)>
c0013d98:	83 c4 10             	add    esp,0x10
c0013d9b:	eb 8b                	jmp    c0013d28 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0013d9d <nmiHandler(regs*, void*)>:
c0013d9d:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c0013da2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013da6:	e9 b1 75 ff ff       	jmp    c000b35c <Computer::handleNMI()>

c0013dab <int_handler>:
c0013dab:	55                   	push   ebp
c0013dac:	57                   	push   edi
c0013dad:	56                   	push   esi
c0013dae:	53                   	push   ebx
c0013daf:	83 ec 0c             	sub    esp,0xc
c0013db2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013db6:	80 3d 32 36 02 c0 00 	cmp    BYTE PTR ds:0xc0023632,0x0
c0013dbd:	74 0b                	je     c0013dca <int_handler+0x1f>
c0013dbf:	fa                   	cli    
c0013dc0:	f4                   	hlt    
c0013dc1:	80 3d 32 36 02 c0 00 	cmp    BYTE PTR ds:0xc0023632,0x0
c0013dc8:	75 f5                	jne    c0013dbf <int_handler+0x14>
c0013dca:	e8 b7 31 00 00       	call   c0016f86 <thisCPU()>
c0013dcf:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0013dd2:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0013dd8:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013ddb:	83 f8 17             	cmp    eax,0x17
c0013dde:	77 13                	ja     c0013df3 <int_handler+0x48>
c0013de0:	83 ec 08             	sub    esp,0x8
c0013de3:	8b 17                	mov    edx,DWORD PTR [edi]
c0013de5:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013de8:	0f b6 c0             	movzx  eax,al
c0013deb:	50                   	push   eax
c0013dec:	57                   	push   edi
c0013ded:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0013df0:	83 c4 10             	add    esp,0x10
c0013df3:	83 c3 15             	add    ebx,0x15
c0013df6:	c1 e3 04             	shl    ebx,0x4
c0013df9:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0013dfd:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0013e04:	31 db                	xor    ebx,ebx
c0013e06:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0013e0a:	85 c0                	test   eax,eax
c0013e0c:	74 13                	je     c0013e21 <int_handler+0x76>
c0013e0e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013e11:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0013e15:	74 1c                	je     c0013e33 <int_handler+0x88>
c0013e17:	83 ec 08             	sub    esp,0x8
c0013e1a:	52                   	push   edx
c0013e1b:	56                   	push   esi
c0013e1c:	ff d0                	call   eax
c0013e1e:	83 c4 10             	add    esp,0x10
c0013e21:	43                   	inc    ebx
c0013e22:	83 fb 04             	cmp    ebx,0x4
c0013e25:	75 df                	jne    c0013e06 <int_handler+0x5b>
c0013e27:	83 c4 0c             	add    esp,0xc
c0013e2a:	31 c0                	xor    eax,eax
c0013e2c:	5b                   	pop    ebx
c0013e2d:	31 d2                	xor    edx,edx
c0013e2f:	5e                   	pop    esi
c0013e30:	5f                   	pop    edi
c0013e31:	5d                   	pop    ebp
c0013e32:	c3                   	ret    
c0013e33:	83 ec 08             	sub    esp,0x8
c0013e36:	52                   	push   edx
c0013e37:	56                   	push   esi
c0013e38:	ff d0                	call   eax
c0013e3a:	83 c4 10             	add    esp,0x10
c0013e3d:	83 c4 0c             	add    esp,0xc
c0013e40:	5b                   	pop    ebx
c0013e41:	5e                   	pop    esi
c0013e42:	5f                   	pop    edi
c0013e43:	5d                   	pop    ebp
c0013e44:	c3                   	ret    
c0013e45:	90                   	nop

c0013e46 <InterruptController::InterruptController(char const*)>:
c0013e46:	83 ec 1c             	sub    esp,0x1c
c0013e49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e4d:	83 ec 08             	sub    esp,0x8
c0013e50:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e54:	50                   	push   eax
c0013e55:	e8 c4 f8 ff ff       	call   c001371e <Device::Device(char const*)>
c0013e5a:	83 c4 10             	add    esp,0x10
c0013e5d:	ba 10 12 02 c0       	mov    edx,0xc0021210
c0013e62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e66:	89 10                	mov    DWORD PTR [eax],edx
c0013e68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e6c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0013e76:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013e7e:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0013e86:	7f 5e                	jg     c0013ee6 <InterruptController::InterruptController(char const*)+0xa0>
c0013e88:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013e90:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0013e95:	7f 49                	jg     c0013ee0 <InterruptController::InterruptController(char const*)+0x9a>
c0013e97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013e9f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0013ea6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013eaa:	01 ca                	add    edx,ecx
c0013eac:	83 c2 54             	add    edx,0x54
c0013eaf:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0013eb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ebb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013ebf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0013ec6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013eca:	01 ca                	add    edx,ecx
c0013ecc:	81 c2 54 04 00 00    	add    edx,0x454
c0013ed2:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0013eda:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013ede:	eb b0                	jmp    c0013e90 <InterruptController::InterruptController(char const*)+0x4a>
c0013ee0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0013ee4:	eb 98                	jmp    c0013e7e <InterruptController::InterruptController(char const*)+0x38>
c0013ee6:	90                   	nop
c0013ee7:	83 c4 1c             	add    esp,0x1c
c0013eea:	c3                   	ret    
c0013eeb:	90                   	nop

c0013eec <InterruptController::~InterruptController()>:
c0013eec:	83 ec 0c             	sub    esp,0xc
c0013eef:	ba 10 12 02 c0       	mov    edx,0xc0021210
c0013ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef8:	89 10                	mov    DWORD PTR [eax],edx
c0013efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013efe:	83 ec 0c             	sub    esp,0xc
c0013f01:	50                   	push   eax
c0013f02:	e8 c9 f4 ff ff       	call   c00133d0 <Device::~Device()>
c0013f07:	83 c4 10             	add    esp,0x10
c0013f0a:	90                   	nop
c0013f0b:	83 c4 0c             	add    esp,0xc
c0013f0e:	c3                   	ret    
c0013f0f:	90                   	nop

c0013f10 <InterruptController::~InterruptController()>:
c0013f10:	83 ec 0c             	sub    esp,0xc
c0013f13:	83 ec 0c             	sub    esp,0xc
c0013f16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f1a:	e8 cd ff ff ff       	call   c0013eec <InterruptController::~InterruptController()>
c0013f1f:	83 c4 10             	add    esp,0x10
c0013f22:	83 ec 08             	sub    esp,0x8
c0013f25:	68 58 21 00 00       	push   0x2158
c0013f2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f2e:	e8 00 e3 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c0013f33:	83 c4 10             	add    esp,0x10
c0013f36:	83 c4 0c             	add    esp,0xc
c0013f39:	c3                   	ret    

c0013f3a <displayDebugInfo(regs*)>:
c0013f3a:	55                   	push   ebp
c0013f3b:	57                   	push   edi
c0013f3c:	56                   	push   esi
c0013f3d:	53                   	push   ebx
c0013f3e:	83 ec 24             	sub    esp,0x24
c0013f41:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013f45:	0f 20 c2             	mov    edx,cr0
c0013f48:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0013f4c:	0f 20 d7             	mov    edi,cr2
c0013f4f:	0f 20 de             	mov    esi,cr3
c0013f52:	0f 20 e5             	mov    ebp,cr4
c0013f55:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0013f58:	68 a5 10 02 c0       	push   0xc00210a5
c0013f5d:	e8 08 8d ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0013f62:	58                   	pop    eax
c0013f63:	5a                   	pop    edx
c0013f64:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013f67:	68 b0 10 02 c0       	push   0xc00210b0
c0013f6c:	e8 f9 8c ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0013f71:	59                   	pop    ecx
c0013f72:	58                   	pop    eax
c0013f73:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013f76:	68 bb 10 02 c0       	push   0xc00210bb
c0013f7b:	e8 ea 8c ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0013f80:	58                   	pop    eax
c0013f81:	5a                   	pop    edx
c0013f82:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013f85:	68 c6 10 02 c0       	push   0xc00210c6
c0013f8a:	e8 db 8c ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0013f8f:	59                   	pop    ecx
c0013f90:	58                   	pop    eax
c0013f91:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0013f94:	68 d1 10 02 c0       	push   0xc00210d1
c0013f99:	e8 cc 8c ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0013f9e:	58                   	pop    eax
c0013f9f:	5a                   	pop    edx
c0013fa0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0013fa3:	68 dc 10 02 c0       	push   0xc00210dc
c0013fa8:	e8 bd 8c ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0013fad:	59                   	pop    ecx
c0013fae:	58                   	pop    eax
c0013faf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0013fb2:	68 f6 10 02 c0       	push   0xc00210f6
c0013fb7:	e8 ae 8c ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0013fbc:	58                   	pop    eax
c0013fbd:	5a                   	pop    edx
c0013fbe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0013fc1:	68 e7 10 02 c0       	push   0xc00210e7
c0013fc6:	e8 9f 8c ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0013fcb:	59                   	pop    ecx
c0013fcc:	58                   	pop    eax
c0013fcd:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0013fd0:	68 f2 10 02 c0       	push   0xc00210f2
c0013fd5:	e8 90 8c ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0013fda:	58                   	pop    eax
c0013fdb:	5a                   	pop    edx
c0013fdc:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0013fdf:	68 01 11 02 c0       	push   0xc0021101
c0013fe4:	e8 81 8c ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0013fe9:	59                   	pop    ecx
c0013fea:	58                   	pop    eax
c0013feb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0013fee:	68 0c 11 02 c0       	push   0xc002110c
c0013ff3:	e8 72 8c ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0013ff8:	58                   	pop    eax
c0013ff9:	5a                   	pop    edx
c0013ffa:	57                   	push   edi
c0013ffb:	68 17 11 02 c0       	push   0xc0021117
c0014000:	e8 65 8c ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0014005:	59                   	pop    ecx
c0014006:	58                   	pop    eax
c0014007:	56                   	push   esi
c0014008:	68 22 11 02 c0       	push   0xc0021122
c001400d:	e8 58 8c ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0014012:	58                   	pop    eax
c0014013:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c0014018:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001401e:	e8 d8 c3 ff ff       	call   c00103fb <setActiveTerminal(VgaText*)>
c0014023:	58                   	pop    eax
c0014024:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014027:	5a                   	pop    edx
c0014028:	c1 e0 05             	shl    eax,0x5
c001402b:	05 20 23 02 c0       	add    eax,0xc0022320
c0014030:	50                   	push   eax
c0014031:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c0014036:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001403c:	e8 d9 c7 ff ff       	call   c001081a <VgaText::puts(char const*)>
c0014041:	59                   	pop    ecx
c0014042:	58                   	pop    eax
c0014043:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c0014048:	68 2d 11 02 c0       	push   0xc002112d
c001404d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014053:	e8 c2 c7 ff ff       	call   c001081a <VgaText::puts(char const*)>
c0014058:	58                   	pop    eax
c0014059:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c001405e:	5a                   	pop    edx
c001405f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014062:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014068:	e8 d3 c7 ff ff       	call   c0010840 <VgaText::putx(unsigned int)>
c001406d:	59                   	pop    ecx
c001406e:	58                   	pop    eax
c001406f:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c0014074:	68 35 11 02 c0       	push   0xc0021135
c0014079:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001407f:	e8 96 c7 ff ff       	call   c001081a <VgaText::puts(char const*)>
c0014084:	58                   	pop    eax
c0014085:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c001408a:	5a                   	pop    edx
c001408b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001408e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014094:	e8 a7 c7 ff ff       	call   c0010840 <VgaText::putx(unsigned int)>
c0014099:	59                   	pop    ecx
c001409a:	58                   	pop    eax
c001409b:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c00140a0:	68 3d 11 02 c0       	push   0xc002113d
c00140a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00140ab:	e8 6a c7 ff ff       	call   c001081a <VgaText::puts(char const*)>
c00140b0:	58                   	pop    eax
c00140b1:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c00140b6:	5a                   	pop    edx
c00140b7:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00140ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00140c0:	e8 7b c7 ff ff       	call   c0010840 <VgaText::putx(unsigned int)>
c00140c5:	59                   	pop    ecx
c00140c6:	58                   	pop    eax
c00140c7:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c00140cc:	68 45 11 02 c0       	push   0xc0021145
c00140d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00140d7:	e8 3e c7 ff ff       	call   c001081a <VgaText::puts(char const*)>
c00140dc:	58                   	pop    eax
c00140dd:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c00140e2:	5a                   	pop    edx
c00140e3:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00140e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00140ec:	e8 4f c7 ff ff       	call   c0010840 <VgaText::putx(unsigned int)>
c00140f1:	59                   	pop    ecx
c00140f2:	58                   	pop    eax
c00140f3:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c00140f8:	68 4d 11 02 c0       	push   0xc002114d
c00140fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014103:	e8 12 c7 ff ff       	call   c001081a <VgaText::puts(char const*)>
c0014108:	58                   	pop    eax
c0014109:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c001410e:	5a                   	pop    edx
c001410f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014112:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014118:	e8 23 c7 ff ff       	call   c0010840 <VgaText::putx(unsigned int)>
c001411d:	59                   	pop    ecx
c001411e:	58                   	pop    eax
c001411f:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c0014124:	68 55 11 02 c0       	push   0xc0021155
c0014129:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001412f:	e8 e6 c6 ff ff       	call   c001081a <VgaText::puts(char const*)>
c0014134:	58                   	pop    eax
c0014135:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c001413a:	5a                   	pop    edx
c001413b:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001413e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014144:	e8 f7 c6 ff ff       	call   c0010840 <VgaText::putx(unsigned int)>
c0014149:	59                   	pop    ecx
c001414a:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c001414f:	5b                   	pop    ebx
c0014150:	68 5d 11 02 c0       	push   0xc002115d
c0014155:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001415b:	e8 ba c6 ff ff       	call   c001081a <VgaText::puts(char const*)>
c0014160:	58                   	pop    eax
c0014161:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c0014166:	5a                   	pop    edx
c0014167:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001416b:	52                   	push   edx
c001416c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014172:	e8 c9 c6 ff ff       	call   c0010840 <VgaText::putx(unsigned int)>
c0014177:	59                   	pop    ecx
c0014178:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c001417d:	5b                   	pop    ebx
c001417e:	68 66 11 02 c0       	push   0xc0021166
c0014183:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014189:	e8 8c c6 ff ff       	call   c001081a <VgaText::puts(char const*)>
c001418e:	58                   	pop    eax
c001418f:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c0014194:	5a                   	pop    edx
c0014195:	57                   	push   edi
c0014196:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001419c:	e8 9f c6 ff ff       	call   c0010840 <VgaText::putx(unsigned int)>
c00141a1:	59                   	pop    ecx
c00141a2:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c00141a7:	5b                   	pop    ebx
c00141a8:	68 6e 11 02 c0       	push   0xc002116e
c00141ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141b3:	e8 62 c6 ff ff       	call   c001081a <VgaText::puts(char const*)>
c00141b8:	5f                   	pop    edi
c00141b9:	58                   	pop    eax
c00141ba:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c00141bf:	56                   	push   esi
c00141c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141c6:	e8 75 c6 ff ff       	call   c0010840 <VgaText::putx(unsigned int)>
c00141cb:	58                   	pop    eax
c00141cc:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c00141d1:	5a                   	pop    edx
c00141d2:	68 76 11 02 c0       	push   0xc0021176
c00141d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141dd:	e8 38 c6 ff ff       	call   c001081a <VgaText::puts(char const*)>
c00141e2:	59                   	pop    ecx
c00141e3:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c00141e8:	5b                   	pop    ebx
c00141e9:	55                   	push   ebp
c00141ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141f0:	e8 4b c6 ff ff       	call   c0010840 <VgaText::putx(unsigned int)>
c00141f5:	5e                   	pop    esi
c00141f6:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c00141fb:	5f                   	pop    edi
c00141fc:	68 7e 11 02 c0       	push   0xc002117e
c0014201:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014207:	e8 0e c6 ff ff       	call   c001081a <VgaText::puts(char const*)>
c001420c:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c0014211:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014217:	e8 d4 a7 00 00       	call   c001e9f0 <CPU::readDR0()>
c001421c:	5d                   	pop    ebp
c001421d:	5a                   	pop    edx
c001421e:	50                   	push   eax
c001421f:	53                   	push   ebx
c0014220:	e8 1b c6 ff ff       	call   c0010840 <VgaText::putx(unsigned int)>
c0014225:	59                   	pop    ecx
c0014226:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c001422b:	5b                   	pop    ebx
c001422c:	68 87 11 02 c0       	push   0xc0021187
c0014231:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014237:	e8 de c5 ff ff       	call   c001081a <VgaText::puts(char const*)>
c001423c:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c0014241:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014247:	e8 b6 a7 00 00       	call   c001ea02 <CPU::readDR1()>
c001424c:	5e                   	pop    esi
c001424d:	5f                   	pop    edi
c001424e:	50                   	push   eax
c001424f:	53                   	push   ebx
c0014250:	e8 eb c5 ff ff       	call   c0010840 <VgaText::putx(unsigned int)>
c0014255:	5d                   	pop    ebp
c0014256:	58                   	pop    eax
c0014257:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c001425c:	68 8f 11 02 c0       	push   0xc002118f
c0014261:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014267:	e8 ae c5 ff ff       	call   c001081a <VgaText::puts(char const*)>
c001426c:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c0014271:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014277:	e8 98 a7 00 00       	call   c001ea14 <CPU::readDR2()>
c001427c:	5a                   	pop    edx
c001427d:	59                   	pop    ecx
c001427e:	50                   	push   eax
c001427f:	53                   	push   ebx
c0014280:	e8 bb c5 ff ff       	call   c0010840 <VgaText::putx(unsigned int)>
c0014285:	5b                   	pop    ebx
c0014286:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c001428b:	5e                   	pop    esi
c001428c:	68 97 11 02 c0       	push   0xc0021197
c0014291:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014297:	e8 7e c5 ff ff       	call   c001081a <VgaText::puts(char const*)>
c001429c:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c00142a1:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00142a7:	e8 7a a7 00 00       	call   c001ea26 <CPU::readDR3()>
c00142ac:	5f                   	pop    edi
c00142ad:	5d                   	pop    ebp
c00142ae:	50                   	push   eax
c00142af:	53                   	push   ebx
c00142b0:	e8 8b c5 ff ff       	call   c0010840 <VgaText::putx(unsigned int)>
c00142b5:	58                   	pop    eax
c00142b6:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c00142bb:	5a                   	pop    edx
c00142bc:	68 9f 11 02 c0       	push   0xc002119f
c00142c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142c7:	e8 4e c5 ff ff       	call   c001081a <VgaText::puts(char const*)>
c00142cc:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c00142d1:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00142d7:	e8 5c a7 00 00       	call   c001ea38 <CPU::readDR6()>
c00142dc:	59                   	pop    ecx
c00142dd:	5e                   	pop    esi
c00142de:	50                   	push   eax
c00142df:	53                   	push   ebx
c00142e0:	e8 5b c5 ff ff       	call   c0010840 <VgaText::putx(unsigned int)>
c00142e5:	5f                   	pop    edi
c00142e6:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c00142eb:	5d                   	pop    ebp
c00142ec:	68 a7 11 02 c0       	push   0xc00211a7
c00142f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142f7:	e8 1e c5 ff ff       	call   c001081a <VgaText::puts(char const*)>
c00142fc:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c0014301:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014307:	e8 3e a7 00 00       	call   c001ea4a <CPU::readDR7()>
c001430c:	5a                   	pop    edx
c001430d:	59                   	pop    ecx
c001430e:	50                   	push   eax
c001430f:	53                   	push   ebx
c0014310:	e8 2b c5 ff ff       	call   c0010840 <VgaText::putx(unsigned int)>
c0014315:	fa                   	cli    
c0014316:	f4                   	hlt    
c0014317:	83 c4 10             	add    esp,0x10
c001431a:	eb fe                	jmp    c001431a <displayDebugInfo(regs*)+0x3e0>

c001431c <gpFault(regs*, void*)>:
c001431c:	53                   	push   ebx
c001431d:	83 ec 14             	sub    esp,0x14
c0014320:	c7 05 68 39 02 c0 00 86 01 c0 	mov    DWORD PTR ds:0xc0023968,0xc0018600
c001432a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001432e:	53                   	push   ebx
c001432f:	e8 cc 42 00 00       	call   c0018600 <vm8086FaultHandler(regs*)>
c0014334:	83 c4 10             	add    esp,0x10
c0014337:	84 c0                	test   al,al
c0014339:	74 05                	je     c0014340 <gpFault(regs*, void*)+0x24>
c001433b:	83 c4 08             	add    esp,0x8
c001433e:	5b                   	pop    ebx
c001433f:	c3                   	ret    
c0014340:	83 ec 0c             	sub    esp,0xc
c0014343:	68 af 11 02 c0       	push   0xc00211af
c0014348:	e8 1d 89 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001434d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014350:	e8 e5 fb ff ff       	call   c0013f3a <displayDebugInfo(regs*)>

c0014355 <pgFault(regs*, void*)>:
c0014355:	83 ec 18             	sub    esp,0x18
c0014358:	68 ca 11 02 c0       	push   0xc00211ca
c001435d:	e8 08 89 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0014362:	58                   	pop    eax
c0014363:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014367:	e8 ce fb ff ff       	call   c0013f3a <displayDebugInfo(regs*)>

c001436c <otherISRHandler(regs*, void*)>:
c001436c:	53                   	push   ebx
c001436d:	83 ec 0c             	sub    esp,0xc
c0014370:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014374:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014377:	50                   	push   eax
c0014378:	50                   	push   eax
c0014379:	68 d7 11 02 c0       	push   0xc00211d7
c001437e:	e8 e7 88 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0014383:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014386:	e8 af fb ff ff       	call   c0013f3a <displayDebugInfo(regs*)>

c001438b <opcodeFault(regs*, void*)>:
c001438b:	53                   	push   ebx
c001438c:	83 ec 08             	sub    esp,0x8
c001438f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014393:	e8 ee 2b 00 00       	call   c0016f86 <thisCPU()>
c0014398:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c001439f:	74 16                	je     c00143b7 <opcodeFault(regs*, void*)+0x2c>
c00143a1:	83 ec 0c             	sub    esp,0xc
c00143a4:	68 54 10 02 c0       	push   0xc0021054
c00143a9:	e8 bc 88 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c00143ae:	83 43 38 19          	add    DWORD PTR [ebx+0x38],0x19
c00143b2:	83 c4 18             	add    esp,0x18
c00143b5:	5b                   	pop    ebx
c00143b6:	c3                   	ret    
c00143b7:	83 ec 0c             	sub    esp,0xc
c00143ba:	68 f4 11 02 c0       	push   0xc00211f4
c00143bf:	e8 a6 88 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c00143c4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00143c7:	c1 e0 04             	shl    eax,0x4
c00143ca:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00143cd:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00143d1:	89 14 24             	mov    DWORD PTR [esp],edx
c00143d4:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00143d8:	52                   	push   edx
c00143d9:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00143dd:	52                   	push   edx
c00143de:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00143e1:	50                   	push   eax
c00143e2:	68 78 10 02 c0       	push   0xc0021078
c00143e7:	e8 7e 88 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c00143ec:	83 c4 14             	add    esp,0x14
c00143ef:	53                   	push   ebx
c00143f0:	e8 45 fb ff ff       	call   c0013f3a <displayDebugInfo(regs*)>

c00143f5 <displayProgramFault(char const*)>:
c00143f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00143fd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014403:	85 c0                	test   eax,eax
c0014405:	74 15                	je     c001441c <displayProgramFault(char const*)+0x27>
c0014407:	83 ec 0c             	sub    esp,0xc
c001440a:	6a 04                	push   0x4
c001440c:	6a 0f                	push   0xf
c001440e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014412:	50                   	push   eax
c0014413:	e8 c4 c0 ff ff       	call   c00104dc <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014418:	83 c4 1c             	add    esp,0x1c
c001441b:	c3                   	ret    
c001441c:	c3                   	ret    
c001441d:	90                   	nop

c001441e <InterruptController::convertLegacyIRQNumber(int)>:
c001441e:	53                   	push   ebx
c001441f:	83 ec 14             	sub    esp,0x14
c0014422:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001442a:	e8 e1 f3 ff ff       	call   c0013810 <Device::getName()>
c001442f:	83 c4 10             	add    esp,0x10
c0014432:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014435:	74 07                	je     c001443e <InterruptController::convertLegacyIRQNumber(int)+0x20>
c0014437:	89 d8                	mov    eax,ebx
c0014439:	83 c4 08             	add    esp,0x8
c001443c:	5b                   	pop    ebx
c001443d:	c3                   	ret    
c001443e:	83 fb 0f             	cmp    ebx,0xf
c0014441:	7f 0e                	jg     c0014451 <InterruptController::convertLegacyIRQNumber(int)+0x33>
c0014443:	0f b6 9b c0 25 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdda40]
c001444a:	83 c4 08             	add    esp,0x8
c001444d:	89 d8                	mov    eax,ebx
c001444f:	5b                   	pop    ebx
c0014450:	c3                   	ret    
c0014451:	83 ec 0c             	sub    esp,0xc
c0014454:	68 a4 0f 02 c0       	push   0xc0020fa4
c0014459:	e8 2a 89 ff ff       	call   c000cd88 <panic(char const*)>
c001445e:	89 d8                	mov    eax,ebx
c0014460:	83 c4 10             	add    esp,0x10
c0014463:	83 c4 08             	add    esp,0x8
c0014466:	5b                   	pop    ebx
c0014467:	c3                   	ret    

c0014468 <setupInterruptController()>:
c0014468:	56                   	push   esi
c0014469:	53                   	push   ebx
c001446a:	51                   	push   ecx
c001446b:	e8 13 2b 00 00       	call   c0016f83 <getCPUNumber()>
c0014470:	85 c0                	test   eax,eax
c0014472:	0f 85 10 02 00 00    	jne    c0014688 <setupInterruptController()+0x220>
c0014478:	83 ec 0c             	sub    esp,0xc
c001447b:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c0014480:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014486:	68 58 21 00 00       	push   0x2158
c001448b:	83 e0 01             	and    eax,0x1
c001448e:	89 c6                	mov    esi,eax
c0014490:	e8 8f dd ff ff       	call   c0012224 <operator new(unsigned long)>
c0014495:	89 04 24             	mov    DWORD PTR [esp],eax
c0014498:	89 c3                	mov    ebx,eax
c001449a:	e8 1b 91 00 00       	call   c001d5ba <PIC::PIC()>
c001449f:	6a 00                	push   0x0
c00144a1:	6a 00                	push   0x0
c00144a3:	6a 00                	push   0x0
c00144a5:	53                   	push   ebx
c00144a6:	e8 53 94 00 00       	call   c001d8fe <PIC::open(int, int, void*)>
c00144ab:	83 c4 20             	add    esp,0x20
c00144ae:	89 f0                	mov    eax,esi
c00144b0:	84 c0                	test   al,al
c00144b2:	0f 85 92 01 00 00    	jne    c001464a <setupInterruptController()+0x1e2>
c00144b8:	83 ec 08             	sub    esp,0x8
c00144bb:	53                   	push   ebx
c00144bc:	ff 35 68 2e 02 c0    	push   DWORD PTR ds:0xc0022e68
c00144c2:	e8 67 f0 ff ff       	call   c001352e <Device::addChild(Device*)>
c00144c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144c9:	6a 00                	push   0x0
c00144cb:	68 6c 43 01 c0       	push   0xc001436c
c00144d0:	6a 00                	push   0x0
c00144d2:	53                   	push   ebx
c00144d3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00144d6:	83 c4 20             	add    esp,0x20
c00144d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144db:	6a 00                	push   0x0
c00144dd:	68 6c 43 01 c0       	push   0xc001436c
c00144e2:	6a 01                	push   0x1
c00144e4:	53                   	push   ebx
c00144e5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00144e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144ea:	6a 00                	push   0x0
c00144ec:	68 9d 3d 01 c0       	push   0xc0013d9d
c00144f1:	6a 02                	push   0x2
c00144f3:	53                   	push   ebx
c00144f4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00144f7:	83 c4 20             	add    esp,0x20
c00144fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144fc:	6a 00                	push   0x0
c00144fe:	68 6c 43 01 c0       	push   0xc001436c
c0014503:	6a 03                	push   0x3
c0014505:	53                   	push   ebx
c0014506:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014509:	8b 03                	mov    eax,DWORD PTR [ebx]
c001450b:	6a 00                	push   0x0
c001450d:	68 6c 43 01 c0       	push   0xc001436c
c0014512:	6a 04                	push   0x4
c0014514:	53                   	push   ebx
c0014515:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014518:	83 c4 20             	add    esp,0x20
c001451b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001451d:	6a 00                	push   0x0
c001451f:	68 6c 43 01 c0       	push   0xc001436c
c0014524:	6a 05                	push   0x5
c0014526:	53                   	push   ebx
c0014527:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001452a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001452c:	6a 00                	push   0x0
c001452e:	68 8b 43 01 c0       	push   0xc001438b
c0014533:	6a 06                	push   0x6
c0014535:	53                   	push   ebx
c0014536:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014539:	83 c4 20             	add    esp,0x20
c001453c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001453e:	6a 00                	push   0x0
c0014540:	68 6c 43 01 c0       	push   0xc001436c
c0014545:	6a 07                	push   0x7
c0014547:	53                   	push   ebx
c0014548:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001454b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001454d:	6a 00                	push   0x0
c001454f:	68 c4 3b 01 c0       	push   0xc0013bc4
c0014554:	6a 08                	push   0x8
c0014556:	53                   	push   ebx
c0014557:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001455a:	83 c4 20             	add    esp,0x20
c001455d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001455f:	6a 00                	push   0x0
c0014561:	68 6c 43 01 c0       	push   0xc001436c
c0014566:	6a 09                	push   0x9
c0014568:	53                   	push   ebx
c0014569:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001456e:	6a 00                	push   0x0
c0014570:	68 6c 43 01 c0       	push   0xc001436c
c0014575:	6a 0a                	push   0xa
c0014577:	53                   	push   ebx
c0014578:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001457b:	83 c4 20             	add    esp,0x20
c001457e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014580:	6a 00                	push   0x0
c0014582:	68 6c 43 01 c0       	push   0xc001436c
c0014587:	6a 0b                	push   0xb
c0014589:	53                   	push   ebx
c001458a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001458d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001458f:	6a 00                	push   0x0
c0014591:	68 6c 43 01 c0       	push   0xc001436c
c0014596:	6a 0c                	push   0xc
c0014598:	53                   	push   ebx
c0014599:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001459c:	83 c4 20             	add    esp,0x20
c001459f:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145a1:	6a 00                	push   0x0
c00145a3:	68 1c 43 01 c0       	push   0xc001431c
c00145a8:	6a 0d                	push   0xd
c00145aa:	53                   	push   ebx
c00145ab:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00145ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145b0:	6a 00                	push   0x0
c00145b2:	68 55 43 01 c0       	push   0xc0014355
c00145b7:	6a 0e                	push   0xe
c00145b9:	53                   	push   ebx
c00145ba:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00145bd:	83 c4 20             	add    esp,0x20
c00145c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145c2:	6a 00                	push   0x0
c00145c4:	68 6c 43 01 c0       	push   0xc001436c
c00145c9:	6a 0f                	push   0xf
c00145cb:	53                   	push   ebx
c00145cc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00145cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145d1:	6a 00                	push   0x0
c00145d3:	68 6c 43 01 c0       	push   0xc001436c
c00145d8:	6a 10                	push   0x10
c00145da:	53                   	push   ebx
c00145db:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00145de:	83 c4 20             	add    esp,0x20
c00145e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145e3:	6a 00                	push   0x0
c00145e5:	68 6c 43 01 c0       	push   0xc001436c
c00145ea:	6a 11                	push   0x11
c00145ec:	53                   	push   ebx
c00145ed:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00145f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145f2:	6a 00                	push   0x0
c00145f4:	68 6c 43 01 c0       	push   0xc001436c
c00145f9:	6a 12                	push   0x12
c00145fb:	53                   	push   ebx
c00145fc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00145ff:	83 c4 20             	add    esp,0x20
c0014602:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014604:	6a 00                	push   0x0
c0014606:	68 6c 43 01 c0       	push   0xc001436c
c001460b:	6a 13                	push   0x13
c001460d:	53                   	push   ebx
c001460e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014611:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014613:	6a 00                	push   0x0
c0014615:	68 6c 43 01 c0       	push   0xc001436c
c001461a:	6a 14                	push   0x14
c001461c:	53                   	push   ebx
c001461d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014620:	83 c4 20             	add    esp,0x20
c0014623:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014625:	6a 00                	push   0x0
c0014627:	68 6c 43 01 c0       	push   0xc001436c
c001462c:	6a 1e                	push   0x1e
c001462e:	53                   	push   ebx
c001462f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014632:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014634:	6a 00                	push   0x0
c0014636:	68 d2 fb 00 c0       	push   0xc000fbd2
c001463b:	6a 60                	push   0x60
c001463d:	53                   	push   ebx
c001463e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014641:	83 c4 20             	add    esp,0x20
c0014644:	89 d8                	mov    eax,ebx
c0014646:	5a                   	pop    edx
c0014647:	5b                   	pop    ebx
c0014648:	5e                   	pop    esi
c0014649:	c3                   	ret    
c001464a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001464c:	6a 00                	push   0x0
c001464e:	6a 00                	push   0x0
c0014650:	6a 00                	push   0x0
c0014652:	53                   	push   ebx
c0014653:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014656:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014658:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001465b:	ff 50 04             	call   DWORD PTR [eax+0x4]
c001465e:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c0014665:	e8 ba db ff ff       	call   c0012224 <operator new(unsigned long)>
c001466a:	89 04 24             	mov    DWORD PTR [esp],eax
c001466d:	89 c3                	mov    ebx,eax
c001466f:	e8 84 8a 00 00       	call   c001d0f8 <APIC::APIC()>
c0014674:	6a 00                	push   0x0
c0014676:	6a 00                	push   0x0
c0014678:	6a 00                	push   0x0
c001467a:	53                   	push   ebx
c001467b:	e8 96 89 00 00       	call   c001d016 <APIC::open(int, int, void*)>
c0014680:	83 c4 20             	add    esp,0x20
c0014683:	e9 30 fe ff ff       	jmp    c00144b8 <setupInterruptController()+0x50>
c0014688:	83 ec 0c             	sub    esp,0xc
c001468b:	68 58 21 00 00       	push   0x2158
c0014690:	e8 8f db ff ff       	call   c0012224 <operator new(unsigned long)>
c0014695:	89 04 24             	mov    DWORD PTR [esp],eax
c0014698:	89 c3                	mov    ebx,eax
c001469a:	e8 59 8a 00 00       	call   c001d0f8 <APIC::APIC()>
c001469f:	6a 00                	push   0x0
c00146a1:	6a 00                	push   0x0
c00146a3:	6a 00                	push   0x0
c00146a5:	53                   	push   ebx
c00146a6:	e8 6b 89 00 00       	call   c001d016 <APIC::open(int, int, void*)>
c00146ab:	83 c4 18             	add    esp,0x18
c00146ae:	53                   	push   ebx
c00146af:	ff 35 68 2e 02 c0    	push   DWORD PTR ds:0xc0022e68
c00146b5:	e8 74 ee ff ff       	call   c001352e <Device::addChild(Device*)>
c00146ba:	83 c4 10             	add    esp,0x10
c00146bd:	89 d8                	mov    eax,ebx
c00146bf:	5a                   	pop    edx
c00146c0:	5b                   	pop    ebx
c00146c1:	5e                   	pop    esi
c00146c2:	c3                   	ret    
c00146c3:	90                   	nop

c00146c4 <startGUI(void*)>:
c00146c4:	55                   	push   ebp
c00146c5:	89 e5                	mov    ebp,esp
c00146c7:	53                   	push   ebx
c00146c8:	83 ec 04             	sub    esp,0x4
c00146cb:	e8 3e 9a ff ff       	call   c000e10e <unlockScheduler()>
c00146d0:	e8 22 9a ff ff       	call   c000e0f7 <getIRQNestingLevel()>
c00146d5:	83 ec 08             	sub    esp,0x8
c00146d8:	50                   	push   eax
c00146d9:	68 50 12 02 c0       	push   0xc0021250
c00146de:	e8 87 85 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c00146e3:	83 c4 10             	add    esp,0x10
c00146e6:	8b 1d 68 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022e68
c00146ec:	83 ec 08             	sub    esp,0x8
c00146ef:	6a 01                	push   0x1
c00146f1:	68 6a 12 02 c0       	push   0xc002126a
c00146f6:	e8 a9 7c ff ff       	call   c000c3a4 <Thr::loadDLL(char const*, bool)>
c00146fb:	83 c4 10             	add    esp,0x10
c00146fe:	83 ec 08             	sub    esp,0x8
c0014701:	53                   	push   ebx
c0014702:	50                   	push   eax
c0014703:	e8 ef 7d ff ff       	call   c000c4f7 <Thr::executeDLL(unsigned long, void*)>
c0014708:	83 c4 10             	add    esp,0x10
c001470b:	8b 1d 68 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022e68
c0014711:	83 ec 08             	sub    esp,0x8
c0014714:	6a 01                	push   0x1
c0014716:	68 84 12 02 c0       	push   0xc0021284
c001471b:	e8 84 7c ff ff       	call   c000c3a4 <Thr::loadDLL(char const*, bool)>
c0014720:	83 c4 10             	add    esp,0x10
c0014723:	83 ec 08             	sub    esp,0x8
c0014726:	53                   	push   ebx
c0014727:	50                   	push   eax
c0014728:	e8 ca 7d ff ff       	call   c000c4f7 <Thr::executeDLL(unsigned long, void*)>
c001472d:	83 c4 10             	add    esp,0x10
c0014730:	90                   	nop
c0014731:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014734:	c9                   	leave  
c0014735:	c3                   	ret    

c0014736 <sendKeyToTerminal(unsigned char)>:
c0014736:	55                   	push   ebp
c0014737:	89 e5                	mov    ebp,esp
c0014739:	83 ec 28             	sub    esp,0x28
c001473c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001473f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0014742:	a1 24 39 02 c0       	mov    eax,ds:0xc0023924
c0014747:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001474b:	83 ec 08             	sub    esp,0x8
c001474e:	52                   	push   edx
c001474f:	50                   	push   eax
c0014750:	e8 c3 c2 ff ff       	call   c0010a18 <VgaText::receiveKey(unsigned char)>
c0014755:	83 c4 10             	add    esp,0x10
c0014758:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c001475c:	75 41                	jne    c001479f <sendKeyToTerminal(unsigned char)+0x69>
c001475e:	e8 d0 99 ff ff       	call   c000e133 <lockStuff()>
c0014763:	a1 80 39 02 c0       	mov    eax,ds:0xc0023980
c0014768:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001476b:	c7 05 80 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023980,0x0
c0014775:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014779:	74 1f                	je     c001479a <sendKeyToTerminal(unsigned char)+0x64>
c001477b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001477e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0014781:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014784:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014787:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001478a:	83 ec 0c             	sub    esp,0xc
c001478d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014790:	e8 9b a1 ff ff       	call   c000e930 <unblockTask(ThreadControlBlock*)>
c0014795:	83 c4 10             	add    esp,0x10
c0014798:	eb db                	jmp    c0014775 <sendKeyToTerminal(unsigned char)+0x3f>
c001479a:	e8 26 9d ff ff       	call   c000e4c5 <unlockStuff()>
c001479f:	90                   	nop
c00147a0:	c9                   	leave  
c00147a1:	c3                   	ret    

c00147a2 <sendKeyboardToken(KeyboardToken)>:
c00147a2:	55                   	push   ebp
c00147a3:	89 e5                	mov    ebp,esp
c00147a5:	83 ec 18             	sub    esp,0x18
c00147a8:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00147ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147ae:	0f b7 c0             	movzx  eax,ax
c00147b1:	83 f2 01             	xor    edx,0x1
c00147b4:	88 90 a0 39 02 c0    	mov    BYTE PTR [eax-0x3ffdc660],dl
c00147ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147bd:	66 3d 03 02          	cmp    ax,0x203
c00147c1:	75 07                	jne    c00147ca <sendKeyboardToken(KeyboardToken)+0x28>
c00147c3:	a0 a0 3a 02 c0       	mov    al,ds:0xc0023aa0
c00147c8:	84 c0                	test   al,al
c00147ca:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00147ce:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00147d1:	a0 a8 3d 02 c0       	mov    al,ds:0xc0023da8
c00147d6:	38 c2                	cmp    dl,al
c00147d8:	74 1c                	je     c00147f6 <sendKeyboardToken(KeyboardToken)+0x54>
c00147da:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00147dd:	a2 a8 3d 02 c0       	mov    ds:0xc0023da8,al
c00147e2:	a0 a8 3d 02 c0       	mov    al,ds:0xc0023da8
c00147e7:	0f b6 c0             	movzx  eax,al
c00147ea:	83 ec 0c             	sub    esp,0xc
c00147ed:	50                   	push   eax
c00147ee:	e8 93 b4 ff ff       	call   c000fc86 <setTerminalScrollLock(bool)>
c00147f3:	83 c4 10             	add    esp,0x10
c00147f6:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00147f9:	84 c0                	test   al,al
c00147fb:	0f 84 ae 00 00 00    	je     c00148af <sendKeyboardToken(KeyboardToken)+0x10d>
c0014801:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014804:	66 3d 10 03          	cmp    ax,0x310
c0014808:	75 06                	jne    c0014810 <sendKeyboardToken(KeyboardToken)+0x6e>
c001480a:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0014810:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014813:	66 3d 11 03          	cmp    ax,0x311
c0014817:	75 06                	jne    c001481f <sendKeyboardToken(KeyboardToken)+0x7d>
c0014819:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001481f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014822:	66 3d 12 03          	cmp    ax,0x312
c0014826:	75 06                	jne    c001482e <sendKeyboardToken(KeyboardToken)+0x8c>
c0014828:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001482e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014831:	66 3d 13 03          	cmp    ax,0x313
c0014835:	75 06                	jne    c001483d <sendKeyboardToken(KeyboardToken)+0x9b>
c0014837:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001483d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014840:	66 3d 14 03          	cmp    ax,0x314
c0014844:	75 06                	jne    c001484c <sendKeyboardToken(KeyboardToken)+0xaa>
c0014846:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001484c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001484f:	66 3d 15 03          	cmp    ax,0x315
c0014853:	75 06                	jne    c001485b <sendKeyboardToken(KeyboardToken)+0xb9>
c0014855:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001485b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001485e:	66 3d 16 03          	cmp    ax,0x316
c0014862:	75 06                	jne    c001486a <sendKeyboardToken(KeyboardToken)+0xc8>
c0014864:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001486a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001486d:	66 3d 17 03          	cmp    ax,0x317
c0014871:	75 06                	jne    c0014879 <sendKeyboardToken(KeyboardToken)+0xd7>
c0014873:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0014879:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001487c:	66 3d 18 03          	cmp    ax,0x318
c0014880:	75 06                	jne    c0014888 <sendKeyboardToken(KeyboardToken)+0xe6>
c0014882:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0014888:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001488b:	66 3d 19 03          	cmp    ax,0x319
c001488f:	75 06                	jne    c0014897 <sendKeyboardToken(KeyboardToken)+0xf5>
c0014891:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0014897:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001489a:	66 3d 1a 03          	cmp    ax,0x31a
c001489e:	0f 85 c9 00 00 00    	jne    c001496d <sendKeyboardToken(KeyboardToken)+0x1cb>
c00148a4:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00148aa:	e9 be 00 00 00       	jmp    c001496d <sendKeyboardToken(KeyboardToken)+0x1cb>
c00148af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148b2:	66 3d 10 03          	cmp    ax,0x310
c00148b6:	75 0a                	jne    c00148c2 <sendKeyboardToken(KeyboardToken)+0x120>
c00148b8:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00148be:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00148c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148c5:	66 3d 11 03          	cmp    ax,0x311
c00148c9:	75 0a                	jne    c00148d5 <sendKeyboardToken(KeyboardToken)+0x133>
c00148cb:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00148d1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00148d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148d8:	66 3d 12 03          	cmp    ax,0x312
c00148dc:	75 0a                	jne    c00148e8 <sendKeyboardToken(KeyboardToken)+0x146>
c00148de:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00148e4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00148e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148eb:	66 3d 13 03          	cmp    ax,0x313
c00148ef:	75 0a                	jne    c00148fb <sendKeyboardToken(KeyboardToken)+0x159>
c00148f1:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00148f7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00148fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148fe:	66 3d 14 03          	cmp    ax,0x314
c0014902:	75 0a                	jne    c001490e <sendKeyboardToken(KeyboardToken)+0x16c>
c0014904:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001490a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001490e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014911:	66 3d 15 03          	cmp    ax,0x315
c0014915:	75 0a                	jne    c0014921 <sendKeyboardToken(KeyboardToken)+0x17f>
c0014917:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001491d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014921:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014924:	66 3d 16 03          	cmp    ax,0x316
c0014928:	75 0a                	jne    c0014934 <sendKeyboardToken(KeyboardToken)+0x192>
c001492a:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0014930:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014934:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014937:	66 3d 17 03          	cmp    ax,0x317
c001493b:	75 0a                	jne    c0014947 <sendKeyboardToken(KeyboardToken)+0x1a5>
c001493d:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0014943:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001494a:	66 3d 18 03          	cmp    ax,0x318
c001494e:	75 0a                	jne    c001495a <sendKeyboardToken(KeyboardToken)+0x1b8>
c0014950:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0014956:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001495a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001495d:	66 3d 19 03          	cmp    ax,0x319
c0014961:	75 0a                	jne    c001496d <sendKeyboardToken(KeyboardToken)+0x1cb>
c0014963:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0014969:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001496d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014970:	66 3d 00 02          	cmp    ax,0x200
c0014974:	75 2a                	jne    c00149a0 <sendKeyboardToken(KeyboardToken)+0x1fe>
c0014976:	a0 a0 3d 02 c0       	mov    al,ds:0xc0023da0
c001497b:	83 f0 01             	xor    eax,0x1
c001497e:	84 c0                	test   al,al
c0014980:	74 1e                	je     c00149a0 <sendKeyboardToken(KeyboardToken)+0x1fe>
c0014982:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c0014987:	6a 01                	push   0x1
c0014989:	6a 00                	push   0x0
c001498b:	68 c4 46 01 c0       	push   0xc00146c4
c0014990:	50                   	push   eax
c0014991:	e8 a0 98 ff ff       	call   c000e236 <Process::createThread(void (*)(void*), void*, int)>
c0014996:	83 c4 10             	add    esp,0x10
c0014999:	c6 05 a0 3d 02 c0 01 	mov    BYTE PTR ds:0xc0023da0,0x1
c00149a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149a3:	66 3d 1d 03          	cmp    ax,0x31d
c00149a7:	75 06                	jne    c00149af <sendKeyboardToken(KeyboardToken)+0x20d>
c00149a9:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00149af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149b2:	66 3d 1c 03          	cmp    ax,0x31c
c00149b6:	75 06                	jne    c00149be <sendKeyboardToken(KeyboardToken)+0x21c>
c00149b8:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00149be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149c1:	66 3d 1b 03          	cmp    ax,0x31b
c00149c5:	75 06                	jne    c00149cd <sendKeyboardToken(KeyboardToken)+0x22b>
c00149c7:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00149cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149d0:	66 3d 1e 03          	cmp    ax,0x31e
c00149d4:	75 06                	jne    c00149dc <sendKeyboardToken(KeyboardToken)+0x23a>
c00149d6:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00149dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149df:	66 3d 1f 03          	cmp    ax,0x31f
c00149e3:	75 06                	jne    c00149eb <sendKeyboardToken(KeyboardToken)+0x249>
c00149e5:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00149eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149ee:	66 3d 1a 03          	cmp    ax,0x31a
c00149f2:	75 06                	jne    c00149fa <sendKeyboardToken(KeyboardToken)+0x258>
c00149f4:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00149fa:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00149fe:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014a01:	83 f0 01             	xor    eax,0x1
c0014a04:	84 c0                	test   al,al
c0014a06:	74 77                	je     c0014a7f <sendKeyboardToken(KeyboardToken)+0x2dd>
c0014a08:	a0 a1 3a 02 c0       	mov    al,ds:0xc0023aa1
c0014a0d:	84 c0                	test   al,al
c0014a0f:	74 41                	je     c0014a52 <sendKeyboardToken(KeyboardToken)+0x2b0>
c0014a11:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014a15:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0014a19:	74 2b                	je     c0014a46 <sendKeyboardToken(KeyboardToken)+0x2a4>
c0014a1b:	8b 15 a4 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023da4
c0014a21:	89 d0                	mov    eax,edx
c0014a23:	c1 e0 02             	shl    eax,0x2
c0014a26:	01 d0                	add    eax,edx
c0014a28:	01 c0                	add    eax,eax
c0014a2a:	a3 a4 3d 02 c0       	mov    ds:0xc0023da4,eax
c0014a2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a32:	0f b7 c0             	movzx  eax,ax
c0014a35:	8d 50 d0             	lea    edx,[eax-0x30]
c0014a38:	a1 a4 3d 02 c0       	mov    eax,ds:0xc0023da4
c0014a3d:	01 d0                	add    eax,edx
c0014a3f:	a3 a4 3d 02 c0       	mov    ds:0xc0023da4,eax
c0014a44:	eb 6d                	jmp    c0014ab3 <sendKeyboardToken(KeyboardToken)+0x311>
c0014a46:	c7 05 a4 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023da4,0x0
c0014a50:	eb 61                	jmp    c0014ab3 <sendKeyboardToken(KeyboardToken)+0x311>
c0014a52:	a1 a4 3d 02 c0       	mov    eax,ds:0xc0023da4
c0014a57:	85 c0                	test   eax,eax
c0014a59:	74 18                	je     c0014a73 <sendKeyboardToken(KeyboardToken)+0x2d1>
c0014a5b:	a1 a4 3d 02 c0       	mov    eax,ds:0xc0023da4
c0014a60:	0f b6 c0             	movzx  eax,al
c0014a63:	83 ec 0c             	sub    esp,0xc
c0014a66:	50                   	push   eax
c0014a67:	e8 ca fc ff ff       	call   c0014736 <sendKeyToTerminal(unsigned char)>
c0014a6c:	83 c4 10             	add    esp,0x10
c0014a6f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014a73:	c7 05 a4 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023da4,0x0
c0014a7d:	eb 34                	jmp    c0014ab3 <sendKeyboardToken(KeyboardToken)+0x311>
c0014a7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a82:	66 3d 01 01          	cmp    ax,0x101
c0014a86:	75 2b                	jne    c0014ab3 <sendKeyboardToken(KeyboardToken)+0x311>
c0014a88:	a1 a4 3d 02 c0       	mov    eax,ds:0xc0023da4
c0014a8d:	85 c0                	test   eax,eax
c0014a8f:	74 18                	je     c0014aa9 <sendKeyboardToken(KeyboardToken)+0x307>
c0014a91:	a1 a4 3d 02 c0       	mov    eax,ds:0xc0023da4
c0014a96:	0f b6 c0             	movzx  eax,al
c0014a99:	83 ec 0c             	sub    esp,0xc
c0014a9c:	50                   	push   eax
c0014a9d:	e8 94 fc ff ff       	call   c0014736 <sendKeyToTerminal(unsigned char)>
c0014aa2:	83 c4 10             	add    esp,0x10
c0014aa5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014aa9:	c7 05 a4 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023da4,0x0
c0014ab3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0014ab6:	83 f0 01             	xor    eax,0x1
c0014ab9:	84 c0                	test   al,al
c0014abb:	74 4c                	je     c0014b09 <sendKeyboardToken(KeyboardToken)+0x367>
c0014abd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014ac0:	83 f0 01             	xor    eax,0x1
c0014ac3:	84 c0                	test   al,al
c0014ac5:	74 42                	je     c0014b09 <sendKeyboardToken(KeyboardToken)+0x367>
c0014ac7:	a0 a0 3a 02 c0       	mov    al,ds:0xc0023aa0
c0014acc:	83 f0 01             	xor    eax,0x1
c0014acf:	84 c0                	test   al,al
c0014ad1:	74 36                	je     c0014b09 <sendKeyboardToken(KeyboardToken)+0x367>
c0014ad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ad6:	66 83 f8 1f          	cmp    ax,0x1f
c0014ada:	76 09                	jbe    c0014ae5 <sendKeyboardToken(KeyboardToken)+0x343>
c0014adc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014adf:	66 83 f8 7e          	cmp    ax,0x7e
c0014ae3:	76 12                	jbe    c0014af7 <sendKeyboardToken(KeyboardToken)+0x355>
c0014ae5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae8:	66 83 f8 0a          	cmp    ax,0xa
c0014aec:	74 09                	je     c0014af7 <sendKeyboardToken(KeyboardToken)+0x355>
c0014aee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af1:	66 83 f8 08          	cmp    ax,0x8
c0014af5:	75 12                	jne    c0014b09 <sendKeyboardToken(KeyboardToken)+0x367>
c0014af7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014afa:	0f b6 c0             	movzx  eax,al
c0014afd:	83 ec 0c             	sub    esp,0xc
c0014b00:	50                   	push   eax
c0014b01:	e8 30 fc ff ff       	call   c0014736 <sendKeyToTerminal(unsigned char)>
c0014b06:	83 c4 10             	add    esp,0x10
c0014b09:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0014b0c:	83 f0 01             	xor    eax,0x1
c0014b0f:	84 c0                	test   al,al
c0014b11:	74 4f                	je     c0014b62 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014b13:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014b16:	83 f0 01             	xor    eax,0x1
c0014b19:	84 c0                	test   al,al
c0014b1b:	74 45                	je     c0014b62 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014b1d:	a0 a0 3a 02 c0       	mov    al,ds:0xc0023aa0
c0014b22:	84 c0                	test   al,al
c0014b24:	74 3c                	je     c0014b62 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014b26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b29:	66 83 f8 3f          	cmp    ax,0x3f
c0014b2d:	76 33                	jbe    c0014b62 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014b2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b32:	66 83 f8 7f          	cmp    ax,0x7f
c0014b36:	77 2a                	ja     c0014b62 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014b38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b3b:	88 c2                	mov    dl,al
c0014b3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b40:	66 83 f8 5f          	cmp    ax,0x5f
c0014b44:	76 04                	jbe    c0014b4a <sendKeyboardToken(KeyboardToken)+0x3a8>
c0014b46:	b0 20                	mov    al,0x20
c0014b48:	eb 02                	jmp    c0014b4c <sendKeyboardToken(KeyboardToken)+0x3aa>
c0014b4a:	b0 00                	mov    al,0x0
c0014b4c:	29 c2                	sub    edx,eax
c0014b4e:	88 d0                	mov    al,dl
c0014b50:	83 e8 40             	sub    eax,0x40
c0014b53:	0f b6 c0             	movzx  eax,al
c0014b56:	83 ec 0c             	sub    esp,0xc
c0014b59:	50                   	push   eax
c0014b5a:	e8 d7 fb ff ff       	call   c0014736 <sendKeyToTerminal(unsigned char)>
c0014b5f:	83 c4 10             	add    esp,0x10
c0014b62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b65:	66 3d 00 03          	cmp    ax,0x300
c0014b69:	75 0f                	jne    c0014b7a <sendKeyboardToken(KeyboardToken)+0x3d8>
c0014b6b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014b6e:	83 f0 01             	xor    eax,0x1
c0014b71:	84 c0                	test   al,al
c0014b73:	74 05                	je     c0014b7a <sendKeyboardToken(KeyboardToken)+0x3d8>
c0014b75:	e8 33 b9 ff ff       	call   c00104ad <doTerminalCycle()>
c0014b7a:	90                   	nop
c0014b7b:	c9                   	leave  
c0014b7c:	c3                   	ret    

c0014b7d <clearInternalKeybuffer(VgaText*)>:
c0014b7d:	55                   	push   ebp
c0014b7e:	89 e5                	mov    ebp,esp
c0014b80:	83 ec 08             	sub    esp,0x8
c0014b83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b86:	05 34 11 00 00       	add    eax,0x1134
c0014b8b:	83 ec 0c             	sub    esp,0xc
c0014b8e:	50                   	push   eax
c0014b8f:	e8 91 ba fe ff       	call   c0000625 <strlen>
c0014b94:	83 c4 10             	add    esp,0x10
c0014b97:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014b9a:	81 c2 34 11 00 00    	add    edx,0x1134
c0014ba0:	83 ec 04             	sub    esp,0x4
c0014ba3:	50                   	push   eax
c0014ba4:	6a 00                	push   0x0
c0014ba6:	52                   	push   edx
c0014ba7:	e8 5c ba fe ff       	call   c0000608 <memset>
c0014bac:	83 c4 10             	add    esp,0x10
c0014baf:	90                   	nop
c0014bb0:	c9                   	leave  
c0014bb1:	c3                   	ret    

c0014bb2 <readKeyboard(VgaText*, char*, unsigned long)>:
c0014bb2:	55                   	push   ebp
c0014bb3:	89 e5                	mov    ebp,esp
c0014bb5:	83 ec 18             	sub    esp,0x18
c0014bb8:	fb                   	sti    
c0014bb9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0014bc0:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0014bc4:	74 77                	je     c0014c3d <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0014bc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bc9:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0014bcf:	84 c0                	test   al,al
c0014bd1:	75 02                	jne    c0014bd5 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0014bd3:	eb f1                	jmp    c0014bc6 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0014bd5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014bd8:	8d 50 01             	lea    edx,[eax+0x1]
c0014bdb:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0014bde:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014be1:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0014be7:	88 10                	mov    BYTE PTR [eax],dl
c0014be9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bec:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0014bf2:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0014bf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bf8:	05 34 11 00 00       	add    eax,0x1134
c0014bfd:	83 ec 0c             	sub    esp,0xc
c0014c00:	50                   	push   eax
c0014c01:	e8 1f ba fe ff       	call   c0000625 <strlen>
c0014c06:	83 c4 10             	add    esp,0x10
c0014c09:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014c0c:	81 c2 34 11 00 00    	add    edx,0x1134
c0014c12:	8d 4a 01             	lea    ecx,[edx+0x1]
c0014c15:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014c18:	81 c2 34 11 00 00    	add    edx,0x1134
c0014c1e:	83 ec 04             	sub    esp,0x4
c0014c21:	50                   	push   eax
c0014c22:	51                   	push   ecx
c0014c23:	52                   	push   edx
c0014c24:	e8 71 b9 fe ff       	call   c000059a <memmove>
c0014c29:	83 c4 10             	add    esp,0x10
c0014c2c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0014c2f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c32:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0014c36:	75 88                	jne    c0014bc0 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0014c38:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c3b:	eb 03                	jmp    c0014c40 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0014c3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c40:	c9                   	leave  
c0014c41:	c3                   	ret    

c0014c42 <Keyboard::Keyboard(char const*)>:
c0014c42:	83 ec 0c             	sub    esp,0xc
c0014c45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c49:	83 ec 08             	sub    esp,0x8
c0014c4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c50:	50                   	push   eax
c0014c51:	e8 c8 ea ff ff       	call   c001371e <Device::Device(char const*)>
c0014c56:	83 c4 10             	add    esp,0x10
c0014c59:	ba a8 12 02 c0       	mov    edx,0xc00212a8
c0014c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c62:	89 10                	mov    DWORD PTR [eax],edx
c0014c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c68:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0014c72:	c6 05 84 39 02 c0 01 	mov    BYTE PTR ds:0xc0023984,0x1
c0014c79:	90                   	nop
c0014c7a:	83 c4 0c             	add    esp,0xc
c0014c7d:	c3                   	ret    

c0014c7e <Keyboard::~Keyboard()>:
c0014c7e:	83 ec 0c             	sub    esp,0xc
c0014c81:	ba a8 12 02 c0       	mov    edx,0xc00212a8
c0014c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c8a:	89 10                	mov    DWORD PTR [eax],edx
c0014c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c90:	83 ec 0c             	sub    esp,0xc
c0014c93:	50                   	push   eax
c0014c94:	e8 37 e7 ff ff       	call   c00133d0 <Device::~Device()>
c0014c99:	83 c4 10             	add    esp,0x10
c0014c9c:	90                   	nop
c0014c9d:	83 c4 0c             	add    esp,0xc
c0014ca0:	c3                   	ret    
c0014ca1:	90                   	nop

c0014ca2 <Keyboard::~Keyboard()>:
c0014ca2:	83 ec 0c             	sub    esp,0xc
c0014ca5:	83 ec 0c             	sub    esp,0xc
c0014ca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cac:	e8 cd ff ff ff       	call   c0014c7e <Keyboard::~Keyboard()>
c0014cb1:	83 c4 10             	add    esp,0x10
c0014cb4:	83 ec 08             	sub    esp,0x8
c0014cb7:	68 5c 01 00 00       	push   0x15c
c0014cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cc0:	e8 6e d5 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c0014cc5:	83 c4 10             	add    esp,0x10
c0014cc8:	83 c4 0c             	add    esp,0xc
c0014ccb:	c3                   	ret    

c0014ccc <LogicalDisk::close(int, int, void*)>:
c0014ccc:	83 c8 ff             	or     eax,0xffffffff
c0014ccf:	c3                   	ret    

c0014cd0 <LogicalDisk::~LogicalDisk()>:
c0014cd0:	83 ec 0c             	sub    esp,0xc
c0014cd3:	ba 58 13 02 c0       	mov    edx,0xc0021358
c0014cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cdc:	89 10                	mov    DWORD PTR [eax],edx
c0014cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ce2:	83 ec 0c             	sub    esp,0xc
c0014ce5:	50                   	push   eax
c0014ce6:	e8 e5 e6 ff ff       	call   c00133d0 <Device::~Device()>
c0014ceb:	83 c4 10             	add    esp,0x10
c0014cee:	90                   	nop
c0014cef:	83 c4 0c             	add    esp,0xc
c0014cf2:	c3                   	ret    
c0014cf3:	90                   	nop

c0014cf4 <LogicalDisk::~LogicalDisk()>:
c0014cf4:	83 ec 0c             	sub    esp,0xc
c0014cf7:	83 ec 0c             	sub    esp,0xc
c0014cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cfe:	e8 cd ff ff ff       	call   c0014cd0 <LogicalDisk::~LogicalDisk()>
c0014d03:	83 c4 10             	add    esp,0x10
c0014d06:	83 ec 08             	sub    esp,0x8
c0014d09:	68 74 01 00 00       	push   0x174
c0014d0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d12:	e8 1c d5 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c0014d17:	83 c4 10             	add    esp,0x10
c0014d1a:	83 c4 0c             	add    esp,0xc
c0014d1d:	c3                   	ret    

c0014d1e <LogicalDisk::open(int, int, void*)>:
c0014d1e:	83 ec 18             	sub    esp,0x18
c0014d21:	68 d4 12 02 c0       	push   0xc00212d4
c0014d26:	e8 5d 80 ff ff       	call   c000cd88 <panic(char const*)>
c0014d2b:	83 c8 ff             	or     eax,0xffffffff
c0014d2e:	83 c4 1c             	add    esp,0x1c
c0014d31:	c3                   	ret    

c0014d32 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0014d32:	53                   	push   ebx
c0014d33:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014d37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014d3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014d3f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0014d45:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0014d4b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0014d51:	77 10                	ja     c0014d63 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0014d53:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0014d59:	89 d3                	mov    ebx,edx
c0014d5b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0014d61:	72 05                	jb     c0014d68 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0014d63:	83 c8 ff             	or     eax,0xffffffff
c0014d66:	89 c2                	mov    edx,eax
c0014d68:	5b                   	pop    ebx
c0014d69:	c3                   	ret    

c0014d6a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0014d6a:	56                   	push   esi
c0014d6b:	83 c8 ff             	or     eax,0xffffffff
c0014d6e:	53                   	push   ebx
c0014d6f:	89 c2                	mov    edx,eax
c0014d71:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014d75:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0014d79:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014d7d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0014d83:	77 27                	ja     c0014dac <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0014d85:	89 d8                	mov    eax,ebx
c0014d87:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0014d8d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0014d93:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014d98:	89 c2                	mov    edx,eax
c0014d9a:	73 10                	jae    c0014dac <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0014d9c:	89 c8                	mov    eax,ecx
c0014d9e:	89 da                	mov    edx,ebx
c0014da0:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0014da6:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0014dac:	5b                   	pop    ebx
c0014dad:	5e                   	pop    esi
c0014dae:	c3                   	ret    
c0014daf:	90                   	nop

c0014db0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0014db0:	83 ec 1c             	sub    esp,0x1c
c0014db3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014db7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014dbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014dbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014dc3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014dc7:	89 04 24             	mov    DWORD PTR [esp],eax
c0014dca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014dd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dd6:	83 ec 08             	sub    esp,0x8
c0014dd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ddd:	50                   	push   eax
c0014dde:	e8 3b e9 ff ff       	call   c001371e <Device::Device(char const*)>
c0014de3:	83 c4 10             	add    esp,0x10
c0014de6:	ba 58 13 02 c0       	mov    edx,0xc0021358
c0014deb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014def:	89 10                	mov    DWORD PTR [eax],edx
c0014df1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014df5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014dfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e00:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014e07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e0b:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0014e15:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014e19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014e1d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014e21:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0014e27:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0014e2d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014e31:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014e34:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014e38:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0014e3e:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0014e44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e48:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014e4c:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0014e52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e56:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0014e60:	90                   	nop
c0014e61:	83 c4 1c             	add    esp,0x1c
c0014e64:	c3                   	ret    
c0014e65:	90                   	nop

c0014e66 <LogicalDisk::assignDriveLetter()>:
c0014e66:	55                   	push   ebp
c0014e67:	57                   	push   edi
c0014e68:	56                   	push   esi
c0014e69:	53                   	push   ebx
c0014e6a:	83 ec 14             	sub    esp,0x14
c0014e6d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e71:	8b 3d c0 3d 02 c0    	mov    edi,DWORD PTR ds:0xc0023dc0
c0014e77:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0014e7d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0014e81:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0014e87:	8b 3d c4 3d 02 c0    	mov    edi,DWORD PTR ds:0xc0023dc4
c0014e8d:	3c 01                	cmp    al,0x1
c0014e8f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0014e93:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0014e97:	19 c0                	sbb    eax,eax
c0014e99:	83 e0 02             	and    eax,0x2
c0014e9c:	83 c0 41             	add    eax,0x41
c0014e9f:	0f be e8             	movsx  ebp,al
c0014ea2:	3c 43                	cmp    al,0x43
c0014ea4:	75 10                	jne    c0014eb6 <LogicalDisk::assignDriveLetter()+0x50>
c0014ea6:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0014ead:	75 5d                	jne    c0014f0c <LogicalDisk::assignDriveLetter()+0xa6>
c0014eaf:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014eb4:	75 56                	jne    c0014f0c <LogicalDisk::assignDriveLetter()+0xa6>
c0014eb6:	8d 75 bf             	lea    esi,[ebp-0x41]
c0014eb9:	ba 01 00 00 00       	mov    edx,0x1
c0014ebe:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0014ec2:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0014ec6:	d3 e2                	shl    edx,cl
c0014ec8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014ecc:	89 d7                	mov    edi,edx
c0014ece:	89 d6                	mov    esi,edx
c0014ed0:	c1 ff 1f             	sar    edi,0x1f
c0014ed3:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0014ed7:	21 f9                	and    ecx,edi
c0014ed9:	09 d1                	or     ecx,edx
c0014edb:	75 2f                	jne    c0014f0c <LogicalDisk::assignDriveLetter()+0xa6>
c0014edd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0014ee1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014ee5:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0014eeb:	09 f2                	or     edx,esi
c0014eed:	89 15 c0 3d 02 c0    	mov    DWORD PTR ds:0xc0023dc0,edx
c0014ef3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014ef7:	09 fa                	or     edx,edi
c0014ef9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0014efd:	89 15 c4 3d 02 c0    	mov    DWORD PTR ds:0xc0023dc4,edx
c0014f03:	89 1c bd e0 3d 02 c0 	mov    DWORD PTR [edi*4-0x3ffdc220],ebx
c0014f0a:	eb 08                	jmp    c0014f14 <LogicalDisk::assignDriveLetter()+0xae>
c0014f0c:	45                   	inc    ebp
c0014f0d:	40                   	inc    eax
c0014f0e:	3c 5b                	cmp    al,0x5b
c0014f10:	75 90                	jne    c0014ea2 <LogicalDisk::assignDriveLetter()+0x3c>
c0014f12:	31 c0                	xor    eax,eax
c0014f14:	83 c4 14             	add    esp,0x14
c0014f17:	5b                   	pop    ebx
c0014f18:	5e                   	pop    esi
c0014f19:	5f                   	pop    edi
c0014f1a:	5d                   	pop    ebp
c0014f1b:	c3                   	ret    

c0014f1c <LogicalDisk::mount()>:
c0014f1c:	56                   	push   esi
c0014f1d:	53                   	push   ebx
c0014f1e:	51                   	push   ecx
c0014f1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014f23:	8b 1d 40 39 02 c0    	mov    ebx,DWORD PTR ds:0xc0023940
c0014f29:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0014f33:	85 db                	test   ebx,ebx
c0014f35:	74 50                	je     c0014f87 <LogicalDisk::mount()+0x6b>
c0014f37:	e8 bb 91 ff ff       	call   c000e0f7 <getIRQNestingLevel()>
c0014f3c:	52                   	push   edx
c0014f3d:	52                   	push   edx
c0014f3e:	50                   	push   eax
c0014f3f:	68 f8 12 02 c0       	push   0xc00212f8
c0014f44:	e8 21 7d ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0014f49:	83 c4 0c             	add    esp,0xc
c0014f4c:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0014f53:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014f55:	83 e8 41             	sub    eax,0x41
c0014f58:	50                   	push   eax
c0014f59:	56                   	push   esi
c0014f5a:	53                   	push   ebx
c0014f5b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0014f5e:	83 c4 10             	add    esp,0x10
c0014f61:	84 c0                	test   al,al
c0014f63:	74 08                	je     c0014f6d <LogicalDisk::mount()+0x51>
c0014f65:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0014f6b:	eb 1c                	jmp    c0014f89 <LogicalDisk::mount()+0x6d>
c0014f6d:	e8 85 91 ff ff       	call   c000e0f7 <getIRQNestingLevel()>
c0014f72:	51                   	push   ecx
c0014f73:	51                   	push   ecx
c0014f74:	50                   	push   eax
c0014f75:	68 13 13 02 c0       	push   0xc0021313
c0014f7a:	e8 eb 7c ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0014f7f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0014f82:	83 c4 10             	add    esp,0x10
c0014f85:	eb ac                	jmp    c0014f33 <LogicalDisk::mount()+0x17>
c0014f87:	31 c0                	xor    eax,eax
c0014f89:	5a                   	pop    edx
c0014f8a:	5b                   	pop    ebx
c0014f8b:	5e                   	pop    esi
c0014f8c:	c3                   	ret    
c0014f8d:	90                   	nop

c0014f8e <LogicalDisk::unmount()>:
c0014f8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f92:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0014f9c:	c3                   	ret    
c0014f9d:	90                   	nop

c0014f9e <LogicalDisk::unassignDriveLetter()>:
c0014f9e:	57                   	push   edi
c0014f9f:	56                   	push   esi
c0014fa0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014fa4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0014fab:	84 c9                	test   cl,cl
c0014fad:	75 0f                	jne    c0014fbe <LogicalDisk::unassignDriveLetter()+0x20>
c0014faf:	c7 44 24 0c 2e 13 02 c0 	mov    DWORD PTR [esp+0xc],0xc002132e
c0014fb7:	5e                   	pop    esi
c0014fb8:	5f                   	pop    edi
c0014fb9:	e9 ca 7d ff ff       	jmp    c000cd88 <panic(char const*)>
c0014fbe:	83 e9 41             	sub    ecx,0x41
c0014fc1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0014fc8:	b8 01 00 00 00       	mov    eax,0x1
c0014fcd:	c7 04 8d e0 3d 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdc220],0x0
c0014fd8:	d3 e0                	shl    eax,cl
c0014fda:	89 c7                	mov    edi,eax
c0014fdc:	f7 d0                	not    eax
c0014fde:	c1 ff 1f             	sar    edi,0x1f
c0014fe1:	21 05 c0 3d 02 c0    	and    DWORD PTR ds:0xc0023dc0,eax
c0014fe7:	89 fe                	mov    esi,edi
c0014fe9:	f7 d6                	not    esi
c0014feb:	21 35 c4 3d 02 c0    	and    DWORD PTR ds:0xc0023dc4,esi
c0014ff1:	5e                   	pop    esi
c0014ff2:	5f                   	pop    edi
c0014ff3:	c3                   	ret    

c0014ff4 <LogicalDisk::read(unsigned long long, int, void*)>:
c0014ff4:	57                   	push   edi
c0014ff5:	56                   	push   esi
c0014ff6:	53                   	push   ebx
c0014ff7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014ffb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014fff:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015003:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015007:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001500d:	77 41                	ja     c0015050 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001500f:	99                   	cdq    
c0015010:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015016:	01 c8                	add    eax,ecx
c0015018:	11 da                	adc    edx,ebx
c001501a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015020:	19 d7                	sbb    edi,edx
c0015022:	72 33                	jb     c0015057 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015024:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001502a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015030:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015034:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015038:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001503e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015048:	5b                   	pop    ebx
c0015049:	5e                   	pop    esi
c001504a:	5f                   	pop    edi
c001504b:	e9 9a 09 00 00       	jmp    c00159ea <VCache::read(unsigned long long, int, void*)>
c0015050:	b8 05 00 00 00       	mov    eax,0x5
c0015055:	eb 05                	jmp    c001505c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015057:	b8 07 00 00 00       	mov    eax,0x7
c001505c:	5b                   	pop    ebx
c001505d:	5e                   	pop    esi
c001505e:	5f                   	pop    edi
c001505f:	c3                   	ret    

c0015060 <LogicalDisk::write(unsigned long long, int, void*)>:
c0015060:	57                   	push   edi
c0015061:	56                   	push   esi
c0015062:	53                   	push   ebx
c0015063:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015067:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001506b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001506f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015073:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015079:	77 41                	ja     c00150bc <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001507b:	99                   	cdq    
c001507c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015082:	01 c8                	add    eax,ecx
c0015084:	11 da                	adc    edx,ebx
c0015086:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001508c:	19 d7                	sbb    edi,edx
c001508e:	72 33                	jb     c00150c3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015090:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015096:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001509c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00150a0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00150a4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00150aa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00150b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00150b4:	5b                   	pop    ebx
c00150b5:	5e                   	pop    esi
c00150b6:	5f                   	pop    edi
c00150b7:	e9 4a 08 00 00       	jmp    c0015906 <VCache::write(unsigned long long, int, void*)>
c00150bc:	b8 05 00 00 00       	mov    eax,0x5
c00150c1:	eb 05                	jmp    c00150c8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00150c3:	b8 07 00 00 00       	mov    eax,0x7
c00150c8:	5b                   	pop    ebx
c00150c9:	5e                   	pop    esi
c00150ca:	5f                   	pop    edi
c00150cb:	c3                   	ret    

c00150cc <Mouse::Mouse(char const*)>:
c00150cc:	83 ec 0c             	sub    esp,0xc
c00150cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150d3:	83 ec 08             	sub    esp,0x8
c00150d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00150da:	50                   	push   eax
c00150db:	e8 3e e6 ff ff       	call   c001371e <Device::Device(char const*)>
c00150e0:	83 c4 10             	add    esp,0x10
c00150e3:	ba 84 13 02 c0       	mov    edx,0xc0021384
c00150e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150ec:	89 10                	mov    DWORD PTR [eax],edx
c00150ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150f2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00150fc:	90                   	nop
c00150fd:	83 c4 0c             	add    esp,0xc
c0015100:	c3                   	ret    
c0015101:	90                   	nop

c0015102 <Mouse::~Mouse()>:
c0015102:	83 ec 0c             	sub    esp,0xc
c0015105:	ba 84 13 02 c0       	mov    edx,0xc0021384
c001510a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001510e:	89 10                	mov    DWORD PTR [eax],edx
c0015110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015114:	83 ec 0c             	sub    esp,0xc
c0015117:	50                   	push   eax
c0015118:	e8 b3 e2 ff ff       	call   c00133d0 <Device::~Device()>
c001511d:	83 c4 10             	add    esp,0x10
c0015120:	90                   	nop
c0015121:	83 c4 0c             	add    esp,0xc
c0015124:	c3                   	ret    
c0015125:	90                   	nop

c0015126 <Mouse::~Mouse()>:
c0015126:	83 ec 0c             	sub    esp,0xc
c0015129:	83 ec 0c             	sub    esp,0xc
c001512c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015130:	e8 cd ff ff ff       	call   c0015102 <Mouse::~Mouse()>
c0015135:	83 c4 10             	add    esp,0x10
c0015138:	83 ec 08             	sub    esp,0x8
c001513b:	68 58 01 00 00       	push   0x158
c0015140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015144:	e8 ea d0 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c0015149:	83 c4 10             	add    esp,0x10
c001514c:	83 c4 0c             	add    esp,0xc
c001514f:	c3                   	ret    

c0015150 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015150:	55                   	push   ebp
c0015151:	57                   	push   edi
c0015152:	56                   	push   esi
c0015153:	53                   	push   ebx
c0015154:	81 ec 28 01 00 00    	sub    esp,0x128
c001515a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015161:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015168:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001516f:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015176:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001517a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001517e:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015185:	e8 86 e6 ff ff       	call   c0013810 <Device::getName()>
c001518a:	5a                   	pop    edx
c001518b:	59                   	pop    ecx
c001518c:	50                   	push   eax
c001518d:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015191:	55                   	push   ebp
c0015192:	e8 10 b5 fe ff       	call   c00006a7 <strcpy>
c0015197:	5b                   	pop    ebx
c0015198:	58                   	pop    eax
c0015199:	68 a8 13 02 c0       	push   0xc00213a8
c001519e:	55                   	push   ebp
c001519f:	e8 ba b5 fe ff       	call   c000075e <strcat>
c00151a4:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00151ab:	e8 74 d0 ff ff       	call   c0012224 <operator new(unsigned long)>
c00151b0:	83 c4 0c             	add    esp,0xc
c00151b3:	89 c3                	mov    ebx,eax
c00151b5:	57                   	push   edi
c00151b6:	56                   	push   esi
c00151b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00151bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00151bf:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00151c6:	55                   	push   ebp
c00151c7:	50                   	push   eax
c00151c8:	e8 e3 fb ff ff       	call   c0014db0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00151cd:	83 c4 14             	add    esp,0x14
c00151d0:	53                   	push   ebx
c00151d1:	e8 90 fc ff ff       	call   c0014e66 <LogicalDisk::assignDriveLetter()>
c00151d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151d9:	e8 3e fd ff ff       	call   c0014f1c <LogicalDisk::mount()>
c00151de:	58                   	pop    eax
c00151df:	5a                   	pop    edx
c00151e0:	53                   	push   ebx
c00151e1:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00151e8:	e8 41 e3 ff ff       	call   c001352e <Device::addChild(Device*)>
c00151ed:	81 c4 2c 01 00 00    	add    esp,0x12c
c00151f3:	5b                   	pop    ebx
c00151f4:	5e                   	pop    esi
c00151f5:	5f                   	pop    edi
c00151f6:	5d                   	pop    ebp
c00151f7:	c3                   	ret    

c00151f8 <createPartitionsForDisk(PhysicalDisk*)>:
c00151f8:	55                   	push   ebp
c00151f9:	57                   	push   edi
c00151fa:	56                   	push   esi
c00151fb:	53                   	push   ebx
c00151fc:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015202:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015209:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001520f:	3d 00 02 00 00       	cmp    eax,0x200
c0015214:	74 27                	je     c001523d <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015216:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001521c:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015222:	83 ec 10             	sub    esp,0x10
c0015225:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015229:	99                   	cdq    
c001522a:	c1 e6 0a             	shl    esi,0xa
c001522d:	52                   	push   edx
c001522e:	89 fd                	mov    ebp,edi
c0015230:	50                   	push   eax
c0015231:	55                   	push   ebp
c0015232:	56                   	push   esi
c0015233:	e8 94 8e 00 00       	call   c001e0cc <__udivdi3>
c0015238:	e9 b1 00 00 00       	jmp    c00152ee <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001523d:	83 ec 0c             	sub    esp,0xc
c0015240:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015242:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015246:	56                   	push   esi
c0015247:	6a 01                	push   0x1
c0015249:	6a 00                	push   0x0
c001524b:	6a 00                	push   0x0
c001524d:	53                   	push   ebx
c001524e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015251:	83 c4 20             	add    esp,0x20
c0015254:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001525c:	75 0a                	jne    c0015268 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001525e:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015266:	74 2c                	je     c0015294 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015268:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001526e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015274:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001527a:	83 ec 10             	sub    esp,0x10
c001527d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015281:	89 f7                	mov    edi,esi
c0015283:	c1 e0 0a             	shl    eax,0xa
c0015286:	c1 ff 1f             	sar    edi,0x1f
c0015289:	57                   	push   edi
c001528a:	56                   	push   esi
c001528b:	52                   	push   edx
c001528c:	50                   	push   eax
c001528d:	e8 3a 8e 00 00       	call   c001e0cc <__udivdi3>
c0015292:	eb 5a                	jmp    c00152ee <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015294:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001529b:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00152a2:	83 e1 7f             	and    ecx,0x7f
c00152a5:	83 e0 7f             	and    eax,0x7f
c00152a8:	01 c1                	add    ecx,eax
c00152aa:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00152b1:	83 e0 7f             	and    eax,0x7f
c00152b4:	01 c1                	add    ecx,eax
c00152b6:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00152bd:	83 e0 7f             	and    eax,0x7f
c00152c0:	00 c1                	add    cl,al
c00152c2:	74 41                	je     c0015305 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00152c4:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00152ca:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00152d0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00152d6:	83 ec 10             	sub    esp,0x10
c00152d9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00152dd:	89 f7                	mov    edi,esi
c00152df:	c1 e0 0a             	shl    eax,0xa
c00152e2:	c1 ff 1f             	sar    edi,0x1f
c00152e5:	57                   	push   edi
c00152e6:	56                   	push   esi
c00152e7:	52                   	push   edx
c00152e8:	50                   	push   eax
c00152e9:	e8 de 8d 00 00       	call   c001e0cc <__udivdi3>
c00152ee:	83 c4 14             	add    esp,0x14
c00152f1:	52                   	push   edx
c00152f2:	50                   	push   eax
c00152f3:	6a 00                	push   0x0
c00152f5:	6a 00                	push   0x0
c00152f7:	53                   	push   ebx
c00152f8:	e8 53 fe ff ff       	call   c0015150 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00152fd:	83 c4 20             	add    esp,0x20
c0015300:	e9 79 01 00 00       	jmp    c001547e <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0015305:	89 f0                	mov    eax,esi
c0015307:	31 f6                	xor    esi,esi
c0015309:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015310:	75 02                	jne    c0015314 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0015312:	89 f1                	mov    ecx,esi
c0015314:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001531b:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0015322:	c1 e2 08             	shl    edx,0x8
c0015325:	c1 e7 10             	shl    edi,0x10
c0015328:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015330:	09 fa                	or     edx,edi
c0015332:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001533a:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015341:	83 c0 10             	add    eax,0x10
c0015344:	09 fa                	or     edx,edi
c0015346:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001534d:	c1 e7 18             	shl    edi,0x18
c0015350:	09 fa                	or     edx,edi
c0015352:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0015359:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001535d:	c1 e7 10             	shl    edi,0x10
c0015360:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0015367:	c1 e2 08             	shl    edx,0x8
c001536a:	09 fa                	or     edx,edi
c001536c:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0015373:	09 fa                	or     edx,edi
c0015375:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001537c:	c1 e7 18             	shl    edi,0x18
c001537f:	09 fa                	or     edx,edi
c0015381:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0015385:	46                   	inc    esi
c0015386:	83 fe 04             	cmp    esi,0x4
c0015389:	0f 85 7a ff ff ff    	jne    c0015309 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001538f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015393:	83 f0 01             	xor    eax,0x1
c0015396:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001539a:	75 57                	jne    c00153f3 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001539c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00153a0:	83 f0 01             	xor    eax,0x1
c00153a3:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00153a7:	75 4a                	jne    c00153f3 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00153a9:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00153ad:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00153b5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00153bd:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00153c3:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00153c9:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00153cf:	0f a4 c2 0a          	shld   edx,eax,0xa
c00153d3:	89 f7                	mov    edi,esi
c00153d5:	c1 e0 0a             	shl    eax,0xa
c00153d8:	c1 ff 1f             	sar    edi,0x1f
c00153db:	57                   	push   edi
c00153dc:	56                   	push   esi
c00153dd:	52                   	push   edx
c00153de:	50                   	push   eax
c00153df:	e8 e8 8c 00 00       	call   c001e0cc <__udivdi3>
c00153e4:	83 c4 10             	add    esp,0x10
c00153e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00153eb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00153ef:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00153f3:	84 c9                	test   cl,cl
c00153f5:	74 53                	je     c001544a <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00153f7:	0f b6 c9             	movzx  ecx,cl
c00153fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00153fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015402:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015406:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001540a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001540e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015412:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0015416:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001541a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001541e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015422:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015426:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001542a:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001542e:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0015432:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0015436:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001543a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001543e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015442:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0015446:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001544a:	31 ed                	xor    ebp,ebp
c001544c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0015450:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0015454:	89 f8                	mov    eax,edi
c0015456:	09 f0                	or     eax,esi
c0015458:	74 1e                	je     c0015478 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001545a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001545e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0015462:	89 d1                	mov    ecx,edx
c0015464:	09 c1                	or     ecx,eax
c0015466:	74 10                	je     c0015478 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015468:	83 ec 0c             	sub    esp,0xc
c001546b:	57                   	push   edi
c001546c:	56                   	push   esi
c001546d:	52                   	push   edx
c001546e:	50                   	push   eax
c001546f:	53                   	push   ebx
c0015470:	e8 db fc ff ff       	call   c0015150 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015475:	83 c4 20             	add    esp,0x20
c0015478:	45                   	inc    ebp
c0015479:	83 fd 04             	cmp    ebp,0x4
c001547c:	75 ce                	jne    c001544c <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001547e:	81 c4 5c 02 00 00    	add    esp,0x25c
c0015484:	5b                   	pop    ebx
c0015485:	5e                   	pop    esi
c0015486:	5f                   	pop    edi
c0015487:	5d                   	pop    ebp
c0015488:	c3                   	ret    
c0015489:	90                   	nop

c001548a <Timer::Timer(char const*)>:
c001548a:	83 ec 0c             	sub    esp,0xc
c001548d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015491:	83 ec 08             	sub    esp,0x8
c0015494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015498:	50                   	push   eax
c0015499:	e8 80 e2 ff ff       	call   c001371e <Device::Device(char const*)>
c001549e:	83 c4 10             	add    esp,0x10
c00154a1:	ba bc 13 02 c0       	mov    edx,0xc00213bc
c00154a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154aa:	89 10                	mov    DWORD PTR [eax],edx
c00154ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154b0:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00154ba:	90                   	nop
c00154bb:	83 c4 0c             	add    esp,0xc
c00154be:	c3                   	ret    
c00154bf:	90                   	nop

c00154c0 <Timer::~Timer()>:
c00154c0:	83 ec 0c             	sub    esp,0xc
c00154c3:	ba bc 13 02 c0       	mov    edx,0xc00213bc
c00154c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154cc:	89 10                	mov    DWORD PTR [eax],edx
c00154ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154d2:	83 ec 0c             	sub    esp,0xc
c00154d5:	50                   	push   eax
c00154d6:	e8 f5 de ff ff       	call   c00133d0 <Device::~Device()>
c00154db:	83 c4 10             	add    esp,0x10
c00154de:	90                   	nop
c00154df:	83 c4 0c             	add    esp,0xc
c00154e2:	c3                   	ret    
c00154e3:	90                   	nop

c00154e4 <Timer::~Timer()>:
c00154e4:	83 ec 0c             	sub    esp,0xc
c00154e7:	83 ec 0c             	sub    esp,0xc
c00154ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154ee:	e8 cd ff ff ff       	call   c00154c0 <Timer::~Timer()>
c00154f3:	83 c4 10             	add    esp,0x10
c00154f6:	83 ec 08             	sub    esp,0x8
c00154f9:	68 5c 01 00 00       	push   0x15c
c00154fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015502:	e8 2c cd ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c0015507:	83 c4 10             	add    esp,0x10
c001550a:	83 c4 0c             	add    esp,0xc
c001550d:	c3                   	ret    

c001550e <Timer::read()>:
c001550e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015512:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015518:	c3                   	ret    

c0015519 <timerHandler(unsigned long long)>:
c0015519:	55                   	push   ebp
c001551a:	57                   	push   edi
c001551b:	56                   	push   esi
c001551c:	53                   	push   ebx
c001551d:	83 ec 0c             	sub    esp,0xc
c0015520:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015524:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0015528:	01 35 50 3e 02 c0    	add    DWORD PTR ds:0xc0023e50,esi
c001552e:	11 3d 54 3e 02 c0    	adc    DWORD PTR ds:0xc0023e54,edi
c0015534:	80 3d 6d 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022e6d,0x0
c001553b:	0f 84 07 01 00 00    	je     c0015648 <timerHandler(unsigned long long)+0x12f>
c0015541:	e8 ed 8b ff ff       	call   c000e133 <lockStuff()>
c0015546:	83 ec 0c             	sub    esp,0xc
c0015549:	68 c4 36 02 c0       	push   0xc00236c4
c001554e:	e8 d9 90 00 00       	call   c001e62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015553:	c7 04 24 c4 36 02 c0 	mov    DWORD PTR [esp],0xc00236c4
c001555a:	89 c3                	mov    ebx,eax
c001555c:	e8 01 90 00 00       	call   c001e562 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015561:	83 c4 10             	add    esp,0x10
c0015564:	84 c0                	test   al,al
c0015566:	74 60                	je     c00155c8 <timerHandler(unsigned long long)+0xaf>
c0015568:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001556e:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0015571:	85 c0                	test   eax,eax
c0015573:	0f 85 91 00 00 00    	jne    c001560a <timerHandler(unsigned long long)+0xf1>
c0015579:	e9 be 00 00 00       	jmp    c001563c <timerHandler(unsigned long long)+0x123>
c001557e:	83 ec 0c             	sub    esp,0xc
c0015581:	55                   	push   ebp
c0015582:	e8 a9 93 ff ff       	call   c000e930 <unblockTask(ThreadControlBlock*)>
c0015587:	83 c4 10             	add    esp,0x10
c001558a:	39 eb                	cmp    ebx,ebp
c001558c:	75 12                	jne    c00155a0 <timerHandler(unsigned long long)+0x87>
c001558e:	83 ec 0c             	sub    esp,0xc
c0015591:	68 c4 36 02 c0       	push   0xc00236c4
c0015596:	e8 91 90 00 00       	call   c001e62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001559b:	89 c3                	mov    ebx,eax
c001559d:	83 c4 10             	add    esp,0x10
c00155a0:	83 ec 0c             	sub    esp,0xc
c00155a3:	68 c4 36 02 c0       	push   0xc00236c4
c00155a8:	e8 b5 8f 00 00       	call   c001e562 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00155ad:	83 c4 10             	add    esp,0x10
c00155b0:	84 c0                	test   al,al
c00155b2:	75 b4                	jne    c0015568 <timerHandler(unsigned long long)+0x4f>
c00155b4:	83 ec 0c             	sub    esp,0xc
c00155b7:	68 c4 36 02 c0       	push   0xc00236c4
c00155bc:	e8 6b 90 00 00       	call   c001e62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00155c1:	83 c4 10             	add    esp,0x10
c00155c4:	39 d8                	cmp    eax,ebx
c00155c6:	74 a0                	je     c0015568 <timerHandler(unsigned long long)+0x4f>
c00155c8:	83 ec 0c             	sub    esp,0xc
c00155cb:	68 c4 36 02 c0       	push   0xc00236c4
c00155d0:	e8 57 90 00 00       	call   c001e62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00155d5:	c7 04 24 c4 36 02 c0 	mov    DWORD PTR [esp],0xc00236c4
c00155dc:	89 c5                	mov    ebp,eax
c00155de:	e8 9b 8f 00 00       	call   c001e57e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00155e3:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00155e6:	83 c4 10             	add    esp,0x10
c00155e9:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00155ec:	39 15 50 3e 02 c0    	cmp    DWORD PTR ds:0xc0023e50,edx
c00155f2:	a1 54 3e 02 c0       	mov    eax,ds:0xc0023e54
c00155f7:	19 c8                	sbb    eax,ecx
c00155f9:	73 83                	jae    c001557e <timerHandler(unsigned long long)+0x65>
c00155fb:	50                   	push   eax
c00155fc:	50                   	push   eax
c00155fd:	55                   	push   ebp
c00155fe:	68 c4 36 02 c0       	push   0xc00236c4
c0015603:	e8 86 8e 00 00       	call   c001e48e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015608:	eb 93                	jmp    c001559d <timerHandler(unsigned long long)+0x84>
c001560a:	80 3d 6c 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022e6c,0x0
c0015611:	74 29                	je     c001563c <timerHandler(unsigned long long)+0x123>
c0015613:	39 c6                	cmp    esi,eax
c0015615:	bb 00 00 00 00       	mov    ebx,0x0
c001561a:	19 df                	sbb    edi,ebx
c001561c:	72 19                	jb     c0015637 <timerHandler(unsigned long long)+0x11e>
c001561e:	e8 e9 8a ff ff       	call   c000e10c <lockScheduler()>
c0015623:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015628:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001562b:	e8 10 8e ff ff       	call   c000e440 <schedule()>
c0015630:	e8 d9 8a ff ff       	call   c000e10e <unlockScheduler()>
c0015635:	eb 05                	jmp    c001563c <timerHandler(unsigned long long)+0x123>
c0015637:	29 f0                	sub    eax,esi
c0015639:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c001563c:	83 c4 0c             	add    esp,0xc
c001563f:	5b                   	pop    ebx
c0015640:	5e                   	pop    esi
c0015641:	5f                   	pop    edi
c0015642:	5d                   	pop    ebp
c0015643:	e9 7d 8e ff ff       	jmp    c000e4c5 <unlockStuff()>
c0015648:	83 c4 0c             	add    esp,0xc
c001564b:	5b                   	pop    ebx
c001564c:	5e                   	pop    esi
c001564d:	5f                   	pop    edi
c001564e:	5d                   	pop    ebp
c001564f:	c3                   	ret    

c0015650 <setupTimer(int)>:
c0015650:	57                   	push   edi
c0015651:	56                   	push   esi
c0015652:	53                   	push   ebx
c0015653:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015657:	e8 27 19 00 00       	call   c0016f83 <getCPUNumber()>
c001565c:	85 c0                	test   eax,eax
c001565e:	74 32                	je     c0015692 <setupTimer(int)+0x42>
c0015660:	83 ec 0c             	sub    esp,0xc
c0015663:	68 60 01 00 00       	push   0x160
c0015668:	e8 b7 cb ff ff       	call   c0012224 <operator new(unsigned long)>
c001566d:	89 04 24             	mov    DWORD PTR [esp],eax
c0015670:	89 c3                	mov    ebx,eax
c0015672:	e8 f1 84 00 00       	call   c001db68 <APICTimer::APICTimer()>
c0015677:	6a 00                	push   0x0
c0015679:	6a 00                	push   0x0
c001567b:	56                   	push   esi
c001567c:	53                   	push   ebx
c001567d:	e8 ee 83 00 00       	call   c001da70 <APICTimer::open(int, int, void*)>
c0015682:	83 c4 20             	add    esp,0x20
c0015685:	e8 fc 18 00 00       	call   c0016f86 <thisCPU()>
c001568a:	56                   	push   esi
c001568b:	56                   	push   esi
c001568c:	53                   	push   ebx
c001568d:	e9 96 00 00 00       	jmp    c0015728 <setupTimer(int)+0xd8>
c0015692:	e8 ef 18 00 00       	call   c0016f86 <thisCPU()>
c0015697:	83 ec 0c             	sub    esp,0xc
c001569a:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00156a0:	e8 6b e1 ff ff       	call   c0013810 <Device::getName()>
c00156a5:	83 c4 10             	add    esp,0x10
c00156a8:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00156ab:	0f 85 87 00 00 00    	jne    c0015738 <setupTimer(int)+0xe8>
c00156b1:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c00156b6:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00156bd:	74 79                	je     c0015738 <setupTimer(int)+0xe8>
c00156bf:	83 ec 0c             	sub    esp,0xc
c00156c2:	68 5c 01 00 00       	push   0x15c
c00156c7:	e8 58 cb ff ff       	call   c0012224 <operator new(unsigned long)>
c00156cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00156cf:	89 c3                	mov    ebx,eax
c00156d1:	e8 e2 85 00 00       	call   c001dcb8 <PIT::PIT()>
c00156d6:	59                   	pop    ecx
c00156d7:	5f                   	pop    edi
c00156d8:	53                   	push   ebx
c00156d9:	ff 35 68 2e 02 c0    	push   DWORD PTR ds:0xc0022e68
c00156df:	e8 4a de ff ff       	call   c001352e <Device::addChild(Device*)>
c00156e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00156e6:	6a 00                	push   0x0
c00156e8:	6a 00                	push   0x0
c00156ea:	56                   	push   esi
c00156eb:	53                   	push   ebx
c00156ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00156ef:	83 c4 14             	add    esp,0x14
c00156f2:	68 60 01 00 00       	push   0x160
c00156f7:	e8 28 cb ff ff       	call   c0012224 <operator new(unsigned long)>
c00156fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00156ff:	89 c7                	mov    edi,eax
c0015701:	e8 62 84 00 00       	call   c001db68 <APICTimer::APICTimer()>
c0015706:	6a 00                	push   0x0
c0015708:	6a 00                	push   0x0
c001570a:	56                   	push   esi
c001570b:	57                   	push   edi
c001570c:	e8 5f 83 00 00       	call   c001da70 <APICTimer::open(int, int, void*)>
c0015711:	83 c4 20             	add    esp,0x20
c0015714:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015716:	6a 00                	push   0x0
c0015718:	6a 00                	push   0x0
c001571a:	6a 00                	push   0x0
c001571c:	53                   	push   ebx
c001571d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015720:	e8 61 18 00 00       	call   c0016f86 <thisCPU()>
c0015725:	5a                   	pop    edx
c0015726:	59                   	pop    ecx
c0015727:	57                   	push   edi
c0015728:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001572e:	e8 fb dd ff ff       	call   c001352e <Device::addChild(Device*)>
c0015733:	83 c4 10             	add    esp,0x10
c0015736:	eb 33                	jmp    c001576b <setupTimer(int)+0x11b>
c0015738:	83 ec 0c             	sub    esp,0xc
c001573b:	68 5c 01 00 00       	push   0x15c
c0015740:	e8 df ca ff ff       	call   c0012224 <operator new(unsigned long)>
c0015745:	89 04 24             	mov    DWORD PTR [esp],eax
c0015748:	89 c3                	mov    ebx,eax
c001574a:	e8 69 85 00 00       	call   c001dcb8 <PIT::PIT()>
c001574f:	58                   	pop    eax
c0015750:	5a                   	pop    edx
c0015751:	53                   	push   ebx
c0015752:	ff 35 68 2e 02 c0    	push   DWORD PTR ds:0xc0022e68
c0015758:	e8 d1 dd ff ff       	call   c001352e <Device::addChild(Device*)>
c001575d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001575f:	6a 00                	push   0x0
c0015761:	6a 00                	push   0x0
c0015763:	56                   	push   esi
c0015764:	53                   	push   ebx
c0015765:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015768:	83 c4 20             	add    esp,0x20
c001576b:	89 d8                	mov    eax,ebx
c001576d:	5b                   	pop    ebx
c001576e:	5e                   	pop    esi
c001576f:	5f                   	pop    edi
c0015770:	c3                   	ret    
c0015771:	90                   	nop

c0015772 <VCache::VCache(PhysicalDisk*)>:
c0015772:	53                   	push   ebx
c0015773:	83 ec 08             	sub    esp,0x8
c0015776:	ba ec 13 02 c0       	mov    edx,0xc00213ec
c001577b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001577f:	89 10                	mov    DWORD PTR [eax],edx
c0015781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015785:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001578c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015790:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0015797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001579b:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00157a2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00157a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157ad:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00157b4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00157bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157bf:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00157c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157ca:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00157ce:	83 ec 0c             	sub    esp,0xc
c00157d1:	6a 10                	push   0x10
c00157d3:	e8 4c ca ff ff       	call   c0012224 <operator new(unsigned long)>
c00157d8:	83 c4 10             	add    esp,0x10
c00157db:	89 c3                	mov    ebx,eax
c00157dd:	83 ec 0c             	sub    esp,0xc
c00157e0:	53                   	push   ebx
c00157e1:	e8 3e 8a ff ff       	call   c000e224 <Mutex::Mutex()>
c00157e6:	83 c4 10             	add    esp,0x10
c00157e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157ed:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00157f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00157f8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00157fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157ff:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0015806:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001580a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015814:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0015817:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001581b:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0015821:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015827:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001582b:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001582e:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0015831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015835:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0015839:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001583d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015843:	c1 e0 06             	shl    eax,0x6
c0015846:	83 ec 0c             	sub    esp,0xc
c0015849:	50                   	push   eax
c001584a:	e8 16 7a ff ff       	call   c000d265 <malloc>
c001584f:	83 c4 10             	add    esp,0x10
c0015852:	89 c2                	mov    edx,eax
c0015854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015858:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001585b:	90                   	nop
c001585c:	83 c4 08             	add    esp,0x8
c001585f:	5b                   	pop    ebx
c0015860:	c3                   	ret    
c0015861:	90                   	nop

c0015862 <VCache::writeWriteBuffer()>:
c0015862:	53                   	push   ebx
c0015863:	83 ec 14             	sub    esp,0x14
c0015866:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001586a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001586d:	8b 10                	mov    edx,DWORD PTR [eax]
c001586f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015872:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015875:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015878:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001587b:	50                   	push   eax
c001587c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001587f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0015886:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001588d:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0015891:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0015898:	83 c4 28             	add    esp,0x28
c001589b:	5b                   	pop    ebx
c001589c:	c3                   	ret    
c001589d:	90                   	nop

c001589e <VCache::~VCache()>:
c001589e:	83 ec 0c             	sub    esp,0xc
c00158a1:	ba ec 13 02 c0       	mov    edx,0xc00213ec
c00158a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158aa:	89 10                	mov    DWORD PTR [eax],edx
c00158ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158b0:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00158b3:	84 c0                	test   al,al
c00158b5:	74 0f                	je     c00158c6 <VCache::~VCache()+0x28>
c00158b7:	83 ec 0c             	sub    esp,0xc
c00158ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00158be:	e8 9f ff ff ff       	call   c0015862 <VCache::writeWriteBuffer()>
c00158c3:	83 c4 10             	add    esp,0x10
c00158c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158ca:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00158cd:	83 ec 0c             	sub    esp,0xc
c00158d0:	50                   	push   eax
c00158d1:	e8 9f 79 ff ff       	call   c000d275 <free>
c00158d6:	83 c4 10             	add    esp,0x10
c00158d9:	90                   	nop
c00158da:	83 c4 0c             	add    esp,0xc
c00158dd:	c3                   	ret    

c00158de <VCache::~VCache()>:
c00158de:	83 ec 0c             	sub    esp,0xc
c00158e1:	83 ec 0c             	sub    esp,0xc
c00158e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00158e8:	e8 b1 ff ff ff       	call   c001589e <VCache::~VCache()>
c00158ed:	83 c4 10             	add    esp,0x10
c00158f0:	83 ec 08             	sub    esp,0x8
c00158f3:	6a 30                	push   0x30
c00158f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00158f9:	e8 35 c9 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c00158fe:	83 c4 10             	add    esp,0x10
c0015901:	83 c4 0c             	add    esp,0xc
c0015904:	c3                   	ret    
c0015905:	90                   	nop

c0015906 <VCache::write(unsigned long long, int, void*)>:
c0015906:	55                   	push   ebp
c0015907:	57                   	push   edi
c0015908:	56                   	push   esi
c0015909:	53                   	push   ebx
c001590a:	83 ec 28             	sub    esp,0x28
c001590d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015911:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0015915:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015919:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001591d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015920:	e8 d3 8e ff ff       	call   c000e7f8 <Semaphore::acquire()>
c0015925:	83 c4 10             	add    esp,0x10
c0015928:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001592c:	74 66                	je     c0015994 <VCache::write(unsigned long long, int, void*)+0x8e>
c001592e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015931:	99                   	cdq    
c0015932:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015936:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0015939:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001593c:	89 c1                	mov    ecx,eax
c001593e:	89 d0                	mov    eax,edx
c0015940:	31 f1                	xor    ecx,esi
c0015942:	31 f8                	xor    eax,edi
c0015944:	89 ca                	mov    edx,ecx
c0015946:	09 c2                	or     edx,eax
c0015948:	75 3e                	jne    c0015988 <VCache::write(unsigned long long, int, void*)+0x82>
c001594a:	83 fd 01             	cmp    ebp,0x1
c001594d:	75 39                	jne    c0015988 <VCache::write(unsigned long long, int, void*)+0x82>
c001594f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015952:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015958:	51                   	push   ecx
c0015959:	50                   	push   eax
c001595a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001595e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015962:	0f af c8             	imul   ecx,eax
c0015965:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0015968:	51                   	push   ecx
c0015969:	e8 64 ac fe ff       	call   c00005d2 <memcpy>
c001596e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015971:	83 c4 10             	add    esp,0x10
c0015974:	40                   	inc    eax
c0015975:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0015978:	83 f8 40             	cmp    eax,0x40
c001597b:	75 57                	jne    c00159d4 <VCache::write(unsigned long long, int, void*)+0xce>
c001597d:	83 ec 0c             	sub    esp,0xc
c0015980:	53                   	push   ebx
c0015981:	e8 dc fe ff ff       	call   c0015862 <VCache::writeWriteBuffer()>
c0015986:	eb 34                	jmp    c00159bc <VCache::write(unsigned long long, int, void*)+0xb6>
c0015988:	83 ec 0c             	sub    esp,0xc
c001598b:	53                   	push   ebx
c001598c:	e8 d1 fe ff ff       	call   c0015862 <VCache::writeWriteBuffer()>
c0015991:	83 c4 10             	add    esp,0x10
c0015994:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015997:	83 fd 3f             	cmp    ebp,0x3f
c001599a:	7f 25                	jg     c00159c1 <VCache::write(unsigned long long, int, void*)+0xbb>
c001599c:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001599f:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00159a2:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00159a5:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00159a9:	52                   	push   edx
c00159aa:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00159b0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00159b4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00159b7:	e8 16 ac fe ff       	call   c00005d2 <memcpy>
c00159bc:	83 c4 10             	add    esp,0x10
c00159bf:	eb 13                	jmp    c00159d4 <VCache::write(unsigned long long, int, void*)+0xce>
c00159c1:	83 ec 0c             	sub    esp,0xc
c00159c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00159c6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00159ca:	55                   	push   ebp
c00159cb:	57                   	push   edi
c00159cc:	56                   	push   esi
c00159cd:	50                   	push   eax
c00159ce:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00159d1:	83 c4 20             	add    esp,0x20
c00159d4:	83 ec 0c             	sub    esp,0xc
c00159d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00159da:	e8 b5 93 ff ff       	call   c000ed94 <Semaphore::release()>
c00159df:	83 c4 2c             	add    esp,0x2c
c00159e2:	31 c0                	xor    eax,eax
c00159e4:	5b                   	pop    ebx
c00159e5:	5e                   	pop    esi
c00159e6:	5f                   	pop    edi
c00159e7:	5d                   	pop    ebp
c00159e8:	c3                   	ret    
c00159e9:	90                   	nop

c00159ea <VCache::read(unsigned long long, int, void*)>:
c00159ea:	57                   	push   edi
c00159eb:	56                   	push   esi
c00159ec:	53                   	push   ebx
c00159ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00159f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00159f9:	83 ec 0c             	sub    esp,0xc
c00159fc:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00159ff:	e8 f4 8d ff ff       	call   c000e7f8 <Semaphore::acquire()>
c0015a04:	83 c4 10             	add    esp,0x10
c0015a07:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0015a0b:	74 0c                	je     c0015a19 <VCache::read(unsigned long long, int, void*)+0x2f>
c0015a0d:	83 ec 0c             	sub    esp,0xc
c0015a10:	53                   	push   ebx
c0015a11:	e8 4c fe ff ff       	call   c0015862 <VCache::writeWriteBuffer()>
c0015a16:	83 c4 10             	add    esp,0x10
c0015a19:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015a1c:	83 ec 0c             	sub    esp,0xc
c0015a1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0015a21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a29:	57                   	push   edi
c0015a2a:	56                   	push   esi
c0015a2b:	50                   	push   eax
c0015a2c:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015a2f:	83 c4 14             	add    esp,0x14
c0015a32:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015a35:	e8 5a 93 ff ff       	call   c000ed94 <Semaphore::release()>
c0015a3a:	83 c4 10             	add    esp,0x10
c0015a3d:	31 c0                	xor    eax,eax
c0015a3f:	5b                   	pop    ebx
c0015a40:	5e                   	pop    esi
c0015a41:	5f                   	pop    edi
c0015a42:	c3                   	ret    
c0015a43:	90                   	nop

c0015a44 <Video::putrect(int, int, int, int, unsigned int)>:
c0015a44:	55                   	push   ebp
c0015a45:	57                   	push   edi
c0015a46:	56                   	push   esi
c0015a47:	53                   	push   ebx
c0015a48:	83 ec 1c             	sub    esp,0x1c
c0015a4b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0015a4f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0015a53:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015a57:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0015a5b:	01 e8                	add    eax,ebp
c0015a5d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a65:	01 df                	add    edi,ebx
c0015a67:	39 fb                	cmp    ebx,edi
c0015a69:	7d 1b                	jge    c0015a86 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0015a6b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0015a6f:	7d 12                	jge    c0015a83 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0015a71:	8b 16                	mov    edx,DWORD PTR [esi]
c0015a73:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0015a77:	53                   	push   ebx
c0015a78:	55                   	push   ebp
c0015a79:	45                   	inc    ebp
c0015a7a:	56                   	push   esi
c0015a7b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015a7e:	83 c4 10             	add    esp,0x10
c0015a81:	eb e8                	jmp    c0015a6b <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0015a83:	43                   	inc    ebx
c0015a84:	eb e1                	jmp    c0015a67 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0015a86:	83 c4 1c             	add    esp,0x1c
c0015a89:	5b                   	pop    ebx
c0015a8a:	5e                   	pop    esi
c0015a8b:	5f                   	pop    edi
c0015a8c:	5d                   	pop    ebp
c0015a8d:	c3                   	ret    

c0015a8e <Video::blit(unsigned int*, int, int, int, int)>:
c0015a8e:	55                   	push   ebp
c0015a8f:	57                   	push   edi
c0015a90:	56                   	push   esi
c0015a91:	53                   	push   ebx
c0015a92:	83 ec 1c             	sub    esp,0x1c
c0015a95:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015a99:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015a9d:	85 c0                	test   eax,eax
c0015a9f:	79 02                	jns    c0015aa3 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0015aa1:	31 c0                	xor    eax,eax
c0015aa3:	c1 e0 02             	shl    eax,0x2
c0015aa6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015aaa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015aae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015ab2:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0015ab6:	39 d8                	cmp    eax,ebx
c0015ab8:	7e 49                	jle    c0015b03 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0015aba:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0015ac0:	7c 41                	jl     c0015b03 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0015ac2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0015ac6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0015aca:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0015ace:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0015ad2:	39 f9                	cmp    ecx,edi
c0015ad4:	7e 22                	jle    c0015af8 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0015ad6:	83 c5 04             	add    ebp,0x4
c0015ad9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0015adf:	7c 14                	jl     c0015af5 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0015ae1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015ae3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0015ae6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015aea:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015aee:	56                   	push   esi
c0015aef:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0015af2:	83 c4 10             	add    esp,0x10
c0015af5:	47                   	inc    edi
c0015af6:	eb d2                	jmp    c0015aca <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0015af8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015afc:	43                   	inc    ebx
c0015afd:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0015b01:	eb ab                	jmp    c0015aae <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0015b03:	83 c4 1c             	add    esp,0x1c
c0015b06:	5b                   	pop    ebx
c0015b07:	5e                   	pop    esi
c0015b08:	5f                   	pop    edi
c0015b09:	5d                   	pop    ebp
c0015b0a:	c3                   	ret    
c0015b0b:	90                   	nop

c0015b0c <Video::clearScreen(unsigned int)>:
c0015b0c:	57                   	push   edi
c0015b0d:	56                   	push   esi
c0015b0e:	53                   	push   ebx
c0015b0f:	31 db                	xor    ebx,ebx
c0015b11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015b15:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0015b1b:	7e 1f                	jle    c0015b3c <Video::clearScreen(unsigned int)+0x30>
c0015b1d:	31 ff                	xor    edi,edi
c0015b1f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0015b25:	7e 12                	jle    c0015b39 <Video::clearScreen(unsigned int)+0x2d>
c0015b27:	8b 06                	mov    eax,DWORD PTR [esi]
c0015b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015b2d:	53                   	push   ebx
c0015b2e:	57                   	push   edi
c0015b2f:	47                   	inc    edi
c0015b30:	56                   	push   esi
c0015b31:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015b34:	83 c4 10             	add    esp,0x10
c0015b37:	eb e6                	jmp    c0015b1f <Video::clearScreen(unsigned int)+0x13>
c0015b39:	43                   	inc    ebx
c0015b3a:	eb d9                	jmp    c0015b15 <Video::clearScreen(unsigned int)+0x9>
c0015b3c:	5b                   	pop    ebx
c0015b3d:	5e                   	pop    esi
c0015b3e:	5f                   	pop    edi
c0015b3f:	c3                   	ret    

c0015b40 <Video::putpixel(int, int, unsigned int)>:
c0015b40:	c7 44 24 04 f4 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc00213f4
c0015b48:	e9 1d 71 ff ff       	jmp    c000cc6a <kprintf(char const*, ...)>
c0015b4d:	90                   	nop

c0015b4e <Video::Video(char const*)>:
c0015b4e:	83 ec 0c             	sub    esp,0xc
c0015b51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b55:	83 ec 08             	sub    esp,0x8
c0015b58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b5c:	50                   	push   eax
c0015b5d:	e8 bc db ff ff       	call   c001371e <Device::Device(char const*)>
c0015b62:	83 c4 10             	add    esp,0x10
c0015b65:	ba 0c 14 02 c0       	mov    edx,0xc002140c
c0015b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b6e:	89 10                	mov    DWORD PTR [eax],edx
c0015b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b74:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0015b7e:	90                   	nop
c0015b7f:	83 c4 0c             	add    esp,0xc
c0015b82:	c3                   	ret    
c0015b83:	90                   	nop

c0015b84 <Video::~Video()>:
c0015b84:	83 ec 0c             	sub    esp,0xc
c0015b87:	ba 0c 14 02 c0       	mov    edx,0xc002140c
c0015b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b90:	89 10                	mov    DWORD PTR [eax],edx
c0015b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b96:	83 ec 0c             	sub    esp,0xc
c0015b99:	50                   	push   eax
c0015b9a:	e8 31 d8 ff ff       	call   c00133d0 <Device::~Device()>
c0015b9f:	83 c4 10             	add    esp,0x10
c0015ba2:	90                   	nop
c0015ba3:	83 c4 0c             	add    esp,0xc
c0015ba6:	c3                   	ret    
c0015ba7:	90                   	nop

c0015ba8 <Video::~Video()>:
c0015ba8:	83 ec 0c             	sub    esp,0xc
c0015bab:	83 ec 0c             	sub    esp,0xc
c0015bae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015bb2:	e8 cd ff ff ff       	call   c0015b84 <Video::~Video()>
c0015bb7:	83 c4 10             	add    esp,0x10
c0015bba:	83 ec 08             	sub    esp,0x8
c0015bbd:	68 64 01 00 00       	push   0x164
c0015bc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015bc6:	e8 68 c6 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c0015bcb:	83 c4 10             	add    esp,0x10
c0015bce:	83 c4 0c             	add    esp,0xc
c0015bd1:	c3                   	ret    

c0015bd2 <Video::isMonochrome()>:
c0015bd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bd6:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0015bdc:	c3                   	ret    
c0015bdd:	90                   	nop

c0015bde <Video::getWidth()>:
c0015bde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015be2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015be8:	c3                   	ret    
c0015be9:	90                   	nop

c0015bea <Video::getHeight()>:
c0015bea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bee:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015bf4:	c3                   	ret    
c0015bf5:	90                   	nop

c0015bf6 <Video::drawCursor(int, int, unsigned char*, int)>:
c0015bf6:	55                   	push   ebp
c0015bf7:	57                   	push   edi
c0015bf8:	56                   	push   esi
c0015bf9:	53                   	push   ebx
c0015bfa:	83 ec 2c             	sub    esp,0x2c
c0015bfd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015c01:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0015c05:	83 f8 01             	cmp    eax,0x1
c0015c08:	19 c9                	sbb    ecx,ecx
c0015c0a:	31 db                	xor    ebx,ebx
c0015c0c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015c10:	89 cd                	mov    ebp,ecx
c0015c12:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0015c1a:	f7 d5                	not    ebp
c0015c1c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0015c22:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015c26:	01 d8                	add    eax,ebx
c0015c28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c2c:	56                   	push   esi
c0015c2d:	e8 b8 ff ff ff       	call   c0015bea <Video::getHeight()>
c0015c32:	59                   	pop    ecx
c0015c33:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0015c37:	7e 70                	jle    c0015ca9 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0015c39:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015c3d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015c41:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0015c44:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015c48:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015c4c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0015c53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015c57:	89 f8                	mov    eax,edi
c0015c59:	83 c0 20             	add    eax,0x20
c0015c5c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015c60:	56                   	push   esi
c0015c61:	e8 78 ff ff ff       	call   c0015bde <Video::getWidth()>
c0015c66:	5a                   	pop    edx
c0015c67:	39 c7                	cmp    edi,eax
c0015c69:	7d 34                	jge    c0015c9f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0015c6b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0015c70:	74 05                	je     c0015c77 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0015c72:	8b 06                	mov    eax,DWORD PTR [esi]
c0015c74:	55                   	push   ebp
c0015c75:	eb 0d                	jmp    c0015c84 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0015c77:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0015c7c:	74 12                	je     c0015c90 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0015c7e:	8b 06                	mov    eax,DWORD PTR [esi]
c0015c80:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015c84:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015c88:	57                   	push   edi
c0015c89:	56                   	push   esi
c0015c8a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015c8d:	83 c4 10             	add    esp,0x10
c0015c90:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0015c94:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0015c98:	47                   	inc    edi
c0015c99:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015c9d:	75 c1                	jne    c0015c60 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0015c9f:	43                   	inc    ebx
c0015ca0:	83 fb 20             	cmp    ebx,0x20
c0015ca3:	0f 85 79 ff ff ff    	jne    c0015c22 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0015ca9:	83 c4 2c             	add    esp,0x2c
c0015cac:	5b                   	pop    ebx
c0015cad:	5e                   	pop    esi
c0015cae:	5f                   	pop    edi
c0015caf:	5d                   	pop    ebp
c0015cb0:	c3                   	ret    
c0015cb1:	90                   	nop

c0015cb2 <ACPI::close(int, int, void*)>:
c0015cb2:	83 ec 1c             	sub    esp,0x1c
c0015cb5:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0015cbd:	74 0a                	je     c0015cc9 <ACPI::close(int, int, void*)+0x17>
c0015cbf:	b8 00 00 00 00       	mov    eax,0x0
c0015cc4:	e9 9a 00 00 00       	jmp    c0015d63 <ACPI::close(int, int, void*)+0xb1>
c0015cc9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015cce:	75 37                	jne    c0015d07 <ACPI::close(int, int, void*)+0x55>
c0015cd0:	83 ec 0c             	sub    esp,0xc
c0015cd3:	68 44 14 02 c0       	push   0xc0021444
c0015cd8:	e8 8d 6f ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0015cdd:	83 c4 10             	add    esp,0x10
c0015ce0:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0015ce5:	85 c0                	test   eax,eax
c0015ce7:	74 07                	je     c0015cf0 <ACPI::close(int, int, void*)+0x3e>
c0015ce9:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0015cee:	ff d0                	call   eax
c0015cf0:	83 ec 0c             	sub    esp,0xc
c0015cf3:	68 18 15 02 c0       	push   0xc0021518
c0015cf8:	e8 8b 70 ff ff       	call   c000cd88 <panic(char const*)>
c0015cfd:	83 c4 10             	add    esp,0x10
c0015d00:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d05:	eb 5c                	jmp    c0015d63 <ACPI::close(int, int, void*)+0xb1>
c0015d07:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0015d0c:	75 50                	jne    c0015d5e <ACPI::close(int, int, void*)+0xac>
c0015d0e:	a1 64 3e 02 c0       	mov    eax,ds:0xc0023e64
c0015d13:	85 c0                	test   eax,eax
c0015d15:	74 07                	je     c0015d1e <ACPI::close(int, int, void*)+0x6c>
c0015d17:	a1 64 3e 02 c0       	mov    eax,ds:0xc0023e64
c0015d1c:	ff d0                	call   eax
c0015d1e:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0015d23:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015d28:	83 e0 02             	and    eax,0x2
c0015d2b:	74 1c                	je     c0015d49 <ACPI::close(int, int, void*)+0x97>
c0015d2d:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0015d34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d38:	89 c2                	mov    edx,eax
c0015d3a:	ec                   	in     al,dx
c0015d3b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0015d3f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015d43:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015d47:	eb da                	jmp    c0015d23 <ACPI::close(int, int, void*)+0x71>
c0015d49:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0015d50:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0015d55:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0015d59:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015d5d:	ee                   	out    dx,al
c0015d5e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d63:	83 c4 1c             	add    esp,0x1c
c0015d66:	c3                   	ret    

c0015d67 <findRSDP()>:
c0015d67:	83 ec 1c             	sub    esp,0x1c
c0015d6a:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c0015d6f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015d75:	83 e0 04             	and    eax,0x4
c0015d78:	84 c0                	test   al,al
c0015d7a:	75 07                	jne    c0015d83 <findRSDP()+0x1c>
c0015d7c:	b8 00 00 00 00       	mov    eax,0x0
c0015d81:	eb 6a                	jmp    c0015ded <findRSDP()+0x86>
c0015d83:	a1 50 36 02 c0       	mov    eax,ds:0xc0023650
c0015d88:	3d ff 07 00 00       	cmp    eax,0x7ff
c0015d8d:	7f 1b                	jg     c0015daa <findRSDP()+0x43>
c0015d8f:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c0015d94:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015d9a:	83 e2 fb             	and    edx,0xfffffffb
c0015d9d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015da3:	b8 00 00 00 00       	mov    eax,0x0
c0015da8:	eb 43                	jmp    c0015ded <findRSDP()+0x86>
c0015daa:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0015db2:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0015dba:	77 2c                	ja     c0015de8 <findRSDP()+0x81>
c0015dbc:	83 ec 04             	sub    esp,0x4
c0015dbf:	6a 08                	push   0x8
c0015dc1:	68 51 14 02 c0       	push   0xc0021451
c0015dc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015dca:	e8 a0 a7 fe ff       	call   c000056f <memcmp>
c0015dcf:	83 c4 10             	add    esp,0x10
c0015dd2:	85 c0                	test   eax,eax
c0015dd4:	0f 94 c0             	sete   al
c0015dd7:	84 c0                	test   al,al
c0015dd9:	74 06                	je     c0015de1 <findRSDP()+0x7a>
c0015ddb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015ddf:	eb 0c                	jmp    c0015ded <findRSDP()+0x86>
c0015de1:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0015de6:	eb ca                	jmp    c0015db2 <findRSDP()+0x4b>
c0015de8:	b8 00 00 00 00       	mov    eax,0x0
c0015ded:	83 c4 1c             	add    esp,0x1c
c0015df0:	c3                   	ret    

c0015df1 <loadACPITables(unsigned char*)>:
c0015df1:	56                   	push   esi
c0015df2:	53                   	push   ebx
c0015df3:	83 ec 44             	sub    esp,0x44
c0015df6:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c0015dfb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015e01:	83 e0 04             	and    eax,0x4
c0015e04:	84 c0                	test   al,al
c0015e06:	0f 84 05 02 00 00    	je     c0016011 <loadACPITables(unsigned char*)+0x220>
c0015e0c:	a0 80 40 02 c0       	mov    al,ds:0xc0024080
c0015e11:	84 c0                	test   al,al
c0015e13:	74 75                	je     c0015e8a <loadACPITables(unsigned char*)+0x99>
c0015e15:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015e19:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015e1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e21:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015e24:	83 e8 24             	sub    eax,0x24
c0015e27:	c1 e8 03             	shr    eax,0x3
c0015e2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015e2e:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0015e36:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015e3a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015e3e:	0f 8d b2 00 00 00    	jge    c0015ef6 <loadACPITables(unsigned char*)+0x105>
c0015e44:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015e48:	83 c0 24             	add    eax,0x24
c0015e4b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015e4f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015e53:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015e5b:	c1 e0 03             	shl    eax,0x3
c0015e5e:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0015e62:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015e66:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015e69:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e6b:	89 c1                	mov    ecx,eax
c0015e6d:	a1 6c 3e 02 c0       	mov    eax,ds:0xc0023e6c
c0015e72:	8d 50 01             	lea    edx,[eax+0x1]
c0015e75:	89 15 6c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e6c,edx
c0015e7b:	89 ca                	mov    edx,ecx
c0015e7d:	89 14 c5 84 3e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc17c],edx
c0015e84:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0015e88:	eb ac                	jmp    c0015e36 <loadACPITables(unsigned char*)+0x45>
c0015e8a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015e8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015e92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015e99:	83 e8 24             	sub    eax,0x24
c0015e9c:	c1 e8 02             	shr    eax,0x2
c0015e9f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015ea3:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0015eab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015eaf:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0015eb3:	7d 41                	jge    c0015ef6 <loadACPITables(unsigned char*)+0x105>
c0015eb5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015eb9:	83 c0 24             	add    eax,0x24
c0015ebc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015ec0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015ec4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015ecc:	c1 e0 02             	shl    eax,0x2
c0015ecf:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0015ed3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ed7:	8b 08                	mov    ecx,DWORD PTR [eax]
c0015ed9:	a1 6c 3e 02 c0       	mov    eax,ds:0xc0023e6c
c0015ede:	8d 50 01             	lea    edx,[eax+0x1]
c0015ee1:	89 15 6c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e6c,edx
c0015ee7:	89 ca                	mov    edx,ecx
c0015ee9:	89 14 c5 84 3e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc17c],edx
c0015ef0:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0015ef4:	eb b5                	jmp    c0015eab <loadACPITables(unsigned char*)+0xba>
c0015ef6:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0015efe:	a1 6c 3e 02 c0       	mov    eax,ds:0xc0023e6c
c0015f03:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0015f07:	0f 8d 05 01 00 00    	jge    c0016012 <loadACPITables(unsigned char*)+0x221>
c0015f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015f11:	8b 04 c5 84 3e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc17c]
c0015f18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f28:	25 ff 0f 00 00       	and    eax,0xfff
c0015f2d:	89 c6                	mov    esi,eax
c0015f2f:	e8 ef b2 ff ff       	call   c0011223 <Virt::getAKernelVAS()>
c0015f34:	89 c3                	mov    ebx,eax
c0015f36:	83 ec 0c             	sub    esp,0xc
c0015f39:	6a 01                	push   0x1
c0015f3b:	e8 53 b1 ff ff       	call   c0011093 <Virt::allocateKernelVirtualPages(int)>
c0015f40:	83 c4 10             	add    esp,0x10
c0015f43:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f47:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0015f4d:	83 ec 0c             	sub    esp,0xc
c0015f50:	6a 01                	push   0x1
c0015f52:	6a 01                	push   0x1
c0015f54:	50                   	push   eax
c0015f55:	52                   	push   edx
c0015f56:	53                   	push   ebx
c0015f57:	e8 5a ba ff ff       	call   c00119b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015f5c:	83 c4 20             	add    esp,0x20
c0015f5f:	09 f0                	or     eax,esi
c0015f61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015f65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015f69:	c1 e0 03             	shl    eax,0x3
c0015f6c:	05 80 3e 02 c0       	add    eax,0xc0023e80
c0015f71:	83 ec 04             	sub    esp,0x4
c0015f74:	6a 04                	push   0x4
c0015f76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015f7a:	50                   	push   eax
c0015f7b:	e8 52 a6 fe ff       	call   c00005d2 <memcpy>
c0015f80:	83 c4 10             	add    esp,0x10
c0015f83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015f8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015f8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f92:	05 00 10 00 00       	add    eax,0x1000
c0015f97:	c1 e8 0c             	shr    eax,0xc
c0015f9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fa2:	89 04 24             	mov    DWORD PTR [esp],eax
c0015fa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fa9:	25 ff 0f 00 00       	and    eax,0xfff
c0015fae:	89 c6                	mov    esi,eax
c0015fb0:	e8 6e b2 ff ff       	call   c0011223 <Virt::getAKernelVAS()>
c0015fb5:	89 c3                	mov    ebx,eax
c0015fb7:	83 ec 0c             	sub    esp,0xc
c0015fba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015fbe:	e8 d0 b0 ff ff       	call   c0011093 <Virt::allocateKernelVirtualPages(int)>
c0015fc3:	83 c4 10             	add    esp,0x10
c0015fc6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015fca:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0015fd0:	83 ec 0c             	sub    esp,0xc
c0015fd3:	6a 01                	push   0x1
c0015fd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015fd9:	50                   	push   eax
c0015fda:	52                   	push   edx
c0015fdb:	53                   	push   ebx
c0015fdc:	e8 d5 b9 ff ff       	call   c00119b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015fe1:	83 c4 20             	add    esp,0x20
c0015fe4:	09 f0                	or     eax,esi
c0015fe6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015fea:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015fed:	83 ec 0c             	sub    esp,0xc
c0015ff0:	50                   	push   eax
c0015ff1:	e8 d3 b3 ff ff       	call   c00113c9 <Virt::freeKernelVirtualPages(unsigned long)>
c0015ff6:	83 c4 10             	add    esp,0x10
c0015ff9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015ffd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016001:	89 14 c5 84 3e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc17c],edx
c0016008:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c001600c:	e9 ed fe ff ff       	jmp    c0015efe <loadACPITables(unsigned char*)+0x10d>
c0016011:	90                   	nop
c0016012:	83 c4 44             	add    esp,0x44
c0016015:	5b                   	pop    ebx
c0016016:	5e                   	pop    esi
c0016017:	c3                   	ret    

c0016018 <findRSDT(unsigned char*)>:
c0016018:	56                   	push   esi
c0016019:	53                   	push   ebx
c001601a:	83 ec 44             	sub    esp,0x44
c001601d:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c0016022:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016028:	83 e0 04             	and    eax,0x4
c001602b:	84 c0                	test   al,al
c001602d:	75 0a                	jne    c0016039 <findRSDT(unsigned char*)+0x21>
c001602f:	b8 00 00 00 00       	mov    eax,0x0
c0016034:	e9 f7 00 00 00       	jmp    c0016130 <findRSDT(unsigned char*)+0x118>
c0016039:	83 ec 04             	sub    esp,0x4
c001603c:	6a 24                	push   0x24
c001603e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0016042:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016046:	50                   	push   eax
c0016047:	e8 86 a5 fe ff       	call   c00005d2 <memcpy>
c001604c:	83 c4 10             	add    esp,0x10
c001604f:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016053:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0016057:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001605f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016063:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016067:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001606b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001606f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016073:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016077:	25 ff 0f 00 00       	and    eax,0xfff
c001607c:	89 c6                	mov    esi,eax
c001607e:	e8 a0 b1 ff ff       	call   c0011223 <Virt::getAKernelVAS()>
c0016083:	89 c3                	mov    ebx,eax
c0016085:	83 ec 0c             	sub    esp,0xc
c0016088:	6a 02                	push   0x2
c001608a:	e8 04 b0 ff ff       	call   c0011093 <Virt::allocateKernelVirtualPages(int)>
c001608f:	83 c4 10             	add    esp,0x10
c0016092:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016096:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001609c:	83 ec 0c             	sub    esp,0xc
c001609f:	6a 01                	push   0x1
c00160a1:	6a 02                	push   0x2
c00160a3:	50                   	push   eax
c00160a4:	52                   	push   edx
c00160a5:	53                   	push   ebx
c00160a6:	e8 0b b9 ff ff       	call   c00119b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00160ab:	83 c4 20             	add    esp,0x20
c00160ae:	09 f0                	or     eax,esi
c00160b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00160b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00160b8:	25 ff 0f 00 00       	and    eax,0xfff
c00160bd:	89 c6                	mov    esi,eax
c00160bf:	e8 5f b1 ff ff       	call   c0011223 <Virt::getAKernelVAS()>
c00160c4:	89 c3                	mov    ebx,eax
c00160c6:	83 ec 0c             	sub    esp,0xc
c00160c9:	6a 02                	push   0x2
c00160cb:	e8 c3 af ff ff       	call   c0011093 <Virt::allocateKernelVirtualPages(int)>
c00160d0:	83 c4 10             	add    esp,0x10
c00160d3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00160d7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00160dd:	83 ec 0c             	sub    esp,0xc
c00160e0:	6a 01                	push   0x1
c00160e2:	6a 02                	push   0x2
c00160e4:	50                   	push   eax
c00160e5:	52                   	push   edx
c00160e6:	53                   	push   ebx
c00160e7:	e8 ca b8 ff ff       	call   c00119b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00160ec:	83 c4 20             	add    esp,0x20
c00160ef:	09 f0                	or     eax,esi
c00160f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00160f5:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00160fa:	75 11                	jne    c001610d <findRSDT(unsigned char*)+0xf5>
c00160fc:	c6 05 80 40 02 c0 00 	mov    BYTE PTR ds:0xc0024080,0x0
c0016103:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016107:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001610b:	eb 1f                	jmp    c001612c <findRSDT(unsigned char*)+0x114>
c001610d:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0016112:	75 11                	jne    c0016125 <findRSDT(unsigned char*)+0x10d>
c0016114:	c6 05 80 40 02 c0 01 	mov    BYTE PTR ds:0xc0024080,0x1
c001611b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001611f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016123:	eb 07                	jmp    c001612c <findRSDT(unsigned char*)+0x114>
c0016125:	b8 00 00 00 00       	mov    eax,0x0
c001612a:	eb 04                	jmp    c0016130 <findRSDT(unsigned char*)+0x118>
c001612c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016130:	83 c4 44             	add    esp,0x44
c0016133:	5b                   	pop    ebx
c0016134:	5e                   	pop    esi
c0016135:	c3                   	ret    

c0016136 <findDataTable(unsigned char*, char*)>:
c0016136:	83 ec 1c             	sub    esp,0x1c
c0016139:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c001613e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016144:	83 e0 04             	and    eax,0x4
c0016147:	84 c0                	test   al,al
c0016149:	75 07                	jne    c0016152 <findDataTable(unsigned char*, char*)+0x1c>
c001614b:	b8 00 00 00 00       	mov    eax,0x0
c0016150:	eb 7c                	jmp    c00161ce <findDataTable(unsigned char*, char*)+0x98>
c0016152:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001615a:	a1 6c 3e 02 c0       	mov    eax,ds:0xc0023e6c
c001615f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0016163:	7d 3a                	jge    c001619f <findDataTable(unsigned char*, char*)+0x69>
c0016165:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016169:	c1 e0 03             	shl    eax,0x3
c001616c:	05 80 3e 02 c0       	add    eax,0xc0023e80
c0016171:	83 ec 04             	sub    esp,0x4
c0016174:	6a 04                	push   0x4
c0016176:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001617a:	50                   	push   eax
c001617b:	e8 ef a3 fe ff       	call   c000056f <memcmp>
c0016180:	83 c4 10             	add    esp,0x10
c0016183:	85 c0                	test   eax,eax
c0016185:	0f 94 c0             	sete   al
c0016188:	84 c0                	test   al,al
c001618a:	74 0d                	je     c0016199 <findDataTable(unsigned char*, char*)+0x63>
c001618c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016190:	8b 04 c5 84 3e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc17c]
c0016197:	eb 35                	jmp    c00161ce <findDataTable(unsigned char*, char*)+0x98>
c0016199:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001619d:	eb bb                	jmp    c001615a <findDataTable(unsigned char*, char*)+0x24>
c001619f:	a0 80 40 02 c0       	mov    al,ds:0xc0024080
c00161a4:	84 c0                	test   al,al
c00161a6:	74 07                	je     c00161af <findDataTable(unsigned char*, char*)+0x79>
c00161a8:	b8 58 00 00 00       	mov    eax,0x58
c00161ad:	eb 05                	jmp    c00161b4 <findDataTable(unsigned char*, char*)+0x7e>
c00161af:	b8 52 00 00 00       	mov    eax,0x52
c00161b4:	83 ec 04             	sub    esp,0x4
c00161b7:	50                   	push   eax
c00161b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161bc:	68 3c 15 02 c0       	push   0xc002153c
c00161c1:	e8 a4 6a ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c00161c6:	83 c4 10             	add    esp,0x10
c00161c9:	b8 00 00 00 00       	mov    eax,0x0
c00161ce:	83 c4 1c             	add    esp,0x1c
c00161d1:	c3                   	ret    

c00161d2 <scanMADT()>:
c00161d2:	83 ec 2c             	sub    esp,0x2c
c00161d5:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c00161da:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00161e0:	83 e0 04             	and    eax,0x4
c00161e3:	84 c0                	test   al,al
c00161e5:	0f 84 73 03 00 00    	je     c001655e <scanMADT()+0x38c>
c00161eb:	e8 77 fb ff ff       	call   c0015d67 <findRSDP()>
c00161f0:	a3 8c 40 02 c0       	mov    ds:0xc002408c,eax
c00161f5:	a1 8c 40 02 c0       	mov    eax,ds:0xc002408c
c00161fa:	85 c0                	test   eax,eax
c00161fc:	75 19                	jne    c0016217 <scanMADT()+0x45>
c00161fe:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c0016203:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016209:	83 e2 fb             	and    edx,0xfffffffb
c001620c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016212:	e9 4b 03 00 00       	jmp    c0016562 <scanMADT()+0x390>
c0016217:	a1 8c 40 02 c0       	mov    eax,ds:0xc002408c
c001621c:	83 ec 0c             	sub    esp,0xc
c001621f:	50                   	push   eax
c0016220:	e8 f3 fd ff ff       	call   c0016018 <findRSDT(unsigned char*)>
c0016225:	83 c4 10             	add    esp,0x10
c0016228:	a3 88 40 02 c0       	mov    ds:0xc0024088,eax
c001622d:	a1 88 40 02 c0       	mov    eax,ds:0xc0024088
c0016232:	85 c0                	test   eax,eax
c0016234:	75 19                	jne    c001624f <scanMADT()+0x7d>
c0016236:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c001623b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016241:	83 e2 fb             	and    edx,0xfffffffb
c0016244:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001624a:	e9 13 03 00 00       	jmp    c0016562 <scanMADT()+0x390>
c001624f:	a1 88 40 02 c0       	mov    eax,ds:0xc0024088
c0016254:	83 ec 0c             	sub    esp,0xc
c0016257:	50                   	push   eax
c0016258:	e8 94 fb ff ff       	call   c0015df1 <loadACPITables(unsigned char*)>
c001625d:	83 c4 10             	add    esp,0x10
c0016260:	a1 88 40 02 c0       	mov    eax,ds:0xc0024088
c0016265:	83 ec 08             	sub    esp,0x8
c0016268:	68 5a 14 02 c0       	push   0xc002145a
c001626d:	50                   	push   eax
c001626e:	e8 c3 fe ff ff       	call   c0016136 <findDataTable(unsigned char*, char*)>
c0016273:	83 c4 10             	add    esp,0x10
c0016276:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001627a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001627f:	75 19                	jne    c001629a <scanMADT()+0xc8>
c0016281:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c0016286:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001628c:	83 e2 fe             	and    edx,0xfffffffe
c001628f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016295:	e9 c8 02 00 00       	jmp    c0016562 <scanMADT()+0x390>
c001629a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00162a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00162a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00162a9:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00162ad:	0f 87 af 02 00 00    	ja     c0016562 <scanMADT()+0x390>
c00162b3:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c00162bb:	0f 87 a1 02 00 00    	ja     c0016562 <scanMADT()+0x390>
c00162c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162c5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00162c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162cd:	8d 50 01             	lea    edx,[eax+0x1]
c00162d0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00162d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00162d8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00162dc:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00162e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162e4:	8d 50 01             	lea    edx,[eax+0x1]
c00162e7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00162eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00162ef:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00162f3:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c00162f7:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c00162fc:	0f 86 5f 02 00 00    	jbe    c0016561 <scanMADT()+0x38f>
c0016302:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0016307:	75 57                	jne    c0016360 <scanMADT()+0x18e>
c0016309:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001630d:	8d 50 01             	lea    edx,[eax+0x1]
c0016310:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016314:	8a 15 c0 41 02 c0    	mov    dl,BYTE PTR ds:0xc00241c0
c001631a:	0f b6 d2             	movzx  edx,dl
c001631d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016321:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016325:	88 82 00 42 02 c0    	mov    BYTE PTR [edx-0x3ffdbe00],al
c001632b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001632f:	8d 50 01             	lea    edx,[eax+0x1]
c0016332:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016336:	8a 15 c0 41 02 c0    	mov    dl,BYTE PTR ds:0xc00241c0
c001633c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001633f:	88 0d c0 41 02 c0    	mov    BYTE PTR ds:0xc00241c0,cl
c0016345:	0f b6 d2             	movzx  edx,dl
c0016348:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001634c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016350:	88 82 e0 41 02 c0    	mov    BYTE PTR [edx-0x3ffdbe20],al
c0016356:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001635b:	e9 ea 01 00 00       	jmp    c001654a <scanMADT()+0x378>
c0016360:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0016365:	0f 85 14 01 00 00    	jne    c001647f <scanMADT()+0x2ad>
c001636b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001636f:	8d 50 01             	lea    edx,[eax+0x1]
c0016372:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016376:	8a 15 90 40 02 c0    	mov    dl,BYTE PTR ds:0xc0024090
c001637c:	0f b6 d2             	movzx  edx,dl
c001637f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016383:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016387:	88 82 a0 40 02 c0    	mov    BYTE PTR [edx-0x3ffdbf60],al
c001638d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0016391:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016395:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016399:	01 d0                	add    eax,edx
c001639b:	83 c0 2c             	add    eax,0x2c
c001639e:	8a 00                	mov    al,BYTE PTR [eax]
c00163a0:	0f b6 d0             	movzx  edx,al
c00163a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00163a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00163aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00163ae:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00163b2:	0f b6 c0             	movzx  eax,al
c00163b5:	c1 e0 08             	shl    eax,0x8
c00163b8:	89 d1                	mov    ecx,edx
c00163ba:	09 c1                	or     ecx,eax
c00163bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00163c0:	8d 50 02             	lea    edx,[eax+0x2]
c00163c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00163c7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00163cb:	0f b6 c0             	movzx  eax,al
c00163ce:	c1 e0 10             	shl    eax,0x10
c00163d1:	09 c1                	or     ecx,eax
c00163d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00163d7:	8d 50 03             	lea    edx,[eax+0x3]
c00163da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00163de:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00163e2:	0f b6 c0             	movzx  eax,al
c00163e5:	c1 e0 18             	shl    eax,0x18
c00163e8:	09 c1                	or     ecx,eax
c00163ea:	89 ca                	mov    edx,ecx
c00163ec:	a0 90 40 02 c0       	mov    al,ds:0xc0024090
c00163f1:	0f b6 c0             	movzx  eax,al
c00163f4:	89 14 85 c0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf40],edx
c00163fb:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016400:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016404:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016408:	01 d0                	add    eax,edx
c001640a:	83 c0 2c             	add    eax,0x2c
c001640d:	8a 00                	mov    al,BYTE PTR [eax]
c001640f:	0f b6 d0             	movzx  edx,al
c0016412:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016416:	8d 48 01             	lea    ecx,[eax+0x1]
c0016419:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001641d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016421:	0f b6 c0             	movzx  eax,al
c0016424:	c1 e0 08             	shl    eax,0x8
c0016427:	89 d1                	mov    ecx,edx
c0016429:	09 c1                	or     ecx,eax
c001642b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001642f:	8d 50 02             	lea    edx,[eax+0x2]
c0016432:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016436:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001643a:	0f b6 c0             	movzx  eax,al
c001643d:	c1 e0 10             	shl    eax,0x10
c0016440:	09 c1                	or     ecx,eax
c0016442:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016446:	8d 50 03             	lea    edx,[eax+0x3]
c0016449:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001644d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016451:	0f b6 c0             	movzx  eax,al
c0016454:	c1 e0 18             	shl    eax,0x18
c0016457:	09 c1                	or     ecx,eax
c0016459:	89 ca                	mov    edx,ecx
c001645b:	a0 90 40 02 c0       	mov    al,ds:0xc0024090
c0016460:	0f b6 c0             	movzx  eax,al
c0016463:	89 14 85 40 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbec0],edx
c001646a:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001646f:	a0 90 40 02 c0       	mov    al,ds:0xc0024090
c0016474:	40                   	inc    eax
c0016475:	a2 90 40 02 c0       	mov    ds:0xc0024090,al
c001647a:	e9 cb 00 00 00       	jmp    c001654a <scanMADT()+0x378>
c001647f:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0016484:	0f 85 a6 00 00 00    	jne    c0016530 <scanMADT()+0x35e>
c001648a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001648e:	8d 50 01             	lea    edx,[eax+0x1]
c0016491:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016495:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016499:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001649d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00164a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164a5:	8d 50 01             	lea    edx,[eax+0x1]
c00164a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00164ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00164b0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00164b4:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00164b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00164bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164c0:	01 d0                	add    eax,edx
c00164c2:	83 c0 2c             	add    eax,0x2c
c00164c5:	8a 00                	mov    al,BYTE PTR [eax]
c00164c7:	0f b6 d0             	movzx  edx,al
c00164ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164ce:	8d 48 01             	lea    ecx,[eax+0x1]
c00164d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00164d5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00164d9:	0f b6 c0             	movzx  eax,al
c00164dc:	c1 e0 08             	shl    eax,0x8
c00164df:	89 d1                	mov    ecx,edx
c00164e1:	09 c1                	or     ecx,eax
c00164e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164e7:	8d 50 02             	lea    edx,[eax+0x2]
c00164ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00164ee:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00164f2:	0f b6 c0             	movzx  eax,al
c00164f5:	c1 e0 10             	shl    eax,0x10
c00164f8:	09 c1                	or     ecx,eax
c00164fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164fe:	8d 50 03             	lea    edx,[eax+0x3]
c0016501:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016505:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016509:	0f b6 c0             	movzx  eax,al
c001650c:	c1 e0 18             	shl    eax,0x18
c001650f:	09 c8                	or     eax,ecx
c0016511:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016515:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001651a:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c001651f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016524:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016528:	88 90 c0 25 02 c0    	mov    BYTE PTR [eax-0x3ffdda40],dl
c001652e:	eb 1a                	jmp    c001654a <scanMADT()+0x378>
c0016530:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0016535:	75 07                	jne    c001653e <scanMADT()+0x36c>
c0016537:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001653c:	eb 0c                	jmp    c001654a <scanMADT()+0x378>
c001653e:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0016543:	75 05                	jne    c001654a <scanMADT()+0x378>
c0016545:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c001654a:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c001654f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016553:	01 d0                	add    eax,edx
c0016555:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016559:	e9 44 fd ff ff       	jmp    c00162a2 <scanMADT()+0xd0>
c001655e:	90                   	nop
c001655f:	eb 01                	jmp    c0016562 <scanMADT()+0x390>
c0016561:	90                   	nop
c0016562:	83 c4 2c             	add    esp,0x2c
c0016565:	c3                   	ret    

c0016566 <ACPI::ACPI()>:
c0016566:	83 ec 0c             	sub    esp,0xc
c0016569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001656d:	83 ec 08             	sub    esp,0x8
c0016570:	68 5f 14 02 c0       	push   0xc002145f
c0016575:	50                   	push   eax
c0016576:	e8 a3 d1 ff ff       	call   c001371e <Device::Device(char const*)>
c001657b:	83 c4 10             	add    esp,0x10
c001657e:	ba 08 16 02 c0       	mov    edx,0xc0021608
c0016583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016587:	89 10                	mov    DWORD PTR [eax],edx
c0016589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001658d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0016594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016598:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c00165a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165a6:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c00165b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165b4:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c00165bb:	e8 12 fc ff ff       	call   c00161d2 <scanMADT()>
c00165c0:	90                   	nop
c00165c1:	83 c4 0c             	add    esp,0xc
c00165c4:	c3                   	ret    
c00165c5:	90                   	nop

c00165c6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00165c6:	83 ec 2c             	sub    esp,0x2c
c00165c9:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00165cd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00165d1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00165d5:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00165d9:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00165de:	88 d0                	mov    al,dl
c00165e0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00165e4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00165e9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00165f1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00165f5:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00165fb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00165ff:	0f 8d 97 00 00 00    	jge    c001669c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0016605:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016609:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001660d:	83 c2 2a             	add    edx,0x2a
c0016610:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0016614:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0016619:	75 78                	jne    c0016693 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001661b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001661f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016623:	83 c2 2a             	add    edx,0x2a
c0016626:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001662a:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001662e:	75 63                	jne    c0016693 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016630:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016635:	74 3a                	je     c0016671 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0016637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001663b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001663f:	83 c2 2a             	add    edx,0x2a
c0016642:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0016646:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001664a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001664d:	39 c2                	cmp    edx,eax
c001664f:	74 10                	je     c0016661 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0016651:	83 ec 0c             	sub    esp,0xc
c0016654:	68 6c 15 02 c0       	push   0xc002156c
c0016659:	e8 2a 67 ff ff       	call   c000cd88 <panic(char const*)>
c001665e:	83 c4 10             	add    esp,0x10
c0016661:	83 ec 0c             	sub    esp,0xc
c0016664:	68 64 14 02 c0       	push   0xc0021464
c0016669:	e8 1a 67 ff ff       	call   c000cd88 <panic(char const*)>
c001666e:	83 c4 10             	add    esp,0x10
c0016671:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016675:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016679:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001667d:	83 c2 2a             	add    edx,0x2a
c0016680:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0016684:	8b 02                	mov    eax,DWORD PTR [edx]
c0016686:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0016689:	89 01                	mov    DWORD PTR [ecx],eax
c001668b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001668e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0016693:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0016697:	e9 55 ff ff ff       	jmp    c00165f1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001669c:	90                   	nop
c001669d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166a1:	83 c4 2c             	add    esp,0x2c
c00166a4:	c2 04 00             	ret    0x4
c00166a7:	90                   	nop

c00166a8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00166a8:	56                   	push   esi
c00166a9:	53                   	push   ebx
c00166aa:	83 ec 14             	sub    esp,0x14
c00166ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166b1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00166b5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00166b9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00166be:	88 c8                	mov    al,cl
c00166c0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00166c4:	88 d0                	mov    al,dl
c00166c6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00166ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166ce:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c00166d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166d8:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c00166de:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c00166e3:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00166e8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00166ed:	83 ec 04             	sub    esp,0x4
c00166f0:	56                   	push   esi
c00166f1:	53                   	push   ebx
c00166f2:	51                   	push   ecx
c00166f3:	52                   	push   edx
c00166f4:	50                   	push   eax
c00166f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00166f9:	68 9c 15 02 c0       	push   0xc002159c
c00166fe:	e8 67 65 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0016703:	83 c4 20             	add    esp,0x20
c0016706:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001670a:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016710:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016714:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0016717:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001671b:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001671f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016723:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016729:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001672d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0016730:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016734:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0016739:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001673d:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016743:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0016747:	8d 48 01             	lea    ecx,[eax+0x1]
c001674a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001674e:	83 c2 2a             	add    edx,0x2a
c0016751:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0016755:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016759:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001675f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016763:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0016766:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001676a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001676e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016772:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016778:	8d 50 01             	lea    edx,[eax+0x1]
c001677b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001677f:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0016785:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016789:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001678f:	3d 00 08 00 00       	cmp    eax,0x800
c0016794:	75 10                	jne    c00167a6 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0016796:	83 ec 0c             	sub    esp,0xc
c0016799:	68 73 14 02 c0       	push   0xc0021473
c001679e:	e8 e5 65 ff ff       	call   c000cd88 <panic(char const*)>
c00167a3:	83 c4 10             	add    esp,0x10
c00167a6:	90                   	nop
c00167a7:	83 c4 14             	add    esp,0x14
c00167aa:	5b                   	pop    ebx
c00167ab:	5e                   	pop    esi
c00167ac:	c3                   	ret    
c00167ad:	90                   	nop

c00167ae <ACPI::setScreenBrightnessLevel(void*, int)>:
c00167ae:	b8 00 00 00 00       	mov    eax,0x0
c00167b3:	c3                   	ret    

c00167b4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00167b4:	83 ec 1c             	sub    esp,0x1c
c00167b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00167bb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00167be:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00167c2:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c00167c7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00167cc:	83 ec 08             	sub    esp,0x8
c00167cf:	52                   	push   edx
c00167d0:	50                   	push   eax
c00167d1:	e8 60 4a ff ff       	call   c000b236 <Computer::readCMOS(unsigned char)>
c00167d6:	83 c4 10             	add    esp,0x10
c00167d9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00167dd:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c00167e2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00167e7:	83 ec 04             	sub    esp,0x4
c00167ea:	6a 01                	push   0x1
c00167ec:	52                   	push   edx
c00167ed:	50                   	push   eax
c00167ee:	e8 4b 4b ff ff       	call   c000b33e <Computer::writeCMOS(unsigned char, unsigned char)>
c00167f3:	83 c4 10             	add    esp,0x10
c00167f6:	90                   	nop
c00167f7:	83 c4 1c             	add    esp,0x1c
c00167fa:	c3                   	ret    
c00167fb:	90                   	nop

c00167fc <ACPI::open(int, int, void*)>:
c00167fc:	53                   	push   ebx
c00167fd:	83 ec 18             	sub    esp,0x18
c0016800:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016804:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c001680b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001680f:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0016815:	84 c0                	test   al,al
c0016817:	74 60                	je     c0016879 <ACPI::open(int, int, void*)+0x7d>
c0016819:	83 ec 0c             	sub    esp,0xc
c001681c:	68 58 01 00 00       	push   0x158
c0016821:	e8 fe b9 ff ff       	call   c0012224 <operator new(unsigned long)>
c0016826:	83 c4 10             	add    esp,0x10
c0016829:	89 c3                	mov    ebx,eax
c001682b:	83 ec 0c             	sub    esp,0xc
c001682e:	53                   	push   ebx
c001682f:	e8 e2 45 00 00       	call   c001ae16 <PCI::PCI()>
c0016834:	83 c4 10             	add    esp,0x10
c0016837:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001683b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001683f:	83 ec 08             	sub    esp,0x8
c0016842:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016846:	50                   	push   eax
c0016847:	e8 e2 cc ff ff       	call   c001352e <Device::addChild(Device*)>
c001684c:	83 c4 10             	add    esp,0x10
c001684f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016853:	8b 00                	mov    eax,DWORD PTR [eax]
c0016855:	83 c0 08             	add    eax,0x8
c0016858:	8b 00                	mov    eax,DWORD PTR [eax]
c001685a:	6a 00                	push   0x0
c001685c:	6a 00                	push   0x0
c001685e:	6a 00                	push   0x0
c0016860:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016864:	ff d0                	call   eax
c0016866:	83 c4 10             	add    esp,0x10
c0016869:	83 ec 0c             	sub    esp,0xc
c001686c:	68 90 14 02 c0       	push   0xc0021490
c0016871:	e8 f4 63 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0016876:	83 c4 10             	add    esp,0x10
c0016879:	83 ec 0c             	sub    esp,0xc
c001687c:	68 9b 14 02 c0       	push   0xc002149b
c0016881:	e8 5c 50 ff ff       	call   c000b8e2 <Thr::loadKernelSymbolTable(char const*)>
c0016886:	83 c4 10             	add    esp,0x10
c0016889:	8b 1d 68 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022e68
c001688f:	83 ec 08             	sub    esp,0x8
c0016892:	6a 01                	push   0x1
c0016894:	68 b9 14 02 c0       	push   0xc00214b9
c0016899:	e8 06 5b ff ff       	call   c000c3a4 <Thr::loadDLL(char const*, bool)>
c001689e:	83 c4 10             	add    esp,0x10
c00168a1:	83 ec 08             	sub    esp,0x8
c00168a4:	53                   	push   ebx
c00168a5:	50                   	push   eax
c00168a6:	e8 4c 5c ff ff       	call   c000c4f7 <Thr::executeDLL(unsigned long, void*)>
c00168ab:	83 c4 10             	add    esp,0x10
c00168ae:	8b 1d 68 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022e68
c00168b4:	83 ec 08             	sub    esp,0x8
c00168b7:	6a 01                	push   0x1
c00168b9:	68 d6 14 02 c0       	push   0xc00214d6
c00168be:	e8 e1 5a ff ff       	call   c000c3a4 <Thr::loadDLL(char const*, bool)>
c00168c3:	83 c4 10             	add    esp,0x10
c00168c6:	83 ec 08             	sub    esp,0x8
c00168c9:	53                   	push   ebx
c00168ca:	50                   	push   eax
c00168cb:	e8 27 5c ff ff       	call   c000c4f7 <Thr::executeDLL(unsigned long, void*)>
c00168d0:	83 c4 10             	add    esp,0x10
c00168d3:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c00168d8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00168de:	83 e0 04             	and    eax,0x4
c00168e1:	84 c0                	test   al,al
c00168e3:	74 59                	je     c001693e <ACPI::open(int, int, void*)+0x142>
c00168e5:	8b 1d 68 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022e68
c00168eb:	83 ec 08             	sub    esp,0x8
c00168ee:	6a 01                	push   0x1
c00168f0:	68 f3 14 02 c0       	push   0xc00214f3
c00168f5:	e8 aa 5a ff ff       	call   c000c3a4 <Thr::loadDLL(char const*, bool)>
c00168fa:	83 c4 10             	add    esp,0x10
c00168fd:	83 ec 08             	sub    esp,0x8
c0016900:	53                   	push   ebx
c0016901:	50                   	push   eax
c0016902:	e8 f0 5b ff ff       	call   c000c4f7 <Thr::executeDLL(unsigned long, void*)>
c0016907:	83 c4 10             	add    esp,0x10
c001690a:	a1 88 40 02 c0       	mov    eax,ds:0xc0024088
c001690f:	83 ec 08             	sub    esp,0x8
c0016912:	68 10 15 02 c0       	push   0xc0021510
c0016917:	50                   	push   eax
c0016918:	e8 19 f8 ff ff       	call   c0016136 <findDataTable(unsigned char*, char*)>
c001691d:	83 c4 10             	add    esp,0x10
c0016920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016924:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016929:	74 13                	je     c001693e <ACPI::open(int, int, void*)+0x142>
c001692b:	83 ec 08             	sub    esp,0x8
c001692e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016932:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016936:	e8 79 fe ff ff       	call   c00167b4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001693b:	83 c4 10             	add    esp,0x10
c001693e:	b8 00 00 00 00       	mov    eax,0x0
c0016943:	83 c4 18             	add    esp,0x18
c0016946:	5b                   	pop    ebx
c0016947:	c3                   	ret    

c0016948 <ACPI::sleep()>:
c0016948:	83 ec 0c             	sub    esp,0xc
c001694b:	a1 60 3e 02 c0       	mov    eax,ds:0xc0023e60
c0016950:	85 c0                	test   eax,eax
c0016952:	74 07                	je     c001695b <ACPI::sleep()+0x13>
c0016954:	a1 60 3e 02 c0       	mov    eax,ds:0xc0023e60
c0016959:	ff d0                	call   eax
c001695b:	90                   	nop
c001695c:	83 c4 0c             	add    esp,0xc
c001695f:	c3                   	ret    

c0016960 <CPU::close(int, int, void*)>:
c0016960:	31 c0                	xor    eax,eax
c0016962:	c3                   	ret    

c0016963 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0016963:	55                   	push   ebp
c0016964:	57                   	push   edi
c0016965:	56                   	push   esi
c0016966:	53                   	push   ebx
c0016967:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001696b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001696f:	89 ce                	mov    esi,ecx
c0016971:	89 d5                	mov    ebp,edx
c0016973:	80 f9 04             	cmp    cl,0x4
c0016976:	75 28                	jne    c00169a0 <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c0016978:	8d 42 f9             	lea    eax,[edx-0x7]
c001697b:	3c 03                	cmp    al,0x3
c001697d:	0f 86 63 01 00 00    	jbe    c0016ae6 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0016983:	80 fa 03             	cmp    dl,0x3
c0016986:	0f 84 5a 01 00 00    	je     c0016ae6 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c001698c:	8d 7a f2             	lea    edi,[edx-0xe]
c001698f:	b8 90 27 02 c0       	mov    eax,0xc0022790
c0016994:	89 fb                	mov    ebx,edi
c0016996:	80 fb 01             	cmp    bl,0x1
c0016999:	77 4e                	ja     c00169e9 <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c001699b:	e9 52 01 00 00       	jmp    c0016af2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00169a0:	80 f9 05             	cmp    cl,0x5
c00169a3:	75 4d                	jne    c00169f2 <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c00169a5:	b8 a0 27 02 c0       	mov    eax,0xc00227a0
c00169aa:	80 fa 03             	cmp    dl,0x3
c00169ad:	0f 86 3f 01 00 00    	jbe    c0016af2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00169b3:	8d 7a fa             	lea    edi,[edx-0x6]
c00169b6:	b8 b0 27 02 c0       	mov    eax,0xc00227b0
c00169bb:	89 fb                	mov    ebx,edi
c00169bd:	80 fb 01             	cmp    bl,0x1
c00169c0:	0f 86 2c 01 00 00    	jbe    c0016af2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00169c6:	b8 c0 27 02 c0       	mov    eax,0xc00227c0
c00169cb:	80 fa 08             	cmp    dl,0x8
c00169ce:	0f 84 1e 01 00 00    	je     c0016af2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00169d4:	89 d7                	mov    edi,edx
c00169d6:	b8 d0 27 02 c0       	mov    eax,0xc00227d0
c00169db:	83 e7 fb             	and    edi,0xfffffffb
c00169de:	89 fb                	mov    ebx,edi
c00169e0:	80 fb 09             	cmp    bl,0x9
c00169e3:	0f 84 09 01 00 00    	je     c0016af2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00169e9:	31 c0                	xor    eax,eax
c00169eb:	89 eb                	mov    ebx,ebp
c00169ed:	0f b6 fb             	movzx  edi,bl
c00169f0:	eb 30                	jmp    c0016a22 <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c00169f2:	31 c0                	xor    eax,eax
c00169f4:	80 f9 06             	cmp    cl,0x6
c00169f7:	75 f2                	jne    c00169eb <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00169f9:	80 fa 0a             	cmp    dl,0xa
c00169fc:	77 ed                	ja     c00169eb <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00169fe:	bf de 05 00 00       	mov    edi,0x5de
c0016a03:	0f a3 d7             	bt     edi,edx
c0016a06:	73 e3                	jae    c00169eb <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016a08:	b8 e0 27 02 c0       	mov    eax,0xc00227e0
c0016a0d:	e9 e0 00 00 00       	jmp    c0016af2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016a12:	39 c7                	cmp    edi,eax
c0016a14:	0f 84 d3 00 00 00    	je     c0016aed <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0016a1a:	40                   	inc    eax
c0016a1b:	3d d0 00 00 00       	cmp    eax,0xd0
c0016a20:	74 09                	je     c0016a2b <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c0016a22:	89 f3                	mov    ebx,esi
c0016a24:	80 fb 0f             	cmp    bl,0xf
c0016a27:	75 f1                	jne    c0016a1a <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0016a29:	eb e7                	jmp    c0016a12 <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c0016a2b:	80 f9 10             	cmp    cl,0x10
c0016a2e:	75 14                	jne    c0016a44 <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c0016a30:	8d 42 fc             	lea    eax,[edx-0x4]
c0016a33:	83 e0 fb             	and    eax,0xfffffffb
c0016a36:	3c 02                	cmp    al,0x2
c0016a38:	76 34                	jbe    c0016a6e <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c0016a3a:	b8 81 17 02 c0       	mov    eax,0xc0021781
c0016a3f:	80 fa 02             	cmp    dl,0x2
c0016a42:	eb 24                	jmp    c0016a68 <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c0016a44:	80 f9 11             	cmp    cl,0x11
c0016a47:	75 13                	jne    c0016a5c <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0016a49:	b8 81 17 02 c0       	mov    eax,0xc0021781
c0016a4e:	80 fa 03             	cmp    dl,0x3
c0016a51:	0f 85 9b 00 00 00    	jne    c0016af2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016a57:	e9 91 00 00 00       	jmp    c0016aed <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0016a5c:	80 f9 12             	cmp    cl,0x12
c0016a5f:	75 14                	jne    c0016a75 <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c0016a61:	b8 81 17 02 c0       	mov    eax,0xc0021781
c0016a66:	fe ca                	dec    dl
c0016a68:	0f 85 84 00 00 00    	jne    c0016af2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016a6e:	b8 00 28 02 c0       	mov    eax,0xc0022800
c0016a73:	eb 7d                	jmp    c0016af2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016a75:	80 f9 14             	cmp    cl,0x14
c0016a78:	75 12                	jne    c0016a8c <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0016a7a:	4a                   	dec    edx
c0016a7b:	b8 81 17 02 c0       	mov    eax,0xc0021781
c0016a80:	80 fa 01             	cmp    dl,0x1
c0016a83:	77 6d                	ja     c0016af2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016a85:	b8 10 28 02 c0       	mov    eax,0xc0022810
c0016a8a:	eb 66                	jmp    c0016af2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016a8c:	80 f9 15             	cmp    cl,0x15
c0016a8f:	75 31                	jne    c0016ac2 <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c0016a91:	b8 20 28 02 c0       	mov    eax,0xc0022820
c0016a96:	80 fa 01             	cmp    dl,0x1
c0016a99:	74 57                	je     c0016af2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016a9b:	b8 81 17 02 c0       	mov    eax,0xc0021781
c0016aa0:	80 fa 13             	cmp    dl,0x13
c0016aa3:	76 0c                	jbe    c0016ab1 <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c0016aa5:	80 fa 30             	cmp    dl,0x30
c0016aa8:	75 48                	jne    c0016af2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016aaa:	b8 40 28 02 c0       	mov    eax,0xc0022840
c0016aaf:	eb 41                	jmp    c0016af2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016ab1:	b9 04 00 09 00       	mov    ecx,0x90004
c0016ab6:	0f a3 d1             	bt     ecx,edx
c0016ab9:	73 37                	jae    c0016af2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016abb:	b8 30 28 02 c0       	mov    eax,0xc0022830
c0016ac0:	eb 30                	jmp    c0016af2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016ac2:	b8 81 17 02 c0       	mov    eax,0xc0021781
c0016ac7:	80 f9 16             	cmp    cl,0x16
c0016aca:	75 26                	jne    c0016af2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016acc:	b8 50 28 02 c0       	mov    eax,0xc0022850
c0016ad1:	84 d2                	test   dl,dl
c0016ad3:	74 1d                	je     c0016af2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016ad5:	b8 81 17 02 c0       	mov    eax,0xc0021781
c0016ada:	80 fa 30             	cmp    dl,0x30
c0016add:	75 13                	jne    c0016af2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016adf:	b8 60 28 02 c0       	mov    eax,0xc0022860
c0016ae4:	eb 0c                	jmp    c0016af2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016ae6:	b8 80 27 02 c0       	mov    eax,0xc0022780
c0016aeb:	eb 05                	jmp    c0016af2 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016aed:	b8 f0 27 02 c0       	mov    eax,0xc00227f0
c0016af2:	5b                   	pop    ebx
c0016af3:	5e                   	pop    esi
c0016af4:	5f                   	pop    edi
c0016af5:	5d                   	pop    ebp
c0016af6:	c3                   	ret    

c0016af7 <lookupIntelCPUName(unsigned char, unsigned char)>:
c0016af7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016afb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016aff:	80 f9 04             	cmp    cl,0x4
c0016b02:	75 6b                	jne    c0016b6f <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0016b04:	b8 e0 25 02 c0       	mov    eax,0xc00225e0
c0016b09:	80 fa 01             	cmp    dl,0x1
c0016b0c:	0f 86 92 02 00 00    	jbe    c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b12:	b8 f0 25 02 c0       	mov    eax,0xc00225f0
c0016b17:	80 fa 02             	cmp    dl,0x2
c0016b1a:	0f 84 84 02 00 00    	je     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b20:	b8 00 26 02 c0       	mov    eax,0xc0022600
c0016b25:	80 fa 03             	cmp    dl,0x3
c0016b28:	0f 84 76 02 00 00    	je     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b2e:	b8 10 26 02 c0       	mov    eax,0xc0022610
c0016b33:	80 fa 04             	cmp    dl,0x4
c0016b36:	0f 84 68 02 00 00    	je     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b3c:	b8 20 26 02 c0       	mov    eax,0xc0022620
c0016b41:	80 fa 05             	cmp    dl,0x5
c0016b44:	0f 84 5a 02 00 00    	je     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b4a:	b8 00 26 02 c0       	mov    eax,0xc0022600
c0016b4f:	80 fa 07             	cmp    dl,0x7
c0016b52:	0f 84 4c 02 00 00    	je     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b58:	83 ea 08             	sub    edx,0x8
c0016b5b:	b8 81 17 02 c0       	mov    eax,0xc0021781
c0016b60:	80 fa 01             	cmp    dl,0x1
c0016b63:	0f 87 3b 02 00 00    	ja     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b69:	b8 30 26 02 c0       	mov    eax,0xc0022630
c0016b6e:	c3                   	ret    
c0016b6f:	80 f9 05             	cmp    cl,0x5
c0016b72:	75 45                	jne    c0016bb9 <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0016b74:	8d 4a ff             	lea    ecx,[edx-0x1]
c0016b77:	b8 40 26 02 c0       	mov    eax,0xc0022640
c0016b7c:	80 f9 02             	cmp    cl,0x2
c0016b7f:	0f 86 1f 02 00 00    	jbe    c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b85:	80 fa 04             	cmp    dl,0x4
c0016b88:	0f 84 f3 01 00 00    	je     c0016d81 <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c0016b8e:	80 fa 07             	cmp    dl,0x7
c0016b91:	0f 84 0d 02 00 00    	je     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b97:	b8 50 26 02 c0       	mov    eax,0xc0022650
c0016b9c:	80 fa 08             	cmp    dl,0x8
c0016b9f:	0f 84 ff 01 00 00    	je     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ba5:	b8 81 17 02 c0       	mov    eax,0xc0021781
c0016baa:	80 fa 09             	cmp    dl,0x9
c0016bad:	0f 85 f1 01 00 00    	jne    c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016bb3:	b8 60 26 02 c0       	mov    eax,0xc0022660
c0016bb8:	c3                   	ret    
c0016bb9:	80 f9 06             	cmp    cl,0x6
c0016bbc:	0f 85 85 01 00 00    	jne    c0016d47 <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c0016bc2:	b8 70 26 02 c0       	mov    eax,0xc0022670
c0016bc7:	80 fa 01             	cmp    dl,0x1
c0016bca:	0f 84 d4 01 00 00    	je     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016bd0:	8d 42 fb             	lea    eax,[edx-0x5]
c0016bd3:	3c 01                	cmp    al,0x1
c0016bd5:	0f 86 ac 01 00 00    	jbe    c0016d87 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0016bdb:	80 fa 03             	cmp    dl,0x3
c0016bde:	0f 84 a3 01 00 00    	je     c0016d87 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0016be4:	8d 4a f9             	lea    ecx,[edx-0x7]
c0016be7:	b8 90 26 02 c0       	mov    eax,0xc0022690
c0016bec:	80 f9 01             	cmp    cl,0x1
c0016bef:	0f 86 af 01 00 00    	jbe    c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016bf5:	80 fa 09             	cmp    dl,0x9
c0016bf8:	0f 84 8f 01 00 00    	je     c0016d8d <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0016bfe:	8d 4a f6             	lea    ecx,[edx-0xa]
c0016c01:	80 f9 01             	cmp    cl,0x1
c0016c04:	0f 86 9a 01 00 00    	jbe    c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c0a:	b8 a0 26 02 c0       	mov    eax,0xc00226a0
c0016c0f:	80 fa 0d             	cmp    dl,0xd
c0016c12:	0f 84 8c 01 00 00    	je     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c18:	b8 b0 26 02 c0       	mov    eax,0xc00226b0
c0016c1d:	80 fa 0e             	cmp    dl,0xe
c0016c20:	0f 84 7e 01 00 00    	je     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c26:	b8 c0 26 02 c0       	mov    eax,0xc00226c0
c0016c2b:	80 fa 0f             	cmp    dl,0xf
c0016c2e:	0f 84 70 01 00 00    	je     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c34:	b8 a0 26 02 c0       	mov    eax,0xc00226a0
c0016c39:	80 fa 15             	cmp    dl,0x15
c0016c3c:	0f 84 62 01 00 00    	je     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c42:	8d 4a ea             	lea    ecx,[edx-0x16]
c0016c45:	b8 c0 26 02 c0       	mov    eax,0xc00226c0
c0016c4a:	80 f9 01             	cmp    cl,0x1
c0016c4d:	0f 86 51 01 00 00    	jbe    c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c53:	80 fa 1a             	cmp    dl,0x1a
c0016c56:	0f 84 37 01 00 00    	je     c0016d93 <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0016c5c:	80 fa 1c             	cmp    dl,0x1c
c0016c5f:	0f 84 34 01 00 00    	je     c0016d99 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0016c65:	80 fa 1d             	cmp    dl,0x1d
c0016c68:	0f 84 36 01 00 00    	je     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c6e:	b8 f0 26 02 c0       	mov    eax,0xc00226f0
c0016c73:	80 fa 25             	cmp    dl,0x25
c0016c76:	0f 84 28 01 00 00    	je     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c7c:	8d 4a da             	lea    ecx,[edx-0x26]
c0016c7f:	b8 e0 26 02 c0       	mov    eax,0xc00226e0
c0016c84:	80 f9 01             	cmp    cl,0x1
c0016c87:	0f 86 17 01 00 00    	jbe    c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c8d:	b8 00 27 02 c0       	mov    eax,0xc0022700
c0016c92:	80 fa 2a             	cmp    dl,0x2a
c0016c95:	0f 84 09 01 00 00    	je     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c9b:	b8 f0 26 02 c0       	mov    eax,0xc00226f0
c0016ca0:	80 fa 2c             	cmp    dl,0x2c
c0016ca3:	0f 84 fb 00 00 00    	je     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ca9:	b8 00 27 02 c0       	mov    eax,0xc0022700
c0016cae:	80 fa 2d             	cmp    dl,0x2d
c0016cb1:	0f 84 ed 00 00 00    	je     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016cb7:	b8 d0 26 02 c0       	mov    eax,0xc00226d0
c0016cbc:	80 fa 2e             	cmp    dl,0x2e
c0016cbf:	0f 84 df 00 00 00    	je     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016cc5:	b8 f0 26 02 c0       	mov    eax,0xc00226f0
c0016cca:	80 fa 2f             	cmp    dl,0x2f
c0016ccd:	0f 84 d1 00 00 00    	je     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016cd3:	8d 4a cb             	lea    ecx,[edx-0x35]
c0016cd6:	b8 e0 26 02 c0       	mov    eax,0xc00226e0
c0016cdb:	80 f9 01             	cmp    cl,0x1
c0016cde:	0f 86 c0 00 00 00    	jbe    c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ce4:	b8 10 27 02 c0       	mov    eax,0xc0022710
c0016ce9:	80 fa 37             	cmp    dl,0x37
c0016cec:	0f 84 b2 00 00 00    	je     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016cf2:	b8 20 27 02 c0       	mov    eax,0xc0022720
c0016cf7:	80 fa 3a             	cmp    dl,0x3a
c0016cfa:	0f 84 a4 00 00 00    	je     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d00:	b8 30 27 02 c0       	mov    eax,0xc0022730
c0016d05:	80 fa 3c             	cmp    dl,0x3c
c0016d08:	0f 84 96 00 00 00    	je     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d0e:	b8 40 27 02 c0       	mov    eax,0xc0022740
c0016d13:	80 fa 3d             	cmp    dl,0x3d
c0016d16:	0f 84 88 00 00 00    	je     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d1c:	b8 20 27 02 c0       	mov    eax,0xc0022720
c0016d21:	80 fa 3e             	cmp    dl,0x3e
c0016d24:	74 7e                	je     c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d26:	8d 42 bb             	lea    eax,[edx-0x45]
c0016d29:	3c 01                	cmp    al,0x1
c0016d2b:	76 72                	jbe    c0016d9f <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0016d2d:	80 fa 3f             	cmp    dl,0x3f
c0016d30:	74 6d                	je     c0016d9f <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0016d32:	80 fa 4a             	cmp    dl,0x4a
c0016d35:	74 0a                	je     c0016d41 <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0016d37:	b8 81 17 02 c0       	mov    eax,0xc0021781
c0016d3c:	80 fa 4d             	cmp    dl,0x4d
c0016d3f:	75 63                	jne    c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d41:	b8 10 27 02 c0       	mov    eax,0xc0022710
c0016d46:	c3                   	ret    
c0016d47:	b8 81 17 02 c0       	mov    eax,0xc0021781
c0016d4c:	80 f9 0b             	cmp    cl,0xb
c0016d4f:	75 0a                	jne    c0016d5b <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0016d51:	fe ca                	dec    dl
c0016d53:	75 4f                	jne    c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d55:	b8 50 27 02 c0       	mov    eax,0xc0022750
c0016d5a:	c3                   	ret    
c0016d5b:	80 f9 0f             	cmp    cl,0xf
c0016d5e:	75 44                	jne    c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d60:	b8 60 27 02 c0       	mov    eax,0xc0022760
c0016d65:	80 fa 02             	cmp    dl,0x2
c0016d68:	76 3a                	jbe    c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d6a:	8d 42 fd             	lea    eax,[edx-0x3]
c0016d6d:	3c 01                	cmp    al,0x1
c0016d6f:	76 0a                	jbe    c0016d7b <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0016d71:	b8 81 17 02 c0       	mov    eax,0xc0021781
c0016d76:	80 fa 06             	cmp    dl,0x6
c0016d79:	75 29                	jne    c0016da4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d7b:	b8 70 27 02 c0       	mov    eax,0xc0022770
c0016d80:	c3                   	ret    
c0016d81:	b8 50 26 02 c0       	mov    eax,0xc0022650
c0016d86:	c3                   	ret    
c0016d87:	b8 80 26 02 c0       	mov    eax,0xc0022680
c0016d8c:	c3                   	ret    
c0016d8d:	b8 a0 26 02 c0       	mov    eax,0xc00226a0
c0016d92:	c3                   	ret    
c0016d93:	b8 d0 26 02 c0       	mov    eax,0xc00226d0
c0016d98:	c3                   	ret    
c0016d99:	b8 e0 26 02 c0       	mov    eax,0xc00226e0
c0016d9e:	c3                   	ret    
c0016d9f:	b8 30 27 02 c0       	mov    eax,0xc0022730
c0016da4:	c3                   	ret    

c0016da5 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0016da5:	60                   	pusha  
c0016da6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016daa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016dae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016db2:	9c                   	pushf  
c0016db3:	fa                   	cli    
c0016db4:	0f 09                	wbinvd 
c0016db6:	0f 30                	wrmsr  
c0016db8:	9d                   	popf   
c0016db9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016dbd:	89 02                	mov    DWORD PTR [edx],eax
c0016dbf:	61                   	popa   
c0016dc0:	c3                   	ret    

c0016dc1 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0016dc1:	60                   	pusha  
c0016dc2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016dc6:	9c                   	pushf  
c0016dc7:	fa                   	cli    
c0016dc8:	0f 09                	wbinvd 
c0016dca:	31 c0                	xor    eax,eax
c0016dcc:	31 d2                	xor    edx,edx
c0016dce:	0f 32                	rdmsr  
c0016dd0:	9d                   	popf   
c0016dd1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016dd5:	89 02                	mov    DWORD PTR [edx],eax
c0016dd7:	61                   	popa   
c0016dd8:	c3                   	ret    

c0016dd9 <AMD_K6_writeback(int, int, int)>:
c0016dd9:	56                   	push   esi
c0016dda:	53                   	push   ebx
c0016ddb:	83 ec 10             	sub    esp,0x10
c0016dde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016de2:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0016de7:	75 5d                	jne    c0016e46 <AMD_K6_writeback(int, int, int)+0x6d>
c0016de9:	83 f8 08             	cmp    eax,0x8
c0016dec:	75 09                	jne    c0016df7 <AMD_K6_writeback(int, int, int)+0x1e>
c0016dee:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0016df3:	7e 13                	jle    c0016e08 <AMD_K6_writeback(int, int, int)+0x2f>
c0016df5:	eb 30                	jmp    c0016e27 <AMD_K6_writeback(int, int, int)+0x4e>
c0016df7:	83 f8 06             	cmp    eax,0x6
c0016dfa:	7c 4a                	jl     c0016e46 <AMD_K6_writeback(int, int, int)+0x6d>
c0016dfc:	83 f8 07             	cmp    eax,0x7
c0016dff:	7e 07                	jle    c0016e08 <AMD_K6_writeback(int, int, int)+0x2f>
c0016e01:	83 f8 09             	cmp    eax,0x9
c0016e04:	74 21                	je     c0016e27 <AMD_K6_writeback(int, int, int)+0x4e>
c0016e06:	eb 3e                	jmp    c0016e46 <AMD_K6_writeback(int, int, int)+0x6d>
c0016e08:	89 e6                	mov    esi,esp
c0016e0a:	8b 1d 44 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023644
c0016e10:	56                   	push   esi
c0016e11:	c1 eb 15             	shr    ebx,0x15
c0016e14:	68 82 00 00 c0       	push   0xc0000082
c0016e19:	83 e3 7e             	and    ebx,0x7e
c0016e1c:	e8 a0 ff ff ff       	call   c0016dc1 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016e21:	56                   	push   esi
c0016e22:	6a 00                	push   0x0
c0016e24:	53                   	push   ebx
c0016e25:	eb 12                	jmp    c0016e39 <AMD_K6_writeback(int, int, int)+0x60>
c0016e27:	89 e3                	mov    ebx,esp
c0016e29:	53                   	push   ebx
c0016e2a:	68 82 00 00 c0       	push   0xc0000082
c0016e2f:	e8 8d ff ff ff       	call   c0016dc1 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016e34:	53                   	push   ebx
c0016e35:	6a 00                	push   0x0
c0016e37:	6a 00                	push   0x0
c0016e39:	68 82 00 00 c0       	push   0xc0000082
c0016e3e:	e8 62 ff ff ff       	call   c0016da5 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016e43:	83 c4 18             	add    esp,0x18
c0016e46:	83 c4 10             	add    esp,0x10
c0016e49:	5b                   	pop    ebx
c0016e4a:	5e                   	pop    esi
c0016e4b:	c3                   	ret    

c0016e4c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0016e4c:	55                   	push   ebp
c0016e4d:	57                   	push   edi
c0016e4e:	56                   	push   esi
c0016e4f:	53                   	push   ebx
c0016e50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016e54:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016e58:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0016e5c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0016e60:	39 05 80 28 02 c0    	cmp    DWORD PTR ds:0xc0022880,eax
c0016e66:	75 23                	jne    c0016e8b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0016e68:	a1 2c 42 02 c0       	mov    eax,ds:0xc002422c
c0016e6d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016e71:	89 06                	mov    DWORD PTR [esi],eax
c0016e73:	a1 28 42 02 c0       	mov    eax,ds:0xc0024228
c0016e78:	89 07                	mov    DWORD PTR [edi],eax
c0016e7a:	a1 24 42 02 c0       	mov    eax,ds:0xc0024224
c0016e7f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0016e82:	a1 20 42 02 c0       	mov    eax,ds:0xc0024220
c0016e87:	89 02                	mov    DWORD PTR [edx],eax
c0016e89:	eb 3f                	jmp    c0016eca <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0016e8b:	31 c9                	xor    ecx,ecx
c0016e8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016e91:	0f a2                	cpuid  
c0016e93:	89 06                	mov    DWORD PTR [esi],eax
c0016e95:	89 1f                	mov    DWORD PTR [edi],ebx
c0016e97:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016e9b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0016e9e:	89 10                	mov    DWORD PTR [eax],edx
c0016ea0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ea4:	a3 80 28 02 c0       	mov    ds:0xc0022880,eax
c0016ea9:	8b 06                	mov    eax,DWORD PTR [esi]
c0016eab:	a3 2c 42 02 c0       	mov    ds:0xc002422c,eax
c0016eb0:	8b 07                	mov    eax,DWORD PTR [edi]
c0016eb2:	a3 28 42 02 c0       	mov    ds:0xc0024228,eax
c0016eb7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016eba:	a3 24 42 02 c0       	mov    ds:0xc0024224,eax
c0016ebf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ec3:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ec5:	a3 20 42 02 c0       	mov    ds:0xc0024220,eax
c0016eca:	5b                   	pop    ebx
c0016ecb:	5e                   	pop    esi
c0016ecc:	5f                   	pop    edi
c0016ecd:	5d                   	pop    ebp
c0016ece:	c3                   	ret    

c0016ecf <cpuidCheckEDX(unsigned int)>:
c0016ecf:	83 ec 10             	sub    esp,0x10
c0016ed2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016ed6:	50                   	push   eax
c0016ed7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016edb:	50                   	push   eax
c0016edc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016ee0:	50                   	push   eax
c0016ee1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016ee5:	50                   	push   eax
c0016ee6:	6a 01                	push   0x1
c0016ee8:	e8 5f ff ff ff       	call   c0016e4c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016eed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016ef1:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0016ef5:	0f 95 c0             	setne  al
c0016ef8:	83 c4 24             	add    esp,0x24
c0016efb:	c3                   	ret    

c0016efc <cpuidCheckECX(unsigned int)>:
c0016efc:	83 ec 10             	sub    esp,0x10
c0016eff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016f03:	50                   	push   eax
c0016f04:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016f08:	50                   	push   eax
c0016f09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016f0d:	50                   	push   eax
c0016f0e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016f12:	50                   	push   eax
c0016f13:	6a 01                	push   0x1
c0016f15:	e8 32 ff ff ff       	call   c0016e4c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016f1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f1e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0016f22:	0f 95 c0             	setne  al
c0016f25:	83 c4 24             	add    esp,0x24
c0016f28:	c3                   	ret    

c0016f29 <cpuidCheckExtendedEBX(unsigned int)>:
c0016f29:	83 ec 10             	sub    esp,0x10
c0016f2c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016f30:	50                   	push   eax
c0016f31:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016f35:	50                   	push   eax
c0016f36:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016f3a:	50                   	push   eax
c0016f3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016f3f:	50                   	push   eax
c0016f40:	6a 07                	push   0x7
c0016f42:	e8 05 ff ff ff       	call   c0016e4c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016f47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f4b:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0016f4f:	0f 95 c0             	setne  al
c0016f52:	83 c4 24             	add    esp,0x24
c0016f55:	c3                   	ret    

c0016f56 <cpuidCheckExtendedECX(unsigned int)>:
c0016f56:	83 ec 10             	sub    esp,0x10
c0016f59:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016f5d:	50                   	push   eax
c0016f5e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016f62:	50                   	push   eax
c0016f63:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016f67:	50                   	push   eax
c0016f68:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016f6c:	50                   	push   eax
c0016f6d:	6a 07                	push   0x7
c0016f6f:	e8 d8 fe ff ff       	call   c0016e4c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016f74:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f78:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0016f7c:	0f 95 c0             	setne  al
c0016f7f:	83 c4 24             	add    esp,0x24
c0016f82:	c3                   	ret    

c0016f83 <getCPUNumber()>:
c0016f83:	31 c0                	xor    eax,eax
c0016f85:	c3                   	ret    

c0016f86 <thisCPU()>:
c0016f86:	e8 f8 ff ff ff       	call   c0016f83 <getCPUNumber()>
c0016f8b:	8b 15 68 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022e68
c0016f91:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0016f98:	c3                   	ret    
c0016f99:	90                   	nop

c0016f9a <CPU::CPU()>:
c0016f9a:	83 ec 0c             	sub    esp,0xc
c0016f9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fa1:	83 ec 08             	sub    esp,0x8
c0016fa4:	68 81 17 02 c0       	push   0xc0021781
c0016fa9:	50                   	push   eax
c0016faa:	e8 6f c7 ff ff       	call   c001371e <Device::Device(char const*)>
c0016faf:	83 c4 10             	add    esp,0x10
c0016fb2:	ba 58 18 02 c0       	mov    edx,0xc0021858
c0016fb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fbb:	89 10                	mov    DWORD PTR [eax],edx
c0016fbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fc1:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0016fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fcf:	05 78 01 00 00       	add    eax,0x178
c0016fd4:	83 ec 0c             	sub    esp,0xc
c0016fd7:	50                   	push   eax
c0016fd8:	e8 7f 55 ff ff       	call   c000c55c <GDT::GDT()>
c0016fdd:	83 c4 10             	add    esp,0x10
c0016fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fe4:	05 7c 09 00 00       	add    eax,0x97c
c0016fe9:	83 ec 0c             	sub    esp,0xc
c0016fec:	50                   	push   eax
c0016fed:	e8 ca 57 ff ff       	call   c000c7bc <IDT::IDT()>
c0016ff2:	83 c4 10             	add    esp,0x10
c0016ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ff9:	05 7c 11 00 00       	add    eax,0x117c
c0016ffe:	83 ec 0c             	sub    esp,0xc
c0017001:	50                   	push   eax
c0017002:	e8 73 9b ff ff       	call   c0010b7a <TSS::TSS()>
c0017007:	83 c4 10             	add    esp,0x10
c001700a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001700e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0017015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017019:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0017023:	90                   	nop
c0017024:	83 c4 0c             	add    esp,0xc
c0017027:	c3                   	ret    

c0017028 <CPU::displayFeatures()>:
c0017028:	c3                   	ret    
c0017029:	90                   	nop

c001702a <CPU::detectFeatures()>:
c001702a:	55                   	push   ebp
c001702b:	57                   	push   edi
c001702c:	56                   	push   esi
c001702d:	53                   	push   ebx
c001702e:	83 ec 50             	sub    esp,0x50
c0017031:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0017035:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001703f:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0017046:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c001704c:	6a 0d                	push   0xd
c001704e:	6a 00                	push   0x0
c0017050:	57                   	push   edi
c0017051:	e8 b2 95 fe ff       	call   c0000608 <memset>
c0017056:	83 c4 10             	add    esp,0x10
c0017059:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c001705e:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0017065:	0f 84 20 09 00 00    	je     c001798b <CPU::detectFeatures()+0x961>
c001706b:	83 ec 0c             	sub    esp,0xc
c001706e:	6a 10                	push   0x10
c0017070:	e8 5a fe ff ff       	call   c0016ecf <cpuidCheckEDX(unsigned int)>
c0017075:	83 e0 01             	and    eax,0x1
c0017078:	8d 14 00             	lea    edx,[eax+eax*1]
c001707b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017081:	83 e0 fd             	and    eax,0xfffffffd
c0017084:	09 d0                	or     eax,edx
c0017086:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001708c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0017093:	e8 37 fe ff ff       	call   c0016ecf <cpuidCheckEDX(unsigned int)>
c0017098:	83 e0 01             	and    eax,0x1
c001709b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00170a2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00170a8:	83 e0 fb             	and    eax,0xfffffffb
c00170ab:	09 d0                	or     eax,edx
c00170ad:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00170b3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00170ba:	e8 10 fe ff ff       	call   c0016ecf <cpuidCheckEDX(unsigned int)>
c00170bf:	83 e0 01             	and    eax,0x1
c00170c2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00170c9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00170cf:	83 e0 f7             	and    eax,0xfffffff7
c00170d2:	09 d0                	or     eax,edx
c00170d4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00170da:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00170e1:	e8 e9 fd ff ff       	call   c0016ecf <cpuidCheckEDX(unsigned int)>
c00170e6:	83 e0 01             	and    eax,0x1
c00170e9:	c1 e0 04             	shl    eax,0x4
c00170ec:	88 c2                	mov    dl,al
c00170ee:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00170f4:	83 e0 ef             	and    eax,0xffffffef
c00170f7:	09 d0                	or     eax,edx
c00170f9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00170ff:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0017106:	e8 c4 fd ff ff       	call   c0016ecf <cpuidCheckEDX(unsigned int)>
c001710b:	83 e0 01             	and    eax,0x1
c001710e:	c1 e0 05             	shl    eax,0x5
c0017111:	88 c2                	mov    dl,al
c0017113:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017119:	83 e0 df             	and    eax,0xffffffdf
c001711c:	09 d0                	or     eax,edx
c001711e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017124:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001712b:	e8 9f fd ff ff       	call   c0016ecf <cpuidCheckEDX(unsigned int)>
c0017130:	83 e0 01             	and    eax,0x1
c0017133:	8d 14 00             	lea    edx,[eax+eax*1]
c0017136:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001713c:	83 e0 fd             	and    eax,0xfffffffd
c001713f:	09 d0                	or     eax,edx
c0017141:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017147:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001714e:	e8 7c fd ff ff       	call   c0016ecf <cpuidCheckEDX(unsigned int)>
c0017153:	83 e0 01             	and    eax,0x1
c0017156:	c1 e0 06             	shl    eax,0x6
c0017159:	88 c2                	mov    dl,al
c001715b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017161:	83 e0 bf             	and    eax,0xffffffbf
c0017164:	09 d0                	or     eax,edx
c0017166:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001716c:	58                   	pop    eax
c001716d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0017171:	56                   	push   esi
c0017172:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0017176:	55                   	push   ebp
c0017177:	8d 44 24 28          	lea    eax,[esp+0x28]
c001717b:	50                   	push   eax
c001717c:	8d 54 24 28          	lea    edx,[esp+0x28]
c0017180:	52                   	push   edx
c0017181:	6a 00                	push   0x0
c0017183:	e8 c4 fc ff ff       	call   c0016e4c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017188:	83 c4 1c             	add    esp,0x1c
c001718b:	6a 04                	push   0x4
c001718d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017191:	50                   	push   eax
c0017192:	57                   	push   edi
c0017193:	e8 3a 94 fe ff       	call   c00005d2 <memcpy>
c0017198:	83 c4 0c             	add    esp,0xc
c001719b:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00171a1:	6a 04                	push   0x4
c00171a3:	56                   	push   esi
c00171a4:	50                   	push   eax
c00171a5:	e8 28 94 fe ff       	call   c00005d2 <memcpy>
c00171aa:	83 c4 0c             	add    esp,0xc
c00171ad:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00171b3:	6a 04                	push   0x4
c00171b5:	55                   	push   ebp
c00171b6:	50                   	push   eax
c00171b7:	e8 16 94 fe ff       	call   c00005d2 <memcpy>
c00171bc:	58                   	pop    eax
c00171bd:	5a                   	pop    edx
c00171be:	68 2c 16 02 c0       	push   0xc002162c
c00171c3:	57                   	push   edi
c00171c4:	e8 2f 95 fe ff       	call   c00006f8 <strcmp>
c00171c9:	83 c4 10             	add    esp,0x10
c00171cc:	85 c0                	test   eax,eax
c00171ce:	75 0f                	jne    c00171df <CPU::detectFeatures()+0x1b5>
c00171d0:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00171da:	e9 22 02 00 00       	jmp    c0017401 <CPU::detectFeatures()+0x3d7>
c00171df:	50                   	push   eax
c00171e0:	50                   	push   eax
c00171e1:	68 39 16 02 c0       	push   0xc0021639
c00171e6:	57                   	push   edi
c00171e7:	e8 0c 95 fe ff       	call   c00006f8 <strcmp>
c00171ec:	83 c4 10             	add    esp,0x10
c00171ef:	85 c0                	test   eax,eax
c00171f1:	74 dd                	je     c00171d0 <CPU::detectFeatures()+0x1a6>
c00171f3:	51                   	push   ecx
c00171f4:	51                   	push   ecx
c00171f5:	68 46 16 02 c0       	push   0xc0021646
c00171fa:	57                   	push   edi
c00171fb:	e8 f8 94 fe ff       	call   c00006f8 <strcmp>
c0017200:	83 c4 10             	add    esp,0x10
c0017203:	85 c0                	test   eax,eax
c0017205:	74 2a                	je     c0017231 <CPU::detectFeatures()+0x207>
c0017207:	52                   	push   edx
c0017208:	52                   	push   edx
c0017209:	68 53 16 02 c0       	push   0xc0021653
c001720e:	57                   	push   edi
c001720f:	e8 e4 94 fe ff       	call   c00006f8 <strcmp>
c0017214:	83 c4 10             	add    esp,0x10
c0017217:	85 c0                	test   eax,eax
c0017219:	74 16                	je     c0017231 <CPU::detectFeatures()+0x207>
c001721b:	50                   	push   eax
c001721c:	50                   	push   eax
c001721d:	68 60 16 02 c0       	push   0xc0021660
c0017222:	57                   	push   edi
c0017223:	e8 d0 94 fe ff       	call   c00006f8 <strcmp>
c0017228:	83 c4 10             	add    esp,0x10
c001722b:	85 c0                	test   eax,eax
c001722d:	74 48                	je     c0017277 <CPU::detectFeatures()+0x24d>
c001722f:	eb 0f                	jmp    c0017240 <CPU::detectFeatures()+0x216>
c0017231:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001723b:	e9 c1 01 00 00       	jmp    c0017401 <CPU::detectFeatures()+0x3d7>
c0017240:	50                   	push   eax
c0017241:	50                   	push   eax
c0017242:	68 6d 16 02 c0       	push   0xc002166d
c0017247:	57                   	push   edi
c0017248:	e8 ab 94 fe ff       	call   c00006f8 <strcmp>
c001724d:	83 c4 10             	add    esp,0x10
c0017250:	85 c0                	test   eax,eax
c0017252:	74 23                	je     c0017277 <CPU::detectFeatures()+0x24d>
c0017254:	50                   	push   eax
c0017255:	50                   	push   eax
c0017256:	68 7a 16 02 c0       	push   0xc002167a
c001725b:	57                   	push   edi
c001725c:	e8 97 94 fe ff       	call   c00006f8 <strcmp>
c0017261:	83 c4 10             	add    esp,0x10
c0017264:	85 c0                	test   eax,eax
c0017266:	75 1e                	jne    c0017286 <CPU::detectFeatures()+0x25c>
c0017268:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017272:	e9 8a 01 00 00       	jmp    c0017401 <CPU::detectFeatures()+0x3d7>
c0017277:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0017281:	e9 7b 01 00 00       	jmp    c0017401 <CPU::detectFeatures()+0x3d7>
c0017286:	50                   	push   eax
c0017287:	50                   	push   eax
c0017288:	68 87 16 02 c0       	push   0xc0021687
c001728d:	57                   	push   edi
c001728e:	e8 65 94 fe ff       	call   c00006f8 <strcmp>
c0017293:	83 c4 10             	add    esp,0x10
c0017296:	85 c0                	test   eax,eax
c0017298:	75 0f                	jne    c00172a9 <CPU::detectFeatures()+0x27f>
c001729a:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00172a4:	e9 58 01 00 00       	jmp    c0017401 <CPU::detectFeatures()+0x3d7>
c00172a9:	50                   	push   eax
c00172aa:	50                   	push   eax
c00172ab:	68 46 16 02 c0       	push   0xc0021646
c00172b0:	57                   	push   edi
c00172b1:	e8 42 94 fe ff       	call   c00006f8 <strcmp>
c00172b6:	83 c4 10             	add    esp,0x10
c00172b9:	85 c0                	test   eax,eax
c00172bb:	75 0f                	jne    c00172cc <CPU::detectFeatures()+0x2a2>
c00172bd:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00172c7:	e9 35 01 00 00       	jmp    c0017401 <CPU::detectFeatures()+0x3d7>
c00172cc:	50                   	push   eax
c00172cd:	50                   	push   eax
c00172ce:	68 94 16 02 c0       	push   0xc0021694
c00172d3:	57                   	push   edi
c00172d4:	e8 1f 94 fe ff       	call   c00006f8 <strcmp>
c00172d9:	83 c4 10             	add    esp,0x10
c00172dc:	85 c0                	test   eax,eax
c00172de:	75 0f                	jne    c00172ef <CPU::detectFeatures()+0x2c5>
c00172e0:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00172ea:	e9 12 01 00 00       	jmp    c0017401 <CPU::detectFeatures()+0x3d7>
c00172ef:	51                   	push   ecx
c00172f0:	51                   	push   ecx
c00172f1:	68 a1 16 02 c0       	push   0xc00216a1
c00172f6:	57                   	push   edi
c00172f7:	e8 fc 93 fe ff       	call   c00006f8 <strcmp>
c00172fc:	83 c4 10             	add    esp,0x10
c00172ff:	85 c0                	test   eax,eax
c0017301:	75 0f                	jne    c0017312 <CPU::detectFeatures()+0x2e8>
c0017303:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001730d:	e9 ef 00 00 00       	jmp    c0017401 <CPU::detectFeatures()+0x3d7>
c0017312:	52                   	push   edx
c0017313:	52                   	push   edx
c0017314:	68 ae 16 02 c0       	push   0xc00216ae
c0017319:	57                   	push   edi
c001731a:	e8 d9 93 fe ff       	call   c00006f8 <strcmp>
c001731f:	83 c4 10             	add    esp,0x10
c0017322:	85 c0                	test   eax,eax
c0017324:	75 0f                	jne    c0017335 <CPU::detectFeatures()+0x30b>
c0017326:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0017330:	e9 cc 00 00 00       	jmp    c0017401 <CPU::detectFeatures()+0x3d7>
c0017335:	50                   	push   eax
c0017336:	50                   	push   eax
c0017337:	68 bb 16 02 c0       	push   0xc00216bb
c001733c:	57                   	push   edi
c001733d:	e8 b6 93 fe ff       	call   c00006f8 <strcmp>
c0017342:	83 c4 10             	add    esp,0x10
c0017345:	85 c0                	test   eax,eax
c0017347:	75 0f                	jne    c0017358 <CPU::detectFeatures()+0x32e>
c0017349:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0017353:	e9 a9 00 00 00       	jmp    c0017401 <CPU::detectFeatures()+0x3d7>
c0017358:	50                   	push   eax
c0017359:	50                   	push   eax
c001735a:	68 c8 16 02 c0       	push   0xc00216c8
c001735f:	57                   	push   edi
c0017360:	e8 93 93 fe ff       	call   c00006f8 <strcmp>
c0017365:	83 c4 10             	add    esp,0x10
c0017368:	85 c0                	test   eax,eax
c001736a:	75 0f                	jne    c001737b <CPU::detectFeatures()+0x351>
c001736c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0017376:	e9 86 00 00 00       	jmp    c0017401 <CPU::detectFeatures()+0x3d7>
c001737b:	50                   	push   eax
c001737c:	50                   	push   eax
c001737d:	68 d5 16 02 c0       	push   0xc00216d5
c0017382:	57                   	push   edi
c0017383:	e8 70 93 fe ff       	call   c00006f8 <strcmp>
c0017388:	83 c4 10             	add    esp,0x10
c001738b:	85 c0                	test   eax,eax
c001738d:	75 0c                	jne    c001739b <CPU::detectFeatures()+0x371>
c001738f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0017399:	eb 66                	jmp    c0017401 <CPU::detectFeatures()+0x3d7>
c001739b:	50                   	push   eax
c001739c:	50                   	push   eax
c001739d:	68 e2 16 02 c0       	push   0xc00216e2
c00173a2:	57                   	push   edi
c00173a3:	e8 50 93 fe ff       	call   c00006f8 <strcmp>
c00173a8:	83 c4 10             	add    esp,0x10
c00173ab:	85 c0                	test   eax,eax
c00173ad:	75 0c                	jne    c00173bb <CPU::detectFeatures()+0x391>
c00173af:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00173b9:	eb 46                	jmp    c0017401 <CPU::detectFeatures()+0x3d7>
c00173bb:	50                   	push   eax
c00173bc:	50                   	push   eax
c00173bd:	68 ef 16 02 c0       	push   0xc00216ef
c00173c2:	57                   	push   edi
c00173c3:	e8 30 93 fe ff       	call   c00006f8 <strcmp>
c00173c8:	83 c4 10             	add    esp,0x10
c00173cb:	85 c0                	test   eax,eax
c00173cd:	74 e0                	je     c00173af <CPU::detectFeatures()+0x385>
c00173cf:	50                   	push   eax
c00173d0:	50                   	push   eax
c00173d1:	68 fc 16 02 c0       	push   0xc00216fc
c00173d6:	57                   	push   edi
c00173d7:	e8 1c 93 fe ff       	call   c00006f8 <strcmp>
c00173dc:	83 c4 10             	add    esp,0x10
c00173df:	85 c0                	test   eax,eax
c00173e1:	74 cc                	je     c00173af <CPU::detectFeatures()+0x385>
c00173e3:	51                   	push   ecx
c00173e4:	51                   	push   ecx
c00173e5:	68 09 17 02 c0       	push   0xc0021709
c00173ea:	57                   	push   edi
c00173eb:	e8 08 93 fe ff       	call   c00006f8 <strcmp>
c00173f0:	83 c4 10             	add    esp,0x10
c00173f3:	85 c0                	test   eax,eax
c00173f5:	74 b8                	je     c00173af <CPU::detectFeatures()+0x385>
c00173f7:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0017401:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0017406:	0f 86 be 00 00 00    	jbe    c00174ca <CPU::detectFeatures()+0x4a0>
c001740c:	83 ec 0c             	sub    esp,0xc
c001740f:	68 80 00 00 00       	push   0x80
c0017414:	e8 10 fb ff ff       	call   c0016f29 <cpuidCheckExtendedEBX(unsigned int)>
c0017419:	83 e0 01             	and    eax,0x1
c001741c:	c1 e0 06             	shl    eax,0x6
c001741f:	88 c2                	mov    dl,al
c0017421:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017427:	83 e0 bf             	and    eax,0xffffffbf
c001742a:	09 d0                	or     eax,edx
c001742c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017432:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0017439:	e8 eb fa ff ff       	call   c0016f29 <cpuidCheckExtendedEBX(unsigned int)>
c001743e:	83 e0 01             	and    eax,0x1
c0017441:	c1 e0 04             	shl    eax,0x4
c0017444:	88 c2                	mov    dl,al
c0017446:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001744c:	83 e0 ef             	and    eax,0xffffffef
c001744f:	09 d0                	or     eax,edx
c0017451:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017457:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001745e:	e8 c6 fa ff ff       	call   c0016f29 <cpuidCheckExtendedEBX(unsigned int)>
c0017463:	c1 e0 07             	shl    eax,0x7
c0017466:	88 c2                	mov    dl,al
c0017468:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001746e:	83 e0 7f             	and    eax,0x7f
c0017471:	09 d0                	or     eax,edx
c0017473:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017479:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017480:	e8 d1 fa ff ff       	call   c0016f56 <cpuidCheckExtendedECX(unsigned int)>
c0017485:	83 e0 01             	and    eax,0x1
c0017488:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001748f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017495:	83 e0 f7             	and    eax,0xfffffff7
c0017498:	09 d0                	or     eax,edx
c001749a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00174a0:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00174a7:	e8 aa fa ff ff       	call   c0016f56 <cpuidCheckExtendedECX(unsigned int)>
c00174ac:	83 c4 10             	add    esp,0x10
c00174af:	83 e0 01             	and    eax,0x1
c00174b2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00174b9:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00174bf:	83 e0 fb             	and    eax,0xfffffffb
c00174c2:	09 d0                	or     eax,edx
c00174c4:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00174ca:	83 ec 0c             	sub    esp,0xc
c00174cd:	56                   	push   esi
c00174ce:	55                   	push   ebp
c00174cf:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00174d3:	57                   	push   edi
c00174d4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00174d8:	50                   	push   eax
c00174d9:	6a 01                	push   0x1
c00174db:	e8 6c f9 ff ff       	call   c0016e4c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00174e0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00174e4:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00174ea:	88 ca                	mov    dl,cl
c00174ec:	83 e0 f0             	and    eax,0xfffffff0
c00174ef:	83 e2 0f             	and    edx,0xf
c00174f2:	09 d0                	or     eax,edx
c00174f4:	88 ca                	mov    dl,cl
c00174f6:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00174fc:	c0 ea 04             	shr    dl,0x4
c00174ff:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0017503:	0f b6 c2             	movzx  eax,dl
c0017506:	83 c4 20             	add    esp,0x20
c0017509:	c1 e0 06             	shl    eax,0x6
c001750c:	89 c5                	mov    ebp,eax
c001750e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017514:	66 25 3f c0          	and    ax,0xc03f
c0017518:	09 e8                	or     eax,ebp
c001751a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0017521:	89 c8                	mov    eax,ecx
c0017523:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0017529:	c1 e8 08             	shr    eax,0x8
c001752c:	83 e2 3f             	and    edx,0x3f
c001752f:	83 e0 0f             	and    eax,0xf
c0017532:	89 c5                	mov    ebp,eax
c0017534:	c1 e5 06             	shl    ebp,0x6
c0017537:	09 d5                	or     ebp,edx
c0017539:	89 ea                	mov    edx,ebp
c001753b:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0017541:	88 c2                	mov    dl,al
c0017543:	c0 ea 02             	shr    dl,0x2
c0017546:	89 d5                	mov    ebp,edx
c0017548:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001754e:	83 e2 c0             	and    edx,0xffffffc0
c0017551:	09 d5                	or     ebp,edx
c0017553:	89 ea                	mov    edx,ebp
c0017555:	89 cd                	mov    ebp,ecx
c0017557:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001755d:	c1 ed 0c             	shr    ebp,0xc
c0017560:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0017566:	83 e5 03             	and    ebp,0x3
c0017569:	83 e2 cf             	and    edx,0xffffffcf
c001756c:	c1 e5 04             	shl    ebp,0x4
c001756f:	09 d5                	or     ebp,edx
c0017571:	3c 06                	cmp    al,0x6
c0017573:	89 ea                	mov    edx,ebp
c0017575:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001757b:	74 04                	je     c0017581 <CPU::detectFeatures()+0x557>
c001757d:	3c 0f                	cmp    al,0xf
c001757f:	75 5c                	jne    c00175dd <CPU::detectFeatures()+0x5b3>
c0017581:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017585:	89 cd                	mov    ebp,ecx
c0017587:	c1 ed 10             	shr    ebp,0x10
c001758a:	c1 e5 04             	shl    ebp,0x4
c001758d:	09 ea                	or     edx,ebp
c001758f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0017595:	0f b6 d2             	movzx  edx,dl
c0017598:	66 81 e5 3f c0       	and    bp,0xc03f
c001759d:	c1 e2 06             	shl    edx,0x6
c00175a0:	09 ea                	or     edx,ebp
c00175a2:	3c 0f                	cmp    al,0xf
c00175a4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00175ab:	75 30                	jne    c00175dd <CPU::detectFeatures()+0x5b3>
c00175ad:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00175b3:	c1 e9 14             	shr    ecx,0x14
c00175b6:	83 e0 3f             	and    eax,0x3f
c00175b9:	83 c1 0f             	add    ecx,0xf
c00175bc:	88 ca                	mov    dl,cl
c00175be:	c0 e9 02             	shr    cl,0x2
c00175c1:	c1 e2 06             	shl    edx,0x6
c00175c4:	09 d0                	or     eax,edx
c00175c6:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00175cc:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00175d2:	83 e0 c0             	and    eax,0xffffffc0
c00175d5:	09 c1                	or     ecx,eax
c00175d7:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00175dd:	83 ec 0c             	sub    esp,0xc
c00175e0:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00175e7:	56                   	push   esi
c00175e8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00175ec:	50                   	push   eax
c00175ed:	57                   	push   edi
c00175ee:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00175f2:	55                   	push   ebp
c00175f3:	68 00 00 00 80       	push   0x80000000
c00175f8:	e8 4f f8 ff ff       	call   c0016e4c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00175fd:	83 c4 20             	add    esp,0x20
c0017600:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0017608:	8d 44 24 18          	lea    eax,[esp+0x18]
c001760c:	76 1e                	jbe    c001762c <CPU::detectFeatures()+0x602>
c001760e:	83 ec 0c             	sub    esp,0xc
c0017611:	56                   	push   esi
c0017612:	50                   	push   eax
c0017613:	57                   	push   edi
c0017614:	55                   	push   ebp
c0017615:	68 01 00 00 80       	push   0x80000001
c001761a:	e8 2d f8 ff ff       	call   c0016e4c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001761f:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0017629:	83 c4 20             	add    esp,0x20
c001762c:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0017632:	83 f8 01             	cmp    eax,0x1
c0017635:	75 6f                	jne    c00176a6 <CPU::detectFeatures()+0x67c>
c0017637:	51                   	push   ecx
c0017638:	51                   	push   ecx
c0017639:	68 15 17 02 c0       	push   0xc0021715
c001763e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0017642:	56                   	push   esi
c0017643:	e8 5f 90 fe ff       	call   c00006a7 <strcpy>
c0017648:	5f                   	pop    edi
c0017649:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001764f:	5d                   	pop    ebp
c0017650:	66 c1 e8 06          	shr    ax,0x6
c0017654:	0f b6 c0             	movzx  eax,al
c0017657:	50                   	push   eax
c0017658:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001765e:	c1 e8 0e             	shr    eax,0xe
c0017661:	0f b6 c0             	movzx  eax,al
c0017664:	50                   	push   eax
c0017665:	e8 8d f4 ff ff       	call   c0016af7 <lookupIntelCPUName(unsigned char, unsigned char)>
c001766a:	5a                   	pop    edx
c001766b:	59                   	pop    ecx
c001766c:	50                   	push   eax
c001766d:	56                   	push   esi
c001766e:	e8 eb 90 fe ff       	call   c000075e <strcat>
c0017673:	5f                   	pop    edi
c0017674:	5d                   	pop    ebp
c0017675:	56                   	push   esi
c0017676:	53                   	push   ebx
c0017677:	e8 94 c0 ff ff       	call   c0013710 <Device::setName(char const*)>
c001767c:	58                   	pop    eax
c001767d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0017683:	5a                   	pop    edx
c0017684:	68 1c 17 02 c0       	push   0xc002171c
c0017689:	50                   	push   eax
c001768a:	e8 69 90 fe ff       	call   c00006f8 <strcmp>
c001768f:	83 c4 10             	add    esp,0x10
c0017692:	85 c0                	test   eax,eax
c0017694:	0f 85 73 03 00 00    	jne    c0017a0d <CPU::detectFeatures()+0x9e3>
c001769a:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00176a1:	e9 67 03 00 00       	jmp    c0017a0d <CPU::detectFeatures()+0x9e3>
c00176a6:	83 f8 02             	cmp    eax,0x2
c00176a9:	0f 85 b5 00 00 00    	jne    c0017764 <CPU::detectFeatures()+0x73a>
c00176af:	57                   	push   edi
c00176b0:	57                   	push   edi
c00176b1:	68 2e 17 02 c0       	push   0xc002172e
c00176b6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00176ba:	56                   	push   esi
c00176bb:	e8 e7 8f fe ff       	call   c00006a7 <strcpy>
c00176c0:	5d                   	pop    ebp
c00176c1:	58                   	pop    eax
c00176c2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00176c8:	66 c1 e8 06          	shr    ax,0x6
c00176cc:	0f b6 c0             	movzx  eax,al
c00176cf:	50                   	push   eax
c00176d0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00176d6:	c1 e8 0e             	shr    eax,0xe
c00176d9:	0f b6 c0             	movzx  eax,al
c00176dc:	50                   	push   eax
c00176dd:	e8 81 f2 ff ff       	call   c0016963 <lookupAMDCPUName(unsigned char, unsigned char)>
c00176e2:	5a                   	pop    edx
c00176e3:	59                   	pop    ecx
c00176e4:	50                   	push   eax
c00176e5:	56                   	push   esi
c00176e6:	e8 73 90 fe ff       	call   c000075e <strcat>
c00176eb:	5f                   	pop    edi
c00176ec:	5d                   	pop    ebp
c00176ed:	56                   	push   esi
c00176ee:	53                   	push   ebx
c00176ef:	e8 1c c0 ff ff       	call   c0013710 <Device::setName(char const*)>
c00176f4:	58                   	pop    eax
c00176f5:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00176fb:	5a                   	pop    edx
c00176fc:	68 33 17 02 c0       	push   0xc0021733
c0017701:	50                   	push   eax
c0017702:	e8 f1 8f fe ff       	call   c00006f8 <strcmp>
c0017707:	83 c4 10             	add    esp,0x10
c001770a:	85 c0                	test   eax,eax
c001770c:	75 20                	jne    c001772e <CPU::detectFeatures()+0x704>
c001770e:	8b 15 68 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022e68
c0017714:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001771a:	a8 01                	test   al,0x1
c001771c:	74 10                	je     c001772e <CPU::detectFeatures()+0x704>
c001771e:	83 e0 fe             	and    eax,0xfffffffe
c0017721:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0017727:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001772e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017734:	c1 e8 0e             	shr    eax,0xe
c0017737:	3c 05                	cmp    al,0x5
c0017739:	0f 85 ce 02 00 00    	jne    c0017a0d <CPU::detectFeatures()+0x9e3>
c001773f:	56                   	push   esi
c0017740:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0017746:	83 e0 0f             	and    eax,0xf
c0017749:	50                   	push   eax
c001774a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017750:	66 c1 e8 06          	shr    ax,0x6
c0017754:	0f b6 c0             	movzx  eax,al
c0017757:	50                   	push   eax
c0017758:	6a 05                	push   0x5
c001775a:	e8 7a f6 ff ff       	call   c0016dd9 <AMD_K6_writeback(int, int, int)>
c001775f:	e9 1f 02 00 00       	jmp    c0017983 <CPU::detectFeatures()+0x959>
c0017764:	8d 50 fd             	lea    edx,[eax-0x3]
c0017767:	83 fa 01             	cmp    edx,0x1
c001776a:	76 09                	jbe    c0017775 <CPU::detectFeatures()+0x74b>
c001776c:	83 f8 06             	cmp    eax,0x6
c001776f:	0f 85 91 01 00 00    	jne    c0017906 <CPU::detectFeatures()+0x8dc>
c0017775:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001777b:	c1 ea 0e             	shr    edx,0xe
c001777e:	80 fa 05             	cmp    dl,0x5
c0017781:	75 7b                	jne    c00177fe <CPU::detectFeatures()+0x7d4>
c0017783:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0017789:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001778e:	66 81 fa 00 01       	cmp    dx,0x100
c0017793:	75 0c                	jne    c00177a1 <CPU::detectFeatures()+0x777>
c0017795:	51                   	push   ecx
c0017796:	51                   	push   ecx
c0017797:	68 3a 17 02 c0       	push   0xc002173a
c001779c:	e9 dc 01 00 00       	jmp    c001797d <CPU::detectFeatures()+0x953>
c00177a1:	66 81 fa 00 02       	cmp    dx,0x200
c00177a6:	75 0c                	jne    c00177b4 <CPU::detectFeatures()+0x78a>
c00177a8:	52                   	push   edx
c00177a9:	52                   	push   edx
c00177aa:	68 4d 17 02 c0       	push   0xc002174d
c00177af:	e9 c9 01 00 00       	jmp    c001797d <CPU::detectFeatures()+0x953>
c00177b4:	66 81 fa 40 02       	cmp    dx,0x240
c00177b9:	75 0c                	jne    c00177c7 <CPU::detectFeatures()+0x79d>
c00177bb:	50                   	push   eax
c00177bc:	50                   	push   eax
c00177bd:	68 5f 17 02 c0       	push   0xc002175f
c00177c2:	e9 b6 01 00 00       	jmp    c001797d <CPU::detectFeatures()+0x953>
c00177c7:	83 f8 06             	cmp    eax,0x6
c00177ca:	75 0c                	jne    c00177d8 <CPU::detectFeatures()+0x7ae>
c00177cc:	50                   	push   eax
c00177cd:	50                   	push   eax
c00177ce:	68 71 17 02 c0       	push   0xc0021771
c00177d3:	e9 a5 01 00 00       	jmp    c001797d <CPU::detectFeatures()+0x953>
c00177d8:	83 f8 04             	cmp    eax,0x4
c00177db:	75 0c                	jne    c00177e9 <CPU::detectFeatures()+0x7bf>
c00177dd:	50                   	push   eax
c00177de:	50                   	push   eax
c00177df:	68 7d 17 02 c0       	push   0xc002177d
c00177e4:	e9 94 01 00 00       	jmp    c001797d <CPU::detectFeatures()+0x953>
c00177e9:	83 f8 03             	cmp    eax,0x3
c00177ec:	0f 85 1b 02 00 00    	jne    c0017a0d <CPU::detectFeatures()+0x9e3>
c00177f2:	50                   	push   eax
c00177f3:	50                   	push   eax
c00177f4:	68 85 17 02 c0       	push   0xc0021785
c00177f9:	e9 7f 01 00 00       	jmp    c001797d <CPU::detectFeatures()+0x953>
c00177fe:	80 fa 06             	cmp    dl,0x6
c0017801:	0f 85 db 00 00 00    	jne    c00178e2 <CPU::detectFeatures()+0x8b8>
c0017807:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001780d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0017812:	66 81 fa 80 01       	cmp    dx,0x180
c0017817:	75 0c                	jne    c0017825 <CPU::detectFeatures()+0x7fb>
c0017819:	50                   	push   eax
c001781a:	50                   	push   eax
c001781b:	68 90 17 02 c0       	push   0xc0021790
c0017820:	e9 58 01 00 00       	jmp    c001797d <CPU::detectFeatures()+0x953>
c0017825:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001782b:	66 f7 c1 80 ff       	test   cx,0xff80
c0017830:	75 0c                	jne    c001783e <CPU::detectFeatures()+0x814>
c0017832:	50                   	push   eax
c0017833:	50                   	push   eax
c0017834:	68 a0 17 02 c0       	push   0xc00217a0
c0017839:	e9 3f 01 00 00       	jmp    c001797d <CPU::detectFeatures()+0x953>
c001783e:	66 81 fa 40 02       	cmp    dx,0x240
c0017843:	75 0c                	jne    c0017851 <CPU::detectFeatures()+0x827>
c0017845:	55                   	push   ebp
c0017846:	55                   	push   ebp
c0017847:	68 a7 17 02 c0       	push   0xc00217a7
c001784c:	e9 2c 01 00 00       	jmp    c001797d <CPU::detectFeatures()+0x953>
c0017851:	66 81 fa 80 02       	cmp    dx,0x280
c0017856:	75 0c                	jne    c0017864 <CPU::detectFeatures()+0x83a>
c0017858:	57                   	push   edi
c0017859:	57                   	push   edi
c001785a:	68 b0 17 02 c0       	push   0xc00217b0
c001785f:	e9 19 01 00 00       	jmp    c001797d <CPU::detectFeatures()+0x953>
c0017864:	66 81 fa 40 03       	cmp    dx,0x340
c0017869:	74 ed                	je     c0017858 <CPU::detectFeatures()+0x82e>
c001786b:	66 81 fa c0 03       	cmp    dx,0x3c0
c0017870:	75 0c                	jne    c001787e <CPU::detectFeatures()+0x854>
c0017872:	56                   	push   esi
c0017873:	56                   	push   esi
c0017874:	68 b7 17 02 c0       	push   0xc00217b7
c0017879:	e9 ff 00 00 00       	jmp    c001797d <CPU::detectFeatures()+0x953>
c001787e:	83 f8 06             	cmp    eax,0x6
c0017881:	0f 84 45 ff ff ff    	je     c00177cc <CPU::detectFeatures()+0x7a2>
c0017887:	83 f8 04             	cmp    eax,0x4
c001788a:	0f 84 4d ff ff ff    	je     c00177dd <CPU::detectFeatures()+0x7b3>
c0017890:	83 f8 03             	cmp    eax,0x3
c0017893:	0f 85 74 01 00 00    	jne    c0017a0d <CPU::detectFeatures()+0x9e3>
c0017899:	51                   	push   ecx
c001789a:	51                   	push   ecx
c001789b:	68 c0 17 02 c0       	push   0xc00217c0
c00178a0:	53                   	push   ebx
c00178a1:	e8 6a be ff ff       	call   c0013710 <Device::setName(char const*)>
c00178a6:	b1 c1                	mov    cl,0xc1
c00178a8:	88 c8                	mov    al,cl
c00178aa:	e6 22                	out    0x22,al
c00178ac:	e4 23                	in     al,0x23
c00178ae:	88 c2                	mov    dl,al
c00178b0:	88 c8                	mov    al,cl
c00178b2:	e6 22                	out    0x22,al
c00178b4:	88 d0                	mov    al,dl
c00178b6:	83 c8 10             	or     eax,0x10
c00178b9:	e6 23                	out    0x23,al
c00178bb:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00178c2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00178c5:	89 d0                	mov    eax,edx
c00178c7:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00178cd:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00178d1:	40                   	inc    eax
c00178d2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00178d8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00178dd:	e9 a1 00 00 00       	jmp    c0017983 <CPU::detectFeatures()+0x959>
c00178e2:	83 f8 06             	cmp    eax,0x6
c00178e5:	0f 84 e1 fe ff ff    	je     c00177cc <CPU::detectFeatures()+0x7a2>
c00178eb:	83 f8 04             	cmp    eax,0x4
c00178ee:	0f 84 e9 fe ff ff    	je     c00177dd <CPU::detectFeatures()+0x7b3>
c00178f4:	83 f8 03             	cmp    eax,0x3
c00178f7:	0f 85 10 01 00 00    	jne    c0017a0d <CPU::detectFeatures()+0x9e3>
c00178fd:	52                   	push   edx
c00178fe:	52                   	push   edx
c00178ff:	68 cb 17 02 c0       	push   0xc00217cb
c0017904:	eb 77                	jmp    c001797d <CPU::detectFeatures()+0x953>
c0017906:	83 f8 07             	cmp    eax,0x7
c0017909:	75 09                	jne    c0017914 <CPU::detectFeatures()+0x8ea>
c001790b:	50                   	push   eax
c001790c:	50                   	push   eax
c001790d:	68 d5 17 02 c0       	push   0xc00217d5
c0017912:	eb 69                	jmp    c001797d <CPU::detectFeatures()+0x953>
c0017914:	83 f8 0a             	cmp    eax,0xa
c0017917:	75 09                	jne    c0017922 <CPU::detectFeatures()+0x8f8>
c0017919:	50                   	push   eax
c001791a:	50                   	push   eax
c001791b:	68 e0 17 02 c0       	push   0xc00217e0
c0017920:	eb 5b                	jmp    c001797d <CPU::detectFeatures()+0x953>
c0017922:	83 f8 0b             	cmp    eax,0xb
c0017925:	75 09                	jne    c0017930 <CPU::detectFeatures()+0x906>
c0017927:	50                   	push   eax
c0017928:	50                   	push   eax
c0017929:	68 e8 17 02 c0       	push   0xc00217e8
c001792e:	eb 4d                	jmp    c001797d <CPU::detectFeatures()+0x953>
c0017930:	83 f8 08             	cmp    eax,0x8
c0017933:	75 09                	jne    c001793e <CPU::detectFeatures()+0x914>
c0017935:	50                   	push   eax
c0017936:	50                   	push   eax
c0017937:	68 f1 17 02 c0       	push   0xc00217f1
c001793c:	eb 3f                	jmp    c001797d <CPU::detectFeatures()+0x953>
c001793e:	83 f8 09             	cmp    eax,0x9
c0017941:	75 09                	jne    c001794c <CPU::detectFeatures()+0x922>
c0017943:	50                   	push   eax
c0017944:	50                   	push   eax
c0017945:	68 f9 17 02 c0       	push   0xc00217f9
c001794a:	eb 31                	jmp    c001797d <CPU::detectFeatures()+0x953>
c001794c:	83 f8 05             	cmp    eax,0x5
c001794f:	75 09                	jne    c001795a <CPU::detectFeatures()+0x930>
c0017951:	50                   	push   eax
c0017952:	50                   	push   eax
c0017953:	68 01 18 02 c0       	push   0xc0021801
c0017958:	eb 23                	jmp    c001797d <CPU::detectFeatures()+0x953>
c001795a:	83 f8 0c             	cmp    eax,0xc
c001795d:	75 09                	jne    c0017968 <CPU::detectFeatures()+0x93e>
c001795f:	55                   	push   ebp
c0017960:	55                   	push   ebp
c0017961:	68 0f 18 02 c0       	push   0xc002180f
c0017966:	eb 15                	jmp    c001797d <CPU::detectFeatures()+0x953>
c0017968:	83 f8 0d             	cmp    eax,0xd
c001796b:	75 09                	jne    c0017976 <CPU::detectFeatures()+0x94c>
c001796d:	57                   	push   edi
c001796e:	57                   	push   edi
c001796f:	68 1a 18 02 c0       	push   0xc002181a
c0017974:	eb 07                	jmp    c001797d <CPU::detectFeatures()+0x953>
c0017976:	56                   	push   esi
c0017977:	56                   	push   esi
c0017978:	68 2e 18 02 c0       	push   0xc002182e
c001797d:	53                   	push   ebx
c001797e:	e8 8d bd ff ff       	call   c0013710 <Device::setName(char const*)>
c0017983:	83 c4 10             	add    esp,0x10
c0017986:	e9 82 00 00 00       	jmp    c0017a0d <CPU::detectFeatures()+0x9e3>
c001798b:	51                   	push   ecx
c001798c:	51                   	push   ecx
c001798d:	68 7a 16 02 c0       	push   0xc002167a
c0017992:	57                   	push   edi
c0017993:	e8 0f 8d fe ff       	call   c00006a7 <strcpy>
c0017998:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00179a2:	e8 d8 87 fe ff       	call   c000017f <is486>
c00179a7:	83 c4 10             	add    esp,0x10
c00179aa:	85 c0                	test   eax,eax
c00179ac:	74 2d                	je     c00179db <CPU::detectFeatures()+0x9b1>
c00179ae:	52                   	push   edx
c00179af:	52                   	push   edx
c00179b0:	68 3a 18 02 c0       	push   0xc002183a
c00179b5:	53                   	push   ebx
c00179b6:	e8 55 bd ff ff       	call   c0013710 <Device::setName(char const*)>
c00179bb:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00179c2:	e8 de 69 00 00       	call   c001e3a5 <CPU::readCR0()>
c00179c7:	83 c4 10             	add    esp,0x10
c00179ca:	83 e0 14             	and    eax,0x14
c00179cd:	83 f8 04             	cmp    eax,0x4
c00179d0:	75 1f                	jne    c00179f1 <CPU::detectFeatures()+0x9c7>
c00179d2:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00179d9:	eb 32                	jmp    c0017a0d <CPU::detectFeatures()+0x9e3>
c00179db:	50                   	push   eax
c00179dc:	50                   	push   eax
c00179dd:	68 45 18 02 c0       	push   0xc0021845
c00179e2:	53                   	push   ebx
c00179e3:	e8 28 bd ff ff       	call   c0013710 <Device::setName(char const*)>
c00179e8:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00179ef:	eb d1                	jmp    c00179c2 <CPU::detectFeatures()+0x998>
c00179f1:	e8 64 87 fe ff       	call   c000015a <hasLegacyFPU>
c00179f6:	83 e0 01             	and    eax,0x1
c00179f9:	8d 14 00             	lea    edx,[eax+eax*1]
c00179fc:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017a02:	83 e0 fd             	and    eax,0xfffffffd
c0017a05:	09 d0                	or     eax,edx
c0017a07:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017a0d:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0017a14:	83 c4 4c             	add    esp,0x4c
c0017a17:	5b                   	pop    ebx
c0017a18:	5e                   	pop    esi
c0017a19:	5f                   	pop    edi
c0017a1a:	5d                   	pop    ebp
c0017a1b:	c3                   	ret    

c0017a1c <CPU::setupSMEP()>:
c0017a1c:	83 ec 0c             	sub    esp,0xc
c0017a1f:	e8 b7 69 00 00       	call   c001e3db <CPU::readCR4()>
c0017a24:	0d 00 00 10 00       	or     eax,0x100000
c0017a29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a2d:	83 c4 0c             	add    esp,0xc
c0017a30:	e9 cc 70 00 00       	jmp    c001eb01 <CPU::writeCR4(unsigned long)>
c0017a35:	90                   	nop

c0017a36 <CPU::setupUMIP()>:
c0017a36:	83 ec 0c             	sub    esp,0xc
c0017a39:	e8 9d 69 00 00       	call   c001e3db <CPU::readCR4()>
c0017a3e:	80 cc 08             	or     ah,0x8
c0017a41:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a45:	83 c4 0c             	add    esp,0xc
c0017a48:	e9 b4 70 00 00       	jmp    c001eb01 <CPU::writeCR4(unsigned long)>
c0017a4d:	90                   	nop

c0017a4e <CPU::setupTSC()>:
c0017a4e:	83 ec 0c             	sub    esp,0xc
c0017a51:	e8 85 69 00 00       	call   c001e3db <CPU::readCR4()>
c0017a56:	83 c8 04             	or     eax,0x4
c0017a59:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a5d:	83 c4 0c             	add    esp,0xc
c0017a60:	e9 9c 70 00 00       	jmp    c001eb01 <CPU::writeCR4(unsigned long)>
c0017a65:	90                   	nop

c0017a66 <CPU::setupLargePages()>:
c0017a66:	83 ec 0c             	sub    esp,0xc
c0017a69:	e8 6d 69 00 00       	call   c001e3db <CPU::readCR4()>
c0017a6e:	83 c8 10             	or     eax,0x10
c0017a71:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a75:	83 c4 0c             	add    esp,0xc
c0017a78:	e9 84 70 00 00       	jmp    c001eb01 <CPU::writeCR4(unsigned long)>
c0017a7d:	90                   	nop

c0017a7e <CPU::setupPAT()>:
c0017a7e:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c0017a83:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0017a8a:	74 2c                	je     c0017ab8 <CPU::setupPAT()+0x3a>
c0017a8c:	53                   	push   ebx
c0017a8d:	83 ec 10             	sub    esp,0x10
c0017a90:	68 77 02 00 00       	push   0x277
c0017a95:	50                   	push   eax
c0017a96:	e8 2b 37 ff ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c0017a9b:	83 e2 f8             	and    edx,0xfffffff8
c0017a9e:	83 ca 01             	or     edx,0x1
c0017aa1:	52                   	push   edx
c0017aa2:	50                   	push   eax
c0017aa3:	68 77 02 00 00       	push   0x277
c0017aa8:	ff 35 68 2e 02 c0    	push   DWORD PTR ds:0xc0022e68
c0017aae:	e8 3f 37 ff ff       	call   c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c0017ab3:	83 c4 28             	add    esp,0x28
c0017ab6:	5b                   	pop    ebx
c0017ab7:	c3                   	ret    
c0017ab8:	c3                   	ret    
c0017ab9:	90                   	nop

c0017aba <CPU::setupMTRR()>:
c0017aba:	c3                   	ret    
c0017abb:	90                   	nop

c0017abc <CPU::setupGlobalPages()>:
c0017abc:	83 ec 0c             	sub    esp,0xc
c0017abf:	e8 17 69 00 00       	call   c001e3db <CPU::readCR4()>
c0017ac4:	0c 80                	or     al,0x80
c0017ac6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017aca:	83 c4 0c             	add    esp,0xc
c0017acd:	e9 2f 70 00 00       	jmp    c001eb01 <CPU::writeCR4(unsigned long)>

c0017ad2 <CPU::allowUsermodeDataAccess()>:
c0017ad2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ad6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0017add:	74 03                	je     c0017ae2 <CPU::allowUsermodeDataAccess()+0x10>
c0017adf:	0f 01 cb             	stac   
c0017ae2:	c3                   	ret    
c0017ae3:	90                   	nop

c0017ae4 <CPU::prohibitUsermodeDataAccess()>:
c0017ae4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ae8:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0017aef:	74 03                	je     c0017af4 <CPU::prohibitUsermodeDataAccess()+0x10>
c0017af1:	0f 01 ca             	clac   
c0017af4:	c3                   	ret    
c0017af5:	90                   	nop

c0017af6 <CPU::setupSMAP()>:
c0017af6:	53                   	push   ebx
c0017af7:	83 ec 08             	sub    esp,0x8
c0017afa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017afe:	e8 d8 68 00 00       	call   c001e3db <CPU::readCR4()>
c0017b03:	83 ec 0c             	sub    esp,0xc
c0017b06:	0d 00 00 20 00       	or     eax,0x200000
c0017b0b:	50                   	push   eax
c0017b0c:	e8 f0 6f 00 00       	call   c001eb01 <CPU::writeCR4(unsigned long)>
c0017b11:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0017b15:	83 c4 18             	add    esp,0x18
c0017b18:	5b                   	pop    ebx
c0017b19:	eb c9                	jmp    c0017ae4 <CPU::prohibitUsermodeDataAccess()>
c0017b1b:	90                   	nop

c0017b1c <CPU::setupFeatures()>:
c0017b1c:	53                   	push   ebx
c0017b1d:	83 ec 08             	sub    esp,0x8
c0017b20:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017b24:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017b2b:	74 0c                	je     c0017b39 <CPU::setupFeatures()+0x1d>
c0017b2d:	83 ec 0c             	sub    esp,0xc
c0017b30:	53                   	push   ebx
c0017b31:	e8 e6 fe ff ff       	call   c0017a1c <CPU::setupSMEP()>
c0017b36:	83 c4 10             	add    esp,0x10
c0017b39:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017b40:	74 0c                	je     c0017b4e <CPU::setupFeatures()+0x32>
c0017b42:	83 ec 0c             	sub    esp,0xc
c0017b45:	53                   	push   ebx
c0017b46:	e8 ab ff ff ff       	call   c0017af6 <CPU::setupSMAP()>
c0017b4b:	83 c4 10             	add    esp,0x10
c0017b4e:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017b55:	74 0c                	je     c0017b63 <CPU::setupFeatures()+0x47>
c0017b57:	83 ec 0c             	sub    esp,0xc
c0017b5a:	53                   	push   ebx
c0017b5b:	e8 d6 fe ff ff       	call   c0017a36 <CPU::setupUMIP()>
c0017b60:	83 c4 10             	add    esp,0x10
c0017b63:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0017b6a:	74 0c                	je     c0017b78 <CPU::setupFeatures()+0x5c>
c0017b6c:	83 ec 0c             	sub    esp,0xc
c0017b6f:	53                   	push   ebx
c0017b70:	e8 d9 fe ff ff       	call   c0017a4e <CPU::setupTSC()>
c0017b75:	83 c4 10             	add    esp,0x10
c0017b78:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0017b7f:	74 0c                	je     c0017b8d <CPU::setupFeatures()+0x71>
c0017b81:	83 ec 0c             	sub    esp,0xc
c0017b84:	53                   	push   ebx
c0017b85:	e8 dc fe ff ff       	call   c0017a66 <CPU::setupLargePages()>
c0017b8a:	83 c4 10             	add    esp,0x10
c0017b8d:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017b94:	74 0c                	je     c0017ba2 <CPU::setupFeatures()+0x86>
c0017b96:	83 ec 0c             	sub    esp,0xc
c0017b99:	53                   	push   ebx
c0017b9a:	e8 1d ff ff ff       	call   c0017abc <CPU::setupGlobalPages()>
c0017b9f:	83 c4 10             	add    esp,0x10
c0017ba2:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017ba9:	74 0d                	je     c0017bb8 <CPU::setupFeatures()+0x9c>
c0017bab:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017baf:	83 c4 08             	add    esp,0x8
c0017bb2:	5b                   	pop    ebx
c0017bb3:	e9 c6 fe ff ff       	jmp    c0017a7e <CPU::setupPAT()>
c0017bb8:	83 c4 08             	add    esp,0x8
c0017bbb:	5b                   	pop    ebx
c0017bbc:	c3                   	ret    
c0017bbd:	90                   	nop

c0017bbe <CPU::open(int, int, void*)>:
c0017bbe:	57                   	push   edi
c0017bbf:	56                   	push   esi
c0017bc0:	53                   	push   ebx
c0017bc1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017bc5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017bc9:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0017bcf:	83 ec 0c             	sub    esp,0xc
c0017bd2:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0017bd8:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0017bde:	50                   	push   eax
c0017bdf:	e8 f4 49 ff ff       	call   c000c5d8 <GDT::setup()>
c0017be4:	83 c4 0c             	add    esp,0xc
c0017be7:	6a 00                	push   0x0
c0017be9:	68 ef be ad de       	push   0xdeadbeef
c0017bee:	57                   	push   edi
c0017bef:	e8 c6 8f ff ff       	call   c0010bba <TSS::setup(unsigned long, unsigned long)>
c0017bf4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017bf7:	e8 9e 8f ff ff       	call   c0010b9a <TSS::flush()>
c0017bfc:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0017c02:	89 04 24             	mov    DWORD PTR [esp],eax
c0017c05:	e8 28 4c ff ff       	call   c000c832 <IDT::setup()>
c0017c0a:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0017c11:	e8 e2 6e 00 00       	call   c001eaf8 <CPU::writeDR7(unsigned long)>
c0017c16:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0017c20:	e8 ea 5b ff ff       	call   c000d80f <Phys::allocatePage()>
c0017c25:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0017c2b:	89 30                	mov    DWORD PTR [eax],esi
c0017c2d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0017c33:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017c36:	58                   	pop    eax
c0017c37:	5a                   	pop    edx
c0017c38:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0017c3e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017c42:	e8 53 9d ff ff       	call   c001199a <VAS::setCPUSpecific(unsigned long)>
c0017c47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017c4a:	e8 db f3 ff ff       	call   c001702a <CPU::detectFeatures()>
c0017c4f:	e8 14 c8 ff ff       	call   c0014468 <setupInterruptController()>
c0017c54:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0017c5a:	a1 34 36 02 c0       	mov    eax,ds:0xc0023634
c0017c5f:	83 e0 10             	and    eax,0x10
c0017c62:	83 f8 01             	cmp    eax,0x1
c0017c65:	19 c0                	sbb    eax,eax
c0017c67:	83 e0 46             	and    eax,0x46
c0017c6a:	83 c0 1e             	add    eax,0x1e
c0017c6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0017c70:	e8 db d9 ff ff       	call   c0015650 <setupTimer(int)>
c0017c75:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0017c7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017c7e:	e8 99 fe ff ff       	call   c0017b1c <CPU::setupFeatures()>
c0017c83:	83 c4 10             	add    esp,0x10
c0017c86:	31 c0                	xor    eax,eax
c0017c88:	5b                   	pop    ebx
c0017c89:	5e                   	pop    esi
c0017c8a:	5f                   	pop    edi
c0017c8b:	c3                   	ret    

c0017c8c <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0017c8c:	55                   	push   ebp
c0017c8d:	57                   	push   edi
c0017c8e:	56                   	push   esi
c0017c8f:	53                   	push   ebx
c0017c90:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017c96:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0017c9d:	8a 1e                	mov    bl,BYTE PTR [esi]
c0017c9f:	8d 6e 01             	lea    ebp,[esi+0x1]
c0017ca2:	80 fb 40             	cmp    bl,0x40
c0017ca5:	75 1b                	jne    c0017cc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0017ca7:	8a 16                	mov    dl,BYTE PTR [esi]
c0017ca9:	84 d2                	test   dl,dl
c0017cab:	0f 84 f1 00 00 00    	je     c0017da2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017cb1:	8d 46 01             	lea    eax,[esi+0x1]
c0017cb4:	80 fa 3a             	cmp    dl,0x3a
c0017cb7:	74 04                	je     c0017cbd <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0017cb9:	89 c6                	mov    esi,eax
c0017cbb:	eb ea                	jmp    c0017ca7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0017cbd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0017cc0:	89 c6                	mov    esi,eax
c0017cc2:	50                   	push   eax
c0017cc3:	6a 40                	push   0x40
c0017cc5:	6a 00                	push   0x0
c0017cc7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017ccb:	50                   	push   eax
c0017ccc:	e8 37 89 fe ff       	call   c0000608 <memset>
c0017cd1:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0017cd8:	31 c0                	xor    eax,eax
c0017cda:	83 c4 10             	add    esp,0x10
c0017cdd:	8a 0f                	mov    cl,BYTE PTR [edi]
c0017cdf:	84 c9                	test   cl,cl
c0017ce1:	0f 84 bb 00 00 00    	je     c0017da2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017ce7:	3d c7 00 00 00       	cmp    eax,0xc7
c0017cec:	0f 8f b0 00 00 00    	jg     c0017da2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017cf2:	80 f9 0a             	cmp    cl,0xa
c0017cf5:	0f 85 98 00 00 00    	jne    c0017d93 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0017cfb:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0017d00:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0017d04:	a8 df                	test   al,0xdf
c0017d06:	0f 94 c1             	sete   cl
c0017d09:	3c 23                	cmp    al,0x23
c0017d0b:	0f 94 c2             	sete   dl
c0017d0e:	08 d1                	or     cl,dl
c0017d10:	75 4a                	jne    c0017d5c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017d12:	8d 50 f7             	lea    edx,[eax-0x9]
c0017d15:	80 fa 01             	cmp    dl,0x1
c0017d18:	76 42                	jbe    c0017d5c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017d1a:	3c 5b                	cmp    al,0x5b
c0017d1c:	75 42                	jne    c0017d60 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0017d1e:	80 fb 40             	cmp    bl,0x40
c0017d21:	75 39                	jne    c0017d5c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017d23:	83 ec 0c             	sub    esp,0xc
c0017d26:	8d 54 24 65          	lea    edx,[esp+0x65]
c0017d2a:	52                   	push   edx
c0017d2b:	e8 f5 88 fe ff       	call   c0000625 <strlen>
c0017d30:	83 c4 10             	add    esp,0x10
c0017d33:	83 f8 3f             	cmp    eax,0x3f
c0017d36:	77 6a                	ja     c0017da2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017d38:	50                   	push   eax
c0017d39:	50                   	push   eax
c0017d3a:	8d 54 24 61          	lea    edx,[esp+0x61]
c0017d3e:	52                   	push   edx
c0017d3f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017d43:	52                   	push   edx
c0017d44:	e8 5e 89 fe ff       	call   c00006a7 <strcpy>
c0017d49:	58                   	pop    eax
c0017d4a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017d4e:	52                   	push   edx
c0017d4f:	e8 d1 88 fe ff       	call   c0000625 <strlen>
c0017d54:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0017d59:	83 c4 10             	add    esp,0x10
c0017d5c:	31 d2                	xor    edx,edx
c0017d5e:	eb 3a                	jmp    c0017d9a <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0017d60:	80 fb 40             	cmp    bl,0x40
c0017d63:	74 06                	je     c0017d6b <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0017d65:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017d69:	eb 20                	jmp    c0017d8b <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0017d6b:	50                   	push   eax
c0017d6c:	50                   	push   eax
c0017d6d:	55                   	push   ebp
c0017d6e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017d72:	50                   	push   eax
c0017d73:	e8 80 89 fe ff       	call   c00006f8 <strcmp>
c0017d78:	83 c4 10             	add    esp,0x10
c0017d7b:	85 c0                	test   eax,eax
c0017d7d:	75 dd                	jne    c0017d5c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017d7f:	eb e4                	jmp    c0017d65 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0017d81:	8d 50 01             	lea    edx,[eax+0x1]
c0017d84:	80 f9 3d             	cmp    cl,0x3d
c0017d87:	74 1d                	je     c0017da6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0017d89:	89 d0                	mov    eax,edx
c0017d8b:	8a 08                	mov    cl,BYTE PTR [eax]
c0017d8d:	84 c9                	test   cl,cl
c0017d8f:	75 f0                	jne    c0017d81 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0017d91:	eb 0f                	jmp    c0017da2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017d93:	8d 50 01             	lea    edx,[eax+0x1]
c0017d96:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0017d9a:	47                   	inc    edi
c0017d9b:	89 d0                	mov    eax,edx
c0017d9d:	e9 3b ff ff ff       	jmp    c0017cdd <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0017da2:	31 c0                	xor    eax,eax
c0017da4:	eb 33                	jmp    c0017dd9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0017da6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017daa:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0017dad:	50                   	push   eax
c0017dae:	50                   	push   eax
c0017daf:	8d 44 24 60          	lea    eax,[esp+0x60]
c0017db3:	50                   	push   eax
c0017db4:	56                   	push   esi
c0017db5:	e8 3e 89 fe ff       	call   c00006f8 <strcmp>
c0017dba:	83 c4 10             	add    esp,0x10
c0017dbd:	85 c0                	test   eax,eax
c0017dbf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017dc3:	75 97                	jne    c0017d5c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017dc5:	51                   	push   ecx
c0017dc6:	51                   	push   ecx
c0017dc7:	52                   	push   edx
c0017dc8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0017dcf:	e8 d3 88 fe ff       	call   c00006a7 <strcpy>
c0017dd4:	83 c4 10             	add    esp,0x10
c0017dd7:	b0 01                	mov    al,0x1
c0017dd9:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017ddf:	5b                   	pop    ebx
c0017de0:	5e                   	pop    esi
c0017de1:	5f                   	pop    edi
c0017de2:	5d                   	pop    ebp
c0017de3:	c3                   	ret    

c0017de4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0017de4:	57                   	push   edi
c0017de5:	56                   	push   esi
c0017de6:	53                   	push   ebx
c0017de7:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017ded:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0017df4:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0017dfb:	53                   	push   ebx
c0017dfc:	e8 24 88 fe ff       	call   c0000625 <strlen>
c0017e01:	89 34 24             	mov    DWORD PTR [esp],esi
c0017e04:	89 c7                	mov    edi,eax
c0017e06:	e8 1a 88 fe ff       	call   c0000625 <strlen>
c0017e0b:	83 c4 10             	add    esp,0x10
c0017e0e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0017e12:	31 ff                	xor    edi,edi
c0017e14:	3d ff 00 00 00       	cmp    eax,0xff
c0017e19:	0f 87 18 01 00 00    	ja     c0017f37 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0017e1f:	51                   	push   ecx
c0017e20:	51                   	push   ecx
c0017e21:	56                   	push   esi
c0017e22:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0017e26:	56                   	push   esi
c0017e27:	e8 7b 88 fe ff       	call   c00006a7 <strcpy>
c0017e2c:	58                   	pop    eax
c0017e2d:	5a                   	pop    edx
c0017e2e:	68 de 03 02 c0       	push   0xc00203de
c0017e33:	56                   	push   esi
c0017e34:	e8 25 89 fe ff       	call   c000075e <strcat>
c0017e39:	59                   	pop    ecx
c0017e3a:	58                   	pop    eax
c0017e3b:	53                   	push   ebx
c0017e3c:	56                   	push   esi
c0017e3d:	e8 1c 89 fe ff       	call   c000075e <strcat>
c0017e42:	58                   	pop    eax
c0017e43:	5a                   	pop    edx
c0017e44:	68 7c 18 02 c0       	push   0xc002187c
c0017e49:	56                   	push   esi
c0017e4a:	e8 0f 89 fe ff       	call   c000075e <strcat>
c0017e4f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017e56:	e8 c9 a3 ff ff       	call   c0012224 <operator new(unsigned long)>
c0017e5b:	83 c4 0c             	add    esp,0xc
c0017e5e:	89 c3                	mov    ebx,eax
c0017e60:	ff 35 dc 36 02 c0    	push   DWORD PTR ds:0xc00236dc
c0017e66:	56                   	push   esi
c0017e67:	50                   	push   eax
c0017e68:	e8 e5 a7 ff ff       	call   c0012652 <File::File(char const*, Process*)>
c0017e6d:	59                   	pop    ecx
c0017e6e:	5e                   	pop    esi
c0017e6f:	6a 01                	push   0x1
c0017e71:	53                   	push   ebx
c0017e72:	e8 3f a8 ff ff       	call   c00126b6 <File::open(FileOpenMode)>
c0017e77:	83 c4 10             	add    esp,0x10
c0017e7a:	85 c0                	test   eax,eax
c0017e7c:	74 08                	je     c0017e86 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0017e7e:	83 ec 0c             	sub    esp,0xc
c0017e81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017e83:	53                   	push   ebx
c0017e84:	eb 2e                	jmp    c0017eb4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0017e86:	52                   	push   edx
c0017e87:	8d 44 24 07          	lea    eax,[esp+0x7]
c0017e8b:	50                   	push   eax
c0017e8c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017e90:	50                   	push   eax
c0017e91:	53                   	push   ebx
c0017e92:	e8 cb aa ff ff       	call   c0012962 <File::stat(unsigned long long*, bool*)>
c0017e97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017e9b:	83 c4 10             	add    esp,0x10
c0017e9e:	89 c1                	mov    ecx,eax
c0017ea0:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0017ea4:	75 13                	jne    c0017eb9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0017ea6:	83 ec 0c             	sub    esp,0xc
c0017ea9:	53                   	push   ebx
c0017eaa:	e8 65 a8 ff ff       	call   c0012714 <File::close()>
c0017eaf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017eb1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017eb4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017eb7:	eb 7b                	jmp    c0017f34 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0017eb9:	83 ec 0c             	sub    esp,0xc
c0017ebc:	50                   	push   eax
c0017ebd:	e8 a3 53 ff ff       	call   c000d265 <malloc>
c0017ec2:	89 c6                	mov    esi,eax
c0017ec4:	58                   	pop    eax
c0017ec5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ec7:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017ecb:	52                   	push   edx
c0017ecc:	56                   	push   esi
c0017ecd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017ed1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017ed5:	53                   	push   ebx
c0017ed6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ed9:	83 c4 20             	add    esp,0x20
c0017edc:	85 c0                	test   eax,eax
c0017ede:	75 0a                	jne    c0017eea <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0017ee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ee4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0017ee8:	74 18                	je     c0017f02 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0017eea:	83 ec 0c             	sub    esp,0xc
c0017eed:	31 ff                	xor    edi,edi
c0017eef:	53                   	push   ebx
c0017ef0:	e8 1f a8 ff ff       	call   c0012714 <File::close()>
c0017ef5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ef7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017efa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017efd:	83 c4 10             	add    esp,0x10
c0017f00:	eb 35                	jmp    c0017f37 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0017f02:	83 ec 0c             	sub    esp,0xc
c0017f05:	53                   	push   ebx
c0017f06:	e8 09 a8 ff ff       	call   c0012714 <File::close()>
c0017f0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017f0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017f10:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017f13:	83 c4 0c             	add    esp,0xc
c0017f16:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0017f1d:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0017f24:	56                   	push   esi
c0017f25:	e8 62 fd ff ff       	call   c0017c8c <Reg::findLineFromLoadedData(char*, char*, char*)>
c0017f2a:	89 34 24             	mov    DWORD PTR [esp],esi
c0017f2d:	89 c7                	mov    edi,eax
c0017f2f:	e8 41 53 ff ff       	call   c000d275 <free>
c0017f34:	83 c4 10             	add    esp,0x10
c0017f37:	81 c4 10 01 00 00    	add    esp,0x110
c0017f3d:	89 f8                	mov    eax,edi
c0017f3f:	5b                   	pop    ebx
c0017f40:	5e                   	pop    esi
c0017f41:	5f                   	pop    edi
c0017f42:	c3                   	ret    

c0017f43 <Reg::getLine(char*, char*, char*)>:
c0017f43:	57                   	push   edi
c0017f44:	56                   	push   esi
c0017f45:	53                   	push   ebx
c0017f46:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017f4a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017f4e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0017f52:	57                   	push   edi
c0017f53:	56                   	push   esi
c0017f54:	53                   	push   ebx
c0017f55:	68 81 18 02 c0       	push   0xc0021881
c0017f5a:	e8 85 fe ff ff       	call   c0017de4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0017f5f:	83 c4 10             	add    esp,0x10
c0017f62:	84 c0                	test   al,al
c0017f64:	75 10                	jne    c0017f76 <Reg::getLine(char*, char*, char*)+0x33>
c0017f66:	57                   	push   edi
c0017f67:	56                   	push   esi
c0017f68:	53                   	push   ebx
c0017f69:	68 a6 18 02 c0       	push   0xc00218a6
c0017f6e:	e8 71 fe ff ff       	call   c0017de4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0017f73:	83 c4 10             	add    esp,0x10
c0017f76:	5b                   	pop    ebx
c0017f77:	5e                   	pop    esi
c0017f78:	5f                   	pop    edi
c0017f79:	c3                   	ret    

c0017f7a <Reg::readInt(char*, char*, int*)>:
c0017f7a:	55                   	push   ebp
c0017f7b:	57                   	push   edi
c0017f7c:	56                   	push   esi
c0017f7d:	53                   	push   ebx
c0017f7e:	81 ec f0 00 00 00    	sub    esp,0xf0
c0017f84:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0017f88:	57                   	push   edi
c0017f89:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0017f90:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0017f97:	e8 a7 ff ff ff       	call   c0017f43 <Reg::getLine(char*, char*, char*)>
c0017f9c:	83 c4 10             	add    esp,0x10
c0017f9f:	84 c0                	test   al,al
c0017fa1:	0f 84 b3 00 00 00    	je     c001805a <Reg::readInt(char*, char*, int*)+0xe0>
c0017fa7:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0017fab:	80 fa 2b             	cmp    dl,0x2b
c0017fae:	74 0c                	je     c0017fbc <Reg::readInt(char*, char*, int*)+0x42>
c0017fb0:	80 fa 2d             	cmp    dl,0x2d
c0017fb3:	75 0e                	jne    c0017fc3 <Reg::readInt(char*, char*, int*)+0x49>
c0017fb5:	ba 01 00 00 00       	mov    edx,0x1
c0017fba:	eb 0b                	jmp    c0017fc7 <Reg::readInt(char*, char*, int*)+0x4d>
c0017fbc:	ba 01 00 00 00       	mov    edx,0x1
c0017fc1:	eb 02                	jmp    c0017fc5 <Reg::readInt(char*, char*, int*)+0x4b>
c0017fc3:	31 d2                	xor    edx,edx
c0017fc5:	31 c0                	xor    eax,eax
c0017fc7:	be 0a 00 00 00       	mov    esi,0xa
c0017fcc:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0017fd1:	75 20                	jne    c0017ff3 <Reg::readInt(char*, char*, int*)+0x79>
c0017fd3:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0017fd7:	80 f9 78             	cmp    cl,0x78
c0017fda:	75 0a                	jne    c0017fe6 <Reg::readInt(char*, char*, int*)+0x6c>
c0017fdc:	83 c2 02             	add    edx,0x2
c0017fdf:	be 10 00 00 00       	mov    esi,0x10
c0017fe4:	eb 0d                	jmp    c0017ff3 <Reg::readInt(char*, char*, int*)+0x79>
c0017fe6:	80 f9 62             	cmp    cl,0x62
c0017fe9:	75 08                	jne    c0017ff3 <Reg::readInt(char*, char*, int*)+0x79>
c0017feb:	83 c2 02             	add    edx,0x2
c0017fee:	be 02 00 00 00       	mov    esi,0x2
c0017ff3:	01 d7                	add    edi,edx
c0017ff5:	31 d2                	xor    edx,edx
c0017ff7:	8a 1f                	mov    bl,BYTE PTR [edi]
c0017ff9:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0017ffd:	80 fb 0d             	cmp    bl,0xd
c0018000:	0f 94 c3             	sete   bl
c0018003:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0018008:	0f 94 c1             	sete   cl
c001800b:	08 cb                	or     bl,cl
c001800d:	75 3a                	jne    c0018049 <Reg::readInt(char*, char*, int*)+0xcf>
c001800f:	0f af d6             	imul   edx,esi
c0018012:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0018017:	83 fe 10             	cmp    esi,0x10
c001801a:	75 26                	jne    c0018042 <Reg::readInt(char*, char*, int*)+0xc8>
c001801c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0018020:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0018023:	89 e9                	mov    ecx,ebp
c0018025:	80 f9 05             	cmp    cl,0x5
c0018028:	77 06                	ja     c0018030 <Reg::readInt(char*, char*, int*)+0xb6>
c001802a:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001802e:	eb 16                	jmp    c0018046 <Reg::readInt(char*, char*, int*)+0xcc>
c0018030:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0018034:	83 e9 61             	sub    ecx,0x61
c0018037:	80 f9 05             	cmp    cl,0x5
c001803a:	77 06                	ja     c0018042 <Reg::readInt(char*, char*, int*)+0xc8>
c001803c:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0018040:	eb 04                	jmp    c0018046 <Reg::readInt(char*, char*, int*)+0xcc>
c0018042:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0018046:	47                   	inc    edi
c0018047:	eb ae                	jmp    c0017ff7 <Reg::readInt(char*, char*, int*)+0x7d>
c0018049:	84 c0                	test   al,al
c001804b:	74 02                	je     c001804f <Reg::readInt(char*, char*, int*)+0xd5>
c001804d:	f7 da                	neg    edx
c001804f:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0018056:	89 10                	mov    DWORD PTR [eax],edx
c0018058:	88 d8                	mov    al,bl
c001805a:	81 c4 ec 00 00 00    	add    esp,0xec
c0018060:	5b                   	pop    ebx
c0018061:	5e                   	pop    esi
c0018062:	5f                   	pop    edi
c0018063:	5d                   	pop    ebp
c0018064:	c3                   	ret    

c0018065 <Reg::readString(char*, char*, char*, int)>:
c0018065:	57                   	push   edi
c0018066:	56                   	push   esi
c0018067:	53                   	push   ebx
c0018068:	81 ec d4 00 00 00    	sub    esp,0xd4
c001806e:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0018075:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0018079:	57                   	push   edi
c001807a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0018081:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0018088:	e8 b6 fe ff ff       	call   c0017f43 <Reg::getLine(char*, char*, char*)>
c001808d:	83 c4 10             	add    esp,0x10
c0018090:	89 c6                	mov    esi,eax
c0018092:	84 c0                	test   al,al
c0018094:	74 44                	je     c00180da <Reg::readString(char*, char*, char*, int)+0x75>
c0018096:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001809d:	31 c0                	xor    eax,eax
c001809f:	4a                   	dec    edx
c00180a0:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00180a3:	84 c9                	test   cl,cl
c00180a5:	74 0f                	je     c00180b6 <Reg::readString(char*, char*, char*, int)+0x51>
c00180a7:	39 c2                	cmp    edx,eax
c00180a9:	7e 0b                	jle    c00180b6 <Reg::readString(char*, char*, char*, int)+0x51>
c00180ab:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00180ae:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00180b3:	40                   	inc    eax
c00180b4:	eb ea                	jmp    c00180a0 <Reg::readString(char*, char*, char*, int)+0x3b>
c00180b6:	83 ec 0c             	sub    esp,0xc
c00180b9:	53                   	push   ebx
c00180ba:	e8 66 85 fe ff       	call   c0000625 <strlen>
c00180bf:	83 c4 10             	add    esp,0x10
c00180c2:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00180c7:	75 11                	jne    c00180da <Reg::readString(char*, char*, char*, int)+0x75>
c00180c9:	83 ec 0c             	sub    esp,0xc
c00180cc:	53                   	push   ebx
c00180cd:	e8 53 85 fe ff       	call   c0000625 <strlen>
c00180d2:	83 c4 10             	add    esp,0x10
c00180d5:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00180da:	81 c4 d0 00 00 00    	add    esp,0xd0
c00180e0:	89 f0                	mov    eax,esi
c00180e2:	5b                   	pop    ebx
c00180e3:	5e                   	pop    esi
c00180e4:	5f                   	pop    edi
c00180e5:	c3                   	ret    

c00180e6 <Reg::readBool(char*, char*, bool*)>:
c00180e6:	83 ec 20             	sub    esp,0x20
c00180e9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00180ed:	50                   	push   eax
c00180ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180f6:	e8 7f fe ff ff       	call   c0017f7a <Reg::readInt(char*, char*, int*)>
c00180fb:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018100:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018104:	0f 95 02             	setne  BYTE PTR [edx]
c0018107:	83 c4 2c             	add    esp,0x2c
c001810a:	c3                   	ret    

c001810b <Reg::readBoolWithDefault(char*, char*, bool)>:
c001810b:	53                   	push   ebx
c001810c:	83 ec 1c             	sub    esp,0x1c
c001810f:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0018113:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018117:	50                   	push   eax
c0018118:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001811c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018120:	e8 c1 ff ff ff       	call   c00180e6 <Reg::readBool(char*, char*, bool*)>
c0018125:	83 c4 10             	add    esp,0x10
c0018128:	84 c0                	test   al,al
c001812a:	74 04                	je     c0018130 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001812c:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0018130:	88 d8                	mov    al,bl
c0018132:	83 c4 18             	add    esp,0x18
c0018135:	5b                   	pop    ebx
c0018136:	c3                   	ret    

c0018137 <Reg::readIntWithDefault(char*, char*, int)>:
c0018137:	53                   	push   ebx
c0018138:	83 ec 1c             	sub    esp,0x1c
c001813b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001813f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018143:	50                   	push   eax
c0018144:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018148:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001814c:	e8 29 fe ff ff       	call   c0017f7a <Reg::readInt(char*, char*, int*)>
c0018151:	83 c4 10             	add    esp,0x10
c0018154:	84 c0                	test   al,al
c0018156:	74 04                	je     c001815c <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0018158:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001815c:	89 d8                	mov    eax,ebx
c001815e:	83 c4 18             	add    esp,0x18
c0018161:	5b                   	pop    ebx
c0018162:	c3                   	ret    

c0018163 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0018163:	56                   	push   esi
c0018164:	53                   	push   ebx
c0018165:	51                   	push   ecx
c0018166:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001816a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001816e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018172:	56                   	push   esi
c0018173:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018177:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001817b:	e8 e5 fe ff ff       	call   c0018065 <Reg::readString(char*, char*, char*, int)>
c0018180:	83 c4 10             	add    esp,0x10
c0018183:	84 c0                	test   al,al
c0018185:	74 02                	je     c0018189 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0018187:	89 f3                	mov    ebx,esi
c0018189:	89 d8                	mov    eax,ebx
c001818b:	5a                   	pop    edx
c001818c:	5b                   	pop    ebx
c001818d:	5e                   	pop    esi
c001818e:	c3                   	ret    

c001818f <Sys::exit(regs*)>:
c001818f:	83 ec 18             	sub    esp,0x18
c0018192:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018196:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0018199:	e8 6e 6b ff ff       	call   c000ed0c <terminateTask(int)>
c001819e:	83 c8 ff             	or     eax,0xffffffff
c00181a1:	83 c4 1c             	add    esp,0x1c
c00181a4:	89 c2                	mov    edx,eax
c00181a6:	c3                   	ret    

c00181a7 <Sys::loadDLL(regs*)>:
c00181a7:	56                   	push   esi
c00181a8:	53                   	push   ebx
c00181a9:	31 d2                	xor    edx,edx
c00181ab:	51                   	push   ecx
c00181ac:	b8 01 00 00 00       	mov    eax,0x1
c00181b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00181b5:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00181b9:	74 7d                	je     c0018238 <Sys::loadDLL(regs*)+0x91>
c00181bb:	83 ec 0c             	sub    esp,0xc
c00181be:	68 14 01 00 00       	push   0x114
c00181c3:	e8 5c a0 ff ff       	call   c0012224 <operator new(unsigned long)>
c00181c8:	83 c4 0c             	add    esp,0xc
c00181cb:	89 c3                	mov    ebx,eax
c00181cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181d2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00181d5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00181d8:	53                   	push   ebx
c00181d9:	e8 74 a4 ff ff       	call   c0012652 <File::File(char const*, Process*)>
c00181de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00181e1:	e8 3e a7 ff ff       	call   c0012924 <File::exists()>
c00181e6:	83 c4 10             	add    esp,0x10
c00181e9:	84 c0                	test   al,al
c00181eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00181ed:	75 11                	jne    c0018200 <Sys::loadDLL(regs*)+0x59>
c00181ef:	83 ec 0c             	sub    esp,0xc
c00181f2:	53                   	push   ebx
c00181f3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00181f6:	83 c4 10             	add    esp,0x10
c00181f9:	b8 03 00 00 00       	mov    eax,0x3
c00181fe:	eb 36                	jmp    c0018236 <Sys::loadDLL(regs*)+0x8f>
c0018200:	83 ec 0c             	sub    esp,0xc
c0018203:	53                   	push   ebx
c0018204:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018207:	58                   	pop    eax
c0018208:	5a                   	pop    edx
c0018209:	6a 00                	push   0x0
c001820b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001820e:	e8 91 41 ff ff       	call   c000c3a4 <Thr::loadDLL(char const*, bool)>
c0018213:	83 c4 10             	add    esp,0x10
c0018216:	89 c1                	mov    ecx,eax
c0018218:	31 d2                	xor    edx,edx
c001821a:	b8 04 00 00 00       	mov    eax,0x4
c001821f:	85 c9                	test   ecx,ecx
c0018221:	74 15                	je     c0018238 <Sys::loadDLL(regs*)+0x91>
c0018223:	53                   	push   ebx
c0018224:	53                   	push   ebx
c0018225:	ff 35 68 2e 02 c0    	push   DWORD PTR ds:0xc0022e68
c001822b:	51                   	push   ecx
c001822c:	e8 c6 42 ff ff       	call   c000c4f7 <Thr::executeDLL(unsigned long, void*)>
c0018231:	83 c4 10             	add    esp,0x10
c0018234:	31 c0                	xor    eax,eax
c0018236:	31 d2                	xor    edx,edx
c0018238:	59                   	pop    ecx
c0018239:	5b                   	pop    ebx
c001823a:	5e                   	pop    esi
c001823b:	c3                   	ret    

c001823c <Sys::read(regs*)>:
c001823c:	57                   	push   edi
c001823d:	56                   	push   esi
c001823e:	53                   	push   ebx
c001823f:	83 ec 10             	sub    esp,0x10
c0018242:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018246:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0018249:	83 f8 02             	cmp    eax,0x2
c001824c:	77 10                	ja     c001825e <Sys::read(regs*)+0x22>
c001824e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018253:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018256:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001825c:	eb 0e                	jmp    c001826c <Sys::read(regs*)+0x30>
c001825e:	83 ec 0c             	sub    esp,0xc
c0018261:	50                   	push   eax
c0018262:	e8 46 8d ff ff       	call   c0010fad <getFromFileDescriptor(int)>
c0018267:	83 c4 10             	add    esp,0x10
c001826a:	89 c1                	mov    ecx,eax
c001826c:	83 c8 ff             	or     eax,0xffffffff
c001826f:	85 c9                	test   ecx,ecx
c0018271:	89 c2                	mov    edx,eax
c0018273:	74 28                	je     c001829d <Sys::read(regs*)+0x61>
c0018275:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001827d:	31 ff                	xor    edi,edi
c001827f:	83 ec 0c             	sub    esp,0xc
c0018282:	8b 01                	mov    eax,DWORD PTR [ecx]
c0018284:	8d 54 24 18          	lea    edx,[esp+0x18]
c0018288:	52                   	push   edx
c0018289:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001828c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001828f:	57                   	push   edi
c0018290:	56                   	push   esi
c0018291:	51                   	push   ecx
c0018292:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0018295:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018299:	83 c4 20             	add    esp,0x20
c001829c:	99                   	cdq    
c001829d:	83 c4 10             	add    esp,0x10
c00182a0:	5b                   	pop    ebx
c00182a1:	5e                   	pop    esi
c00182a2:	5f                   	pop    edi
c00182a3:	c3                   	ret    

c00182a4 <Sys::sbrk(regs*)>:
c00182a4:	56                   	push   esi
c00182a5:	53                   	push   ebx
c00182a6:	50                   	push   eax
c00182a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00182b0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00182b3:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00182b6:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00182bc:	85 db                	test   ebx,ebx
c00182be:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00182c1:	74 02                	je     c00182c5 <Sys::sbrk(regs*)+0x21>
c00182c3:	79 06                	jns    c00182cb <Sys::sbrk(regs*)+0x27>
c00182c5:	89 f0                	mov    eax,esi
c00182c7:	31 d2                	xor    edx,edx
c00182c9:	eb 2a                	jmp    c00182f5 <Sys::sbrk(regs*)+0x51>
c00182cb:	83 c8 ff             	or     eax,0xffffffff
c00182ce:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00182d4:	89 c2                	mov    edx,eax
c00182d6:	77 1d                	ja     c00182f5 <Sys::sbrk(regs*)+0x51>
c00182d8:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00182de:	50                   	push   eax
c00182df:	c1 ea 0c             	shr    edx,0xc
c00182e2:	68 07 04 00 00       	push   0x407
c00182e7:	52                   	push   edx
c00182e8:	51                   	push   ecx
c00182e9:	e8 dc 94 ff ff       	call   c00117ca <VAS::allocatePages(int, int)>
c00182ee:	89 f0                	mov    eax,esi
c00182f0:	31 d2                	xor    edx,edx
c00182f2:	83 c4 10             	add    esp,0x10
c00182f5:	59                   	pop    ecx
c00182f6:	5b                   	pop    ebx
c00182f7:	5e                   	pop    esi
c00182f8:	c3                   	ret    

c00182f9 <Sys::write(regs*)>:
c00182f9:	57                   	push   edi
c00182fa:	56                   	push   esi
c00182fb:	53                   	push   ebx
c00182fc:	83 ec 10             	sub    esp,0x10
c00182ff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018303:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0018306:	83 f8 02             	cmp    eax,0x2
c0018309:	77 10                	ja     c001831b <Sys::write(regs*)+0x22>
c001830b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018310:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018313:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0018319:	eb 0e                	jmp    c0018329 <Sys::write(regs*)+0x30>
c001831b:	83 ec 0c             	sub    esp,0xc
c001831e:	50                   	push   eax
c001831f:	e8 89 8c ff ff       	call   c0010fad <getFromFileDescriptor(int)>
c0018324:	83 c4 10             	add    esp,0x10
c0018327:	89 c1                	mov    ecx,eax
c0018329:	83 c8 ff             	or     eax,0xffffffff
c001832c:	85 c9                	test   ecx,ecx
c001832e:	89 c2                	mov    edx,eax
c0018330:	74 28                	je     c001835a <Sys::write(regs*)+0x61>
c0018332:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001833a:	31 ff                	xor    edi,edi
c001833c:	83 ec 0c             	sub    esp,0xc
c001833f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0018341:	8d 54 24 18          	lea    edx,[esp+0x18]
c0018345:	52                   	push   edx
c0018346:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0018349:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001834c:	57                   	push   edi
c001834d:	56                   	push   esi
c001834e:	51                   	push   ecx
c001834f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0018352:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018356:	83 c4 20             	add    esp,0x20
c0018359:	99                   	cdq    
c001835a:	83 c4 10             	add    esp,0x10
c001835d:	5b                   	pop    ebx
c001835e:	5e                   	pop    esi
c001835f:	5f                   	pop    edi
c0018360:	c3                   	ret    

c0018361 <Sys::yield(regs*)>:
c0018361:	83 ec 0c             	sub    esp,0xc
c0018364:	e8 a3 5d ff ff       	call   c000e10c <lockScheduler()>
c0018369:	e8 d2 60 ff ff       	call   c000e440 <schedule()>
c001836e:	e8 9b 5d ff ff       	call   c000e10e <unlockScheduler()>
c0018373:	31 c0                	xor    eax,eax
c0018375:	31 d2                	xor    edx,edx
c0018377:	83 c4 0c             	add    esp,0xc
c001837a:	c3                   	ret    

c001837b <vm8086EntryPoint(void*)>:
c001837b:	83 ec 0c             	sub    esp,0xc
c001837e:	e8 8b 5d ff ff       	call   c000e10e <unlockScheduler()>
c0018383:	fb                   	sti    
c0018384:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018389:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001838d:	52                   	push   edx
c001838e:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0018392:	52                   	push   edx
c0018393:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018397:	52                   	push   edx
c0018398:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001839c:	50                   	push   eax
c001839d:	e8 13 7e fe ff       	call   c00001b5 <goToVM86>
c00183a2:	83 c4 1c             	add    esp,0x1c
c00183a5:	c3                   	ret    

c00183a6 <inbv(unsigned short)>:
c00183a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00183aa:	ec                   	in     al,dx
c00183ab:	c3                   	ret    

c00183ac <outbv(unsigned short, unsigned char)>:
c00183ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00183b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00183b4:	ee                   	out    dx,al
c00183b5:	c3                   	ret    

c00183b6 <realToLinear(unsigned short, unsigned short)>:
c00183b6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00183bb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00183c0:	c1 e0 04             	shl    eax,0x4
c00183c3:	01 d0                	add    eax,edx
c00183c5:	c3                   	ret    

c00183c6 <getSegment(unsigned int)>:
c00183c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183ca:	c1 e8 10             	shr    eax,0x10
c00183cd:	c3                   	ret    

c00183ce <getOffset(unsigned int)>:
c00183ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183d2:	c3                   	ret    

c00183d3 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00183d3:	55                   	push   ebp
c00183d4:	57                   	push   edi
c00183d5:	56                   	push   esi
c00183d6:	53                   	push   ebx
c00183d7:	83 ec 2c             	sub    esp,0x2c
c00183da:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00183de:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00183e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00183e6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00183ea:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00183ee:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00183f2:	e8 15 5d ff ff       	call   c000e10c <lockScheduler()>
c00183f7:	68 80 00 00 00       	push   0x80
c00183fc:	6a 00                	push   0x0
c00183fe:	68 7b 83 01 c0       	push   0xc001837b
c0018403:	55                   	push   ebp
c0018404:	e8 2d 5e ff ff       	call   c000e236 <Process::createThread(void (*)(void*), void*, int)>
c0018409:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001840d:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c0018411:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0018415:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c0018419:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c001841d:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0018421:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018428:	e8 f7 9d ff ff       	call   c0012224 <operator new(unsigned long)>
c001842d:	83 c4 0c             	add    esp,0xc
c0018430:	89 c3                	mov    ebx,eax
c0018432:	55                   	push   ebp
c0018433:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018437:	50                   	push   eax
c0018438:	e8 15 a2 ff ff       	call   c0012652 <File::File(char const*, Process*)>
c001843d:	83 c4 0c             	add    esp,0xc
c0018440:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018444:	50                   	push   eax
c0018445:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018449:	50                   	push   eax
c001844a:	53                   	push   ebx
c001844b:	e8 12 a5 ff ff       	call   c0012962 <File::stat(unsigned long long*, bool*)>
c0018450:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c0018454:	83 c4 10             	add    esp,0x10
c0018457:	84 d2                	test   dl,dl
c0018459:	74 1c                	je     c0018477 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c001845b:	83 ec 0c             	sub    esp,0xc
c001845e:	68 c1 18 02 c0       	push   0xc00218c1
c0018463:	e8 20 49 ff ff       	call   c000cd88 <panic(char const*)>
c0018468:	e8 a1 5c ff ff       	call   c000e10e <unlockScheduler()>
c001846d:	83 c4 10             	add    esp,0x10
c0018470:	31 d2                	xor    edx,edx
c0018472:	e9 81 00 00 00       	jmp    c00184f8 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018477:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001847b:	51                   	push   ecx
c001847c:	51                   	push   ecx
c001847d:	6a 01                	push   0x1
c001847f:	53                   	push   ebx
c0018480:	e8 31 a2 ff ff       	call   c00126b6 <File::open(FileOpenMode)>
c0018485:	83 c4 10             	add    esp,0x10
c0018488:	85 c0                	test   eax,eax
c001848a:	74 1b                	je     c00184a7 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c001848c:	83 ec 0c             	sub    esp,0xc
c001848f:	68 da 18 02 c0       	push   0xc00218da
c0018494:	e8 ef 48 ff ff       	call   c000cd88 <panic(char const*)>
c0018499:	e8 70 5c ff ff       	call   c000e10e <unlockScheduler()>
c001849e:	83 c4 10             	add    esp,0x10
c00184a1:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00184a5:	eb 51                	jmp    c00184f8 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c00184a7:	83 ec 0c             	sub    esp,0xc
c00184aa:	0f b7 ff             	movzx  edi,di
c00184ad:	6a 07                	push   0x7
c00184af:	0f b7 f6             	movzx  esi,si
c00184b2:	68 00 01 00 00       	push   0x100
c00184b7:	6a 00                	push   0x0
c00184b9:	6a 00                	push   0x0
c00184bb:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c00184c1:	e8 f0 94 ff ff       	call   c00119b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00184c6:	83 c4 18             	add    esp,0x18
c00184c9:	57                   	push   edi
c00184ca:	56                   	push   esi
c00184cb:	e8 e6 fe ff ff       	call   c00183b6 <realToLinear(unsigned short, unsigned short)>
c00184d0:	5a                   	pop    edx
c00184d1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00184d3:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00184d7:	51                   	push   ecx
c00184d8:	50                   	push   eax
c00184d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00184dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00184e1:	53                   	push   ebx
c00184e2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00184e5:	83 c4 14             	add    esp,0x14
c00184e8:	53                   	push   ebx
c00184e9:	e8 26 a2 ff ff       	call   c0012714 <File::close()>
c00184ee:	e8 1b 5c ff ff       	call   c000e10e <unlockScheduler()>
c00184f3:	83 c4 10             	add    esp,0x10
c00184f6:	b2 01                	mov    dl,0x1
c00184f8:	83 c4 2c             	add    esp,0x2c
c00184fb:	88 d0                	mov    al,dl
c00184fd:	5b                   	pop    ebx
c00184fe:	5e                   	pop    esi
c00184ff:	5f                   	pop    edi
c0018500:	5d                   	pop    ebp
c0018501:	c3                   	ret    

c0018502 <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018502:	57                   	push   edi
c0018503:	56                   	push   esi
c0018504:	53                   	push   ebx
c0018505:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018509:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001850d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018511:	83 e8 06             	sub    eax,0x6
c0018514:	0f b7 c0             	movzx  eax,ax
c0018517:	50                   	push   eax
c0018518:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001851d:	50                   	push   eax
c001851e:	e8 93 fe ff ff       	call   c00183b6 <realToLinear(unsigned short, unsigned short)>
c0018523:	5a                   	pop    edx
c0018524:	5e                   	pop    esi
c0018525:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018528:	8d 56 fa             	lea    edx,[esi-0x6]
c001852b:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018531:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018534:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018537:	83 c2 02             	add    edx,0x2
c001853a:	66 89 10             	mov    WORD PTR [eax],dx
c001853d:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018540:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018544:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018547:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001854b:	89 d6                	mov    esi,edx
c001854d:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018553:	66 81 e6 ff fd       	and    si,0xfdff
c0018558:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001855c:	74 07                	je     c0018565 <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001855e:	89 d6                	mov    esi,edx
c0018560:	66 81 ce 00 02       	or     si,0x200
c0018565:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018569:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001856e:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018572:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001857a:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001857d:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018585:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018588:	5b                   	pop    ebx
c0018589:	5e                   	pop    esi
c001858a:	5f                   	pop    edi
c001858b:	c3                   	ret    

c001858c <readByteFromReal(unsigned short, unsigned short)>:
c001858c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018591:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018596:	c1 e0 04             	shl    eax,0x4
c0018599:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001859c:	c3                   	ret    

c001859d <readWordFromReal(unsigned short, unsigned short)>:
c001859d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00185a2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00185a7:	c1 e0 04             	shl    eax,0x4
c00185aa:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00185ae:	c3                   	ret    

c00185af <readDwordFromReal(unsigned short, unsigned short)>:
c00185af:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00185b4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00185b9:	c1 e0 04             	shl    eax,0x4
c00185bc:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00185bf:	c3                   	ret    

c00185c0 <writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00185c0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00185c5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00185ca:	c1 e0 04             	shl    eax,0x4
c00185cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00185d1:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00185d4:	c3                   	ret    

c00185d5 <writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00185d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00185da:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00185df:	c1 e0 04             	shl    eax,0x4
c00185e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00185e6:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00185ea:	c3                   	ret    

c00185eb <writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00185eb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00185f0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00185f5:	c1 e0 04             	shl    eax,0x4
c00185f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00185fc:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00185ff:	c3                   	ret    

c0018600 <vm8086FaultHandler(regs*)>:
c0018600:	55                   	push   ebp
c0018601:	57                   	push   edi
c0018602:	56                   	push   esi
c0018603:	53                   	push   ebx
c0018604:	83 ec 1c             	sub    esp,0x1c
c0018607:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001860b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001860e:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018612:	0f b7 f0             	movzx  esi,ax
c0018615:	52                   	push   edx
c0018616:	0f b7 c0             	movzx  eax,ax
c0018619:	50                   	push   eax
c001861a:	e8 97 fd ff ff       	call   c00183b6 <realToLinear(unsigned short, unsigned short)>
c001861f:	5a                   	pop    edx
c0018620:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018623:	59                   	pop    ecx
c0018624:	89 c7                	mov    edi,eax
c0018626:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018629:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001862d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018632:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018636:	0f b7 c5             	movzx  eax,bp
c0018639:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001863d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018641:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018645:	e8 6c fd ff ff       	call   c00183b6 <realToLinear(unsigned short, unsigned short)>
c001864a:	5a                   	pop    edx
c001864b:	59                   	pop    ecx
c001864c:	b1 06                	mov    cl,0x6
c001864e:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018653:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018658:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001865b:	80 fa 9d             	cmp    dl,0x9d
c001865e:	0f 84 1d 02 00 00    	je     c0018881 <vm8086FaultHandler(regs*)+0x281>
c0018664:	0f 87 8e 00 00 00    	ja     c00186f8 <vm8086FaultHandler(regs*)+0xf8>
c001866a:	80 fa 66             	cmp    dl,0x66
c001866d:	0f 84 89 01 00 00    	je     c00187fc <vm8086FaultHandler(regs*)+0x1fc>
c0018673:	77 44                	ja     c00186b9 <vm8086FaultHandler(regs*)+0xb9>
c0018675:	80 fa 36             	cmp    dl,0x36
c0018678:	0f 84 74 01 00 00    	je     c00187f2 <vm8086FaultHandler(regs*)+0x1f2>
c001867e:	77 1a                	ja     c001869a <vm8086FaultHandler(regs*)+0x9a>
c0018680:	80 fa 26             	cmp    dl,0x26
c0018683:	0f 84 4b 01 00 00    	je     c00187d4 <vm8086FaultHandler(regs*)+0x1d4>
c0018689:	80 fa 2e             	cmp    dl,0x2e
c001868c:	0f 85 4a 05 00 00    	jne    c0018bdc <vm8086FaultHandler(regs*)+0x5dc>
c0018692:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018695:	31 c9                	xor    ecx,ecx
c0018697:	47                   	inc    edi
c0018698:	eb be                	jmp    c0018658 <vm8086FaultHandler(regs*)+0x58>
c001869a:	80 fa 64             	cmp    dl,0x64
c001869d:	0f 84 3b 01 00 00    	je     c00187de <vm8086FaultHandler(regs*)+0x1de>
c00186a3:	0f 87 3f 01 00 00    	ja     c00187e8 <vm8086FaultHandler(regs*)+0x1e8>
c00186a9:	80 fa 3e             	cmp    dl,0x3e
c00186ac:	0f 85 2a 05 00 00    	jne    c0018bdc <vm8086FaultHandler(regs*)+0x5dc>
c00186b2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00186b5:	b1 01                	mov    cl,0x1
c00186b7:	eb de                	jmp    c0018697 <vm8086FaultHandler(regs*)+0x97>
c00186b9:	80 fa 6d             	cmp    dl,0x6d
c00186bc:	0f 84 bf 02 00 00    	je     c0018981 <vm8086FaultHandler(regs*)+0x381>
c00186c2:	77 17                	ja     c00186db <vm8086FaultHandler(regs*)+0xdb>
c00186c4:	80 fa 67             	cmp    dl,0x67
c00186c7:	0f 84 3c 01 00 00    	je     c0018809 <vm8086FaultHandler(regs*)+0x209>
c00186cd:	80 fa 6c             	cmp    dl,0x6c
c00186d0:	0f 84 5d 02 00 00    	je     c0018933 <vm8086FaultHandler(regs*)+0x333>
c00186d6:	e9 01 05 00 00       	jmp    c0018bdc <vm8086FaultHandler(regs*)+0x5dc>
c00186db:	80 fa 6f             	cmp    dl,0x6f
c00186de:	0f 84 8b 03 00 00    	je     c0018a6f <vm8086FaultHandler(regs*)+0x46f>
c00186e4:	0f 82 0f 03 00 00    	jb     c00189f9 <vm8086FaultHandler(regs*)+0x3f9>
c00186ea:	80 fa 9c             	cmp    dl,0x9c
c00186ed:	0f 84 23 01 00 00    	je     c0018816 <vm8086FaultHandler(regs*)+0x216>
c00186f3:	e9 e4 04 00 00       	jmp    c0018bdc <vm8086FaultHandler(regs*)+0x5dc>
c00186f8:	80 fa ec             	cmp    dl,0xec
c00186fb:	0f 84 7f 04 00 00    	je     c0018b80 <vm8086FaultHandler(regs*)+0x580>
c0018701:	77 7b                	ja     c001877e <vm8086FaultHandler(regs*)+0x17e>
c0018703:	80 fa e4             	cmp    dl,0xe4
c0018706:	0f 84 fe 03 00 00    	je     c0018b0a <vm8086FaultHandler(regs*)+0x50a>
c001870c:	77 53                	ja     c0018761 <vm8086FaultHandler(regs*)+0x161>
c001870e:	80 fa cd             	cmp    dl,0xcd
c0018711:	0f 84 cd 01 00 00    	je     c00188e4 <vm8086FaultHandler(regs*)+0x2e4>
c0018717:	80 fa cf             	cmp    dl,0xcf
c001871a:	0f 85 bc 04 00 00    	jne    c0018bdc <vm8086FaultHandler(regs*)+0x5dc>
c0018720:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018723:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018726:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001872a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001872d:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018731:	81 ca 00 02 02 00    	or     edx,0x20200
c0018737:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001873a:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001873e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018744:	66 c1 e8 09          	shr    ax,0x9
c0018748:	83 e0 01             	and    eax,0x1
c001874b:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001874e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018751:	83 c0 06             	add    eax,0x6
c0018754:	25 ff ff 00 00       	and    eax,0xffff
c0018759:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001875c:	e9 77 04 00 00       	jmp    c0018bd8 <vm8086FaultHandler(regs*)+0x5d8>
c0018761:	80 fa e6             	cmp    dl,0xe6
c0018764:	0f 84 ea 03 00 00    	je     c0018b54 <vm8086FaultHandler(regs*)+0x554>
c001876a:	0f 82 b6 03 00 00    	jb     c0018b26 <vm8086FaultHandler(regs*)+0x526>
c0018770:	80 fa e7             	cmp    dl,0xe7
c0018773:	0f 84 f2 03 00 00    	je     c0018b6b <vm8086FaultHandler(regs*)+0x56b>
c0018779:	e9 5e 04 00 00       	jmp    c0018bdc <vm8086FaultHandler(regs*)+0x5dc>
c001877e:	80 fa ef             	cmp    dl,0xef
c0018781:	0f 84 3c 04 00 00    	je     c0018bc3 <vm8086FaultHandler(regs*)+0x5c3>
c0018787:	77 28                	ja     c00187b1 <vm8086FaultHandler(regs*)+0x1b1>
c0018789:	80 fa ed             	cmp    dl,0xed
c001878c:	0f 84 0a 04 00 00    	je     c0018b9c <vm8086FaultHandler(regs*)+0x59c>
c0018792:	80 fa ee             	cmp    dl,0xee
c0018795:	0f 85 41 04 00 00    	jne    c0018bdc <vm8086FaultHandler(regs*)+0x5dc>
c001879b:	50                   	push   eax
c001879c:	50                   	push   eax
c001879d:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00187a1:	50                   	push   eax
c00187a2:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00187a6:	50                   	push   eax
c00187a7:	e8 00 fc ff ff       	call   c00183ac <outbv(unsigned short, unsigned char)>
c00187ac:	e9 0a 04 00 00       	jmp    c0018bbb <vm8086FaultHandler(regs*)+0x5bb>
c00187b1:	80 fa fa             	cmp    dl,0xfa
c00187b4:	0f 84 5d 01 00 00    	je     c0018917 <vm8086FaultHandler(regs*)+0x317>
c00187ba:	80 fa fb             	cmp    dl,0xfb
c00187bd:	0f 84 62 01 00 00    	je     c0018925 <vm8086FaultHandler(regs*)+0x325>
c00187c3:	80 fa f3             	cmp    dl,0xf3
c00187c6:	0f 85 10 04 00 00    	jne    c0018bdc <vm8086FaultHandler(regs*)+0x5dc>
c00187cc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00187cf:	e9 c3 fe ff ff       	jmp    c0018697 <vm8086FaultHandler(regs*)+0x97>
c00187d4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00187d7:	b1 02                	mov    cl,0x2
c00187d9:	e9 b9 fe ff ff       	jmp    c0018697 <vm8086FaultHandler(regs*)+0x97>
c00187de:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00187e1:	b1 03                	mov    cl,0x3
c00187e3:	e9 af fe ff ff       	jmp    c0018697 <vm8086FaultHandler(regs*)+0x97>
c00187e8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00187eb:	b1 04                	mov    cl,0x4
c00187ed:	e9 a5 fe ff ff       	jmp    c0018697 <vm8086FaultHandler(regs*)+0x97>
c00187f2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00187f5:	b1 05                	mov    cl,0x5
c00187f7:	e9 9b fe ff ff       	jmp    c0018697 <vm8086FaultHandler(regs*)+0x97>
c00187fc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00187ff:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0018804:	e9 8e fe ff ff       	jmp    c0018697 <vm8086FaultHandler(regs*)+0x97>
c0018809:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001880c:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0018811:	e9 81 fe ff ff       	jmp    c0018697 <vm8086FaultHandler(regs*)+0x97>
c0018816:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018819:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001881d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018822:	74 30                	je     c0018854 <vm8086FaultHandler(regs*)+0x254>
c0018824:	83 e9 04             	sub    ecx,0x4
c0018827:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001882d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018833:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018836:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018839:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001883f:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018843:	0f 84 8c 03 00 00    	je     c0018bd5 <vm8086FaultHandler(regs*)+0x5d5>
c0018849:	80 ce 02             	or     dh,0x2
c001884c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001884f:	e9 81 03 00 00       	jmp    c0018bd5 <vm8086FaultHandler(regs*)+0x5d5>
c0018854:	83 e9 02             	sub    ecx,0x2
c0018857:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001885d:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018860:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018864:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001886a:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001886e:	74 05                	je     c0018875 <vm8086FaultHandler(regs*)+0x275>
c0018870:	80 ce 02             	or     dh,0x2
c0018873:	eb 03                	jmp    c0018878 <vm8086FaultHandler(regs*)+0x278>
c0018875:	80 e6 fd             	and    dh,0xfd
c0018878:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001887c:	e9 54 03 00 00       	jmp    c0018bd5 <vm8086FaultHandler(regs*)+0x5d5>
c0018881:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018886:	74 2a                	je     c00188b2 <vm8086FaultHandler(regs*)+0x2b2>
c0018888:	8b 10                	mov    edx,DWORD PTR [eax]
c001888a:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018890:	81 ca 00 02 02 00    	or     edx,0x20200
c0018896:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018899:	8b 00                	mov    eax,DWORD PTR [eax]
c001889b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00188a1:	c1 e8 09             	shr    eax,0x9
c00188a4:	83 e0 01             	and    eax,0x1
c00188a7:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00188aa:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00188ad:	83 c0 04             	add    eax,0x4
c00188b0:	eb 25                	jmp    c00188d7 <vm8086FaultHandler(regs*)+0x2d7>
c00188b2:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00188b5:	81 ca 00 02 02 00    	or     edx,0x20200
c00188bb:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00188be:	66 8b 00             	mov    ax,WORD PTR [eax]
c00188c1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00188c7:	66 c1 e8 09          	shr    ax,0x9
c00188cb:	83 e0 01             	and    eax,0x1
c00188ce:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00188d1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00188d4:	83 c0 02             	add    eax,0x2
c00188d7:	25 ff ff 00 00       	and    eax,0xffff
c00188dc:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00188df:	e9 f1 02 00 00       	jmp    c0018bd5 <vm8086FaultHandler(regs*)+0x5d5>
c00188e4:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00188e8:	3c ff                	cmp    al,0xff
c00188ea:	75 10                	jne    c00188fc <vm8086FaultHandler(regs*)+0x2fc>
c00188ec:	83 ec 0c             	sub    esp,0xc
c00188ef:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00188f2:	e8 15 64 ff ff       	call   c000ed0c <terminateTask(int)>
c00188f7:	e9 c2 02 00 00       	jmp    c0018bbe <vm8086FaultHandler(regs*)+0x5be>
c00188fc:	83 ec 0c             	sub    esp,0xc
c00188ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018903:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018907:	57                   	push   edi
c0018908:	50                   	push   eax
c0018909:	53                   	push   ebx
c001890a:	e8 f3 fb ff ff       	call   c0018502 <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001890f:	83 c4 20             	add    esp,0x20
c0018912:	e9 c1 02 00 00       	jmp    c0018bd8 <vm8086FaultHandler(regs*)+0x5d8>
c0018917:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001891c:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018920:	e9 b0 02 00 00       	jmp    c0018bd5 <vm8086FaultHandler(regs*)+0x5d5>
c0018925:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001892a:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001892e:	e9 a2 02 00 00       	jmp    c0018bd5 <vm8086FaultHandler(regs*)+0x5d5>
c0018933:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018938:	74 0d                	je     c0018947 <vm8086FaultHandler(regs*)+0x347>
c001893a:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0018941:	0f 87 e9 02 00 00    	ja     c0018c30 <vm8086FaultHandler(regs*)+0x630>
c0018947:	83 ec 0c             	sub    esp,0xc
c001894a:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001894d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018951:	50                   	push   eax
c0018952:	e8 4f fa ff ff       	call   c00183a6 <inbv(unsigned short)>
c0018957:	83 c4 0c             	add    esp,0xc
c001895a:	0f b6 c0             	movzx  eax,al
c001895d:	0f b7 c9             	movzx  ecx,cx
c0018960:	50                   	push   eax
c0018961:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0018965:	50                   	push   eax
c0018966:	51                   	push   ecx
c0018967:	e8 54 fc ff ff       	call   c00185c0 <writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001896c:	83 c4 10             	add    esp,0x10
c001896f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018972:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018976:	74 03                	je     c001897b <vm8086FaultHandler(regs*)+0x37b>
c0018978:	48                   	dec    eax
c0018979:	eb 01                	jmp    c001897c <vm8086FaultHandler(regs*)+0x37c>
c001897b:	40                   	inc    eax
c001897c:	0f b7 c0             	movzx  eax,ax
c001897f:	eb 70                	jmp    c00189f1 <vm8086FaultHandler(regs*)+0x3f1>
c0018981:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018984:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0018987:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001898c:	74 0c                	je     c001899a <vm8086FaultHandler(regs*)+0x39a>
c001898e:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018994:	0f 87 96 02 00 00    	ja     c0018c30 <vm8086FaultHandler(regs*)+0x630>
c001899a:	0f b7 c9             	movzx  ecx,cx
c001899d:	0f b7 f6             	movzx  esi,si
c00189a0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00189a3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00189a8:	74 20                	je     c00189ca <vm8086FaultHandler(regs*)+0x3ca>
c00189aa:	ed                   	in     eax,dx
c00189ab:	55                   	push   ebp
c00189ac:	50                   	push   eax
c00189ad:	51                   	push   ecx
c00189ae:	56                   	push   esi
c00189af:	e8 37 fc ff ff       	call   c00185eb <writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00189b4:	83 c4 10             	add    esp,0x10
c00189b7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00189ba:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00189be:	74 05                	je     c00189c5 <vm8086FaultHandler(regs*)+0x3c5>
c00189c0:	83 e8 04             	sub    eax,0x4
c00189c3:	eb 27                	jmp    c00189ec <vm8086FaultHandler(regs*)+0x3ec>
c00189c5:	83 c0 04             	add    eax,0x4
c00189c8:	eb 22                	jmp    c00189ec <vm8086FaultHandler(regs*)+0x3ec>
c00189ca:	66 ed                	in     ax,dx
c00189cc:	0f b7 c0             	movzx  eax,ax
c00189cf:	57                   	push   edi
c00189d0:	50                   	push   eax
c00189d1:	51                   	push   ecx
c00189d2:	56                   	push   esi
c00189d3:	e8 fd fb ff ff       	call   c00185d5 <writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00189d8:	83 c4 10             	add    esp,0x10
c00189db:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00189de:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00189e2:	74 05                	je     c00189e9 <vm8086FaultHandler(regs*)+0x3e9>
c00189e4:	83 e8 02             	sub    eax,0x2
c00189e7:	eb 03                	jmp    c00189ec <vm8086FaultHandler(regs*)+0x3ec>
c00189e9:	83 c0 02             	add    eax,0x2
c00189ec:	25 ff ff 00 00       	and    eax,0xffff
c00189f1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00189f4:	e9 dc 01 00 00       	jmp    c0018bd5 <vm8086FaultHandler(regs*)+0x5d5>
c00189f9:	49                   	dec    ecx
c00189fa:	80 f9 05             	cmp    cl,0x5
c00189fd:	77 24                	ja     c0018a23 <vm8086FaultHandler(regs*)+0x423>
c00189ff:	0f b6 c9             	movzx  ecx,cl
c0018a02:	ff 24 8d 20 19 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffde6e0]
c0018a09:	0f b7 f5             	movzx  esi,bp
c0018a0c:	eb 15                	jmp    c0018a23 <vm8086FaultHandler(regs*)+0x423>
c0018a0e:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0018a12:	eb 0f                	jmp    c0018a23 <vm8086FaultHandler(regs*)+0x423>
c0018a14:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0018a18:	eb 09                	jmp    c0018a23 <vm8086FaultHandler(regs*)+0x423>
c0018a1a:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0018a1e:	eb 03                	jmp    c0018a23 <vm8086FaultHandler(regs*)+0x423>
c0018a20:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0018a23:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018a26:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018a2b:	74 0b                	je     c0018a38 <vm8086FaultHandler(regs*)+0x438>
c0018a2d:	3d ff ff 00 00       	cmp    eax,0xffff
c0018a32:	0f 87 f8 01 00 00    	ja     c0018c30 <vm8086FaultHandler(regs*)+0x630>
c0018a38:	0f b7 c0             	movzx  eax,ax
c0018a3b:	52                   	push   edx
c0018a3c:	52                   	push   edx
c0018a3d:	50                   	push   eax
c0018a3e:	56                   	push   esi
c0018a3f:	e8 48 fb ff ff       	call   c001858c <readByteFromReal(unsigned short, unsigned short)>
c0018a44:	59                   	pop    ecx
c0018a45:	0f b6 c0             	movzx  eax,al
c0018a48:	5e                   	pop    esi
c0018a49:	50                   	push   eax
c0018a4a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018a4e:	50                   	push   eax
c0018a4f:	e8 58 f9 ff ff       	call   c00183ac <outbv(unsigned short, unsigned char)>
c0018a54:	83 c4 10             	add    esp,0x10
c0018a57:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018a5a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018a5e:	74 03                	je     c0018a63 <vm8086FaultHandler(regs*)+0x463>
c0018a60:	48                   	dec    eax
c0018a61:	eb 01                	jmp    c0018a64 <vm8086FaultHandler(regs*)+0x464>
c0018a63:	40                   	inc    eax
c0018a64:	0f b7 c0             	movzx  eax,ax
c0018a67:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018a6a:	e9 66 01 00 00       	jmp    c0018bd5 <vm8086FaultHandler(regs*)+0x5d5>
c0018a6f:	49                   	dec    ecx
c0018a70:	80 f9 05             	cmp    cl,0x5
c0018a73:	77 1f                	ja     c0018a94 <vm8086FaultHandler(regs*)+0x494>
c0018a75:	0f b6 c9             	movzx  ecx,cl
c0018a78:	ff 24 8d 38 19 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffde6c8]
c0018a7f:	89 ee                	mov    esi,ebp
c0018a81:	eb 11                	jmp    c0018a94 <vm8086FaultHandler(regs*)+0x494>
c0018a83:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0018a86:	eb 0c                	jmp    c0018a94 <vm8086FaultHandler(regs*)+0x494>
c0018a88:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018a8b:	eb 07                	jmp    c0018a94 <vm8086FaultHandler(regs*)+0x494>
c0018a8d:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0018a90:	eb 02                	jmp    c0018a94 <vm8086FaultHandler(regs*)+0x494>
c0018a92:	8b 33                	mov    esi,DWORD PTR [ebx]
c0018a94:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0018a97:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018a9c:	74 0c                	je     c0018aaa <vm8086FaultHandler(regs*)+0x4aa>
c0018a9e:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018aa4:	0f 87 86 01 00 00    	ja     c0018c30 <vm8086FaultHandler(regs*)+0x630>
c0018aaa:	0f b7 d6             	movzx  edx,si
c0018aad:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018ab0:	0f b7 c1             	movzx  eax,cx
c0018ab3:	81 e7 00 04 00 00    	and    edi,0x400
c0018ab9:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0018abc:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018ac1:	74 1d                	je     c0018ae0 <vm8086FaultHandler(regs*)+0x4e0>
c0018ac3:	55                   	push   ebp
c0018ac4:	55                   	push   ebp
c0018ac5:	50                   	push   eax
c0018ac6:	52                   	push   edx
c0018ac7:	e8 e3 fa ff ff       	call   c00185af <readDwordFromReal(unsigned short, unsigned short)>
c0018acc:	83 c4 10             	add    esp,0x10
c0018acf:	89 f2                	mov    edx,esi
c0018ad1:	ef                   	out    dx,eax
c0018ad2:	85 ff                	test   edi,edi
c0018ad4:	74 05                	je     c0018adb <vm8086FaultHandler(regs*)+0x4db>
c0018ad6:	83 e9 04             	sub    ecx,0x4
c0018ad9:	eb 21                	jmp    c0018afc <vm8086FaultHandler(regs*)+0x4fc>
c0018adb:	83 c1 04             	add    ecx,0x4
c0018ade:	eb 1c                	jmp    c0018afc <vm8086FaultHandler(regs*)+0x4fc>
c0018ae0:	55                   	push   ebp
c0018ae1:	55                   	push   ebp
c0018ae2:	50                   	push   eax
c0018ae3:	52                   	push   edx
c0018ae4:	e8 b4 fa ff ff       	call   c001859d <readWordFromReal(unsigned short, unsigned short)>
c0018ae9:	83 c4 10             	add    esp,0x10
c0018aec:	89 f2                	mov    edx,esi
c0018aee:	66 ef                	out    dx,ax
c0018af0:	85 ff                	test   edi,edi
c0018af2:	74 05                	je     c0018af9 <vm8086FaultHandler(regs*)+0x4f9>
c0018af4:	83 e9 02             	sub    ecx,0x2
c0018af7:	eb 03                	jmp    c0018afc <vm8086FaultHandler(regs*)+0x4fc>
c0018af9:	83 c1 02             	add    ecx,0x2
c0018afc:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018b02:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0018b05:	e9 cb 00 00 00       	jmp    c0018bd5 <vm8086FaultHandler(regs*)+0x5d5>
c0018b0a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018b11:	83 ec 0c             	sub    esp,0xc
c0018b14:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018b18:	50                   	push   eax
c0018b19:	e8 88 f8 ff ff       	call   c00183a6 <inbv(unsigned short)>
c0018b1e:	0f b6 c0             	movzx  eax,al
c0018b21:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018b24:	eb 3f                	jmp    c0018b65 <vm8086FaultHandler(regs*)+0x565>
c0018b26:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018b2b:	74 07                	je     c0018b34 <vm8086FaultHandler(regs*)+0x534>
c0018b2d:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018b31:	ed                   	in     eax,dx
c0018b32:	eb 14                	jmp    c0018b48 <vm8086FaultHandler(regs*)+0x548>
c0018b34:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0018b37:	66 31 c9             	xor    cx,cx
c0018b3a:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0018b3d:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018b41:	66 ed                	in     ax,dx
c0018b43:	0f b7 c0             	movzx  eax,ax
c0018b46:	09 c8                	or     eax,ecx
c0018b48:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018b4b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018b4f:	e9 84 00 00 00       	jmp    c0018bd8 <vm8086FaultHandler(regs*)+0x5d8>
c0018b54:	52                   	push   edx
c0018b55:	52                   	push   edx
c0018b56:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018b5a:	50                   	push   eax
c0018b5b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018b5f:	50                   	push   eax
c0018b60:	e8 47 f8 ff ff       	call   c00183ac <outbv(unsigned short, unsigned char)>
c0018b65:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018b69:	eb 53                	jmp    c0018bbe <vm8086FaultHandler(regs*)+0x5be>
c0018b6b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018b6e:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018b72:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018b77:	74 03                	je     c0018b7c <vm8086FaultHandler(regs*)+0x57c>
c0018b79:	ef                   	out    dx,eax
c0018b7a:	eb cf                	jmp    c0018b4b <vm8086FaultHandler(regs*)+0x54b>
c0018b7c:	66 ef                	out    dx,ax
c0018b7e:	eb cb                	jmp    c0018b4b <vm8086FaultHandler(regs*)+0x54b>
c0018b80:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018b87:	83 ec 0c             	sub    esp,0xc
c0018b8a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018b8e:	50                   	push   eax
c0018b8f:	e8 12 f8 ff ff       	call   c00183a6 <inbv(unsigned short)>
c0018b94:	0f b6 c0             	movzx  eax,al
c0018b97:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018b9a:	eb 1f                	jmp    c0018bbb <vm8086FaultHandler(regs*)+0x5bb>
c0018b9c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018b9f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018ba4:	74 03                	je     c0018ba9 <vm8086FaultHandler(regs*)+0x5a9>
c0018ba6:	ed                   	in     eax,dx
c0018ba7:	eb 0d                	jmp    c0018bb6 <vm8086FaultHandler(regs*)+0x5b6>
c0018ba9:	66 ed                	in     ax,dx
c0018bab:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018bae:	0f b7 c0             	movzx  eax,ax
c0018bb1:	66 31 d2             	xor    dx,dx
c0018bb4:	09 d0                	or     eax,edx
c0018bb6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018bb9:	eb 1a                	jmp    c0018bd5 <vm8086FaultHandler(regs*)+0x5d5>
c0018bbb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018bbe:	83 c4 10             	add    esp,0x10
c0018bc1:	eb 15                	jmp    c0018bd8 <vm8086FaultHandler(regs*)+0x5d8>
c0018bc3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018bc6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018bc9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018bce:	74 03                	je     c0018bd3 <vm8086FaultHandler(regs*)+0x5d3>
c0018bd0:	ef                   	out    dx,eax
c0018bd1:	eb 02                	jmp    c0018bd5 <vm8086FaultHandler(regs*)+0x5d5>
c0018bd3:	66 ef                	out    dx,ax
c0018bd5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018bd8:	b0 01                	mov    al,0x1
c0018bda:	eb 56                	jmp    c0018c32 <vm8086FaultHandler(regs*)+0x632>
c0018bdc:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0018be0:	50                   	push   eax
c0018be1:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0018be5:	50                   	push   eax
c0018be6:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0018bea:	50                   	push   eax
c0018beb:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0018bef:	50                   	push   eax
c0018bf0:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018bf4:	50                   	push   eax
c0018bf5:	52                   	push   edx
c0018bf6:	52                   	push   edx
c0018bf7:	68 f3 18 02 c0       	push   0xc00218f3
c0018bfc:	e8 69 40 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0018c01:	83 c4 20             	add    esp,0x20
c0018c04:	83 ec 0c             	sub    esp,0xc
c0018c07:	6a 60                	push   0x60
c0018c09:	e8 98 f7 ff ff       	call   c00183a6 <inbv(unsigned short)>
c0018c0e:	83 c4 10             	add    esp,0x10
c0018c11:	3c 1c                	cmp    al,0x1c
c0018c13:	74 04                	je     c0018c19 <vm8086FaultHandler(regs*)+0x619>
c0018c15:	3c 5a                	cmp    al,0x5a
c0018c17:	75 eb                	jne    c0018c04 <vm8086FaultHandler(regs*)+0x604>
c0018c19:	3c 5a                	cmp    al,0x5a
c0018c1b:	74 04                	je     c0018c21 <vm8086FaultHandler(regs*)+0x621>
c0018c1d:	3c 1c                	cmp    al,0x1c
c0018c1f:	75 0f                	jne    c0018c30 <vm8086FaultHandler(regs*)+0x630>
c0018c21:	83 ec 0c             	sub    esp,0xc
c0018c24:	6a 60                	push   0x60
c0018c26:	e8 7b f7 ff ff       	call   c00183a6 <inbv(unsigned short)>
c0018c2b:	83 c4 10             	add    esp,0x10
c0018c2e:	eb e9                	jmp    c0018c19 <vm8086FaultHandler(regs*)+0x619>
c0018c30:	31 c0                	xor    eax,eax
c0018c32:	83 c4 1c             	add    esp,0x1c
c0018c35:	5b                   	pop    ebx
c0018c36:	5e                   	pop    esi
c0018c37:	5f                   	pop    edi
c0018c38:	5d                   	pop    ebp
c0018c39:	c3                   	ret    

c0018c3a <FAT::getName()>:
c0018c3a:	b8 50 19 02 c0       	mov    eax,0xc0021950
c0018c3f:	c3                   	ret    

c0018c40 <FAT::tell(void*, unsigned long long*)>:
c0018c40:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018c45:	75 06                	jne    c0018c4d <FAT::tell(void*, unsigned long long*)+0xd>
c0018c47:	b8 04 00 00 00       	mov    eax,0x4
c0018c4c:	c3                   	ret    
c0018c4d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018c52:	75 06                	jne    c0018c5a <FAT::tell(void*, unsigned long long*)+0x1a>
c0018c54:	b8 04 00 00 00       	mov    eax,0x4
c0018c59:	c3                   	ret    
c0018c5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c5e:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0018c61:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018c64:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c68:	89 01                	mov    DWORD PTR [ecx],eax
c0018c6a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018c6d:	b8 00 00 00 00       	mov    eax,0x0
c0018c72:	c3                   	ret    
c0018c73:	90                   	nop

c0018c74 <FAT::stat(void*, unsigned long long*)>:
c0018c74:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018c79:	75 06                	jne    c0018c81 <FAT::stat(void*, unsigned long long*)+0xd>
c0018c7b:	b8 04 00 00 00       	mov    eax,0x4
c0018c80:	c3                   	ret    
c0018c81:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018c86:	75 06                	jne    c0018c8e <FAT::stat(void*, unsigned long long*)+0x1a>
c0018c88:	b8 04 00 00 00       	mov    eax,0x4
c0018c8d:	c3                   	ret    
c0018c8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c92:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018c95:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018c98:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c9c:	89 01                	mov    DWORD PTR [ecx],eax
c0018c9e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018ca1:	b8 00 00 00 00       	mov    eax,0x0
c0018ca6:	c3                   	ret    
c0018ca7:	90                   	nop

c0018ca8 <FAT::exists(char const*)>:
c0018ca8:	b0 00                	mov    al,0x0
c0018caa:	c3                   	ret    
c0018cab:	90                   	nop

c0018cac <FAT::~FAT()>:
c0018cac:	83 ec 0c             	sub    esp,0xc
c0018caf:	ba d4 19 02 c0       	mov    edx,0xc00219d4
c0018cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cb8:	89 10                	mov    DWORD PTR [eax],edx
c0018cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cbe:	83 ec 0c             	sub    esp,0xc
c0018cc1:	50                   	push   eax
c0018cc2:	e8 85 97 ff ff       	call   c001244c <Filesystem::~Filesystem()>
c0018cc7:	83 c4 10             	add    esp,0x10
c0018cca:	90                   	nop
c0018ccb:	83 c4 0c             	add    esp,0xc
c0018cce:	c3                   	ret    
c0018ccf:	90                   	nop

c0018cd0 <FAT::~FAT()>:
c0018cd0:	83 ec 0c             	sub    esp,0xc
c0018cd3:	83 ec 0c             	sub    esp,0xc
c0018cd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018cda:	e8 cd ff ff ff       	call   c0018cac <FAT::~FAT()>
c0018cdf:	83 c4 10             	add    esp,0x10
c0018ce2:	83 ec 08             	sub    esp,0x8
c0018ce5:	6a 08                	push   0x8
c0018ce7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ceb:	e8 43 95 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c0018cf0:	83 c4 10             	add    esp,0x10
c0018cf3:	83 c4 0c             	add    esp,0xc
c0018cf6:	c3                   	ret    
c0018cf7:	90                   	nop

c0018cf8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018cf8:	83 ec 1c             	sub    esp,0x1c
c0018cfb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018d02:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018d07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d0b:	8b 04 85 60 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbda0]
c0018d12:	83 f8 ff             	cmp    eax,0xffffffff
c0018d15:	75 34                	jne    c0018d4b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0018d17:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018d1b:	88 c2                	mov    dl,al
c0018d1d:	a1 40 42 02 c0       	mov    eax,ds:0xc0024240
c0018d22:	01 d0                	add    eax,edx
c0018d24:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018d28:	8b 15 40 42 02 c0    	mov    edx,DWORD PTR ds:0xc0024240
c0018d2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d32:	89 14 85 60 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbda0],edx
c0018d39:	a1 40 42 02 c0       	mov    eax,ds:0xc0024240
c0018d3e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018d42:	89 14 85 e0 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbd20],edx
c0018d49:	eb 17                	jmp    c0018d62 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0018d4b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018d4f:	88 c2                	mov    dl,al
c0018d51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d55:	8b 04 85 60 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbda0]
c0018d5c:	01 d0                	add    eax,edx
c0018d5e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018d62:	83 ec 04             	sub    esp,0x4
c0018d65:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018d69:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018d6d:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018d71:	50                   	push   eax
c0018d72:	e8 ee dc fe ff       	call   c0006a65 <f_getlabel>
c0018d77:	83 c4 10             	add    esp,0x10
c0018d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018d7e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018d83:	75 07                	jne    c0018d8c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0018d85:	b8 00 00 00 00       	mov    eax,0x0
c0018d8a:	eb 05                	jmp    c0018d91 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0018d8c:	b8 01 00 00 00       	mov    eax,0x1
c0018d91:	83 c4 1c             	add    esp,0x1c
c0018d94:	c3                   	ret    
c0018d95:	90                   	nop

c0018d96 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018d96:	57                   	push   edi
c0018d97:	83 ec 58             	sub    esp,0x58
c0018d9a:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018da2:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018da6:	b9 0f 00 00 00       	mov    ecx,0xf
c0018dab:	b8 00 00 00 00       	mov    eax,0x0
c0018db0:	fc                   	cld    
c0018db1:	89 d7                	mov    edi,edx
c0018db3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018db5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018db9:	8b 04 85 60 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbda0]
c0018dc0:	83 f8 ff             	cmp    eax,0xffffffff
c0018dc3:	75 34                	jne    c0018df9 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0018dc5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018dc9:	88 c2                	mov    dl,al
c0018dcb:	a1 40 42 02 c0       	mov    eax,ds:0xc0024240
c0018dd0:	01 d0                	add    eax,edx
c0018dd2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018dd6:	8b 15 40 42 02 c0    	mov    edx,DWORD PTR ds:0xc0024240
c0018ddc:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018de0:	89 14 85 60 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbda0],edx
c0018de7:	a1 40 42 02 c0       	mov    eax,ds:0xc0024240
c0018dec:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018df0:	89 14 85 e0 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbd20],edx
c0018df7:	eb 17                	jmp    c0018e10 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0018df9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018dfd:	88 c2                	mov    dl,al
c0018dff:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018e03:	8b 04 85 60 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbda0]
c0018e0a:	01 d0                	add    eax,edx
c0018e0c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018e10:	83 ec 08             	sub    esp,0x8
c0018e13:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018e17:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e1b:	50                   	push   eax
c0018e1c:	e8 3d 79 fe ff       	call   c000075e <strcat>
c0018e21:	83 c4 10             	add    esp,0x10
c0018e24:	83 ec 0c             	sub    esp,0xc
c0018e27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e2b:	50                   	push   eax
c0018e2c:	e8 22 de fe ff       	call   c0006c53 <f_setlabel>
c0018e31:	83 c4 10             	add    esp,0x10
c0018e34:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018e38:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018e3d:	75 07                	jne    c0018e46 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0018e3f:	b8 00 00 00 00       	mov    eax,0x0
c0018e44:	eb 05                	jmp    c0018e4b <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0018e46:	b8 01 00 00 00       	mov    eax,0x1
c0018e4b:	83 c4 58             	add    esp,0x58
c0018e4e:	5f                   	pop    edi
c0018e4f:	c3                   	ret    

c0018e50 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018e50:	83 ec 2c             	sub    esp,0x2c
c0018e53:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018e5b:	83 ec 08             	sub    esp,0x8
c0018e5e:	68 74 19 02 c0       	push   0xc0021974
c0018e63:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018e67:	e8 8c 78 fe ff       	call   c00006f8 <strcmp>
c0018e6c:	83 c4 10             	add    esp,0x10
c0018e6f:	85 c0                	test   eax,eax
c0018e71:	0f 94 c0             	sete   al
c0018e74:	84 c0                	test   al,al
c0018e76:	74 0d                	je     c0018e85 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0018e78:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018e80:	e9 a6 00 00 00       	jmp    c0018f2b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018e85:	83 ec 08             	sub    esp,0x8
c0018e88:	68 66 19 02 c0       	push   0xc0021966
c0018e8d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018e91:	e8 62 78 fe ff       	call   c00006f8 <strcmp>
c0018e96:	83 c4 10             	add    esp,0x10
c0018e99:	85 c0                	test   eax,eax
c0018e9b:	0f 94 c0             	sete   al
c0018e9e:	84 c0                	test   al,al
c0018ea0:	74 0a                	je     c0018eac <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0018ea2:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018eaa:	eb 7f                	jmp    c0018f2b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018eac:	83 ec 08             	sub    esp,0x8
c0018eaf:	68 6c 19 02 c0       	push   0xc002196c
c0018eb4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018eb8:	e8 3b 78 fe ff       	call   c00006f8 <strcmp>
c0018ebd:	83 c4 10             	add    esp,0x10
c0018ec0:	85 c0                	test   eax,eax
c0018ec2:	0f 94 c0             	sete   al
c0018ec5:	84 c0                	test   al,al
c0018ec7:	74 0a                	je     c0018ed3 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0018ec9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018ed1:	eb 58                	jmp    c0018f2b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018ed3:	83 ec 08             	sub    esp,0x8
c0018ed6:	68 6c f1 01 c0       	push   0xc001f16c
c0018edb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018edf:	e8 14 78 fe ff       	call   c00006f8 <strcmp>
c0018ee4:	83 c4 10             	add    esp,0x10
c0018ee7:	85 c0                	test   eax,eax
c0018ee9:	0f 94 c0             	sete   al
c0018eec:	84 c0                	test   al,al
c0018eee:	74 0a                	je     c0018efa <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0018ef0:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018ef8:	eb 31                	jmp    c0018f2b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018efa:	83 ec 08             	sub    esp,0x8
c0018efd:	68 72 19 02 c0       	push   0xc0021972
c0018f02:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018f06:	e8 ed 77 fe ff       	call   c00006f8 <strcmp>
c0018f0b:	83 c4 10             	add    esp,0x10
c0018f0e:	85 c0                	test   eax,eax
c0018f10:	0f 94 c0             	sete   al
c0018f13:	84 c0                	test   al,al
c0018f15:	74 0a                	je     c0018f21 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0018f17:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018f1f:	eb 0a                	jmp    c0018f2b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018f21:	b8 08 00 00 00       	mov    eax,0x8
c0018f26:	e9 04 01 00 00       	jmp    c001902f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0018f2b:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018f32:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018f37:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018f3b:	8b 04 85 60 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbda0]
c0018f42:	83 f8 ff             	cmp    eax,0xffffffff
c0018f45:	75 34                	jne    c0018f7b <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0018f47:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018f4b:	88 c2                	mov    dl,al
c0018f4d:	a1 40 42 02 c0       	mov    eax,ds:0xc0024240
c0018f52:	01 d0                	add    eax,edx
c0018f54:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018f58:	8b 15 40 42 02 c0    	mov    edx,DWORD PTR ds:0xc0024240
c0018f5e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018f62:	89 14 85 60 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbda0],edx
c0018f69:	a1 40 42 02 c0       	mov    eax,ds:0xc0024240
c0018f6e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018f72:	89 14 85 e0 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbd20],edx
c0018f79:	eb 17                	jmp    c0018f92 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0018f7b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018f7f:	88 c2                	mov    dl,al
c0018f81:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018f85:	8b 04 85 60 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbda0]
c0018f8c:	01 d0                	add    eax,edx
c0018f8e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018f92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018f96:	88 04 24             	mov    BYTE PTR [esp],al
c0018f99:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018f9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018fa1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018fa9:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018fae:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018fb6:	83 ec 0c             	sub    esp,0xc
c0018fb9:	68 00 20 00 00       	push   0x2000
c0018fbe:	e8 a2 42 ff ff       	call   c000d265 <malloc>
c0018fc3:	83 c4 10             	add    esp,0x10
c0018fc6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018fca:	68 00 20 00 00       	push   0x2000
c0018fcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018fd3:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018fd7:	50                   	push   eax
c0018fd8:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018fdc:	50                   	push   eax
c0018fdd:	e8 bc e0 fe ff       	call   c000709e <f_mkfs>
c0018fe2:	83 c4 10             	add    esp,0x10
c0018fe5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018fe9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018fee:	75 07                	jne    c0018ff7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0018ff0:	b8 00 00 00 00       	mov    eax,0x0
c0018ff5:	eb 38                	jmp    c001902f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0018ff7:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018ffc:	75 17                	jne    c0019015 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0018ffe:	83 ec 0c             	sub    esp,0xc
c0019001:	68 a4 19 02 c0       	push   0xc00219a4
c0019006:	e8 5f 3c ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001900b:	83 c4 10             	add    esp,0x10
c001900e:	b8 09 00 00 00       	mov    eax,0x9
c0019013:	eb 1a                	jmp    c001902f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019015:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019019:	83 ec 08             	sub    esp,0x8
c001901c:	50                   	push   eax
c001901d:	68 78 19 02 c0       	push   0xc0021978
c0019022:	e8 43 3c ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0019027:	83 c4 10             	add    esp,0x10
c001902a:	b8 01 00 00 00       	mov    eax,0x1
c001902f:	83 c4 2c             	add    esp,0x2c
c0019032:	c3                   	ret    
c0019033:	90                   	nop

c0019034 <FAT::tryMount(LogicalDisk*, int)>:
c0019034:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001903a:	a1 40 42 02 c0       	mov    eax,ds:0xc0024240
c001903f:	83 f8 14             	cmp    eax,0x14
c0019042:	75 17                	jne    c001905b <FAT::tryMount(LogicalDisk*, int)+0x27>
c0019044:	83 ec 0c             	sub    esp,0xc
c0019047:	68 8a 19 02 c0       	push   0xc002198a
c001904c:	e8 37 3d ff ff       	call   c000cd88 <panic(char const*)>
c0019051:	83 c4 10             	add    esp,0x10
c0019054:	b0 00                	mov    al,0x0
c0019056:	e9 d7 01 00 00       	jmp    c0019232 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001905b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0019062:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019068:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001906e:	3d 00 02 00 00       	cmp    eax,0x200
c0019073:	74 07                	je     c001907c <FAT::tryMount(LogicalDisk*, int)+0x48>
c0019075:	b0 00                	mov    al,0x0
c0019077:	e9 b6 01 00 00       	jmp    c0019232 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001907c:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0019084:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001908b:	8b 04 85 60 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbda0]
c0019092:	83 f8 ff             	cmp    eax,0xffffffff
c0019095:	74 07                	je     c001909e <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0019097:	b0 01                	mov    al,0x1
c0019099:	e9 94 01 00 00       	jmp    c0019232 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001909e:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00190a8:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00190b0:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00190b7:	88 c2                	mov    dl,al
c00190b9:	a1 40 42 02 c0       	mov    eax,ds:0xc0024240
c00190be:	01 d0                	add    eax,edx
c00190c0:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00190c7:	8b 15 40 42 02 c0    	mov    edx,DWORD PTR ds:0xc0024240
c00190cd:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00190d4:	89 14 85 60 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbda0],edx
c00190db:	a1 40 42 02 c0       	mov    eax,ds:0xc0024240
c00190e0:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00190e7:	89 14 85 e0 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbd20],edx
c00190ee:	83 ec 0c             	sub    esp,0xc
c00190f1:	68 54 02 00 00       	push   0x254
c00190f6:	e8 6a 41 ff ff       	call   c000d265 <malloc>
c00190fb:	83 c4 10             	add    esp,0x10
c00190fe:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0019105:	83 ec 04             	sub    esp,0x4
c0019108:	6a 00                	push   0x0
c001910a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019111:	50                   	push   eax
c0019112:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019119:	e8 3e bb fe ff       	call   c0004c5c <f_mount>
c001911e:	83 c4 10             	add    esp,0x10
c0019121:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019128:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0019130:	74 19                	je     c001914b <FAT::tryMount(LogicalDisk*, int)+0x117>
c0019132:	83 ec 0c             	sub    esp,0xc
c0019135:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001913c:	e8 44 41 ff ff       	call   c000d285 <rfree>
c0019141:	83 c4 10             	add    esp,0x10
c0019144:	b0 00                	mov    al,0x0
c0019146:	e9 e7 00 00 00       	jmp    c0019232 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001914b:	83 ec 04             	sub    esp,0x4
c001914e:	68 00 01 00 00       	push   0x100
c0019153:	6a 00                	push   0x0
c0019155:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001915c:	50                   	push   eax
c001915d:	e8 a6 74 fe ff       	call   c0000608 <memset>
c0019162:	83 c4 10             	add    esp,0x10
c0019165:	83 ec 08             	sub    esp,0x8
c0019168:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001916f:	50                   	push   eax
c0019170:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019177:	50                   	push   eax
c0019178:	e8 e1 75 fe ff       	call   c000075e <strcat>
c001917d:	83 c4 10             	add    esp,0x10
c0019180:	83 ec 08             	sub    esp,0x8
c0019183:	68 98 19 02 c0       	push   0xc0021998
c0019188:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001918f:	50                   	push   eax
c0019190:	e8 c9 75 fe ff       	call   c000075e <strcat>
c0019195:	83 c4 10             	add    esp,0x10
c0019198:	83 ec 04             	sub    esp,0x4
c001919b:	6a 01                	push   0x1
c001919d:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00191a4:	50                   	push   eax
c00191a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00191a9:	50                   	push   eax
c00191aa:	e8 0f bb fe ff       	call   c0004cbe <f_open>
c00191af:	83 c4 10             	add    esp,0x10
c00191b2:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00191b9:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00191c0:	85 c0                	test   eax,eax
c00191c2:	74 0a                	je     c00191ce <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00191c4:	78 2d                	js     c00191f3 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00191c6:	83 e8 04             	sub    eax,0x4
c00191c9:	83 f8 01             	cmp    eax,0x1
c00191cc:	77 25                	ja     c00191f3 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00191ce:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00191d6:	83 ec 0c             	sub    esp,0xc
c00191d9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00191dd:	50                   	push   eax
c00191de:	e8 2d c6 fe ff       	call   c0005810 <f_close>
c00191e3:	83 c4 10             	add    esp,0x10
c00191e6:	90                   	nop
c00191e7:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00191ef:	74 3a                	je     c001922b <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00191f1:	eb 2d                	jmp    c0019220 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00191f3:	83 ec 0c             	sub    esp,0xc
c00191f6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00191fd:	e8 83 40 ff ff       	call   c000d285 <rfree>
c0019202:	83 c4 10             	add    esp,0x10
c0019205:	83 ec 04             	sub    esp,0x4
c0019208:	6a 00                	push   0x0
c001920a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019211:	50                   	push   eax
c0019212:	6a 00                	push   0x0
c0019214:	e8 43 ba fe ff       	call   c0004c5c <f_mount>
c0019219:	83 c4 10             	add    esp,0x10
c001921c:	b0 00                	mov    al,0x0
c001921e:	eb 12                	jmp    c0019232 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019220:	a1 40 42 02 c0       	mov    eax,ds:0xc0024240
c0019225:	40                   	inc    eax
c0019226:	a3 40 42 02 c0       	mov    ds:0xc0024240,eax
c001922b:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0019232:	81 c4 6c 03 00 00    	add    esp,0x36c
c0019238:	c3                   	ret    
c0019239:	90                   	nop

c001923a <FAT::readDir(void*, unsigned long, void*, int*)>:
c001923a:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0019240:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0019248:	74 0a                	je     c0019254 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001924a:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0019252:	75 0a                	jne    c001925e <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0019254:	b8 04 00 00 00       	mov    eax,0x4
c0019259:	e9 dc 00 00 00       	jmp    c001933a <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c001925e:	83 ec 08             	sub    esp,0x8
c0019261:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019268:	50                   	push   eax
c0019269:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0019270:	e8 a5 cb fe ff       	call   c0005e1a <f_readdir>
c0019275:	83 c4 10             	add    esp,0x10
c0019278:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001927f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019286:	83 ec 0c             	sub    esp,0xc
c0019289:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0019290:	83 c0 1a             	add    eax,0x1a
c0019293:	50                   	push   eax
c0019294:	e8 8c 73 fe ff       	call   c0000625 <strlen>
c0019299:	83 c4 10             	add    esp,0x10
c001929c:	ba 00 00 00 00       	mov    edx,0x0
c00192a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00192a5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00192a9:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c00192b0:	0f b6 c0             	movzx  eax,al
c00192b3:	83 e0 10             	and    eax,0x10
c00192b6:	74 07                	je     c00192bf <FAT::readDir(void*, unsigned long, void*, int*)+0x85>
c00192b8:	b8 02 00 00 00       	mov    eax,0x2
c00192bd:	eb 05                	jmp    c00192c4 <FAT::readDir(void*, unsigned long, void*, int*)+0x8a>
c00192bf:	b8 01 00 00 00       	mov    eax,0x1
c00192c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192c8:	83 ec 08             	sub    esp,0x8
c00192cb:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00192d2:	83 c0 1a             	add    eax,0x1a
c00192d5:	50                   	push   eax
c00192d6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00192da:	83 c0 10             	add    eax,0x10
c00192dd:	50                   	push   eax
c00192de:	e8 c4 73 fe ff       	call   c00006a7 <strcpy>
c00192e3:	83 c4 10             	add    esp,0x10
c00192e6:	83 ec 04             	sub    esp,0x4
c00192e9:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c00192f0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192f4:	50                   	push   eax
c00192f5:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c00192fc:	e8 d1 72 fe ff       	call   c00005d2 <memcpy>
c0019301:	83 c4 10             	add    esp,0x10
c0019304:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001930b:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019311:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0019318:	84 c0                	test   al,al
c001931a:	75 07                	jne    c0019323 <FAT::readDir(void*, unsigned long, void*, int*)+0xe9>
c001931c:	b8 07 00 00 00       	mov    eax,0x7
c0019321:	eb 17                	jmp    c001933a <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c0019323:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001932a:	85 c0                	test   eax,eax
c001932c:	75 07                	jne    c0019335 <FAT::readDir(void*, unsigned long, void*, int*)+0xfb>
c001932e:	b8 00 00 00 00       	mov    eax,0x0
c0019333:	eb 05                	jmp    c001933a <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c0019335:	b8 01 00 00 00       	mov    eax,0x1
c001933a:	81 c4 3c 02 00 00    	add    esp,0x23c
c0019340:	c3                   	ret    
c0019341:	90                   	nop

c0019342 <FAT::read(void*, unsigned long, void*, int*)>:
c0019342:	83 ec 1c             	sub    esp,0x1c
c0019345:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001934a:	74 07                	je     c0019353 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001934c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019351:	75 07                	jne    c001935a <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0019353:	b8 04 00 00 00       	mov    eax,0x4
c0019358:	eb 3d                	jmp    c0019397 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001935a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001935e:	50                   	push   eax
c001935f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019363:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019367:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001936b:	e8 8a bd fe ff       	call   c00050fa <f_read>
c0019370:	83 c4 10             	add    esp,0x10
c0019373:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019377:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001937b:	89 c2                	mov    edx,eax
c001937d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019381:	89 10                	mov    DWORD PTR [eax],edx
c0019383:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019387:	85 c0                	test   eax,eax
c0019389:	75 07                	jne    c0019392 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001938b:	b8 00 00 00 00       	mov    eax,0x0
c0019390:	eb 05                	jmp    c0019397 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019392:	b8 01 00 00 00       	mov    eax,0x1
c0019397:	83 c4 1c             	add    esp,0x1c
c001939a:	c3                   	ret    
c001939b:	90                   	nop

c001939c <FAT::write(void*, unsigned long, void*, int*)>:
c001939c:	83 ec 1c             	sub    esp,0x1c
c001939f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00193a4:	74 07                	je     c00193ad <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00193a6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00193ab:	75 07                	jne    c00193b4 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00193ad:	b8 04 00 00 00       	mov    eax,0x4
c00193b2:	eb 3d                	jmp    c00193f1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00193b4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00193b8:	50                   	push   eax
c00193b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00193bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00193c1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193c5:	e8 b0 bf fe ff       	call   c000537a <f_write>
c00193ca:	83 c4 10             	add    esp,0x10
c00193cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00193d5:	89 c2                	mov    edx,eax
c00193d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00193db:	89 10                	mov    DWORD PTR [eax],edx
c00193dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193e1:	85 c0                	test   eax,eax
c00193e3:	75 07                	jne    c00193ec <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00193e5:	b8 00 00 00 00       	mov    eax,0x0
c00193ea:	eb 05                	jmp    c00193f1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00193ec:	b8 01 00 00 00       	mov    eax,0x1
c00193f1:	83 c4 1c             	add    esp,0x1c
c00193f4:	c3                   	ret    
c00193f5:	90                   	nop

c00193f6 <FAT::close(void*)>:
c00193f6:	83 ec 1c             	sub    esp,0x1c
c00193f9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00193fe:	75 07                	jne    c0019407 <FAT::close(void*)+0x11>
c0019400:	b8 04 00 00 00       	mov    eax,0x4
c0019405:	eb 36                	jmp    c001943d <FAT::close(void*)+0x47>
c0019407:	83 ec 0c             	sub    esp,0xc
c001940a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001940e:	e8 fd c3 fe ff       	call   c0005810 <f_close>
c0019413:	83 c4 10             	add    esp,0x10
c0019416:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001941a:	83 ec 0c             	sub    esp,0xc
c001941d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019421:	e8 4f 3e ff ff       	call   c000d275 <free>
c0019426:	83 c4 10             	add    esp,0x10
c0019429:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001942d:	85 c0                	test   eax,eax
c001942f:	75 07                	jne    c0019438 <FAT::close(void*)+0x42>
c0019431:	b8 00 00 00 00       	mov    eax,0x0
c0019436:	eb 05                	jmp    c001943d <FAT::close(void*)+0x47>
c0019438:	b8 01 00 00 00       	mov    eax,0x1
c001943d:	83 c4 1c             	add    esp,0x1c
c0019440:	c3                   	ret    
c0019441:	90                   	nop

c0019442 <FAT::closeDir(void*)>:
c0019442:	83 ec 1c             	sub    esp,0x1c
c0019445:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001944a:	75 07                	jne    c0019453 <FAT::closeDir(void*)+0x11>
c001944c:	b8 04 00 00 00       	mov    eax,0x4
c0019451:	eb 36                	jmp    c0019489 <FAT::closeDir(void*)+0x47>
c0019453:	83 ec 0c             	sub    esp,0xc
c0019456:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001945a:	e8 99 c9 fe ff       	call   c0005df8 <f_closedir>
c001945f:	83 c4 10             	add    esp,0x10
c0019462:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019466:	83 ec 0c             	sub    esp,0xc
c0019469:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001946d:	e8 03 3e ff ff       	call   c000d275 <free>
c0019472:	83 c4 10             	add    esp,0x10
c0019475:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019479:	85 c0                	test   eax,eax
c001947b:	75 07                	jne    c0019484 <FAT::closeDir(void*)+0x42>
c001947d:	b8 00 00 00 00       	mov    eax,0x0
c0019482:	eb 05                	jmp    c0019489 <FAT::closeDir(void*)+0x47>
c0019484:	b8 01 00 00 00       	mov    eax,0x1
c0019489:	83 c4 1c             	add    esp,0x1c
c001948c:	c3                   	ret    
c001948d:	90                   	nop

c001948e <FAT::seek(void*, unsigned long long)>:
c001948e:	83 ec 2c             	sub    esp,0x2c
c0019491:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019495:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019499:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001949d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194a1:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00194a6:	75 07                	jne    c00194af <FAT::seek(void*, unsigned long long)+0x21>
c00194a8:	b8 04 00 00 00       	mov    eax,0x4
c00194ad:	eb 2f                	jmp    c00194de <FAT::seek(void*, unsigned long long)+0x50>
c00194af:	83 ec 04             	sub    esp,0x4
c00194b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00194b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00194ba:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00194be:	e8 7c c3 fe ff       	call   c000583f <f_lseek>
c00194c3:	83 c4 10             	add    esp,0x10
c00194c6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00194ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00194ce:	85 c0                	test   eax,eax
c00194d0:	75 07                	jne    c00194d9 <FAT::seek(void*, unsigned long long)+0x4b>
c00194d2:	b8 00 00 00 00       	mov    eax,0x0
c00194d7:	eb 05                	jmp    c00194de <FAT::seek(void*, unsigned long long)+0x50>
c00194d9:	b8 01 00 00 00       	mov    eax,0x1
c00194de:	83 c4 2c             	add    esp,0x2c
c00194e1:	c3                   	ret    

c00194e2 <fatWrapperReadDisk>:
c00194e2:	83 ec 1c             	sub    esp,0x1c
c00194e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194e9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00194ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00194f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00194f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00194f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00194fc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019501:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c0019508:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001950c:	83 ec 0c             	sub    esp,0xc
c001950f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019513:	52                   	push   edx
c0019514:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019518:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001951c:	50                   	push   eax
c001951d:	e8 d2 ba ff ff       	call   c0014ff4 <LogicalDisk::read(unsigned long long, int, void*)>
c0019522:	83 c4 20             	add    esp,0x20
c0019525:	83 c4 1c             	add    esp,0x1c
c0019528:	c3                   	ret    

c0019529 <fatWrapperWriteDisk>:
c0019529:	83 ec 1c             	sub    esp,0x1c
c001952c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019530:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019534:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019538:	89 04 24             	mov    DWORD PTR [esp],eax
c001953b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001953f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019543:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019548:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c001954f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019553:	83 ec 0c             	sub    esp,0xc
c0019556:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001955a:	52                   	push   edx
c001955b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001955f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019563:	50                   	push   eax
c0019564:	e8 f7 ba ff ff       	call   c0015060 <LogicalDisk::write(unsigned long long, int, void*)>
c0019569:	83 c4 20             	add    esp,0x20
c001956c:	83 c4 1c             	add    esp,0x1c
c001956f:	c3                   	ret    

c0019570 <fatWrapperIoctl>:
c0019570:	53                   	push   ebx
c0019571:	83 ec 28             	sub    esp,0x28
c0019574:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019578:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001957c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019580:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019584:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0019589:	75 31                	jne    c00195bc <fatWrapperIoctl+0x4c>
c001958b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001958f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019593:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019598:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c001959f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00195a5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00195ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00195af:	66 89 02             	mov    WORD PTR [edx],ax
c00195b2:	b8 00 00 00 00       	mov    eax,0x0
c00195b7:	e9 b2 00 00 00       	jmp    c001966e <fatWrapperIoctl+0xfe>
c00195bc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00195c1:	75 6a                	jne    c001962d <fatWrapperIoctl+0xbd>
c00195c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00195cb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00195d0:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c00195d7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00195dd:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00195e3:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00195e9:	89 c8                	mov    eax,ecx
c00195eb:	89 da                	mov    edx,ebx
c00195ed:	0f a4 c2 0a          	shld   edx,eax,0xa
c00195f1:	c1 e0 0a             	shl    eax,0xa
c00195f4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00195f9:	8b 0c 8d e0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc220]
c0019600:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019606:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001960c:	89 cb                	mov    ebx,ecx
c001960e:	c1 fb 1f             	sar    ebx,0x1f
c0019611:	53                   	push   ebx
c0019612:	51                   	push   ecx
c0019613:	52                   	push   edx
c0019614:	50                   	push   eax
c0019615:	e8 b2 4a 00 00       	call   c001e0cc <__udivdi3>
c001961a:	83 c4 10             	add    esp,0x10
c001961d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019621:	89 01                	mov    DWORD PTR [ecx],eax
c0019623:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019626:	b8 00 00 00 00       	mov    eax,0x0
c001962b:	eb 41                	jmp    c001966e <fatWrapperIoctl+0xfe>
c001962d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0019632:	75 07                	jne    c001963b <fatWrapperIoctl+0xcb>
c0019634:	b8 00 00 00 00       	mov    eax,0x0
c0019639:	eb 33                	jmp    c001966e <fatWrapperIoctl+0xfe>
c001963b:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0019640:	75 19                	jne    c001965b <fatWrapperIoctl+0xeb>
c0019642:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019646:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001964a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001964e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019654:	b8 00 00 00 00       	mov    eax,0x0
c0019659:	eb 13                	jmp    c001966e <fatWrapperIoctl+0xfe>
c001965b:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0019660:	75 07                	jne    c0019669 <fatWrapperIoctl+0xf9>
c0019662:	b8 00 00 00 00       	mov    eax,0x0
c0019667:	eb 05                	jmp    c001966e <fatWrapperIoctl+0xfe>
c0019669:	b8 04 00 00 00       	mov    eax,0x4
c001966e:	83 c4 28             	add    esp,0x28
c0019671:	5b                   	pop    ebx
c0019672:	c3                   	ret    
c0019673:	90                   	nop

c0019674 <FAT::FAT()>:
c0019674:	83 ec 1c             	sub    esp,0x1c
c0019677:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001967b:	83 ec 0c             	sub    esp,0xc
c001967e:	50                   	push   eax
c001967f:	e8 a4 8d ff ff       	call   c0012428 <Filesystem::Filesystem()>
c0019684:	83 c4 10             	add    esp,0x10
c0019687:	ba d4 19 02 c0       	mov    edx,0xc00219d4
c001968c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019690:	89 10                	mov    DWORD PTR [eax],edx
c0019692:	c7 05 40 42 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024240,0x0
c001969c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00196a4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00196a9:	7f 15                	jg     c00196c0 <FAT::FAT()+0x4c>
c00196ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00196af:	c7 04 85 60 42 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdbda0],0xffffffff
c00196ba:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00196be:	eb e4                	jmp    c00196a4 <FAT::FAT()+0x30>
c00196c0:	90                   	nop
c00196c1:	83 c4 1c             	add    esp,0x1c
c00196c4:	c3                   	ret    
c00196c5:	90                   	nop

c00196c6 <FAT::fixFilepath(char*)>:
c00196c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196ca:	8a 00                	mov    al,BYTE PTR [eax]
c00196cc:	3c 40                	cmp    al,0x40
c00196ce:	7e 2c                	jle    c00196fc <FAT::fixFilepath(char*)+0x36>
c00196d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196d4:	8a 00                	mov    al,BYTE PTR [eax]
c00196d6:	83 e8 41             	sub    eax,0x41
c00196d9:	88 c2                	mov    dl,al
c00196db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196df:	88 10                	mov    BYTE PTR [eax],dl
c00196e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196e5:	8a 00                	mov    al,BYTE PTR [eax]
c00196e7:	0f be c0             	movsx  eax,al
c00196ea:	8b 04 85 60 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbda0]
c00196f1:	83 c0 30             	add    eax,0x30
c00196f4:	88 c2                	mov    dl,al
c00196f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196fa:	88 10                	mov    BYTE PTR [eax],dl
c00196fc:	90                   	nop
c00196fd:	c3                   	ret    

c00196fe <FAT::open(char const*, void**, FileOpenMode)>:
c00196fe:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019704:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001970c:	74 0a                	je     c0019718 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001970e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019716:	75 0a                	jne    c0019722 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0019718:	b8 04 00 00 00       	mov    eax,0x4
c001971d:	e9 fd 00 00 00       	jmp    c001981f <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019722:	83 ec 08             	sub    esp,0x8
c0019725:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001972c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019730:	50                   	push   eax
c0019731:	e8 71 6f fe ff       	call   c00006a7 <strcpy>
c0019736:	83 c4 10             	add    esp,0x10
c0019739:	83 ec 08             	sub    esp,0x8
c001973c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019740:	50                   	push   eax
c0019741:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019748:	e8 79 ff ff ff       	call   c00196c6 <FAT::fixFilepath(char*)>
c001974d:	83 c4 10             	add    esp,0x10
c0019750:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019758:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001975f:	83 e0 01             	and    eax,0x1
c0019762:	74 08                	je     c001976c <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0019764:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001976c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019773:	83 e0 04             	and    eax,0x4
c0019776:	74 10                	je     c0019788 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0019778:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0019780:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019788:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001978f:	83 e0 02             	and    eax,0x2
c0019792:	74 08                	je     c001979c <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0019794:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001979c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197a3:	83 e0 08             	and    eax,0x8
c00197a6:	74 08                	je     c00197b0 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00197a8:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00197b0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197b7:	83 e0 10             	and    eax,0x10
c00197ba:	74 08                	je     c00197c4 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00197bc:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00197c4:	83 ec 0c             	sub    esp,0xc
c00197c7:	68 50 02 00 00       	push   0x250
c00197cc:	e8 94 3a ff ff       	call   c000d265 <malloc>
c00197d1:	83 c4 10             	add    esp,0x10
c00197d4:	89 c2                	mov    edx,eax
c00197d6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00197dd:	89 10                	mov    DWORD PTR [eax],edx
c00197df:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00197e7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00197ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00197f0:	83 ec 04             	sub    esp,0x4
c00197f3:	52                   	push   edx
c00197f4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00197f8:	52                   	push   edx
c00197f9:	50                   	push   eax
c00197fa:	e8 bf b4 fe ff       	call   c0004cbe <f_open>
c00197ff:	83 c4 10             	add    esp,0x10
c0019802:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019809:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019811:	74 07                	je     c001981a <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0019813:	b8 01 00 00 00       	mov    eax,0x1
c0019818:	eb 05                	jmp    c001981f <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001981a:	b8 00 00 00 00       	mov    eax,0x0
c001981f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019825:	c3                   	ret    

c0019826 <FAT::openDir(char const*, void**)>:
c0019826:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001982c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019834:	74 0a                	je     c0019840 <FAT::openDir(char const*, void**)+0x1a>
c0019836:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001983e:	75 07                	jne    c0019847 <FAT::openDir(char const*, void**)+0x21>
c0019840:	b8 04 00 00 00       	mov    eax,0x4
c0019845:	eb 7d                	jmp    c00198c4 <FAT::openDir(char const*, void**)+0x9e>
c0019847:	83 ec 08             	sub    esp,0x8
c001984a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019851:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019855:	50                   	push   eax
c0019856:	e8 4c 6e fe ff       	call   c00006a7 <strcpy>
c001985b:	83 c4 10             	add    esp,0x10
c001985e:	83 ec 08             	sub    esp,0x8
c0019861:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019865:	50                   	push   eax
c0019866:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001986d:	e8 54 fe ff ff       	call   c00196c6 <FAT::fixFilepath(char*)>
c0019872:	83 c4 10             	add    esp,0x10
c0019875:	83 ec 0c             	sub    esp,0xc
c0019878:	6a 4c                	push   0x4c
c001987a:	e8 e6 39 ff ff       	call   c000d265 <malloc>
c001987f:	83 c4 10             	add    esp,0x10
c0019882:	89 c2                	mov    edx,eax
c0019884:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001988b:	89 10                	mov    DWORD PTR [eax],edx
c001988d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019894:	8b 00                	mov    eax,DWORD PTR [eax]
c0019896:	83 ec 08             	sub    esp,0x8
c0019899:	8d 54 24 14          	lea    edx,[esp+0x14]
c001989d:	52                   	push   edx
c001989e:	50                   	push   eax
c001989f:	e8 52 c4 fe ff       	call   c0005cf6 <f_opendir>
c00198a4:	83 c4 10             	add    esp,0x10
c00198a7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00198ae:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00198b6:	74 07                	je     c00198bf <FAT::openDir(char const*, void**)+0x99>
c00198b8:	b8 01 00 00 00       	mov    eax,0x1
c00198bd:	eb 05                	jmp    c00198c4 <FAT::openDir(char const*, void**)+0x9e>
c00198bf:	b8 00 00 00 00       	mov    eax,0x0
c00198c4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00198ca:	c3                   	ret    
c00198cb:	90                   	nop

c00198cc <FAT::stat(char const*, unsigned long long*, bool*)>:
c00198cc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00198d2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00198da:	75 0a                	jne    c00198e6 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00198dc:	b8 04 00 00 00       	mov    eax,0x4
c00198e1:	e9 c9 00 00 00       	jmp    c00199af <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00198e6:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00198ee:	75 0a                	jne    c00198fa <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00198f0:	b8 04 00 00 00       	mov    eax,0x4
c00198f5:	e9 b5 00 00 00       	jmp    c00199af <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00198fa:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019902:	75 0a                	jne    c001990e <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0019904:	b8 04 00 00 00       	mov    eax,0x4
c0019909:	e9 a1 00 00 00       	jmp    c00199af <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001990e:	83 ec 08             	sub    esp,0x8
c0019911:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019918:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001991f:	50                   	push   eax
c0019920:	e8 82 6d fe ff       	call   c00006a7 <strcpy>
c0019925:	83 c4 10             	add    esp,0x10
c0019928:	83 ec 08             	sub    esp,0x8
c001992b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019932:	50                   	push   eax
c0019933:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001993a:	e8 87 fd ff ff       	call   c00196c6 <FAT::fixFilepath(char*)>
c001993f:	83 c4 10             	add    esp,0x10
c0019942:	83 ec 08             	sub    esp,0x8
c0019945:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019949:	50                   	push   eax
c001994a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019951:	50                   	push   eax
c0019952:	e8 5e c5 fe ff       	call   c0005eb5 <f_stat>
c0019957:	83 c4 10             	add    esp,0x10
c001995a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019961:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019968:	85 c0                	test   eax,eax
c001996a:	74 07                	je     c0019973 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001996c:	83 f8 04             	cmp    eax,0x4
c001996f:	74 32                	je     c00199a3 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0019971:	eb 37                	jmp    c00199aa <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0019973:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019977:	0f b6 c0             	movzx  eax,al
c001997a:	83 e0 10             	and    eax,0x10
c001997d:	0f 95 c2             	setne  dl
c0019980:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019987:	88 10                	mov    BYTE PTR [eax],dl
c0019989:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001998c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019990:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019997:	89 01                	mov    DWORD PTR [ecx],eax
c0019999:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001999c:	b8 00 00 00 00       	mov    eax,0x0
c00199a1:	eb 0c                	jmp    c00199af <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00199a3:	b8 02 00 00 00       	mov    eax,0x2
c00199a8:	eb 05                	jmp    c00199af <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00199aa:	b8 01 00 00 00       	mov    eax,0x1
c00199af:	81 c4 2c 02 00 00    	add    esp,0x22c
c00199b5:	c3                   	ret    

c00199b6 <FAT::unlink(char const*)>:
c00199b6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00199bc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00199c4:	75 07                	jne    c00199cd <FAT::unlink(char const*)+0x17>
c00199c6:	b8 04 00 00 00       	mov    eax,0x4
c00199cb:	eb 5c                	jmp    c0019a29 <FAT::unlink(char const*)+0x73>
c00199cd:	83 ec 08             	sub    esp,0x8
c00199d0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199d7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00199db:	50                   	push   eax
c00199dc:	e8 c6 6c fe ff       	call   c00006a7 <strcpy>
c00199e1:	83 c4 10             	add    esp,0x10
c00199e4:	83 ec 08             	sub    esp,0x8
c00199e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00199eb:	50                   	push   eax
c00199ec:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199f3:	e8 ce fc ff ff       	call   c00196c6 <FAT::fixFilepath(char*)>
c00199f8:	83 c4 10             	add    esp,0x10
c00199fb:	83 ec 0c             	sub    esp,0xc
c00199fe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a02:	50                   	push   eax
c0019a03:	e8 ff c7 fe ff       	call   c0006207 <f_unlink>
c0019a08:	83 c4 10             	add    esp,0x10
c0019a0b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019a12:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019a19:	85 c0                	test   eax,eax
c0019a1b:	75 07                	jne    c0019a24 <FAT::unlink(char const*)+0x6e>
c0019a1d:	b8 00 00 00 00       	mov    eax,0x0
c0019a22:	eb 05                	jmp    c0019a29 <FAT::unlink(char const*)+0x73>
c0019a24:	b8 01 00 00 00       	mov    eax,0x1
c0019a29:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a2f:	c3                   	ret    

c0019a30 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019a30:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019a36:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019a3d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019a44:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019a48:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019a4c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019a54:	75 0a                	jne    c0019a60 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019a56:	b8 04 00 00 00       	mov    eax,0x4
c0019a5b:	e9 1c 01 00 00       	jmp    c0019b7c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019a60:	83 ec 08             	sub    esp,0x8
c0019a63:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019a6a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019a6e:	50                   	push   eax
c0019a6f:	e8 33 6c fe ff       	call   c00006a7 <strcpy>
c0019a74:	83 c4 10             	add    esp,0x10
c0019a77:	83 ec 08             	sub    esp,0x8
c0019a7a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019a7e:	50                   	push   eax
c0019a7f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019a86:	e8 3b fc ff ff       	call   c00196c6 <FAT::fixFilepath(char*)>
c0019a8b:	83 c4 10             	add    esp,0x10
c0019a8e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019a96:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019a9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019aa3:	83 e0 01             	and    eax,0x1
c0019aa6:	74 08                	je     c0019ab0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0019aa8:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0019ab0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ab5:	83 e0 02             	and    eax,0x2
c0019ab8:	74 08                	je     c0019ac2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0019aba:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0019ac2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ac7:	83 e0 04             	and    eax,0x4
c0019aca:	74 08                	je     c0019ad4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0019acc:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0019ad4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ad9:	83 e0 08             	and    eax,0x8
c0019adc:	74 08                	je     c0019ae6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0019ade:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0019ae6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019aeb:	83 e0 01             	and    eax,0x1
c0019aee:	74 08                	je     c0019af8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019af0:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0019af8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019afd:	83 e0 02             	and    eax,0x2
c0019b00:	74 08                	je     c0019b0a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0019b02:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0019b0a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b0f:	83 e0 04             	and    eax,0x4
c0019b12:	74 08                	je     c0019b1c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0019b14:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0019b1c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b21:	83 e0 08             	and    eax,0x8
c0019b24:	74 08                	je     c0019b2e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0019b26:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0019b2e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b35:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0019b3c:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019b44:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019b4c:	83 ec 04             	sub    esp,0x4
c0019b4f:	52                   	push   edx
c0019b50:	50                   	push   eax
c0019b51:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019b55:	50                   	push   eax
c0019b56:	e8 4e cd fe ff       	call   c00068a9 <f_chmod>
c0019b5b:	83 c4 10             	add    esp,0x10
c0019b5e:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019b65:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019b6c:	85 c0                	test   eax,eax
c0019b6e:	75 07                	jne    c0019b77 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0019b70:	b8 00 00 00 00       	mov    eax,0x0
c0019b75:	eb 05                	jmp    c0019b7c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019b77:	b8 01 00 00 00       	mov    eax,0x1
c0019b7c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019b82:	c3                   	ret    
c0019b83:	90                   	nop

c0019b84 <FAT::rename(char const*, char const*)>:
c0019b84:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019b8a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019b92:	74 0a                	je     c0019b9e <FAT::rename(char const*, char const*)+0x1a>
c0019b94:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019b9c:	75 0a                	jne    c0019ba8 <FAT::rename(char const*, char const*)+0x24>
c0019b9e:	b8 04 00 00 00       	mov    eax,0x4
c0019ba3:	e9 98 00 00 00       	jmp    c0019c40 <FAT::rename(char const*, char const*)+0xbc>
c0019ba8:	83 ec 08             	sub    esp,0x8
c0019bab:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019bb2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019bb9:	50                   	push   eax
c0019bba:	e8 e8 6a fe ff       	call   c00006a7 <strcpy>
c0019bbf:	83 c4 10             	add    esp,0x10
c0019bc2:	83 ec 08             	sub    esp,0x8
c0019bc5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019bcc:	50                   	push   eax
c0019bcd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019bd4:	e8 ed fa ff ff       	call   c00196c6 <FAT::fixFilepath(char*)>
c0019bd9:	83 c4 10             	add    esp,0x10
c0019bdc:	83 ec 08             	sub    esp,0x8
c0019bdf:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019be6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019bea:	50                   	push   eax
c0019beb:	e8 b7 6a fe ff       	call   c00006a7 <strcpy>
c0019bf0:	83 c4 10             	add    esp,0x10
c0019bf3:	83 ec 08             	sub    esp,0x8
c0019bf6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019bfa:	50                   	push   eax
c0019bfb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c02:	e8 bf fa ff ff       	call   c00196c6 <FAT::fixFilepath(char*)>
c0019c07:	83 c4 10             	add    esp,0x10
c0019c0a:	83 ec 08             	sub    esp,0x8
c0019c0d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c11:	50                   	push   eax
c0019c12:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019c19:	50                   	push   eax
c0019c1a:	e8 97 c9 fe ff       	call   c00065b6 <f_rename>
c0019c1f:	83 c4 10             	add    esp,0x10
c0019c22:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019c29:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019c30:	85 c0                	test   eax,eax
c0019c32:	75 07                	jne    c0019c3b <FAT::rename(char const*, char const*)+0xb7>
c0019c34:	b8 00 00 00 00       	mov    eax,0x0
c0019c39:	eb 05                	jmp    c0019c40 <FAT::rename(char const*, char const*)+0xbc>
c0019c3b:	b8 01 00 00 00       	mov    eax,0x1
c0019c40:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019c46:	c3                   	ret    
c0019c47:	90                   	nop

c0019c48 <FAT::mkdir(char const*)>:
c0019c48:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019c4e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019c56:	75 07                	jne    c0019c5f <FAT::mkdir(char const*)+0x17>
c0019c58:	b8 04 00 00 00       	mov    eax,0x4
c0019c5d:	eb 5c                	jmp    c0019cbb <FAT::mkdir(char const*)+0x73>
c0019c5f:	83 ec 08             	sub    esp,0x8
c0019c62:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c69:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c6d:	50                   	push   eax
c0019c6e:	e8 34 6a fe ff       	call   c00006a7 <strcpy>
c0019c73:	83 c4 10             	add    esp,0x10
c0019c76:	83 ec 08             	sub    esp,0x8
c0019c79:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c7d:	50                   	push   eax
c0019c7e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c85:	e8 3c fa ff ff       	call   c00196c6 <FAT::fixFilepath(char*)>
c0019c8a:	83 c4 10             	add    esp,0x10
c0019c8d:	83 ec 0c             	sub    esp,0xc
c0019c90:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c94:	50                   	push   eax
c0019c95:	e8 f0 c6 fe ff       	call   c000638a <f_mkdir>
c0019c9a:	83 c4 10             	add    esp,0x10
c0019c9d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019ca4:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019cab:	85 c0                	test   eax,eax
c0019cad:	75 07                	jne    c0019cb6 <FAT::mkdir(char const*)+0x6e>
c0019caf:	b8 00 00 00 00       	mov    eax,0x0
c0019cb4:	eb 05                	jmp    c0019cbb <FAT::mkdir(char const*)+0x73>
c0019cb6:	b8 01 00 00 00       	mov    eax,0x1
c0019cbb:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019cc1:	c3                   	ret    

c0019cc2 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019cc2:	b8 08 00 00 00       	mov    eax,0x8
c0019cc7:	c3                   	ret    

c0019cc8 <ISO9660::seek(void*, unsigned long long)>:
c0019cc8:	53                   	push   ebx
c0019cc9:	b8 04 00 00 00       	mov    eax,0x4
c0019cce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019cd2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019cd6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019cda:	85 d2                	test   edx,edx
c0019cdc:	74 17                	je     c0019cf5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019cde:	89 c8                	mov    eax,ecx
c0019ce0:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0019ce3:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0019ce6:	b8 01 00 00 00       	mov    eax,0x1
c0019ceb:	73 08                	jae    c0019cf5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019ced:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0019cf0:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0019cf3:	31 c0                	xor    eax,eax
c0019cf5:	5b                   	pop    ebx
c0019cf6:	c3                   	ret    
c0019cf7:	90                   	nop

c0019cf8 <ISO9660::tell(void*, unsigned long long*)>:
c0019cf8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019cfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d00:	85 d2                	test   edx,edx
c0019d02:	74 12                	je     c0019d16 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019d04:	85 c0                	test   eax,eax
c0019d06:	74 0e                	je     c0019d16 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019d08:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d0b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0019d0e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019d11:	89 10                	mov    DWORD PTR [eax],edx
c0019d13:	31 c0                	xor    eax,eax
c0019d15:	c3                   	ret    
c0019d16:	b8 04 00 00 00       	mov    eax,0x4
c0019d1b:	c3                   	ret    

c0019d1c <ISO9660::getName()>:
c0019d1c:	b8 30 1a 02 c0       	mov    eax,0xc0021a30
c0019d21:	c3                   	ret    

c0019d22 <ISO9660::stat(void*, unsigned long long*)>:
c0019d22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d2a:	85 d2                	test   edx,edx
c0019d2c:	74 12                	je     c0019d40 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019d2e:	85 c0                	test   eax,eax
c0019d30:	74 0e                	je     c0019d40 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019d32:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0019d35:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0019d38:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019d3b:	89 10                	mov    DWORD PTR [eax],edx
c0019d3d:	31 c0                	xor    eax,eax
c0019d3f:	c3                   	ret    
c0019d40:	b8 04 00 00 00       	mov    eax,0x4
c0019d45:	c3                   	ret    

c0019d46 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019d46:	b8 01 00 00 00       	mov    eax,0x1
c0019d4b:	c3                   	ret    

c0019d4c <ISO9660::unlink(char const*)>:
c0019d4c:	b8 01 00 00 00       	mov    eax,0x1
c0019d51:	c3                   	ret    

c0019d52 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019d52:	b8 01 00 00 00       	mov    eax,0x1
c0019d57:	c3                   	ret    

c0019d58 <ISO9660::rename(char const*, char const*)>:
c0019d58:	b8 01 00 00 00       	mov    eax,0x1
c0019d5d:	c3                   	ret    

c0019d5e <ISO9660::mkdir(char const*)>:
c0019d5e:	b8 01 00 00 00       	mov    eax,0x1
c0019d63:	c3                   	ret    

c0019d64 <ISO9660::close(void*)>:
c0019d64:	83 ec 0c             	sub    esp,0xc
c0019d67:	b8 04 00 00 00       	mov    eax,0x4
c0019d6c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d70:	85 d2                	test   edx,edx
c0019d72:	74 0e                	je     c0019d82 <ISO9660::close(void*)+0x1e>
c0019d74:	83 ec 0c             	sub    esp,0xc
c0019d77:	52                   	push   edx
c0019d78:	e8 f8 34 ff ff       	call   c000d275 <free>
c0019d7d:	83 c4 10             	add    esp,0x10
c0019d80:	31 c0                	xor    eax,eax
c0019d82:	83 c4 0c             	add    esp,0xc
c0019d85:	c3                   	ret    

c0019d86 <ISO9660::closeDir(void*)>:
c0019d86:	83 ec 0c             	sub    esp,0xc
c0019d89:	b8 04 00 00 00       	mov    eax,0x4
c0019d8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d92:	85 d2                	test   edx,edx
c0019d94:	74 0e                	je     c0019da4 <ISO9660::closeDir(void*)+0x1e>
c0019d96:	83 ec 0c             	sub    esp,0xc
c0019d99:	52                   	push   edx
c0019d9a:	e8 d6 34 ff ff       	call   c000d275 <free>
c0019d9f:	83 c4 10             	add    esp,0x10
c0019da2:	31 c0                	xor    eax,eax
c0019da4:	83 c4 0c             	add    esp,0xc
c0019da7:	c3                   	ret    

c0019da8 <ISO9660::~ISO9660()>:
c0019da8:	83 ec 0c             	sub    esp,0xc
c0019dab:	ba 84 1a 02 c0       	mov    edx,0xc0021a84
c0019db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019db4:	89 10                	mov    DWORD PTR [eax],edx
c0019db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dba:	83 ec 0c             	sub    esp,0xc
c0019dbd:	50                   	push   eax
c0019dbe:	e8 89 86 ff ff       	call   c001244c <Filesystem::~Filesystem()>
c0019dc3:	83 c4 10             	add    esp,0x10
c0019dc6:	90                   	nop
c0019dc7:	83 c4 0c             	add    esp,0xc
c0019dca:	c3                   	ret    
c0019dcb:	90                   	nop

c0019dcc <ISO9660::~ISO9660()>:
c0019dcc:	83 ec 0c             	sub    esp,0xc
c0019dcf:	83 ec 0c             	sub    esp,0xc
c0019dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019dd6:	e8 cd ff ff ff       	call   c0019da8 <ISO9660::~ISO9660()>
c0019ddb:	83 c4 10             	add    esp,0x10
c0019dde:	83 ec 08             	sub    esp,0x8
c0019de1:	6a 08                	push   0x8
c0019de3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019de7:	e8 47 84 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c0019dec:	83 c4 10             	add    esp,0x10
c0019def:	83 c4 0c             	add    esp,0xc
c0019df2:	c3                   	ret    

c0019df3 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0019df3:	55                   	push   ebp
c0019df4:	31 c9                	xor    ecx,ecx
c0019df6:	57                   	push   edi
c0019df7:	56                   	push   esi
c0019df8:	53                   	push   ebx
c0019df9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0019dfd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019e01:	89 eb                	mov    ebx,ebp
c0019e03:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0019e07:	39 ce                	cmp    esi,ecx
c0019e09:	7e 17                	jle    c0019e22 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0019e0b:	31 d2                	xor    edx,edx
c0019e0d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0019e11:	7d 13                	jge    c0019e26 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0019e13:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019e17:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0019e1a:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0019e1d:	75 0d                	jne    c0019e2c <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0019e1f:	42                   	inc    edx
c0019e20:	eb eb                	jmp    c0019e0d <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0019e22:	31 c0                	xor    eax,eax
c0019e24:	eb 0a                	jmp    c0019e30 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019e26:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0019e2a:	eb 04                	jmp    c0019e30 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019e2c:	41                   	inc    ecx
c0019e2d:	43                   	inc    ebx
c0019e2e:	eb d7                	jmp    c0019e07 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0019e30:	5b                   	pop    ebx
c0019e31:	5e                   	pop    esi
c0019e32:	5f                   	pop    edi
c0019e33:	5d                   	pop    ebp
c0019e34:	c3                   	ret    

c0019e35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019e35:	56                   	push   esi
c0019e36:	53                   	push   ebx
c0019e37:	52                   	push   edx
c0019e38:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019e3c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019e40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e44:	39 0d 40 43 02 c0    	cmp    DWORD PTR ds:0xc0024340,ecx
c0019e4a:	75 08                	jne    c0019e54 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0019e4c:	38 05 84 28 02 c0    	cmp    BYTE PTR ds:0xc0022884,al
c0019e52:	74 2b                	je     c0019e7f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0019e54:	83 ec 0c             	sub    esp,0xc
c0019e57:	a2 84 28 02 c0       	mov    ds:0xc0022884,al
c0019e5c:	68 60 43 02 c0       	push   0xc0024360
c0019e61:	0f be c0             	movsx  eax,al
c0019e64:	6a 01                	push   0x1
c0019e66:	89 0d 40 43 02 c0    	mov    DWORD PTR ds:0xc0024340,ecx
c0019e6c:	31 db                	xor    ebx,ebx
c0019e6e:	53                   	push   ebx
c0019e6f:	51                   	push   ecx
c0019e70:	ff 34 85 dc 3c 02 c0 	push   DWORD PTR [eax*4-0x3ffdc324]
c0019e77:	e8 78 b1 ff ff       	call   c0014ff4 <LogicalDisk::read(unsigned long long, int, void*)>
c0019e7c:	83 c4 20             	add    esp,0x20
c0019e7f:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0019e87:	c7 44 24 14 60 43 02 c0 	mov    DWORD PTR [esp+0x14],0xc0024360
c0019e8f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0019e93:	58                   	pop    eax
c0019e94:	5b                   	pop    ebx
c0019e95:	5e                   	pop    esi
c0019e96:	e9 37 67 fe ff       	jmp    c00005d2 <memcpy>
c0019e9b:	90                   	nop

c0019e9c <ISO9660::tryMount(LogicalDisk*, int)>:
c0019e9c:	81 ec 10 08 00 00    	sub    esp,0x810
c0019ea2:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0019ea9:	83 c0 41             	add    eax,0x41
c0019eac:	0f be c0             	movsx  eax,al
c0019eaf:	50                   	push   eax
c0019eb0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019eb4:	50                   	push   eax
c0019eb5:	6a 10                	push   0x10
c0019eb7:	e8 79 ff ff ff       	call   c0019e35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019ebc:	83 c4 10             	add    esp,0x10
c0019ebf:	31 c0                	xor    eax,eax
c0019ec1:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019ec6:	75 1d                	jne    c0019ee5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019ec8:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019ecd:	75 16                	jne    c0019ee5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019ecf:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019ed4:	75 0f                	jne    c0019ee5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019ed6:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019edb:	75 08                	jne    c0019ee5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019edd:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019ee2:	0f 94 c0             	sete   al
c0019ee5:	81 c4 0c 08 00 00    	add    esp,0x80c
c0019eeb:	c3                   	ret    

c0019eec <ISO9660::read(void*, unsigned long, void*, int*)>:
c0019eec:	55                   	push   ebp
c0019eed:	57                   	push   edi
c0019eee:	56                   	push   esi
c0019eef:	53                   	push   ebx
c0019ef0:	81 ec 34 08 00 00    	sub    esp,0x834
c0019ef6:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c0019efd:	55                   	push   ebp
c0019efe:	68 4b 1a 02 c0       	push   0xc0021a4b
c0019f03:	e8 62 2d ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c0019f08:	83 c4 10             	add    esp,0x10
c0019f0b:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c0019f13:	0f 84 06 02 00 00    	je     c001a11f <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c0019f19:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0019f21:	0f 84 f8 01 00 00    	je     c001a11f <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c0019f27:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c0019f2e:	b8 01 00 00 00       	mov    eax,0x1
c0019f33:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c0019f37:	0f 85 e7 01 00 00    	jne    c001a124 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c0019f3d:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0019f40:	31 d2                	xor    edx,edx
c0019f42:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c0019f45:	89 e9                	mov    ecx,ebp
c0019f47:	89 d3                	mov    ebx,edx
c0019f49:	01 f1                	add    ecx,esi
c0019f4b:	11 fb                	adc    ebx,edi
c0019f4d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0019f51:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019f55:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c0019f5c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0019f5f:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c0019f62:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0019f66:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0019f6a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019f6e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019f72:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c0019f76:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0019f7a:	72 19                	jb     c0019f95 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c0019f7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f84:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019f88:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019f8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f8f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019f93:	eb 13                	jmp    c0019fa8 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c0019f95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019f9d:	29 f0                	sub    eax,esi
c0019f9f:	19 fa                	sbb    edx,edi
c0019fa1:	89 04 24             	mov    DWORD PTR [esp],eax
c0019fa4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019fa8:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c0019faf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0019fb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0019fb4:	53                   	push   ebx
c0019fb5:	0f a4 c2 0b          	shld   edx,eax,0xb
c0019fb9:	c1 e0 0b             	shl    eax,0xb
c0019fbc:	01 c6                	add    esi,eax
c0019fbe:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0019fc5:	11 d7                	adc    edi,edx
c0019fc7:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0019fcb:	89 fa                	mov    edx,edi
c0019fcd:	50                   	push   eax
c0019fce:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019fd2:	50                   	push   eax
c0019fd3:	89 f0                	mov    eax,esi
c0019fd5:	0f ac d0 0b          	shrd   eax,edx,0xb
c0019fd9:	50                   	push   eax
c0019fda:	e8 56 fe ff ff       	call   c0019e35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019fdf:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0019fe6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019fea:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019fed:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0019ff1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0019ff7:	83 c4 10             	add    esp,0x10
c0019ffa:	b8 00 08 00 00       	mov    eax,0x800
c0019fff:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001a003:	29 d0                	sub    eax,edx
c001a005:	39 c1                	cmp    ecx,eax
c001a007:	83 db 00             	sbb    ebx,0x0
c001a00a:	7d 19                	jge    c001a025 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001a00c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a011:	75 16                	jne    c001a029 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001a013:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a01a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a020:	e9 f6 00 00 00       	jmp    c001a11b <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001a025:	89 c5                	mov    ebp,eax
c001a027:	eb 03                	jmp    c001a02c <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001a029:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001a02c:	51                   	push   ecx
c001a02d:	55                   	push   ebp
c001a02e:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001a032:	50                   	push   eax
c001a033:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001a03a:	e8 93 65 fe ff       	call   c00005d2 <memcpy>
c001a03f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a043:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a047:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001a04e:	01 e8                	add    eax,ebp
c001a050:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a054:	89 e8                	mov    eax,ebp
c001a056:	99                   	cdq    
c001a057:	01 ee                	add    esi,ebp
c001a059:	11 d7                	adc    edi,edx
c001a05b:	29 e9                	sub    ecx,ebp
c001a05d:	19 d3                	sbb    ebx,edx
c001a05f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a063:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a067:	83 c4 10             	add    esp,0x10
c001a06a:	b8 ff 07 00 00       	mov    eax,0x7ff
c001a06f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001a072:	b8 00 00 00 00       	mov    eax,0x0
c001a077:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a07b:	7d 3f                	jge    c001a0bc <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001a07d:	52                   	push   edx
c001a07e:	89 fa                	mov    edx,edi
c001a080:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a087:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a08b:	50                   	push   eax
c001a08c:	89 f0                	mov    eax,esi
c001a08e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a092:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a096:	50                   	push   eax
c001a097:	e8 99 fd ff ff       	call   c0019e35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a09c:	81 c6 00 08 00 00    	add    esi,0x800
c001a0a2:	83 d7 00             	adc    edi,0x0
c001a0a5:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001a0ad:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001a0b5:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001a0ba:	eb ab                	jmp    c001a067 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001a0bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0c0:	0b 04 24             	or     eax,DWORD PTR [esp]
c001a0c3:	74 34                	je     c001a0f9 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001a0c5:	89 fa                	mov    edx,edi
c001a0c7:	50                   	push   eax
c001a0c8:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a0cf:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a0d3:	50                   	push   eax
c001a0d4:	89 f0                	mov    eax,esi
c001a0d6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a0da:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a0de:	55                   	push   ebp
c001a0df:	50                   	push   eax
c001a0e0:	e8 50 fd ff ff       	call   c0019e35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a0e5:	83 c4 0c             	add    esp,0xc
c001a0e8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001a0ec:	55                   	push   ebp
c001a0ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0f1:	e8 dc 64 fe ff       	call   c00005d2 <memcpy>
c001a0f6:	83 c4 10             	add    esp,0x10
c001a0f9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a100:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a104:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a108:	89 38                	mov    DWORD PTR [eax],edi
c001a10a:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a115:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001a118:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001a11b:	31 c0                	xor    eax,eax
c001a11d:	eb 05                	jmp    c001a124 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a11f:	b8 04 00 00 00       	mov    eax,0x4
c001a124:	81 c4 2c 08 00 00    	add    esp,0x82c
c001a12a:	5b                   	pop    ebx
c001a12b:	5e                   	pop    esi
c001a12c:	5f                   	pop    edi
c001a12d:	5d                   	pop    ebp
c001a12e:	c3                   	ret    
c001a12f:	90                   	nop

c001a130 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a130:	55                   	push   ebp
c001a131:	57                   	push   edi
c001a132:	56                   	push   esi
c001a133:	53                   	push   ebx
c001a134:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001a13a:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001a141:	85 f6                	test   esi,esi
c001a143:	0f 84 65 02 00 00    	je     c001a3ae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c001a149:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001a151:	0f 84 57 02 00 00    	je     c001a3ae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c001a157:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001a15a:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001a15d:	75 0a                	jne    c001a169 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001a15f:	b8 07 00 00 00       	mov    eax,0x7
c001a164:	e9 4a 02 00 00       	jmp    c001a3b3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c001a169:	50                   	push   eax
c001a16a:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a16e:	50                   	push   eax
c001a16f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a176:	53                   	push   ebx
c001a177:	8b 06                	mov    eax,DWORD PTR [esi]
c001a179:	c1 e0 0b             	shl    eax,0xb
c001a17c:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001a17f:	c1 e8 0b             	shr    eax,0xb
c001a182:	50                   	push   eax
c001a183:	e8 ad fc ff ff       	call   c0019e35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a188:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a18b:	83 c4 10             	add    esp,0x10
c001a18e:	89 c1                	mov    ecx,eax
c001a190:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001a193:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a199:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001a19c:	84 db                	test   bl,bl
c001a19e:	0f 85 90 00 00 00    	jne    c001a234 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001a1a4:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001a1aa:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a1b0:	29 c7                	sub    edi,eax
c001a1b2:	89 fb                	mov    ebx,edi
c001a1b4:	c1 fb 1f             	sar    ebx,0x1f
c001a1b7:	01 f8                	add    eax,edi
c001a1b9:	11 da                	adc    edx,ebx
c001a1bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a1bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a1c3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001a1c6:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001a1c9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a1cc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a1cf:	89 04 24             	mov    DWORD PTR [esp],eax
c001a1d2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a1d6:	89 d8                	mov    eax,ebx
c001a1d8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001a1db:	ba 00 00 00 00       	mov    edx,0x0
c001a1e0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a1e4:	b8 00 00 00 00       	mov    eax,0x0
c001a1e9:	73 0b                	jae    c001a1f6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a1eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a1ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a1f2:	29 f8                	sub    eax,edi
c001a1f4:	19 da                	sbb    edx,ebx
c001a1f6:	89 d3                	mov    ebx,edx
c001a1f8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a1fb:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a1fe:	09 c3                	or     ebx,eax
c001a200:	0f 84 59 ff ff ff    	je     c001a15f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001a206:	55                   	push   ebp
c001a207:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a20b:	50                   	push   eax
c001a20c:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a213:	53                   	push   ebx
c001a214:	8b 06                	mov    eax,DWORD PTR [esi]
c001a216:	c1 e0 0b             	shl    eax,0xb
c001a219:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001a21d:	c1 e8 0b             	shr    eax,0xb
c001a220:	50                   	push   eax
c001a221:	e8 0f fc ff ff       	call   c0019e35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a226:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a229:	83 c4 10             	add    esp,0x10
c001a22c:	25 ff 07 00 00       	and    eax,0x7ff
c001a231:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001a234:	57                   	push   edi
c001a235:	6a 28                	push   0x28
c001a237:	6a 00                	push   0x0
c001a239:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a23d:	50                   	push   eax
c001a23e:	e8 c5 63 fe ff       	call   c0000608 <memset>
c001a243:	31 d2                	xor    edx,edx
c001a245:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a248:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a24e:	89 f8                	mov    eax,edi
c001a250:	83 c0 21             	add    eax,0x21
c001a253:	83 d2 00             	adc    edx,0x0
c001a256:	89 c7                	mov    edi,eax
c001a258:	89 d5                	mov    ebp,edx
c001a25a:	83 c4 10             	add    esp,0x10
c001a25d:	31 c9                	xor    ecx,ecx
c001a25f:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001a266:	83 f9 28             	cmp    ecx,0x28
c001a269:	88 04 24             	mov    BYTE PTR [esp],al
c001a26c:	0f 94 c2             	sete   dl
c001a26f:	88 d0                	mov    al,dl
c001a271:	ba ff 07 00 00       	mov    edx,0x7ff
c001a276:	39 fa                	cmp    edx,edi
c001a278:	ba 00 00 00 00       	mov    edx,0x0
c001a27d:	19 ea                	sbb    edx,ebp
c001a27f:	0f 92 c2             	setb   dl
c001a282:	09 c2                	or     edx,eax
c001a284:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001a288:	0f 94 c0             	sete   al
c001a28b:	08 d0                	or     al,dl
c001a28d:	75 16                	jne    c001a2a5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a28f:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001a293:	74 10                	je     c001a2a5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a295:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a298:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001a29c:	41                   	inc    ecx
c001a29d:	83 c7 01             	add    edi,0x1
c001a2a0:	83 d5 00             	adc    ebp,0x0
c001a2a3:	eb ba                	jmp    c001a25f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001a2a5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c001a2ad:	83 ec 0c             	sub    esp,0xc
c001a2b0:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a2b4:	57                   	push   edi
c001a2b5:	e8 6b 63 fe ff       	call   c0000625 <strlen>
c001a2ba:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001a2c2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a2c6:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001a2cd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a2d0:	5a                   	pop    edx
c001a2d1:	25 ff 07 00 00       	and    eax,0x7ff
c001a2d6:	01 c8                	add    eax,ecx
c001a2d8:	59                   	pop    ecx
c001a2d9:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001a2df:	83 e0 02             	and    eax,0x2
c001a2e2:	3c 01                	cmp    al,0x1
c001a2e4:	19 c0                	sbb    eax,eax
c001a2e6:	83 c0 02             	add    eax,0x2
c001a2e9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a2ed:	57                   	push   edi
c001a2ee:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001a2f2:	50                   	push   eax
c001a2f3:	e8 af 63 fe ff       	call   c00006a7 <strcpy>
c001a2f8:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001a2fc:	83 c4 10             	add    esp,0x10
c001a2ff:	84 c0                	test   al,al
c001a301:	75 21                	jne    c001a324 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f4>
c001a303:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001a30b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a313:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a31b:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001a322:	eb 28                	jmp    c001a34c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a324:	fe c8                	dec    al
c001a326:	75 24                	jne    c001a34c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a328:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001a330:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a338:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a340:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001a347:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001a34c:	0f b6 fb             	movzx  edi,bl
c001a34f:	31 db                	xor    ebx,ebx
c001a351:	50                   	push   eax
c001a352:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001a359:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a35d:	50                   	push   eax
c001a35e:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001a365:	e8 68 62 fe ff       	call   c00005d2 <memcpy>
c001a36a:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001a371:	89 f9                	mov    ecx,edi
c001a373:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a379:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001a37c:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a37f:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001a382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a385:	83 c4 10             	add    esp,0x10
c001a388:	39 c7                	cmp    edi,eax
c001a38a:	89 df                	mov    edi,ebx
c001a38c:	19 d7                	sbb    edi,edx
c001a38e:	72 10                	jb     c001a3a0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x270>
c001a390:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001a397:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001a39e:	eb 0a                	jmp    c001a3aa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27a>
c001a3a0:	29 c8                	sub    eax,ecx
c001a3a2:	19 da                	sbb    edx,ebx
c001a3a4:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a3a7:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a3aa:	31 c0                	xor    eax,eax
c001a3ac:	eb 05                	jmp    c001a3b3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c001a3ae:	b8 04 00 00 00       	mov    eax,0x4
c001a3b3:	81 c4 5c 09 00 00    	add    esp,0x95c
c001a3b9:	5b                   	pop    ebx
c001a3ba:	5e                   	pop    esi
c001a3bb:	5f                   	pop    edi
c001a3bc:	5d                   	pop    ebp
c001a3bd:	c3                   	ret    

c001a3be <readRoot(unsigned int*, unsigned int*, char)>:
c001a3be:	81 ec 40 08 00 00    	sub    esp,0x840
c001a3c4:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001a3cc:	50                   	push   eax
c001a3cd:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a3d1:	50                   	push   eax
c001a3d2:	6a 10                	push   0x10
c001a3d4:	e8 5c fa ff ff       	call   c0019e35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a3d9:	83 c4 0c             	add    esp,0xc
c001a3dc:	6a 22                	push   0x22
c001a3de:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001a3e5:	50                   	push   eax
c001a3e6:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a3ea:	50                   	push   eax
c001a3eb:	e8 e2 61 fe ff       	call   c00005d2 <memcpy>
c001a3f0:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a3f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a3fb:	89 10                	mov    DWORD PTR [eax],edx
c001a3fd:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a404:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a408:	89 10                	mov    DWORD PTR [eax],edx
c001a40a:	b0 01                	mov    al,0x1
c001a40c:	81 c4 4c 08 00 00    	add    esp,0x84c
c001a412:	c3                   	ret    

c001a413 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001a413:	55                   	push   ebp
c001a414:	57                   	push   edi
c001a415:	56                   	push   esi
c001a416:	53                   	push   ebx
c001a417:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a41d:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a424:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001a42b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a42f:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001a433:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a437:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a43b:	75 03                	jne    c001a440 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a43d:	83 c3 02             	add    ebx,0x2
c001a440:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001a443:	75 03                	jne    c001a448 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001a445:	43                   	inc    ebx
c001a446:	eb f8                	jmp    c001a440 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a448:	51                   	push   ecx
c001a449:	68 00 01 00 00       	push   0x100
c001a44e:	6a 00                	push   0x0
c001a450:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a454:	50                   	push   eax
c001a455:	e8 ae 61 fe ff       	call   c0000608 <memset>
c001a45a:	83 c4 10             	add    esp,0x10
c001a45d:	31 d2                	xor    edx,edx
c001a45f:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a462:	84 c0                	test   al,al
c001a464:	74 21                	je     c001a487 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001a466:	3c 2f                	cmp    al,0x2f
c001a468:	75 0b                	jne    c001a475 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001a46a:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001a46e:	bd 01 00 00 00       	mov    ebp,0x1
c001a473:	eb 14                	jmp    c001a489 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001a475:	8d 48 9f             	lea    ecx,[eax-0x61]
c001a478:	80 f9 19             	cmp    cl,0x19
c001a47b:	77 03                	ja     c001a480 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a47d:	83 e8 20             	sub    eax,0x20
c001a480:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001a484:	42                   	inc    edx
c001a485:	eb d8                	jmp    c001a45f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001a487:	31 ed                	xor    ebp,ebp
c001a489:	83 ec 0c             	sub    esp,0xc
c001a48c:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001a493:	e8 cd 2d ff ff       	call   c000d265 <malloc>
c001a498:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a49f:	89 c6                	mov    esi,eax
c001a4a1:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001a4a7:	c1 ef 0b             	shr    edi,0xb
c001a4aa:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001a4b1:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001a4b5:	83 c4 10             	add    esp,0x10
c001a4b8:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001a4bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a4c1:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001a4c8:	74 28                	je     c001a4f2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001a4ca:	52                   	push   edx
c001a4cb:	57                   	push   edi
c001a4cc:	50                   	push   eax
c001a4cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a4d1:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a4d8:	e8 58 f9 ff ff       	call   c0019e35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a4dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4e1:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001a4e8:	05 00 08 00 00       	add    eax,0x800
c001a4ed:	83 c4 10             	add    esp,0x10
c001a4f0:	eb cb                	jmp    c001a4bd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001a4f2:	83 ec 0c             	sub    esp,0xc
c001a4f5:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a4f9:	57                   	push   edi
c001a4fa:	e8 26 61 fe ff       	call   c0000625 <strlen>
c001a4ff:	50                   	push   eax
c001a500:	57                   	push   edi
c001a501:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001a508:	56                   	push   esi
c001a509:	e8 e5 f8 ff ff       	call   c0019df3 <__memmem(unsigned char*, int, unsigned char*, int)>
c001a50e:	83 c4 20             	add    esp,0x20
c001a511:	85 c0                	test   eax,eax
c001a513:	75 13                	jne    c001a528 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001a515:	83 ec 0c             	sub    esp,0xc
c001a518:	56                   	push   esi
c001a519:	e8 57 2d ff ff       	call   c000d275 <free>
c001a51e:	83 c4 10             	add    esp,0x10
c001a521:	31 c0                	xor    eax,eax
c001a523:	e9 b3 00 00 00       	jmp    c001a5db <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a528:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001a52c:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001a530:	c1 e7 08             	shl    edi,0x8
c001a533:	c1 e2 10             	shl    edx,0x10
c001a536:	09 d7                	or     edi,edx
c001a538:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001a53c:	09 d7                	or     edi,edx
c001a53e:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001a542:	c1 e2 18             	shl    edx,0x18
c001a545:	09 d7                	or     edi,edx
c001a547:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001a54b:	89 d1                	mov    ecx,edx
c001a54d:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001a551:	c1 e1 08             	shl    ecx,0x8
c001a554:	c1 e2 10             	shl    edx,0x10
c001a557:	09 ca                	or     edx,ecx
c001a559:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001a55d:	09 ca                	or     edx,ecx
c001a55f:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001a563:	c1 e1 18             	shl    ecx,0x18
c001a566:	09 ca                	or     edx,ecx
c001a568:	89 e9                	mov    ecx,ebp
c001a56a:	84 c9                	test   cl,cl
c001a56c:	74 3c                	je     c001a5aa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001a56e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a572:	83 ec 0c             	sub    esp,0xc
c001a575:	56                   	push   esi
c001a576:	e8 fa 2c ff ff       	call   c000d275 <free>
c001a57b:	83 c4 0c             	add    esp,0xc
c001a57e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a585:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a58a:	50                   	push   eax
c001a58b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a592:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a599:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a59d:	52                   	push   edx
c001a59e:	57                   	push   edi
c001a59f:	53                   	push   ebx
c001a5a0:	e8 6e fe ff ff       	call   c001a413 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a5a5:	83 c4 20             	add    esp,0x20
c001a5a8:	eb 31                	jmp    c001a5db <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a5aa:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001a5ad:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001a5b4:	d0 e8                	shr    al,1
c001a5b6:	89 3b                	mov    DWORD PTR [ebx],edi
c001a5b8:	83 e0 01             	and    eax,0x1
c001a5bb:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a5c2:	83 ec 0c             	sub    esp,0xc
c001a5c5:	89 13                	mov    DWORD PTR [ebx],edx
c001a5c7:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001a5ce:	89 03                	mov    DWORD PTR [ebx],eax
c001a5d0:	56                   	push   esi
c001a5d1:	e8 9f 2c ff ff       	call   c000d275 <free>
c001a5d6:	83 c4 10             	add    esp,0x10
c001a5d9:	b0 01                	mov    al,0x1
c001a5db:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a5e1:	5b                   	pop    ebx
c001a5e2:	5e                   	pop    esi
c001a5e3:	5f                   	pop    edi
c001a5e4:	5d                   	pop    ebp
c001a5e5:	c3                   	ret    

c001a5e6 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001a5e6:	55                   	push   ebp
c001a5e7:	57                   	push   edi
c001a5e8:	56                   	push   esi
c001a5e9:	53                   	push   ebx
c001a5ea:	83 ec 20             	sub    esp,0x20
c001a5ed:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a5f1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001a5f5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a5f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a601:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001a609:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001a60e:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001a614:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001a61a:	57                   	push   edi
c001a61b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a61f:	50                   	push   eax
c001a620:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a624:	50                   	push   eax
c001a625:	e8 94 fd ff ff       	call   c001a3be <readRoot(unsigned int*, unsigned int*, char)>
c001a62a:	5a                   	pop    edx
c001a62b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a62f:	e8 f1 5f fe ff       	call   c0000625 <strlen>
c001a634:	83 c4 10             	add    esp,0x10
c001a637:	83 f8 03             	cmp    eax,0x3
c001a63a:	77 17                	ja     c001a653 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a63c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a640:	89 03                	mov    DWORD PTR [ebx],eax
c001a642:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a646:	89 06                	mov    DWORD PTR [esi],eax
c001a648:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001a64f:	b0 01                	mov    al,0x1
c001a651:	eb 19                	jmp    c001a66c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001a653:	50                   	push   eax
c001a654:	55                   	push   ebp
c001a655:	57                   	push   edi
c001a656:	56                   	push   esi
c001a657:	53                   	push   ebx
c001a658:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a65c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a660:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a664:	e8 aa fd ff ff       	call   c001a413 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a669:	83 c4 20             	add    esp,0x20
c001a66c:	83 c4 1c             	add    esp,0x1c
c001a66f:	5b                   	pop    ebx
c001a670:	5e                   	pop    esi
c001a671:	5f                   	pop    edi
c001a672:	5d                   	pop    ebp
c001a673:	c3                   	ret    

c001a674 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a674:	57                   	push   edi
c001a675:	56                   	push   esi
c001a676:	53                   	push   ebx
c001a677:	83 ec 10             	sub    esp,0x10
c001a67a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a67e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a682:	85 ff                	test   edi,edi
c001a684:	74 7b                	je     c001a701 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a686:	85 f6                	test   esi,esi
c001a688:	74 77                	je     c001a701 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a68a:	83 ec 0c             	sub    esp,0xc
c001a68d:	6a 1c                	push   0x1c
c001a68f:	e8 d1 2b ff ff       	call   c000d265 <malloc>
c001a694:	89 07                	mov    DWORD PTR [edi],eax
c001a696:	89 c3                	mov    ebx,eax
c001a698:	58                   	pop    eax
c001a699:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a69d:	50                   	push   eax
c001a69e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a6a1:	50                   	push   eax
c001a6a2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a6a6:	50                   	push   eax
c001a6a7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a6ab:	50                   	push   eax
c001a6ac:	56                   	push   esi
c001a6ad:	e8 34 ff ff ff       	call   c001a5e6 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a6b2:	83 c4 20             	add    esp,0x20
c001a6b5:	84 c0                	test   al,al
c001a6b7:	74 07                	je     c001a6c0 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001a6b9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a6be:	74 0b                	je     c001a6cb <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a6c0:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a6c4:	b8 01 00 00 00       	mov    eax,0x1
c001a6c9:	eb 3b                	jmp    c001a706 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a6cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6cf:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a6d3:	89 03                	mov    DWORD PTR [ebx],eax
c001a6d5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a6dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6e0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a6e7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a6ee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a6f1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a6f8:	8a 06                	mov    al,BYTE PTR [esi]
c001a6fa:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a6fd:	31 c0                	xor    eax,eax
c001a6ff:	eb 05                	jmp    c001a706 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a701:	b8 04 00 00 00       	mov    eax,0x4
c001a706:	83 c4 10             	add    esp,0x10
c001a709:	5b                   	pop    ebx
c001a70a:	5e                   	pop    esi
c001a70b:	5f                   	pop    edi
c001a70c:	c3                   	ret    
c001a70d:	90                   	nop

c001a70e <ISO9660::exists(char const*)>:
c001a70e:	83 ec 28             	sub    esp,0x28
c001a711:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a715:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a719:	52                   	push   edx
c001a71a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001a71d:	52                   	push   edx
c001a71e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a722:	52                   	push   edx
c001a723:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a727:	52                   	push   edx
c001a728:	50                   	push   eax
c001a729:	e8 b8 fe ff ff       	call   c001a5e6 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a72e:	83 c4 3c             	add    esp,0x3c
c001a731:	c3                   	ret    

c001a732 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a732:	56                   	push   esi
c001a733:	53                   	push   ebx
c001a734:	83 ec 14             	sub    esp,0x14
c001a737:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a73b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a73f:	85 db                	test   ebx,ebx
c001a741:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001a745:	0f 94 c2             	sete   dl
c001a748:	85 f6                	test   esi,esi
c001a74a:	0f 94 c0             	sete   al
c001a74d:	08 c2                	or     dl,al
c001a74f:	75 68                	jne    c001a7b9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a751:	85 c9                	test   ecx,ecx
c001a753:	74 64                	je     c001a7b9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a755:	83 ec 0c             	sub    esp,0xc
c001a758:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a75b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a75f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a765:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a76c:	50                   	push   eax
c001a76d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001a770:	50                   	push   eax
c001a771:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a775:	50                   	push   eax
c001a776:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a77a:	50                   	push   eax
c001a77b:	51                   	push   ecx
c001a77c:	e8 65 fe ff ff       	call   c001a5e6 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a781:	83 c4 20             	add    esp,0x20
c001a784:	ba 01 00 00 00       	mov    edx,0x1
c001a789:	84 c0                	test   al,al
c001a78b:	74 31                	je     c001a7be <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a78d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a791:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a798:	89 03                	mov    DWORD PTR [ebx],eax
c001a79a:	ba 00 00 00 00       	mov    edx,0x0
c001a79f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a7a3:	85 c0                	test   eax,eax
c001a7a5:	0f 95 06             	setne  BYTE PTR [esi]
c001a7a8:	74 14                	je     c001a7be <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a7aa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a7b0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a7b7:	eb 05                	jmp    c001a7be <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a7b9:	ba 04 00 00 00       	mov    edx,0x4
c001a7be:	83 c4 14             	add    esp,0x14
c001a7c1:	89 d0                	mov    eax,edx
c001a7c3:	5b                   	pop    ebx
c001a7c4:	5e                   	pop    esi
c001a7c5:	c3                   	ret    

c001a7c6 <ISO9660::openDir(char const*, void**)>:
c001a7c6:	57                   	push   edi
c001a7c7:	56                   	push   esi
c001a7c8:	53                   	push   ebx
c001a7c9:	83 ec 10             	sub    esp,0x10
c001a7cc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a7d0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a7d4:	85 ff                	test   edi,edi
c001a7d6:	0f 84 95 00 00 00    	je     c001a871 <ISO9660::openDir(char const*, void**)+0xab>
c001a7dc:	85 f6                	test   esi,esi
c001a7de:	0f 84 8d 00 00 00    	je     c001a871 <ISO9660::openDir(char const*, void**)+0xab>
c001a7e4:	83 ec 0c             	sub    esp,0xc
c001a7e7:	6a 1c                	push   0x1c
c001a7e9:	e8 77 2a ff ff       	call   c000d265 <malloc>
c001a7ee:	89 07                	mov    DWORD PTR [edi],eax
c001a7f0:	89 c3                	mov    ebx,eax
c001a7f2:	59                   	pop    ecx
c001a7f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a7f7:	50                   	push   eax
c001a7f8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a7fb:	50                   	push   eax
c001a7fc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a800:	50                   	push   eax
c001a801:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a805:	50                   	push   eax
c001a806:	56                   	push   esi
c001a807:	e8 da fd ff ff       	call   c001a5e6 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a80c:	83 c4 20             	add    esp,0x20
c001a80f:	84 c0                	test   al,al
c001a811:	74 07                	je     c001a81a <ISO9660::openDir(char const*, void**)+0x54>
c001a813:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a818:	75 21                	jne    c001a83b <ISO9660::openDir(char const*, void**)+0x75>
c001a81a:	0f b6 c0             	movzx  eax,al
c001a81d:	52                   	push   edx
c001a81e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a822:	50                   	push   eax
c001a823:	68 5e 1a 02 c0       	push   0xc0021a5e
c001a828:	e8 3d 24 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001a82d:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a831:	83 c4 10             	add    esp,0x10
c001a834:	b8 01 00 00 00       	mov    eax,0x1
c001a839:	eb 3b                	jmp    c001a876 <ISO9660::openDir(char const*, void**)+0xb0>
c001a83b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a83f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a843:	89 03                	mov    DWORD PTR [ebx],eax
c001a845:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a84c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a850:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a857:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a85e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a861:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a868:	8a 06                	mov    al,BYTE PTR [esi]
c001a86a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a86d:	31 c0                	xor    eax,eax
c001a86f:	eb 05                	jmp    c001a876 <ISO9660::openDir(char const*, void**)+0xb0>
c001a871:	b8 04 00 00 00       	mov    eax,0x4
c001a876:	83 c4 10             	add    esp,0x10
c001a879:	5b                   	pop    ebx
c001a87a:	5e                   	pop    esi
c001a87b:	5f                   	pop    edi
c001a87c:	c3                   	ret    
c001a87d:	90                   	nop

c001a87e <ISO9660::ISO9660()>:
c001a87e:	83 ec 0c             	sub    esp,0xc
c001a881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a885:	83 ec 0c             	sub    esp,0xc
c001a888:	50                   	push   eax
c001a889:	e8 9a 7b ff ff       	call   c0012428 <Filesystem::Filesystem()>
c001a88e:	83 c4 10             	add    esp,0x10
c001a891:	ba 84 1a 02 c0       	mov    edx,0xc0021a84
c001a896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a89a:	89 10                	mov    DWORD PTR [eax],edx
c001a89c:	90                   	nop
c001a89d:	83 c4 0c             	add    esp,0xc
c001a8a0:	c3                   	ret    
c001a8a1:	90                   	nop

c001a8a2 <SoundChannel::~SoundChannel()>:
c001a8a2:	83 ec 0c             	sub    esp,0xc
c001a8a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8a9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a8ac:	83 ec 0c             	sub    esp,0xc
c001a8af:	50                   	push   eax
c001a8b0:	e8 c0 29 ff ff       	call   c000d275 <free>
c001a8b5:	83 c4 10             	add    esp,0x10
c001a8b8:	90                   	nop
c001a8b9:	83 c4 0c             	add    esp,0xc
c001a8bc:	c3                   	ret    
c001a8bd:	90                   	nop

c001a8be <SoundChannel::setSpeed(float)>:
c001a8be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8c2:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001a8c6:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001a8c9:	c3                   	ret    

c001a8ca <SoundChannel::getSpeed()>:
c001a8ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8ce:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001a8d1:	c3                   	ret    

c001a8d2 <SoundChannel::setVolume(int)>:
c001a8d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8d6:	83 f8 64             	cmp    eax,0x64
c001a8d9:	7e 05                	jle    c001a8e0 <SoundChannel::setVolume(int)+0xe>
c001a8db:	b8 64 00 00 00       	mov    eax,0x64
c001a8e0:	85 c0                	test   eax,eax
c001a8e2:	79 02                	jns    c001a8e6 <SoundChannel::setVolume(int)+0x14>
c001a8e4:	31 c0                	xor    eax,eax
c001a8e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a8ea:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001a8ed:	c3                   	ret    

c001a8ee <SoundChannel::getVolume()>:
c001a8ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8f2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a8f5:	c3                   	ret    

c001a8f6 <SoundChannel::pause()>:
c001a8f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8fa:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001a8fe:	c3                   	ret    
c001a8ff:	90                   	nop

c001a900 <SoundChannel::SoundChannel(int, int, int, int)>:
c001a900:	83 ec 1c             	sub    esp,0x1c
c001a903:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a907:	e8 ea ff ff ff       	call   c001a8f6 <SoundChannel::pause()>
c001a90c:	83 c4 04             	add    esp,0x4
c001a90f:	6a 50                	push   0x50
c001a911:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a915:	e8 b8 ff ff ff       	call   c001a8d2 <SoundChannel::setVolume(int)>
c001a91a:	83 c4 08             	add    esp,0x8
c001a91d:	d9 e8                	fld1   
c001a91f:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001a923:	d9 1c 24             	fstp   DWORD PTR [esp]
c001a926:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a92a:	e8 8f ff ff ff       	call   c001a8be <SoundChannel::setSpeed(float)>
c001a92f:	83 c4 08             	add    esp,0x8
c001a932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a936:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a93a:	89 10                	mov    DWORD PTR [eax],edx
c001a93c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a940:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a944:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a947:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a94b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a94f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a952:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001a957:	75 23                	jne    c001a97c <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001a959:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a95d:	8b 10                	mov    edx,DWORD PTR [eax]
c001a95f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a963:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a966:	0f af c2             	imul   eax,edx
c001a969:	85 c0                	test   eax,eax
c001a96b:	79 03                	jns    c001a970 <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001a96d:	83 c0 03             	add    eax,0x3
c001a970:	c1 f8 02             	sar    eax,0x2
c001a973:	05 a0 0f 00 00       	add    eax,0xfa0
c001a978:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a97c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a980:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a984:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001a987:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a98b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001a992:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a996:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001a99d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9a1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a9a4:	c1 e0 02             	shl    eax,0x2
c001a9a7:	83 ec 0c             	sub    esp,0xc
c001a9aa:	50                   	push   eax
c001a9ab:	e8 b5 28 ff ff       	call   c000d265 <malloc>
c001a9b0:	83 c4 10             	add    esp,0x10
c001a9b3:	89 c2                	mov    edx,eax
c001a9b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9b9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a9bc:	83 ec 04             	sub    esp,0x4
c001a9bf:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a9c3:	50                   	push   eax
c001a9c4:	6a 01                	push   0x1
c001a9c6:	6a 04                	push   0x4
c001a9c8:	e8 7e de fe ff       	call   c000884b <src_new>
c001a9cd:	83 c4 10             	add    esp,0x10
c001a9d0:	89 c2                	mov    edx,eax
c001a9d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9d6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a9d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a9dd:	85 c0                	test   eax,eax
c001a9df:	74 10                	je     c001a9f1 <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001a9e1:	83 ec 0c             	sub    esp,0xc
c001a9e4:	68 e0 1a 02 c0       	push   0xc0021ae0
c001a9e9:	e8 9a 23 ff ff       	call   c000cd88 <panic(char const*)>
c001a9ee:	83 c4 10             	add    esp,0x10
c001a9f1:	90                   	nop
c001a9f2:	83 c4 1c             	add    esp,0x1c
c001a9f5:	c3                   	ret    

c001a9f6 <SoundChannel::play()>:
c001a9f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9fa:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001a9fe:	c3                   	ret    
c001a9ff:	90                   	nop

c001aa00 <SoundChannel::paused()>:
c001aa00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa04:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001aa07:	c3                   	ret    

c001aa08 <SoundChannel::getSampleRate()>:
c001aa08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa0e:	c3                   	ret    
c001aa0f:	90                   	nop

c001aa10 <SoundChannel::getBits()>:
c001aa10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001aa17:	c3                   	ret    

c001aa18 <SoundChannel::getBufferUsed()>:
c001aa18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa1c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001aa1f:	c3                   	ret    

c001aa20 <SoundChannel::getBufferSize()>:
c001aa20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa24:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aa27:	c3                   	ret    

c001aa28 <SoundChannel::unbuffer(float*, int, int)>:
c001aa28:	53                   	push   ebx
c001aa29:	83 ec 40             	sub    esp,0x40
c001aa2c:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001aa30:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001aa38:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001aa3b:	db 03                	fild   DWORD PTR [ebx]
c001aa3d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa41:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001aa45:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001aa48:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001aa4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa4f:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001aa53:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aa57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aa5b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aa5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa63:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa67:	50                   	push   eax
c001aa68:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001aa6b:	e8 95 da fe ff       	call   c0008505 <src_process>
c001aa70:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001aa74:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001aa77:	83 c4 0c             	add    esp,0xc
c001aa7a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001aa7d:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001aa80:	29 d0                	sub    eax,edx
c001aa82:	c1 e0 02             	shl    eax,0x2
c001aa85:	50                   	push   eax
c001aa86:	8d 04 91             	lea    eax,[ecx+edx*4]
c001aa89:	50                   	push   eax
c001aa8a:	51                   	push   ecx
c001aa8b:	e8 0a 5b fe ff       	call   c000059a <memmove>
c001aa90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aa94:	83 c4 48             	add    esp,0x48
c001aa97:	5b                   	pop    ebx
c001aa98:	c3                   	ret    
c001aa99:	90                   	nop

c001aa9a <SoundChannel::buffer8(unsigned char*, int)>:
c001aa9a:	53                   	push   ebx
c001aa9b:	31 c0                	xor    eax,eax
c001aa9d:	83 ec 08             	sub    esp,0x8
c001aaa0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aaa4:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001aaa7:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001aaaa:	74 35                	je     c001aae1 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001aaac:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aab0:	7d 2f                	jge    c001aae1 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001aab2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001aab6:	d9 05 fc 1a 02 c0    	fld    DWORD PTR ds:0xc0021afc
c001aabc:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001aac0:	40                   	inc    eax
c001aac1:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001aac6:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001aac9:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001aacd:	8d 59 01             	lea    ebx,[ecx+0x1]
c001aad0:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001aad3:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001aad6:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001aad9:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aadc:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001aadf:	eb c9                	jmp    c001aaaa <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001aae1:	83 c4 08             	add    esp,0x8
c001aae4:	5b                   	pop    ebx
c001aae5:	c3                   	ret    

c001aae6 <SoundDevice::SoundDevice(char const*)>:
c001aae6:	83 ec 1c             	sub    esp,0x1c
c001aae9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aaed:	83 ec 08             	sub    esp,0x8
c001aaf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aaf4:	50                   	push   eax
c001aaf5:	e8 24 8c ff ff       	call   c001371e <Device::Device(char const*)>
c001aafa:	83 c4 10             	add    esp,0x10
c001aafd:	ba 08 1b 02 c0       	mov    edx,0xc0021b08
c001ab02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab06:	89 10                	mov    DWORD PTR [eax],edx
c001ab08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab0c:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ab16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab1a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001ab24:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab2c:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ab31:	7f 19                	jg     c001ab4c <SoundDevice::SoundDevice(char const*)+0x66>
c001ab33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ab3b:	83 c2 54             	add    edx,0x54
c001ab3e:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001ab46:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ab4a:	eb e0                	jmp    c001ab2c <SoundDevice::SoundDevice(char const*)+0x46>
c001ab4c:	90                   	nop
c001ab4d:	83 c4 1c             	add    esp,0x1c
c001ab50:	c3                   	ret    
c001ab51:	90                   	nop

c001ab52 <SoundDevice::~SoundDevice()>:
c001ab52:	53                   	push   ebx
c001ab53:	83 ec 18             	sub    esp,0x18
c001ab56:	ba 08 1b 02 c0       	mov    edx,0xc0021b08
c001ab5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab5f:	89 10                	mov    DWORD PTR [eax],edx
c001ab61:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab69:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ab6e:	7f 46                	jg     c001abb6 <SoundDevice::~SoundDevice()+0x64>
c001ab70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ab78:	83 c2 54             	add    edx,0x54
c001ab7b:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001ab7f:	85 c0                	test   eax,eax
c001ab81:	74 2d                	je     c001abb0 <SoundDevice::~SoundDevice()+0x5e>
c001ab83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab87:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ab8b:	83 c2 54             	add    edx,0x54
c001ab8e:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001ab92:	85 db                	test   ebx,ebx
c001ab94:	74 1a                	je     c001abb0 <SoundDevice::~SoundDevice()+0x5e>
c001ab96:	83 ec 0c             	sub    esp,0xc
c001ab99:	53                   	push   ebx
c001ab9a:	e8 03 fd ff ff       	call   c001a8a2 <SoundChannel::~SoundChannel()>
c001ab9f:	83 c4 10             	add    esp,0x10
c001aba2:	83 ec 08             	sub    esp,0x8
c001aba5:	6a 2c                	push   0x2c
c001aba7:	53                   	push   ebx
c001aba8:	e8 86 76 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c001abad:	83 c4 10             	add    esp,0x10
c001abb0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001abb4:	eb b3                	jmp    c001ab69 <SoundDevice::~SoundDevice()+0x17>
c001abb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abba:	83 ec 0c             	sub    esp,0xc
c001abbd:	50                   	push   eax
c001abbe:	e8 0d 88 ff ff       	call   c00133d0 <Device::~Device()>
c001abc3:	83 c4 10             	add    esp,0x10
c001abc6:	90                   	nop
c001abc7:	83 c4 18             	add    esp,0x18
c001abca:	5b                   	pop    ebx
c001abcb:	c3                   	ret    

c001abcc <SoundDevice::~SoundDevice()>:
c001abcc:	83 ec 0c             	sub    esp,0xc
c001abcf:	83 ec 0c             	sub    esp,0xc
c001abd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abd6:	e8 77 ff ff ff       	call   c001ab52 <SoundDevice::~SoundDevice()>
c001abdb:	83 c4 10             	add    esp,0x10
c001abde:	83 ec 08             	sub    esp,0x8
c001abe1:	68 e4 01 00 00       	push   0x1e4
c001abe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abea:	e8 44 76 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c001abef:	83 c4 10             	add    esp,0x10
c001abf2:	83 c4 0c             	add    esp,0xc
c001abf5:	c3                   	ret    

c001abf6 <SoundDevice::getFreeChannelNum()>:
c001abf6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001abfa:	31 c0                	xor    eax,eax
c001abfc:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001ac04:	74 09                	je     c001ac0f <SoundDevice::getFreeChannelNum()+0x19>
c001ac06:	40                   	inc    eax
c001ac07:	83 f8 20             	cmp    eax,0x20
c001ac0a:	75 f0                	jne    c001abfc <SoundDevice::getFreeChannelNum()+0x6>
c001ac0c:	83 c8 ff             	or     eax,0xffffffff
c001ac0f:	c3                   	ret    

c001ac10 <SoundDevice::addChannel(SoundChannel*)>:
c001ac10:	56                   	push   esi
c001ac11:	53                   	push   ebx
c001ac12:	51                   	push   ecx
c001ac13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac17:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ac1b:	53                   	push   ebx
c001ac1c:	e8 d5 ff ff ff       	call   c001abf6 <SoundDevice::getFreeChannelNum()>
c001ac21:	5a                   	pop    edx
c001ac22:	83 f8 ff             	cmp    eax,0xffffffff
c001ac25:	74 51                	je     c001ac78 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001ac27:	85 f6                	test   esi,esi
c001ac29:	74 4d                	je     c001ac78 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001ac2b:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001ac32:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001ac39:	75 30                	jne    c001ac6b <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001ac3b:	83 ec 0c             	sub    esp,0xc
c001ac3e:	56                   	push   esi
c001ac3f:	e8 c4 fd ff ff       	call   c001aa08 <SoundChannel::getSampleRate()>
c001ac44:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001ac4a:	89 34 24             	mov    DWORD PTR [esp],esi
c001ac4d:	e8 be fd ff ff       	call   c001aa10 <SoundChannel::getBits()>
c001ac52:	83 c4 0c             	add    esp,0xc
c001ac55:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001ac5b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ac5d:	50                   	push   eax
c001ac5e:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001ac64:	53                   	push   ebx
c001ac65:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001ac68:	83 c4 10             	add    esp,0x10
c001ac6b:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001ac71:	b8 01 00 00 00       	mov    eax,0x1
c001ac76:	eb 03                	jmp    c001ac7b <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001ac78:	83 c8 ff             	or     eax,0xffffffff
c001ac7b:	5a                   	pop    edx
c001ac7c:	5b                   	pop    ebx
c001ac7d:	5e                   	pop    esi
c001ac7e:	c3                   	ret    
c001ac7f:	90                   	nop

c001ac80 <SoundDevice::removeChannel(int)>:
c001ac80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac88:	83 fa 1f             	cmp    edx,0x1f
c001ac8b:	77 23                	ja     c001acb0 <SoundDevice::removeChannel(int)+0x30>
c001ac8d:	8d 14 90             	lea    edx,[eax+edx*4]
c001ac90:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001ac97:	74 17                	je     c001acb0 <SoundDevice::removeChannel(int)+0x30>
c001ac99:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001aca3:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001aca9:	75 05                	jne    c001acb0 <SoundDevice::removeChannel(int)+0x30>
c001acab:	8b 00                	mov    eax,DWORD PTR [eax]
c001acad:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001acb0:	c3                   	ret    
c001acb1:	90                   	nop

c001acb2 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001acb2:	56                   	push   esi
c001acb3:	53                   	push   ebx
c001acb4:	31 db                	xor    ebx,ebx
c001acb6:	83 ec 14             	sub    esp,0x14
c001acb9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001acbd:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001acc1:	7d 55                	jge    c001ad18 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001acc3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001acc7:	d9 e8                	fld1   
c001acc9:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001accc:	d8 0d 38 1b 02 c0    	fmul   DWORD PTR ds:0xc0021b38
c001acd2:	d8 0d 3c 1b 02 c0    	fmul   DWORD PTR ds:0xc0021b3c
c001acd8:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001acdc:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001ace0:	d8 15 40 1b 02 c0    	fcom   DWORD PTR ds:0xc0021b40
c001ace6:	df e0                	fnstsw ax
c001ace8:	9e                   	sahf   
c001ace9:	72 08                	jb     c001acf3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001aceb:	dd d8                	fstp   st(0)
c001aced:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001acf1:	eb 22                	jmp    c001ad15 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001acf3:	d9 ee                	fldz   
c001acf5:	d8 d9                	fcomp  st(1)
c001acf7:	df e0                	fnstsw ax
c001acf9:	9e                   	sahf   
c001acfa:	72 08                	jb     c001ad04 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001acfc:	dd d8                	fstp   st(0)
c001acfe:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001ad02:	eb 11                	jmp    c001ad15 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001ad04:	83 ec 10             	sub    esp,0x10
c001ad07:	d9 1c 24             	fstp   DWORD PTR [esp]
c001ad0a:	e8 0d 36 00 00       	call   c001e31c <lrintf>
c001ad0f:	83 c4 10             	add    esp,0x10
c001ad12:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001ad15:	43                   	inc    ebx
c001ad16:	eb a5                	jmp    c001acbd <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001ad18:	83 c4 14             	add    esp,0x14
c001ad1b:	5b                   	pop    ebx
c001ad1c:	5e                   	pop    esi
c001ad1d:	c3                   	ret    

c001ad1e <SoundDevice::getAudio(int, float*, float*)>:
c001ad1e:	55                   	push   ebp
c001ad1f:	57                   	push   edi
c001ad20:	56                   	push   esi
c001ad21:	53                   	push   ebx
c001ad22:	31 db                	xor    ebx,ebx
c001ad24:	83 ec 20             	sub    esp,0x20
c001ad27:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad2b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ad2f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ad33:	c1 e0 02             	shl    eax,0x2
c001ad36:	50                   	push   eax
c001ad37:	6a 00                	push   0x0
c001ad39:	55                   	push   ebp
c001ad3a:	e8 c9 58 fe ff       	call   c0000608 <memset>
c001ad3f:	83 c4 10             	add    esp,0x10
c001ad42:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ad46:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001ad4d:	85 c0                	test   eax,eax
c001ad4f:	0f 84 94 00 00 00    	je     c001ade9 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ad55:	83 ec 0c             	sub    esp,0xc
c001ad58:	50                   	push   eax
c001ad59:	e8 a2 fc ff ff       	call   c001aa00 <SoundChannel::paused()>
c001ad5e:	83 c4 10             	add    esp,0x10
c001ad61:	84 c0                	test   al,al
c001ad63:	0f 85 80 00 00 00    	jne    c001ade9 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ad69:	83 ec 0c             	sub    esp,0xc
c001ad6c:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ad73:	e8 76 fb ff ff       	call   c001a8ee <SoundChannel::getVolume()>
c001ad78:	83 c4 10             	add    esp,0x10
c001ad7b:	85 c0                	test   eax,eax
c001ad7d:	74 6a                	je     c001ade9 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ad7f:	83 ec 0c             	sub    esp,0xc
c001ad82:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ad89:	e8 60 fb ff ff       	call   c001a8ee <SoundChannel::getVolume()>
c001ad8e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ad92:	d9 05 44 1b 02 c0    	fld    DWORD PTR ds:0xc0021b44
c001ad98:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001ad9c:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001ada0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ada4:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001adaa:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001adae:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001adb5:	e8 6e fc ff ff       	call   c001aa28 <SoundChannel::unbuffer(float*, int, int)>
c001adba:	83 c4 20             	add    esp,0x20
c001adbd:	31 d2                	xor    edx,edx
c001adbf:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001adc3:	39 c2                	cmp    edx,eax
c001adc5:	7d 1a                	jge    c001ade1 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001adc7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001adcb:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001adce:	d8 c9                	fmul   st,st(1)
c001add0:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001add6:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001adda:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001adde:	42                   	inc    edx
c001addf:	eb e2                	jmp    c001adc3 <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001ade1:	dd d8                	fstp   st(0)
c001ade3:	39 c7                	cmp    edi,eax
c001ade5:	7e 02                	jle    c001ade9 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ade7:	89 c7                	mov    edi,eax
c001ade9:	43                   	inc    ebx
c001adea:	83 fb 20             	cmp    ebx,0x20
c001aded:	0f 85 53 ff ff ff    	jne    c001ad46 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001adf3:	83 c4 1c             	add    esp,0x1c
c001adf6:	89 f8                	mov    eax,edi
c001adf8:	5b                   	pop    ebx
c001adf9:	5e                   	pop    esi
c001adfa:	5f                   	pop    edi
c001adfb:	5d                   	pop    ebp
c001adfc:	c3                   	ret    
c001adfd:	90                   	nop

c001adfe <PCI::open(int, int, void*)>:
c001adfe:	83 ec 18             	sub    esp,0x18
c001ae01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae05:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae07:	50                   	push   eax
c001ae08:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ae0b:	31 c0                	xor    eax,eax
c001ae0d:	83 c4 1c             	add    esp,0x1c
c001ae10:	c3                   	ret    
c001ae11:	90                   	nop

c001ae12 <PCI::close(int, int, void*)>:
c001ae12:	31 c0                	xor    eax,eax
c001ae14:	c3                   	ret    
c001ae15:	90                   	nop

c001ae16 <PCI::PCI()>:
c001ae16:	83 ec 0c             	sub    esp,0xc
c001ae19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae1d:	83 ec 08             	sub    esp,0x8
c001ae20:	68 48 1b 02 c0       	push   0xc0021b48
c001ae25:	50                   	push   eax
c001ae26:	e8 7f 7f ff ff       	call   c0012daa <Bus::Bus(char const*)>
c001ae2b:	83 c4 10             	add    esp,0x10
c001ae2e:	ba f4 1b 02 c0       	mov    edx,0xc0021bf4
c001ae33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae37:	89 10                	mov    DWORD PTR [eax],edx
c001ae39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae3d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ae43:	0f b6 d0             	movzx  edx,al
c001ae46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae4a:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001ae51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae55:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ae5b:	0f b6 d0             	movzx  edx,al
c001ae5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae62:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ae67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae6b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ae71:	8d 50 01             	lea    edx,[eax+0x1]
c001ae74:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae78:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ae7e:	0f b6 d0             	movzx  edx,al
c001ae81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae85:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ae89:	83 c9 c0             	or     ecx,0xffffffc0
c001ae8c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ae90:	90                   	nop
c001ae91:	83 c4 0c             	add    esp,0xc
c001ae94:	c3                   	ret    
c001ae95:	90                   	nop

c001ae96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ae96:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae9a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ae9f:	89 ca                	mov    edx,ecx
c001aea1:	c1 e0 10             	shl    eax,0x10
c001aea4:	81 e2 fc 00 00 00    	and    edx,0xfc
c001aeaa:	09 d0                	or     eax,edx
c001aeac:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001aeb1:	c1 e2 08             	shl    edx,0x8
c001aeb4:	09 d0                	or     eax,edx
c001aeb6:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001aebb:	c1 e2 0b             	shl    edx,0xb
c001aebe:	09 d0                	or     eax,edx
c001aec0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001aec5:	0d 00 00 00 80       	or     eax,0x80000000
c001aeca:	ef                   	out    dx,eax
c001aecb:	ba fc 0c 00 00       	mov    edx,0xcfc
c001aed0:	ed                   	in     eax,dx
c001aed1:	83 e1 02             	and    ecx,0x2
c001aed4:	0f b6 c9             	movzx  ecx,cl
c001aed7:	c1 e1 03             	shl    ecx,0x3
c001aeda:	d3 e8                	shr    eax,cl
c001aedc:	c3                   	ret    
c001aedd:	90                   	nop

c001aede <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001aede:	6a 00                	push   0x0
c001aee0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001aee5:	50                   	push   eax
c001aee6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001aeeb:	50                   	push   eax
c001aeec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001aef1:	50                   	push   eax
c001aef2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001aef6:	e8 9b ff ff ff       	call   c001ae96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aefb:	83 c4 14             	add    esp,0x14
c001aefe:	c3                   	ret    
c001aeff:	90                   	nop

c001af00 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001af00:	6a 0e                	push   0xe
c001af02:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af07:	50                   	push   eax
c001af08:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af0d:	50                   	push   eax
c001af0e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af13:	50                   	push   eax
c001af14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001af18:	e8 79 ff ff ff       	call   c001ae96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af1d:	83 c4 14             	add    esp,0x14
c001af20:	0f b6 c0             	movzx  eax,al
c001af23:	c3                   	ret    

c001af24 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001af24:	55                   	push   ebp
c001af25:	57                   	push   edi
c001af26:	56                   	push   esi
c001af27:	53                   	push   ebx
c001af28:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001af2d:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001af32:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001af37:	6a 0a                	push   0xa
c001af39:	56                   	push   esi
c001af3a:	55                   	push   ebp
c001af3b:	57                   	push   edi
c001af3c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001af40:	e8 51 ff ff ff       	call   c001ae96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af45:	6a 0a                	push   0xa
c001af47:	89 c3                	mov    ebx,eax
c001af49:	56                   	push   esi
c001af4a:	0f b6 db             	movzx  ebx,bl
c001af4d:	55                   	push   ebp
c001af4e:	57                   	push   edi
c001af4f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001af53:	e8 3e ff ff ff       	call   c001ae96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af58:	83 c4 28             	add    esp,0x28
c001af5b:	25 00 ff 00 00       	and    eax,0xff00
c001af60:	09 d8                	or     eax,ebx
c001af62:	5b                   	pop    ebx
c001af63:	5e                   	pop    esi
c001af64:	5f                   	pop    edi
c001af65:	5d                   	pop    ebp
c001af66:	c3                   	ret    
c001af67:	90                   	nop

c001af68 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001af68:	6a 08                	push   0x8
c001af6a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af6f:	50                   	push   eax
c001af70:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af75:	50                   	push   eax
c001af76:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af7b:	50                   	push   eax
c001af7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001af80:	e8 11 ff ff ff       	call   c001ae96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af85:	83 c4 14             	add    esp,0x14
c001af88:	0f b6 c4             	movzx  eax,ah
c001af8b:	c3                   	ret    

c001af8c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001af8c:	6a 08                	push   0x8
c001af8e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af93:	50                   	push   eax
c001af94:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af99:	50                   	push   eax
c001af9a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af9f:	50                   	push   eax
c001afa0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001afa4:	e8 ed fe ff ff       	call   c001ae96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afa9:	83 c4 14             	add    esp,0x14
c001afac:	c3                   	ret    
c001afad:	90                   	nop

c001afae <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001afae:	6a 3c                	push   0x3c
c001afb0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afb5:	50                   	push   eax
c001afb6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afbb:	50                   	push   eax
c001afbc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afc1:	50                   	push   eax
c001afc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001afc6:	e8 cb fe ff ff       	call   c001ae96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afcb:	83 c4 14             	add    esp,0x14
c001afce:	c3                   	ret    
c001afcf:	90                   	nop

c001afd0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001afd0:	6a 18                	push   0x18
c001afd2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afd7:	50                   	push   eax
c001afd8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afdd:	50                   	push   eax
c001afde:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afe3:	50                   	push   eax
c001afe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001afe8:	e8 a9 fe ff ff       	call   c001ae96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afed:	83 c4 14             	add    esp,0x14
c001aff0:	0f b6 c4             	movzx  eax,ah
c001aff3:	c3                   	ret    

c001aff4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001aff4:	55                   	push   ebp
c001aff5:	57                   	push   edi
c001aff6:	56                   	push   esi
c001aff7:	53                   	push   ebx
c001aff8:	50                   	push   eax
c001aff9:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001affd:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001b002:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b007:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001b00c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b013:	8d 43 12             	lea    eax,[ebx+0x12]
c001b016:	83 c3 10             	add    ebx,0x10
c001b019:	0f b6 c0             	movzx  eax,al
c001b01c:	0f b6 db             	movzx  ebx,bl
c001b01f:	50                   	push   eax
c001b020:	51                   	push   ecx
c001b021:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b025:	57                   	push   edi
c001b026:	55                   	push   ebp
c001b027:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b02b:	e8 66 fe ff ff       	call   c001ae96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b030:	53                   	push   ebx
c001b031:	89 c6                	mov    esi,eax
c001b033:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b037:	c1 e6 10             	shl    esi,0x10
c001b03a:	51                   	push   ecx
c001b03b:	57                   	push   edi
c001b03c:	55                   	push   ebp
c001b03d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b041:	e8 50 fe ff ff       	call   c001ae96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b046:	83 c4 2c             	add    esp,0x2c
c001b049:	0f b7 c0             	movzx  eax,ax
c001b04c:	5b                   	pop    ebx
c001b04d:	09 f0                	or     eax,esi
c001b04f:	5e                   	pop    esi
c001b050:	5f                   	pop    edi
c001b051:	5d                   	pop    ebp
c001b052:	c3                   	ret    
c001b053:	90                   	nop

c001b054 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b054:	53                   	push   ebx
c001b055:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b05a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b05f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b063:	c1 e1 10             	shl    ecx,0x10
c001b066:	25 fc 00 00 00       	and    eax,0xfc
c001b06b:	09 c1                	or     ecx,eax
c001b06d:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b072:	c1 e0 08             	shl    eax,0x8
c001b075:	09 c1                	or     ecx,eax
c001b077:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b07c:	c1 e0 0b             	shl    eax,0xb
c001b07f:	09 c1                	or     ecx,eax
c001b081:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b087:	89 c8                	mov    eax,ecx
c001b089:	ef                   	out    dx,eax
c001b08a:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b08f:	ed                   	in     eax,dx
c001b090:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001b095:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001b09a:	74 0a                	je     c001b0a6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001b09c:	0f b7 d8             	movzx  ebx,ax
c001b09f:	89 d0                	mov    eax,edx
c001b0a1:	c1 e0 10             	shl    eax,0x10
c001b0a4:	eb 05                	jmp    c001b0ab <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001b0a6:	66 31 c0             	xor    ax,ax
c001b0a9:	89 d3                	mov    ebx,edx
c001b0ab:	09 c3                	or     ebx,eax
c001b0ad:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b0b2:	89 c8                	mov    eax,ecx
c001b0b4:	ef                   	out    dx,eax
c001b0b5:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b0ba:	89 d8                	mov    eax,ebx
c001b0bc:	ef                   	out    dx,eax
c001b0bd:	5b                   	pop    ebx
c001b0be:	c3                   	ret    
c001b0bf:	90                   	nop

c001b0c0 <PCI::checkBus(unsigned char)>:
c001b0c0:	56                   	push   esi
c001b0c1:	53                   	push   ebx
c001b0c2:	31 db                	xor    ebx,ebx
c001b0c4:	51                   	push   ecx
c001b0c5:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b0ca:	52                   	push   edx
c001b0cb:	53                   	push   ebx
c001b0cc:	43                   	inc    ebx
c001b0cd:	56                   	push   esi
c001b0ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0d2:	e8 4d 03 00 00       	call   c001b424 <PCI::checkDevice(unsigned char, unsigned char)>
c001b0d7:	83 c4 10             	add    esp,0x10
c001b0da:	83 fb 20             	cmp    ebx,0x20
c001b0dd:	75 eb                	jne    c001b0ca <PCI::checkBus(unsigned char)+0xa>
c001b0df:	58                   	pop    eax
c001b0e0:	5b                   	pop    ebx
c001b0e1:	5e                   	pop    esi
c001b0e2:	c3                   	ret    
c001b0e3:	90                   	nop

c001b0e4 <PCI::foundDevice(PCIDeviceInfo)>:
c001b0e4:	55                   	push   ebp
c001b0e5:	57                   	push   edi
c001b0e6:	56                   	push   esi
c001b0e7:	53                   	push   ebx
c001b0e8:	83 ec 1c             	sub    esp,0x1c
c001b0eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b0ef:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001b0f5:	0f 84 51 01 00 00    	je     c001b24c <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b0fb:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b0ff:	66 81 f9 06 04       	cmp    cx,0x406
c001b104:	75 2c                	jne    c001b132 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001b106:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b10b:	50                   	push   eax
c001b10c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b111:	50                   	push   eax
c001b112:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b117:	50                   	push   eax
c001b118:	56                   	push   esi
c001b119:	e8 b2 fe ff ff       	call   c001afd0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b11e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b122:	0f b6 c0             	movzx  eax,al
c001b125:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b129:	83 c4 2c             	add    esp,0x2c
c001b12c:	5b                   	pop    ebx
c001b12d:	5e                   	pop    esi
c001b12e:	5f                   	pop    edi
c001b12f:	5d                   	pop    ebp
c001b130:	eb 8e                	jmp    c001b0c0 <PCI::checkBus(unsigned char)>
c001b132:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b136:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b13c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b140:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b144:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001b148:	88 d3                	mov    bl,dl
c001b14a:	85 c0                	test   eax,eax
c001b14c:	74 33                	je     c001b181 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b14e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b151:	85 d2                	test   edx,edx
c001b153:	74 28                	je     c001b17d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b155:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001b15b:	31 ef                	xor    edi,ebp
c001b15d:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001b163:	75 18                	jne    c001b17d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b165:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b169:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001b16f:	75 0c                	jne    c001b17d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b171:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001b177:	0f 84 cf 00 00 00    	je     c001b24c <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b17d:	8b 00                	mov    eax,DWORD PTR [eax]
c001b17f:	eb c9                	jmp    c001b14a <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001b181:	66 81 f9 01 06       	cmp    cx,0x601
c001b186:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001b18a:	75 18                	jne    c001b1a4 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001b18c:	83 ec 0c             	sub    esp,0xc
c001b18f:	68 58 01 00 00       	push   0x158
c001b194:	e8 8b 70 ff ff       	call   c0012224 <operator new(unsigned long)>
c001b199:	59                   	pop    ecx
c001b19a:	89 c5                	mov    ebp,eax
c001b19c:	5f                   	pop    edi
c001b19d:	68 50 1b 02 c0       	push   0xc0021b50
c001b1a2:	eb 7d                	jmp    c001b221 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001b1a4:	66 81 f9 01 01       	cmp    cx,0x101
c001b1a9:	75 60                	jne    c001b20b <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001b1ab:	83 ec 0c             	sub    esp,0xc
c001b1ae:	68 70 02 00 00       	push   0x270
c001b1b3:	e8 6c 70 ff ff       	call   c0012224 <operator new(unsigned long)>
c001b1b8:	89 04 24             	mov    DWORD PTR [esp],eax
c001b1bb:	89 c5                	mov    ebp,eax
c001b1bd:	e8 26 03 00 00       	call   c001b4e8 <IDE::IDE()>
c001b1c2:	58                   	pop    eax
c001b1c3:	5a                   	pop    edx
c001b1c4:	55                   	push   ebp
c001b1c5:	56                   	push   esi
c001b1c6:	e8 63 83 ff ff       	call   c001352e <Device::addChild(Device*)>
c001b1cb:	83 ec 1c             	sub    esp,0x1c
c001b1ce:	b9 09 00 00 00       	mov    ecx,0x9
c001b1d3:	fc                   	cld    
c001b1d4:	89 e7                	mov    edi,esp
c001b1d6:	89 de                	mov    esi,ebx
c001b1d8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b1da:	55                   	push   ebp
c001b1db:	e8 28 82 ff ff       	call   c0013408 <Device::preOpenPCI(PCIDeviceInfo)>
c001b1e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b1e3:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b1e7:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b1ef:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b1f7:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b1ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b202:	83 c4 4c             	add    esp,0x4c
c001b205:	5b                   	pop    ebx
c001b206:	5e                   	pop    esi
c001b207:	5f                   	pop    edi
c001b208:	5d                   	pop    ebp
c001b209:	ff e0                	jmp    eax
c001b20b:	83 ec 0c             	sub    esp,0xc
c001b20e:	68 58 01 00 00       	push   0x158
c001b213:	e8 0c 70 ff ff       	call   c0012224 <operator new(unsigned long)>
c001b218:	59                   	pop    ecx
c001b219:	89 c5                	mov    ebp,eax
c001b21b:	5f                   	pop    edi
c001b21c:	68 6f 1b 02 c0       	push   0xc0021b6f
c001b221:	55                   	push   ebp
c001b222:	e8 f3 85 ff ff       	call   c001381a <DriverlessDevice::DriverlessDevice(char const*)>
c001b227:	58                   	pop    eax
c001b228:	5a                   	pop    edx
c001b229:	55                   	push   ebp
c001b22a:	56                   	push   esi
c001b22b:	e8 fe 82 ff ff       	call   c001352e <Device::addChild(Device*)>
c001b230:	b9 09 00 00 00       	mov    ecx,0x9
c001b235:	fc                   	cld    
c001b236:	89 df                	mov    edi,ebx
c001b238:	89 de                	mov    esi,ebx
c001b23a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b23c:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001b240:	83 c4 2c             	add    esp,0x2c
c001b243:	5b                   	pop    ebx
c001b244:	5e                   	pop    esi
c001b245:	5f                   	pop    edi
c001b246:	5d                   	pop    ebp
c001b247:	e9 bc 81 ff ff       	jmp    c0013408 <Device::preOpenPCI(PCIDeviceInfo)>
c001b24c:	83 c4 1c             	add    esp,0x1c
c001b24f:	5b                   	pop    ebx
c001b250:	5e                   	pop    esi
c001b251:	5f                   	pop    edi
c001b252:	5d                   	pop    ebp
c001b253:	c3                   	ret    

c001b254 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b254:	55                   	push   ebp
c001b255:	57                   	push   edi
c001b256:	56                   	push   esi
c001b257:	53                   	push   ebx
c001b258:	83 ec 5c             	sub    esp,0x5c
c001b25b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b25f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b263:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001b267:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001b26c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b270:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001b274:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001b279:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b27d:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001b282:	6a 0c                	push   0xc
c001b284:	55                   	push   ebp
c001b285:	53                   	push   ebx
c001b286:	57                   	push   edi
c001b287:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001b28e:	e8 03 fc ff ff       	call   c001ae96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b293:	83 c4 0c             	add    esp,0xc
c001b296:	6a 00                	push   0x0
c001b298:	68 89 1b 02 c0       	push   0xc0021b89
c001b29d:	e8 c8 19 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001b2a2:	55                   	push   ebp
c001b2a3:	53                   	push   ebx
c001b2a4:	57                   	push   edi
c001b2a5:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b2ac:	e8 73 fc ff ff       	call   c001af24 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b2b1:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001b2b6:	83 c4 20             	add    esp,0x20
c001b2b9:	55                   	push   ebp
c001b2ba:	53                   	push   ebx
c001b2bb:	57                   	push   edi
c001b2bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b2c0:	e8 e9 fc ff ff       	call   c001afae <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b2c5:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001b2cc:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b2d0:	55                   	push   ebp
c001b2d1:	53                   	push   ebx
c001b2d2:	57                   	push   edi
c001b2d3:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b2da:	e8 b7 fb ff ff       	call   c001ae96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b2df:	0f b6 c4             	movzx  eax,ah
c001b2e2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b2e6:	83 c4 18             	add    esp,0x18
c001b2e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b2ed:	68 9d 1b 02 c0       	push   0xc0021b9d
c001b2f2:	e8 73 19 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001b2f7:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b2fb:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001b2ff:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c001b304:	83 c4 10             	add    esp,0x10
c001b307:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b30d:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001b314:	74 6c                	je     c001b382 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b316:	31 f6                	xor    esi,esi
c001b318:	8b 15 68 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022e68
c001b31e:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b324:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001b32a:	7e 56                	jle    c001b382 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b32c:	8d 14 f2             	lea    edx,[edx+esi*8]
c001b32f:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001b336:	39 cb                	cmp    ebx,ecx
c001b338:	75 45                	jne    c001b37f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b33a:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001b341:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001b345:	75 38                	jne    c001b37f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b347:	83 ec 0c             	sub    esp,0xc
c001b34a:	68 ac 1b 02 c0       	push   0xc0021bac
c001b34f:	e8 16 19 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001b354:	8b 15 68 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022e68
c001b35a:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b360:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001b368:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001b36c:	52                   	push   edx
c001b36d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b371:	53                   	push   ebx
c001b372:	68 d1 1b 02 c0       	push   0xc0021bd1
c001b377:	e8 ee 18 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001b37c:	83 c4 20             	add    esp,0x20
c001b37f:	46                   	inc    esi
c001b380:	eb 96                	jmp    c001b318 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001b382:	31 d2                	xor    edx,edx
c001b384:	83 ec 0c             	sub    esp,0xc
c001b387:	55                   	push   ebp
c001b388:	53                   	push   ebx
c001b389:	57                   	push   edi
c001b38a:	52                   	push   edx
c001b38b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b38f:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b396:	e8 59 fc ff ff       	call   c001aff4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b39b:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001b39f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b3a3:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b3a7:	42                   	inc    edx
c001b3a8:	83 c4 20             	add    esp,0x20
c001b3ab:	83 fa 06             	cmp    edx,0x6
c001b3ae:	75 d4                	jne    c001b384 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001b3b0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b3b4:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001b3b8:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001b3bc:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001b3c0:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b3c4:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b3c8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b3cd:	86 e0                	xchg   al,ah
c001b3cf:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001b3d4:	55                   	push   ebp
c001b3d5:	53                   	push   ebx
c001b3d6:	57                   	push   edi
c001b3d7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b3db:	e8 88 fb ff ff       	call   c001af68 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b3e0:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b3e4:	55                   	push   ebp
c001b3e5:	53                   	push   ebx
c001b3e6:	57                   	push   edi
c001b3e7:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b3ee:	e8 eb fa ff ff       	call   c001aede <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b3f3:	83 ec 0c             	sub    esp,0xc
c001b3f6:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001b3fb:	b9 09 00 00 00       	mov    ecx,0x9
c001b400:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001b404:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001b408:	fc                   	cld    
c001b409:	89 e7                	mov    edi,esp
c001b40b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b40d:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001b414:	e8 cb fc ff ff       	call   c001b0e4 <PCI::foundDevice(PCIDeviceInfo)>
c001b419:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b41f:	5b                   	pop    ebx
c001b420:	5e                   	pop    esi
c001b421:	5f                   	pop    edi
c001b422:	5d                   	pop    ebp
c001b423:	c3                   	ret    

c001b424 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b424:	55                   	push   ebp
c001b425:	57                   	push   edi
c001b426:	56                   	push   esi
c001b427:	53                   	push   ebx
c001b428:	83 ec 0c             	sub    esp,0xc
c001b42b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b42f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b434:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b439:	6a 00                	push   0x0
c001b43b:	56                   	push   esi
c001b43c:	57                   	push   edi
c001b43d:	55                   	push   ebp
c001b43e:	e8 9b fa ff ff       	call   c001aede <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b443:	6a 00                	push   0x0
c001b445:	56                   	push   esi
c001b446:	57                   	push   edi
c001b447:	55                   	push   ebp
c001b448:	e8 07 fe ff ff       	call   c001b254 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b44d:	83 c4 20             	add    esp,0x20
c001b450:	6a 00                	push   0x0
c001b452:	56                   	push   esi
c001b453:	57                   	push   edi
c001b454:	55                   	push   ebp
c001b455:	e8 a6 fa ff ff       	call   c001af00 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b45a:	83 c4 10             	add    esp,0x10
c001b45d:	84 c0                	test   al,al
c001b45f:	79 27                	jns    c001b488 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b461:	bb 01 00 00 00       	mov    ebx,0x1
c001b466:	53                   	push   ebx
c001b467:	56                   	push   esi
c001b468:	57                   	push   edi
c001b469:	55                   	push   ebp
c001b46a:	e8 6f fa ff ff       	call   c001aede <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b46f:	83 c4 10             	add    esp,0x10
c001b472:	66 40                	inc    ax
c001b474:	74 0c                	je     c001b482 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001b476:	53                   	push   ebx
c001b477:	56                   	push   esi
c001b478:	57                   	push   edi
c001b479:	55                   	push   ebp
c001b47a:	e8 d5 fd ff ff       	call   c001b254 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b47f:	83 c4 10             	add    esp,0x10
c001b482:	43                   	inc    ebx
c001b483:	83 fb 08             	cmp    ebx,0x8
c001b486:	75 de                	jne    c001b466 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b488:	83 c4 0c             	add    esp,0xc
c001b48b:	5b                   	pop    ebx
c001b48c:	5e                   	pop    esi
c001b48d:	5f                   	pop    edi
c001b48e:	5d                   	pop    ebp
c001b48f:	c3                   	ret    

c001b490 <PCI::detect()>:
c001b490:	56                   	push   esi
c001b491:	53                   	push   ebx
c001b492:	53                   	push   ebx
c001b493:	31 db                	xor    ebx,ebx
c001b495:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b499:	6a 00                	push   0x0
c001b49b:	6a 00                	push   0x0
c001b49d:	6a 00                	push   0x0
c001b49f:	56                   	push   esi
c001b4a0:	e8 5b fa ff ff       	call   c001af00 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b4a5:	83 c4 10             	add    esp,0x10
c001b4a8:	a8 80                	test   al,0x80
c001b4aa:	75 21                	jne    c001b4cd <PCI::detect()+0x3d>
c001b4ac:	51                   	push   ecx
c001b4ad:	51                   	push   ecx
c001b4ae:	6a 00                	push   0x0
c001b4b0:	56                   	push   esi
c001b4b1:	e8 0a fc ff ff       	call   c001b0c0 <PCI::checkBus(unsigned char)>
c001b4b6:	83 c4 10             	add    esp,0x10
c001b4b9:	eb 24                	jmp    c001b4df <PCI::detect()+0x4f>
c001b4bb:	52                   	push   edx
c001b4bc:	52                   	push   edx
c001b4bd:	53                   	push   ebx
c001b4be:	43                   	inc    ebx
c001b4bf:	56                   	push   esi
c001b4c0:	e8 fb fb ff ff       	call   c001b0c0 <PCI::checkBus(unsigned char)>
c001b4c5:	83 c4 10             	add    esp,0x10
c001b4c8:	83 fb 08             	cmp    ebx,0x8
c001b4cb:	74 12                	je     c001b4df <PCI::detect()+0x4f>
c001b4cd:	53                   	push   ebx
c001b4ce:	6a 00                	push   0x0
c001b4d0:	6a 00                	push   0x0
c001b4d2:	56                   	push   esi
c001b4d3:	e8 06 fa ff ff       	call   c001aede <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b4d8:	83 c4 10             	add    esp,0x10
c001b4db:	66 40                	inc    ax
c001b4dd:	74 dc                	je     c001b4bb <PCI::detect()+0x2b>
c001b4df:	58                   	pop    eax
c001b4e0:	5b                   	pop    ebx
c001b4e1:	5e                   	pop    esi
c001b4e2:	c3                   	ret    
c001b4e3:	90                   	nop

c001b4e4 <IDE::close(int, int, void*)>:
c001b4e4:	83 c8 ff             	or     eax,0xffffffff
c001b4e7:	c3                   	ret    

c001b4e8 <IDE::IDE()>:
c001b4e8:	83 ec 0c             	sub    esp,0xc
c001b4eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4ef:	83 ec 08             	sub    esp,0x8
c001b4f2:	68 18 1c 02 c0       	push   0xc0021c18
c001b4f7:	50                   	push   eax
c001b4f8:	e8 b3 83 ff ff       	call   c00138b0 <HardDiskController::HardDiskController(char const*)>
c001b4fd:	83 c4 10             	add    esp,0x10
c001b500:	ba 58 1e 02 c0       	mov    edx,0xc0021e58
c001b505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b509:	89 10                	mov    DWORD PTR [eax],edx
c001b50b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b50f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b516:	90                   	nop
c001b517:	83 c4 0c             	add    esp,0xc
c001b51a:	c3                   	ret    
c001b51b:	90                   	nop

c001b51c <IDE::prepareInterrupt(unsigned char)>:
c001b51c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b521:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b525:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b52d:	c3                   	ret    

c001b52e <selectDrive(unsigned char, unsigned char)>:
c001b52e:	c3                   	ret    
c001b52f:	90                   	nop

c001b530 <IDE::getBase(unsigned char)>:
c001b530:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b535:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b539:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b541:	c3                   	ret    

c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b542:	55                   	push   ebp
c001b543:	57                   	push   edi
c001b544:	56                   	push   esi
c001b545:	53                   	push   ebx
c001b546:	83 ec 1c             	sub    esp,0x1c
c001b549:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b54d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b551:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b554:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b558:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b55c:	80 f9 03             	cmp    cl,0x3
c001b55f:	77 51                	ja     c001b5b2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001b561:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b565:	0f b6 f2             	movzx  esi,dl
c001b568:	0f b6 db             	movzx  ebx,bl
c001b56b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b56e:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001b572:	83 ca 80             	or     edx,0xffffff80
c001b575:	0f b6 d2             	movzx  edx,dl
c001b578:	52                   	push   edx
c001b579:	6a 0c                	push   0xc
c001b57b:	56                   	push   esi
c001b57c:	57                   	push   edi
c001b57d:	e8 c0 ff ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b582:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b58b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b58f:	ee                   	out    dx,al
c001b590:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001b595:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001b599:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001b59d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b5a1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b5a9:	83 c4 2c             	add    esp,0x2c
c001b5ac:	5b                   	pop    ebx
c001b5ad:	5e                   	pop    esi
c001b5ae:	5f                   	pop    edi
c001b5af:	5d                   	pop    ebp
c001b5b0:	eb 90                	jmp    c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b5b2:	80 fb 07             	cmp    bl,0x7
c001b5b5:	77 12                	ja     c001b5c9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001b5b7:	0f b6 d2             	movzx  edx,dl
c001b5ba:	0f b6 db             	movzx  ebx,bl
c001b5bd:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001b5c5:	89 da                	mov    edx,ebx
c001b5c7:	eb 2f                	jmp    c001b5f8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001b5c9:	80 fb 0d             	cmp    bl,0xd
c001b5cc:	77 13                	ja     c001b5e1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001b5ce:	0f b6 d2             	movzx  edx,dl
c001b5d1:	0f b6 db             	movzx  ebx,bl
c001b5d4:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001b5db:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b5df:	eb 17                	jmp    c001b5f8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001b5e1:	80 fb 15             	cmp    bl,0x15
c001b5e4:	77 13                	ja     c001b5f9 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b5e6:	0f b6 d2             	movzx  edx,dl
c001b5e9:	0f b6 db             	movzx  ebx,bl
c001b5ec:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001b5f4:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b5f8:	ee                   	out    dx,al
c001b5f9:	83 c4 1c             	add    esp,0x1c
c001b5fc:	5b                   	pop    ebx
c001b5fd:	5e                   	pop    esi
c001b5fe:	5f                   	pop    edi
c001b5ff:	5d                   	pop    ebp
c001b600:	c3                   	ret    
c001b601:	90                   	nop

c001b602 <IDE::read(unsigned char, unsigned char)>:
c001b602:	55                   	push   ebp
c001b603:	57                   	push   edi
c001b604:	56                   	push   esi
c001b605:	53                   	push   ebx
c001b606:	83 ec 1c             	sub    esp,0x1c
c001b609:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b60d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b611:	8d 43 f8             	lea    eax,[ebx-0x8]
c001b614:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b618:	3c 03                	cmp    al,0x3
c001b61a:	77 43                	ja     c001b65f <IDE::read(unsigned char, unsigned char)+0x5d>
c001b61c:	0f b6 f2             	movzx  esi,dl
c001b61f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b622:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001b626:	83 c8 80             	or     eax,0xffffff80
c001b629:	0f b6 c0             	movzx  eax,al
c001b62c:	50                   	push   eax
c001b62d:	6a 0c                	push   0xc
c001b62f:	56                   	push   esi
c001b630:	57                   	push   edi
c001b631:	e8 0c ff ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b636:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001b63b:	0f b6 c3             	movzx  eax,bl
c001b63e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001b642:	ec                   	in     al,dx
c001b643:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b647:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b64c:	52                   	push   edx
c001b64d:	6a 0c                	push   0xc
c001b64f:	56                   	push   esi
c001b650:	57                   	push   edi
c001b651:	e8 ec fe ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b656:	83 c4 20             	add    esp,0x20
c001b659:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b65d:	eb 49                	jmp    c001b6a8 <IDE::read(unsigned char, unsigned char)+0xa6>
c001b65f:	80 fb 07             	cmp    bl,0x7
c001b662:	77 12                	ja     c001b676 <IDE::read(unsigned char, unsigned char)+0x74>
c001b664:	0f b6 d2             	movzx  edx,dl
c001b667:	0f b6 c3             	movzx  eax,bl
c001b66a:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001b672:	89 c2                	mov    edx,eax
c001b674:	eb 31                	jmp    c001b6a7 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b676:	80 fb 0d             	cmp    bl,0xd
c001b679:	77 13                	ja     c001b68e <IDE::read(unsigned char, unsigned char)+0x8c>
c001b67b:	0f b6 d2             	movzx  edx,dl
c001b67e:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001b685:	0f b6 d3             	movzx  edx,bl
c001b688:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b68c:	eb 19                	jmp    c001b6a7 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b68e:	31 c0                	xor    eax,eax
c001b690:	80 fb 15             	cmp    bl,0x15
c001b693:	77 13                	ja     c001b6a8 <IDE::read(unsigned char, unsigned char)+0xa6>
c001b695:	0f b6 d2             	movzx  edx,dl
c001b698:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001b6a0:	0f b6 d3             	movzx  edx,bl
c001b6a3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b6a7:	ec                   	in     al,dx
c001b6a8:	83 c4 1c             	add    esp,0x1c
c001b6ab:	5b                   	pop    ebx
c001b6ac:	5e                   	pop    esi
c001b6ad:	5f                   	pop    edi
c001b6ae:	5d                   	pop    ebp
c001b6af:	c3                   	ret    

c001b6b0 <IDE::waitInterrupt(unsigned char)>:
c001b6b0:	55                   	push   ebp
c001b6b1:	57                   	push   edi
c001b6b2:	56                   	push   esi
c001b6b3:	53                   	push   ebx
c001b6b4:	31 db                	xor    ebx,ebx
c001b6b6:	83 ec 0c             	sub    esp,0xc
c001b6b9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b6bd:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b6c2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b6ca:	89 e8                	mov    eax,ebp
c001b6cc:	84 c0                	test   al,al
c001b6ce:	75 34                	jne    c001b704 <IDE::waitInterrupt(unsigned char)+0x54>
c001b6d0:	52                   	push   edx
c001b6d1:	6a 0c                	push   0xc
c001b6d3:	56                   	push   esi
c001b6d4:	57                   	push   edi
c001b6d5:	e8 28 ff ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001b6da:	83 c4 10             	add    esp,0x10
c001b6dd:	a8 01                	test   al,0x1
c001b6df:	75 2b                	jne    c001b70c <IDE::waitInterrupt(unsigned char)+0x5c>
c001b6e1:	f6 c3 04             	test   bl,0x4
c001b6e4:	75 16                	jne    c001b6fc <IDE::waitInterrupt(unsigned char)+0x4c>
c001b6e6:	83 fb 32             	cmp    ebx,0x32
c001b6e9:	7e 11                	jle    c001b6fc <IDE::waitInterrupt(unsigned char)+0x4c>
c001b6eb:	50                   	push   eax
c001b6ec:	50                   	push   eax
c001b6ed:	6a 00                	push   0x0
c001b6ef:	68 80 96 98 00       	push   0x989680
c001b6f4:	e8 cc 30 ff ff       	call   c000e7c5 <nanoSleep(unsigned long long)>
c001b6f9:	83 c4 10             	add    esp,0x10
c001b6fc:	83 fb 3c             	cmp    ebx,0x3c
c001b6ff:	74 0b                	je     c001b70c <IDE::waitInterrupt(unsigned char)+0x5c>
c001b701:	43                   	inc    ebx
c001b702:	eb be                	jmp    c001b6c2 <IDE::waitInterrupt(unsigned char)+0x12>
c001b704:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b70c:	83 c4 0c             	add    esp,0xc
c001b70f:	89 e8                	mov    eax,ebp
c001b711:	5b                   	pop    ebx
c001b712:	5e                   	pop    esi
c001b713:	5f                   	pop    edi
c001b714:	5d                   	pop    ebp
c001b715:	c3                   	ret    

c001b716 <ideChannel0IRQHandler(regs*, void*)>:
c001b716:	83 ec 10             	sub    esp,0x10
c001b719:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b71d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b724:	6a 07                	push   0x7
c001b726:	6a 00                	push   0x0
c001b728:	50                   	push   eax
c001b729:	e8 d4 fe ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001b72e:	83 c4 1c             	add    esp,0x1c
c001b731:	c3                   	ret    

c001b732 <ideChannel1IRQHandler(regs*, void*)>:
c001b732:	83 ec 10             	sub    esp,0x10
c001b735:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b739:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b740:	6a 07                	push   0x7
c001b742:	6a 01                	push   0x1
c001b744:	50                   	push   eax
c001b745:	e8 b8 fe ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001b74a:	83 c4 1c             	add    esp,0x1c
c001b74d:	c3                   	ret    

c001b74e <IDE::enableIRQs(unsigned char, bool)>:
c001b74e:	57                   	push   edi
c001b74f:	56                   	push   esi
c001b750:	be 04 00 00 00       	mov    esi,0x4
c001b755:	53                   	push   ebx
c001b756:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b75b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b75f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001b764:	0f 94 c0             	sete   al
c001b767:	d1 e0                	shl    eax,1
c001b769:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001b770:	0f b6 c0             	movzx  eax,al
c001b773:	50                   	push   eax
c001b774:	6a 0c                	push   0xc
c001b776:	57                   	push   edi
c001b777:	53                   	push   ebx
c001b778:	e8 c5 fd ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b77d:	83 c4 10             	add    esp,0x10
c001b780:	50                   	push   eax
c001b781:	6a 0c                	push   0xc
c001b783:	57                   	push   edi
c001b784:	53                   	push   ebx
c001b785:	e8 78 fe ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001b78a:	83 c4 10             	add    esp,0x10
c001b78d:	4e                   	dec    esi
c001b78e:	75 f0                	jne    c001b780 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001b790:	5b                   	pop    ebx
c001b791:	5e                   	pop    esi
c001b792:	5f                   	pop    edi
c001b793:	c3                   	ret    

c001b794 <IDE::open(int, int, void*)>:
c001b794:	55                   	push   ebp
c001b795:	57                   	push   edi
c001b796:	56                   	push   esi
c001b797:	53                   	push   ebx
c001b798:	83 ec 1c             	sub    esp,0x1c
c001b79b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b79f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001b7a8:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001b7b1:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001b7b8:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001b7bf:	0f 85 b0 02 00 00    	jne    c001ba75 <IDE::open(int, int, void*)+0x2e1>
c001b7c5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001b7cb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001b7cf:	83 e0 7f             	and    eax,0x7f
c001b7d2:	3c 05                	cmp    al,0x5
c001b7d4:	74 04                	je     c001b7da <IDE::open(int, int, void*)+0x46>
c001b7d6:	3c 0f                	cmp    al,0xf
c001b7d8:	75 32                	jne    c001b80c <IDE::open(int, int, void*)+0x78>
c001b7da:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001b7e0:	83 e0 fc             	and    eax,0xfffffffc
c001b7e3:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b7ea:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001b7f0:	83 e0 fc             	and    eax,0xfffffffc
c001b7f3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b7fa:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001b800:	83 e0 fc             	and    eax,0xfffffffc
c001b803:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b80a:	eb 14                	jmp    c001b820 <IDE::open(int, int, void*)+0x8c>
c001b80c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001b816:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001b820:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001b827:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001b82e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b832:	89 c6                	mov    esi,eax
c001b834:	bf f8 0c 00 00       	mov    edi,0xcf8
c001b839:	c1 e6 10             	shl    esi,0x10
c001b83c:	89 e8                	mov    eax,ebp
c001b83e:	89 fa                	mov    edx,edi
c001b840:	c1 e0 0b             	shl    eax,0xb
c001b843:	09 f0                	or     eax,esi
c001b845:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001b84c:	c1 e6 08             	shl    esi,0x8
c001b84f:	09 c6                	or     esi,eax
c001b851:	89 f0                	mov    eax,esi
c001b853:	0d 08 00 00 80       	or     eax,0x80000008
c001b858:	ef                   	out    dx,eax
c001b859:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001b85e:	89 ca                	mov    edx,ecx
c001b860:	ed                   	in     eax,dx
c001b861:	c1 e8 10             	shr    eax,0x10
c001b864:	3d ff ff 00 00       	cmp    eax,0xffff
c001b869:	0f 84 f5 00 00 00    	je     c001b964 <IDE::open(int, int, void*)+0x1d0>
c001b86f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001b875:	89 fa                	mov    edx,edi
c001b877:	89 f0                	mov    eax,esi
c001b879:	ef                   	out    dx,eax
c001b87a:	b0 fe                	mov    al,0xfe
c001b87c:	89 ca                	mov    edx,ecx
c001b87e:	ee                   	out    dx,al
c001b87f:	89 f0                	mov    eax,esi
c001b881:	89 fa                	mov    edx,edi
c001b883:	ef                   	out    dx,eax
c001b884:	89 ca                	mov    edx,ecx
c001b886:	ed                   	in     eax,dx
c001b887:	3c fe                	cmp    al,0xfe
c001b889:	0f 85 a9 00 00 00    	jne    c001b938 <IDE::open(int, int, void*)+0x1a4>
c001b88f:	8b 15 68 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022e68
c001b895:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001b89c:	74 33                	je     c001b8d1 <IDE::open(int, int, void*)+0x13d>
c001b89e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001b8a4:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001b8a8:	40                   	inc    eax
c001b8a9:	83 ec 0c             	sub    esp,0xc
c001b8ac:	0f b6 c0             	movzx  eax,al
c001b8af:	50                   	push   eax
c001b8b0:	55                   	push   ebp
c001b8b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b8b5:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001b8bb:	51                   	push   ecx
c001b8bc:	e8 05 ad ff ff       	call   c00165c6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001b8c1:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001b8c6:	83 c4 1c             	add    esp,0x1c
c001b8c9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b8cf:	eb 0a                	jmp    c001b8db <IDE::open(int, int, void*)+0x147>
c001b8d1:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001b8db:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001b8e2:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001b8e9:	c1 e1 10             	shl    ecx,0x10
c001b8ec:	c1 e0 08             	shl    eax,0x8
c001b8ef:	bf f8 0c 00 00       	mov    edi,0xcf8
c001b8f4:	09 c1                	or     ecx,eax
c001b8f6:	89 fa                	mov    edx,edi
c001b8f8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001b8ff:	c1 e0 0b             	shl    eax,0xb
c001b902:	09 c1                	or     ecx,eax
c001b904:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001b90a:	89 c8                	mov    eax,ecx
c001b90c:	ef                   	out    dx,eax
c001b90d:	be fc 0c 00 00       	mov    esi,0xcfc
c001b912:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001b918:	89 f2                	mov    edx,esi
c001b91a:	ee                   	out    dx,al
c001b91b:	89 c8                	mov    eax,ecx
c001b91d:	89 fa                	mov    edx,edi
c001b91f:	ef                   	out    dx,eax
c001b920:	89 f2                	mov    edx,esi
c001b922:	ed                   	in     eax,dx
c001b923:	0f b6 c0             	movzx  eax,al
c001b926:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001b92c:	74 46                	je     c001b974 <IDE::open(int, int, void*)+0x1e0>
c001b92e:	83 ec 0c             	sub    esp,0xc
c001b931:	68 30 1c 02 c0       	push   0xc0021c30
c001b936:	eb 34                	jmp    c001b96c <IDE::open(int, int, void*)+0x1d8>
c001b938:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001b941:	75 17                	jne    c001b95a <IDE::open(int, int, void*)+0x1c6>
c001b943:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001b948:	74 07                	je     c001b951 <IDE::open(int, int, void*)+0x1bd>
c001b94a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001b94f:	75 09                	jne    c001b95a <IDE::open(int, int, void*)+0x1c6>
c001b951:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b958:	eb 1a                	jmp    c001b974 <IDE::open(int, int, void*)+0x1e0>
c001b95a:	83 ec 0c             	sub    esp,0xc
c001b95d:	68 38 1c 02 c0       	push   0xc0021c38
c001b962:	eb 08                	jmp    c001b96c <IDE::open(int, int, void*)+0x1d8>
c001b964:	83 ec 0c             	sub    esp,0xc
c001b967:	68 69 1c 02 c0       	push   0xc0021c69
c001b96c:	e8 17 14 ff ff       	call   c000cd88 <panic(char const*)>
c001b971:	83 c4 10             	add    esp,0x10
c001b974:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001b97b:	79 1a                	jns    c001b997 <IDE::open(int, int, void*)+0x203>
c001b97d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b983:	83 e0 fc             	and    eax,0xfffffffc
c001b986:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b98d:	83 c0 08             	add    eax,0x8
c001b990:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b997:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b99d:	89 c2                	mov    edx,eax
c001b99f:	83 e2 0f             	and    edx,0xf
c001b9a2:	66 83 fa 08          	cmp    dx,0x8
c001b9a6:	75 0a                	jne    c001b9b2 <IDE::open(int, int, void*)+0x21e>
c001b9a8:	83 e8 02             	sub    eax,0x2
c001b9ab:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b9b2:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b9b8:	89 c2                	mov    edx,eax
c001b9ba:	83 e2 0f             	and    edx,0xf
c001b9bd:	66 83 fa 08          	cmp    dx,0x8
c001b9c1:	75 0a                	jne    c001b9cd <IDE::open(int, int, void*)+0x239>
c001b9c3:	83 e8 02             	sub    eax,0x2
c001b9c6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b9cd:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b9d4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b9db:	89 d0                	mov    eax,edx
c001b9dd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b9e0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b9e4:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b9e8:	8d 4a 01             	lea    ecx,[edx+0x1]
c001b9eb:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001b9f0:	0f b6 c9             	movzx  ecx,cl
c001b9f3:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b9fa:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b9fd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ba01:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ba05:	8d 50 02             	lea    edx,[eax+0x2]
c001ba08:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ba0d:	0f b6 d2             	movzx  edx,dl
c001ba10:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ba16:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ba19:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ba1d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ba21:	8d 48 03             	lea    ecx,[eax+0x3]
c001ba24:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ba29:	0f b6 c9             	movzx  ecx,cl
c001ba2c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ba32:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ba35:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ba39:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001ba3d:	8d 50 04             	lea    edx,[eax+0x4]
c001ba40:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001ba46:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ba4b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001ba52:	66 85 f6             	test   si,si
c001ba55:	74 3e                	je     c001ba95 <IDE::open(int, int, void*)+0x301>
c001ba57:	0f b6 d2             	movzx  edx,dl
c001ba5a:	83 c0 05             	add    eax,0x5
c001ba5d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ba60:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ba64:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001ba68:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ba6e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ba73:	eb 20                	jmp    c001ba95 <IDE::open(int, int, void*)+0x301>
c001ba75:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ba7f:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ba89:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ba90:	e9 02 ff ff ff       	jmp    c001b997 <IDE::open(int, int, void*)+0x203>
c001ba95:	52                   	push   edx
c001ba96:	52                   	push   edx
c001ba97:	6a 00                	push   0x0
c001ba99:	53                   	push   ebx
c001ba9a:	e8 7d fa ff ff       	call   c001b51c <IDE::prepareInterrupt(unsigned char)>
c001ba9f:	59                   	pop    ecx
c001baa0:	5e                   	pop    esi
c001baa1:	6a 01                	push   0x1
c001baa3:	53                   	push   ebx
c001baa4:	e8 73 fa ff ff       	call   c001b51c <IDE::prepareInterrupt(unsigned char)>
c001baa9:	83 c4 0c             	add    esp,0xc
c001baac:	6a 00                	push   0x0
c001baae:	6a 00                	push   0x0
c001bab0:	53                   	push   ebx
c001bab1:	e8 98 fc ff ff       	call   c001b74e <IDE::enableIRQs(unsigned char, bool)>
c001bab6:	83 c4 0c             	add    esp,0xc
c001bab9:	6a 00                	push   0x0
c001babb:	6a 01                	push   0x1
c001babd:	53                   	push   ebx
c001babe:	e8 8b fc ff ff       	call   c001b74e <IDE::enableIRQs(unsigned char, bool)>
c001bac3:	83 c4 10             	add    esp,0x10
c001bac6:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bacd:	74 40                	je     c001bb0f <IDE::open(int, int, void*)+0x37b>
c001bacf:	83 ec 0c             	sub    esp,0xc
c001bad2:	68 93 1c 02 c0       	push   0xc0021c93
c001bad7:	e8 8e 11 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001badc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001badf:	6a 01                	push   0x1
c001bae1:	68 16 b7 01 c0       	push   0xc001b716
c001bae6:	6a 0e                	push   0xe
c001bae8:	53                   	push   ebx
c001bae9:	e8 94 79 ff ff       	call   c0013482 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001baee:	83 c4 14             	add    esp,0x14
c001baf1:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001baf7:	53                   	push   ebx
c001baf8:	6a 01                	push   0x1
c001bafa:	68 32 b7 01 c0       	push   0xc001b732
c001baff:	6a 0f                	push   0xf
c001bb01:	53                   	push   ebx
c001bb02:	e8 7b 79 ff ff       	call   c0013482 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bb07:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bb0d:	eb 4a                	jmp    c001bb59 <IDE::open(int, int, void*)+0x3c5>
c001bb0f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bb19:	50                   	push   eax
c001bb1a:	6a 0f                	push   0xf
c001bb1c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bb22:	68 af 1c 02 c0       	push   0xc0021caf
c001bb27:	e8 3e 11 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001bb2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb2f:	6a 00                	push   0x0
c001bb31:	68 16 b7 01 c0       	push   0xc001b716
c001bb36:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bb3c:	53                   	push   ebx
c001bb3d:	e8 40 79 ff ff       	call   c0013482 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bb42:	83 c4 14             	add    esp,0x14
c001bb45:	53                   	push   ebx
c001bb46:	6a 00                	push   0x0
c001bb48:	68 32 b7 01 c0       	push   0xc001b732
c001bb4d:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bb53:	53                   	push   ebx
c001bb54:	e8 29 79 ff ff       	call   c0013482 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bb59:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb5b:	83 c4 20             	add    esp,0x20
c001bb5e:	83 ec 0c             	sub    esp,0xc
c001bb61:	53                   	push   ebx
c001bb62:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001bb65:	83 c4 0c             	add    esp,0xc
c001bb68:	6a 07                	push   0x7
c001bb6a:	6a 00                	push   0x0
c001bb6c:	53                   	push   ebx
c001bb6d:	e8 90 fa ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001bb72:	83 c4 0c             	add    esp,0xc
c001bb75:	6a 07                	push   0x7
c001bb77:	6a 01                	push   0x1
c001bb79:	53                   	push   ebx
c001bb7a:	e8 83 fa ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001bb7f:	83 c4 0c             	add    esp,0xc
c001bb82:	6a 01                	push   0x1
c001bb84:	6a 00                	push   0x0
c001bb86:	53                   	push   ebx
c001bb87:	e8 c2 fb ff ff       	call   c001b74e <IDE::enableIRQs(unsigned char, bool)>
c001bb8c:	83 c4 0c             	add    esp,0xc
c001bb8f:	6a 01                	push   0x1
c001bb91:	6a 01                	push   0x1
c001bb93:	53                   	push   ebx
c001bb94:	e8 b5 fb ff ff       	call   c001b74e <IDE::enableIRQs(unsigned char, bool)>
c001bb99:	83 c4 2c             	add    esp,0x2c
c001bb9c:	31 c0                	xor    eax,eax
c001bb9e:	5b                   	pop    ebx
c001bb9f:	5e                   	pop    esi
c001bba0:	5f                   	pop    edi
c001bba1:	5d                   	pop    ebp
c001bba2:	c3                   	ret    
c001bba3:	90                   	nop

c001bba4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001bba4:	55                   	push   ebp
c001bba5:	57                   	push   edi
c001bba6:	56                   	push   esi
c001bba7:	53                   	push   ebx
c001bba8:	83 ec 1c             	sub    esp,0x1c
c001bbab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bbaf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bbb3:	8d 50 f8             	lea    edx,[eax-0x8]
c001bbb6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bbba:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001bbbe:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bbc2:	80 fa 03             	cmp    dl,0x3
c001bbc5:	77 5d                	ja     c001bc24 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001bbc7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bbcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bbcf:	0f b6 db             	movzx  ebx,bl
c001bbd2:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001bbd5:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001bbd9:	83 ca 80             	or     edx,0xffffff80
c001bbdc:	0f b6 d2             	movzx  edx,dl
c001bbdf:	52                   	push   edx
c001bbe0:	6a 0c                	push   0xc
c001bbe2:	53                   	push   ebx
c001bbe3:	56                   	push   esi
c001bbe4:	e8 59 f9 ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bbe9:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001bbee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bbf2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bbf6:	0f b6 c0             	movzx  eax,al
c001bbf9:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001bbfd:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bbff:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bc04:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001bc08:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bc0c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bc10:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bc18:	83 c4 2c             	add    esp,0x2c
c001bc1b:	5b                   	pop    ebx
c001bc1c:	5e                   	pop    esi
c001bc1d:	5f                   	pop    edi
c001bc1e:	5d                   	pop    ebp
c001bc1f:	e9 1e f9 ff ff       	jmp    c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc24:	3c 07                	cmp    al,0x7
c001bc26:	77 10                	ja     c001bc38 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001bc28:	0f b6 db             	movzx  ebx,bl
c001bc2b:	0f b6 d0             	movzx  edx,al
c001bc2e:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001bc36:	eb 2d                	jmp    c001bc65 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001bc38:	3c 0d                	cmp    al,0xd
c001bc3a:	77 13                	ja     c001bc4f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001bc3c:	0f b6 db             	movzx  ebx,bl
c001bc3f:	0f b6 c0             	movzx  eax,al
c001bc42:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001bc49:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001bc4d:	eb 16                	jmp    c001bc65 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001bc4f:	3c 15                	cmp    al,0x15
c001bc51:	77 14                	ja     c001bc67 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001bc53:	0f b6 db             	movzx  ebx,bl
c001bc56:	0f b6 c0             	movzx  eax,al
c001bc59:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001bc61:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001bc65:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bc67:	83 c4 1c             	add    esp,0x1c
c001bc6a:	5b                   	pop    ebx
c001bc6b:	5e                   	pop    esi
c001bc6c:	5f                   	pop    edi
c001bc6d:	5d                   	pop    ebp
c001bc6e:	c3                   	ret    
c001bc6f:	90                   	nop

c001bc70 <IDE::detect()>:
c001bc70:	55                   	push   ebp
c001bc71:	57                   	push   edi
c001bc72:	56                   	push   esi
c001bc73:	53                   	push   ebx
c001bc74:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bc7a:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001bc81:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001bc88:	0f 85 be 02 00 00    	jne    c001bf4c <IDE::detect()+0x2dc>
c001bc8e:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001bc95:	31 f6                	xor    esi,esi
c001bc97:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bc9f:	31 ed                	xor    ebp,ebp
c001bca1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bca5:	c1 e0 06             	shl    eax,0x6
c001bca8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001bcb0:	89 e8                	mov    eax,ebp
c001bcb2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bcb6:	c1 e0 04             	shl    eax,0x4
c001bcb9:	83 c8 a0             	or     eax,0xffffffa0
c001bcbc:	0f b6 c0             	movzx  eax,al
c001bcbf:	50                   	push   eax
c001bcc0:	6a 06                	push   0x6
c001bcc2:	56                   	push   esi
c001bcc3:	53                   	push   ebx
c001bcc4:	e8 79 f8 ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcc9:	83 c4 0c             	add    esp,0xc
c001bccc:	6a 0c                	push   0xc
c001bcce:	56                   	push   esi
c001bccf:	53                   	push   ebx
c001bcd0:	e8 2d f9 ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001bcd5:	83 c4 0c             	add    esp,0xc
c001bcd8:	6a 0c                	push   0xc
c001bcda:	56                   	push   esi
c001bcdb:	53                   	push   ebx
c001bcdc:	e8 21 f9 ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001bce1:	83 c4 0c             	add    esp,0xc
c001bce4:	6a 0c                	push   0xc
c001bce6:	56                   	push   esi
c001bce7:	53                   	push   ebx
c001bce8:	e8 15 f9 ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001bced:	83 c4 0c             	add    esp,0xc
c001bcf0:	6a 0c                	push   0xc
c001bcf2:	56                   	push   esi
c001bcf3:	53                   	push   ebx
c001bcf4:	e8 09 f9 ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001bcf9:	68 ec 00 00 00       	push   0xec
c001bcfe:	6a 07                	push   0x7
c001bd00:	56                   	push   esi
c001bd01:	53                   	push   ebx
c001bd02:	e8 3b f8 ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd07:	83 c4 1c             	add    esp,0x1c
c001bd0a:	6a 0c                	push   0xc
c001bd0c:	56                   	push   esi
c001bd0d:	53                   	push   ebx
c001bd0e:	e8 ef f8 ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001bd13:	83 c4 0c             	add    esp,0xc
c001bd16:	6a 0c                	push   0xc
c001bd18:	56                   	push   esi
c001bd19:	53                   	push   ebx
c001bd1a:	e8 e3 f8 ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001bd1f:	83 c4 0c             	add    esp,0xc
c001bd22:	6a 0c                	push   0xc
c001bd24:	56                   	push   esi
c001bd25:	53                   	push   ebx
c001bd26:	e8 d7 f8 ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001bd2b:	83 c4 0c             	add    esp,0xc
c001bd2e:	6a 0c                	push   0xc
c001bd30:	56                   	push   esi
c001bd31:	53                   	push   ebx
c001bd32:	e8 cb f8 ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001bd37:	83 c4 0c             	add    esp,0xc
c001bd3a:	6a 0c                	push   0xc
c001bd3c:	56                   	push   esi
c001bd3d:	53                   	push   ebx
c001bd3e:	e8 bf f8 ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001bd43:	83 c4 10             	add    esp,0x10
c001bd46:	84 c0                	test   al,al
c001bd48:	0f 84 8b 01 00 00    	je     c001bed9 <IDE::detect()+0x269>
c001bd4e:	31 ff                	xor    edi,edi
c001bd50:	50                   	push   eax
c001bd51:	6a 0c                	push   0xc
c001bd53:	56                   	push   esi
c001bd54:	53                   	push   ebx
c001bd55:	e8 a8 f8 ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001bd5a:	83 c4 10             	add    esp,0x10
c001bd5d:	a8 01                	test   al,0x1
c001bd5f:	0f 85 8e 01 00 00    	jne    c001bef3 <IDE::detect()+0x283>
c001bd65:	84 c0                	test   al,al
c001bd67:	78 04                	js     c001bd6d <IDE::detect()+0xfd>
c001bd69:	a8 08                	test   al,0x8
c001bd6b:	75 27                	jne    c001bd94 <IDE::detect()+0x124>
c001bd6d:	47                   	inc    edi
c001bd6e:	81 ff 17 01 00 00    	cmp    edi,0x117
c001bd74:	7e da                	jle    c001bd50 <IDE::detect()+0xe0>
c001bd76:	50                   	push   eax
c001bd77:	50                   	push   eax
c001bd78:	6a 00                	push   0x0
c001bd7a:	68 40 4b 4c 00       	push   0x4c4b40
c001bd7f:	e8 41 2a ff ff       	call   c000e7c5 <nanoSleep(unsigned long long)>
c001bd84:	83 c4 10             	add    esp,0x10
c001bd87:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001bd8d:	75 c1                	jne    c001bd50 <IDE::detect()+0xe0>
c001bd8f:	e9 5f 01 00 00       	jmp    c001bef3 <IDE::detect()+0x283>
c001bd94:	31 c9                	xor    ecx,ecx
c001bd96:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001bd9a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001bd9e:	83 ec 0c             	sub    esp,0xc
c001bda1:	68 80 00 00 00       	push   0x80
c001bda6:	57                   	push   edi
c001bda7:	6a 00                	push   0x0
c001bda9:	56                   	push   esi
c001bdaa:	53                   	push   ebx
c001bdab:	e8 f4 fd ff ff       	call   c001bba4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001bdb0:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001bdb5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bdb9:	89 d1                	mov    ecx,edx
c001bdbb:	c1 e0 06             	shl    eax,0x6
c001bdbe:	01 d8                	add    eax,ebx
c001bdc0:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001bdc7:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001bdce:	89 f2                	mov    edx,esi
c001bdd0:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001bdd6:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001bdda:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001bde0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bde4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001bdeb:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001bdf3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001bdfa:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001be02:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001be08:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001be0f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001be15:	8d 54 24 58          	lea    edx,[esp+0x58]
c001be19:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001be1d:	83 c4 20             	add    esp,0x20
c001be20:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001be23:	83 c0 02             	add    eax,0x2
c001be26:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001be2c:	83 c7 02             	add    edi,0x2
c001be2f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001be32:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001be38:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001be3c:	75 e2                	jne    c001be20 <IDE::detect()+0x1b0>
c001be3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be42:	c1 e0 06             	shl    eax,0x6
c001be45:	01 d8                	add    eax,ebx
c001be47:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001be4d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001be54:	66 c1 ea 09          	shr    dx,0x9
c001be58:	83 e2 01             	and    edx,0x1
c001be5b:	84 c9                	test   cl,cl
c001be5d:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001be63:	75 2f                	jne    c001be94 <IDE::detect()+0x224>
c001be65:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001be6b:	85 c0                	test   eax,eax
c001be6d:	74 66                	je     c001bed5 <IDE::detect()+0x265>
c001be6f:	50                   	push   eax
c001be70:	55                   	push   ebp
c001be71:	56                   	push   esi
c001be72:	68 cb 1c 02 c0       	push   0xc0021ccb
c001be77:	e8 ee 0d ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001be7c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001be83:	e8 9c 63 ff ff       	call   c0012224 <operator new(unsigned long)>
c001be88:	89 c7                	mov    edi,eax
c001be8a:	89 04 24             	mov    DWORD PTR [esp],eax
c001be8d:	e8 e8 02 00 00       	call   c001c17a <ATA::ATA()>
c001be92:	eb 28                	jmp    c001bebc <IDE::detect()+0x24c>
c001be94:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001be9a:	55                   	push   ebp
c001be9b:	56                   	push   esi
c001be9c:	68 fa 1c 02 c0       	push   0xc0021cfa
c001bea1:	e8 c4 0d ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001bea6:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001bead:	e8 72 63 ff ff       	call   c0012224 <operator new(unsigned long)>
c001beb2:	89 c7                	mov    edi,eax
c001beb4:	89 04 24             	mov    DWORD PTR [esp],eax
c001beb7:	e8 ee 08 00 00       	call   c001c7aa <ATAPI::ATAPI()>
c001bebc:	5a                   	pop    edx
c001bebd:	59                   	pop    ecx
c001bebe:	57                   	push   edi
c001bebf:	53                   	push   ebx
c001bec0:	e8 69 76 ff ff       	call   c001352e <Device::addChild(Device*)>
c001bec5:	8b 07                	mov    eax,DWORD PTR [edi]
c001bec7:	53                   	push   ebx
c001bec8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001becc:	6a 00                	push   0x0
c001bece:	57                   	push   edi
c001becf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bed2:	83 c4 20             	add    esp,0x20
c001bed5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001bed9:	4d                   	dec    ebp
c001beda:	74 0a                	je     c001bee6 <IDE::detect()+0x276>
c001bedc:	bd 01 00 00 00       	mov    ebp,0x1
c001bee1:	e9 bb fd ff ff       	jmp    c001bca1 <IDE::detect()+0x31>
c001bee6:	4e                   	dec    esi
c001bee7:	74 63                	je     c001bf4c <IDE::detect()+0x2dc>
c001bee9:	be 01 00 00 00       	mov    esi,0x1
c001beee:	e9 ac fd ff ff       	jmp    c001bc9f <IDE::detect()+0x2f>
c001bef3:	50                   	push   eax
c001bef4:	6a 04                	push   0x4
c001bef6:	56                   	push   esi
c001bef7:	53                   	push   ebx
c001bef8:	e8 05 f7 ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001befd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bf01:	83 c4 0c             	add    esp,0xc
c001bf04:	6a 05                	push   0x5
c001bf06:	56                   	push   esi
c001bf07:	53                   	push   ebx
c001bf08:	e8 f5 f6 ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001bf0d:	83 c4 10             	add    esp,0x10
c001bf10:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001bf14:	80 fa 14             	cmp    dl,0x14
c001bf17:	75 04                	jne    c001bf1d <IDE::detect()+0x2ad>
c001bf19:	3c eb                	cmp    al,0xeb
c001bf1b:	eb 07                	jmp    c001bf24 <IDE::detect()+0x2b4>
c001bf1d:	3c 96                	cmp    al,0x96
c001bf1f:	75 b8                	jne    c001bed9 <IDE::detect()+0x269>
c001bf21:	80 fa 69             	cmp    dl,0x69
c001bf24:	75 b3                	jne    c001bed9 <IDE::detect()+0x269>
c001bf26:	68 a1 00 00 00       	push   0xa1
c001bf2b:	6a 07                	push   0x7
c001bf2d:	56                   	push   esi
c001bf2e:	53                   	push   ebx
c001bf2f:	e8 0e f6 ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf34:	5f                   	pop    edi
c001bf35:	58                   	pop    eax
c001bf36:	6a 00                	push   0x0
c001bf38:	68 40 42 0f 00       	push   0xf4240
c001bf3d:	e8 83 28 ff ff       	call   c000e7c5 <nanoSleep(unsigned long long)>
c001bf42:	83 c4 10             	add    esp,0x10
c001bf45:	b1 01                	mov    cl,0x1
c001bf47:	e9 4a fe ff ff       	jmp    c001bd96 <IDE::detect()+0x126>
c001bf4c:	81 c4 1c 02 00 00    	add    esp,0x21c
c001bf52:	5b                   	pop    ebx
c001bf53:	5e                   	pop    esi
c001bf54:	5f                   	pop    edi
c001bf55:	5d                   	pop    ebp
c001bf56:	c3                   	ret    
c001bf57:	90                   	nop

c001bf58 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001bf58:	55                   	push   ebp
c001bf59:	57                   	push   edi
c001bf5a:	56                   	push   esi
c001bf5b:	53                   	push   ebx
c001bf5c:	83 ec 1c             	sub    esp,0x1c
c001bf5f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bf63:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bf67:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001bf6b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001bf6f:	88 c3                	mov    bl,al
c001bf71:	84 c0                	test   al,al
c001bf73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf77:	0f 84 67 01 00 00    	je     c001c0e4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001bf7d:	83 ec 0c             	sub    esp,0xc
c001bf80:	68 2b 1d 02 c0       	push   0xc0021d2b
c001bf85:	e8 e0 0c ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001bf8a:	83 c4 10             	add    esp,0x10
c001bf8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf91:	3c 01                	cmp    al,0x1
c001bf93:	75 17                	jne    c001bfac <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001bf95:	83 ec 0c             	sub    esp,0xc
c001bf98:	b3 13                	mov    bl,0x13
c001bf9a:	68 37 1d 02 c0       	push   0xc0021d37
c001bf9f:	e8 c6 0c ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001bfa4:	83 c4 10             	add    esp,0x10
c001bfa7:	e9 25 01 00 00       	jmp    c001c0d1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001bfac:	3c 02                	cmp    al,0x2
c001bfae:	0f 85 ef 00 00 00    	jne    c001c0a3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001bfb4:	d1 e6                	shl    esi,1
c001bfb6:	09 ee                	or     esi,ebp
c001bfb8:	52                   	push   edx
c001bfb9:	89 f0                	mov    eax,esi
c001bfbb:	6a 01                	push   0x1
c001bfbd:	0f b6 f0             	movzx  esi,al
c001bfc0:	c1 e6 06             	shl    esi,0x6
c001bfc3:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001bfcb:	50                   	push   eax
c001bfcc:	57                   	push   edi
c001bfcd:	e8 30 f6 ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001bfd2:	83 c4 10             	add    esp,0x10
c001bfd5:	89 c6                	mov    esi,eax
c001bfd7:	a8 01                	test   al,0x1
c001bfd9:	74 12                	je     c001bfed <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001bfdb:	83 ec 0c             	sub    esp,0xc
c001bfde:	b3 07                	mov    bl,0x7
c001bfe0:	68 4c 1d 02 c0       	push   0xc0021d4c
c001bfe5:	e8 80 0c ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001bfea:	83 c4 10             	add    esp,0x10
c001bfed:	f7 c6 02 00 00 00    	test   esi,0x2
c001bff3:	74 12                	je     c001c007 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001bff5:	83 ec 0c             	sub    esp,0xc
c001bff8:	b3 03                	mov    bl,0x3
c001bffa:	68 6a 1d 02 c0       	push   0xc0021d6a
c001bfff:	e8 66 0c ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001c004:	83 c4 10             	add    esp,0x10
c001c007:	f7 c6 04 00 00 00    	test   esi,0x4
c001c00d:	74 12                	je     c001c021 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001c00f:	83 ec 0c             	sub    esp,0xc
c001c012:	b3 14                	mov    bl,0x14
c001c014:	68 8a 1d 02 c0       	push   0xc0021d8a
c001c019:	e8 4c 0c ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001c01e:	83 c4 10             	add    esp,0x10
c001c021:	f7 c6 08 00 00 00    	test   esi,0x8
c001c027:	74 12                	je     c001c03b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001c029:	83 ec 0c             	sub    esp,0xc
c001c02c:	b3 03                	mov    bl,0x3
c001c02e:	68 6a 1d 02 c0       	push   0xc0021d6a
c001c033:	e8 32 0c ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001c038:	83 c4 10             	add    esp,0x10
c001c03b:	f7 c6 10 00 00 00    	test   esi,0x10
c001c041:	74 12                	je     c001c055 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001c043:	83 ec 0c             	sub    esp,0xc
c001c046:	b3 15                	mov    bl,0x15
c001c048:	68 a2 1d 02 c0       	push   0xc0021da2
c001c04d:	e8 18 0c ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001c052:	83 c4 10             	add    esp,0x10
c001c055:	f7 c6 20 00 00 00    	test   esi,0x20
c001c05b:	74 12                	je     c001c06f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001c05d:	83 ec 0c             	sub    esp,0xc
c001c060:	b3 03                	mov    bl,0x3
c001c062:	68 6a 1d 02 c0       	push   0xc0021d6a
c001c067:	e8 fe 0b ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001c06c:	83 c4 10             	add    esp,0x10
c001c06f:	f7 c6 40 00 00 00    	test   esi,0x40
c001c075:	74 12                	je     c001c089 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001c077:	83 ec 0c             	sub    esp,0xc
c001c07a:	b3 16                	mov    bl,0x16
c001c07c:	68 bc 1d 02 c0       	push   0xc0021dbc
c001c081:	e8 e4 0b ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001c086:	83 c4 10             	add    esp,0x10
c001c089:	89 f0                	mov    eax,esi
c001c08b:	84 c0                	test   al,al
c001c08d:	79 42                	jns    c001c0d1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c08f:	83 ec 0c             	sub    esp,0xc
c001c092:	b3 0d                	mov    bl,0xd
c001c094:	68 dd 1d 02 c0       	push   0xc0021ddd
c001c099:	e8 cc 0b ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001c09e:	83 c4 10             	add    esp,0x10
c001c0a1:	eb 2e                	jmp    c001c0d1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c0a3:	3c 03                	cmp    al,0x3
c001c0a5:	75 14                	jne    c001c0bb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001c0a7:	83 ec 0c             	sub    esp,0xc
c001c0aa:	b3 17                	mov    bl,0x17
c001c0ac:	68 f1 1d 02 c0       	push   0xc0021df1
c001c0b1:	e8 b4 0b ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001c0b6:	83 c4 10             	add    esp,0x10
c001c0b9:	eb 16                	jmp    c001c0d1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c0bb:	3c 04                	cmp    al,0x4
c001c0bd:	75 12                	jne    c001c0d1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c0bf:	83 ec 0c             	sub    esp,0xc
c001c0c2:	b3 08                	mov    bl,0x8
c001c0c4:	68 07 1e 02 c0       	push   0xc0021e07
c001c0c9:	e8 9c 0b ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001c0ce:	83 c4 10             	add    esp,0x10
c001c0d1:	50                   	push   eax
c001c0d2:	50                   	push   eax
c001c0d3:	0f b6 c3             	movzx  eax,bl
c001c0d6:	50                   	push   eax
c001c0d7:	68 1f 1e 02 c0       	push   0xc0021e1f
c001c0dc:	e8 89 0b ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001c0e1:	83 c4 10             	add    esp,0x10
c001c0e4:	83 c4 1c             	add    esp,0x1c
c001c0e7:	88 d8                	mov    al,bl
c001c0e9:	5b                   	pop    ebx
c001c0ea:	5e                   	pop    esi
c001c0eb:	5f                   	pop    edi
c001c0ec:	5d                   	pop    ebp
c001c0ed:	c3                   	ret    

c001c0ee <IDE::polling(unsigned char, unsigned int)>:
c001c0ee:	57                   	push   edi
c001c0ef:	56                   	push   esi
c001c0f0:	53                   	push   ebx
c001c0f1:	bb 04 00 00 00       	mov    ebx,0x4
c001c0f6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c0fa:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c0ff:	52                   	push   edx
c001c100:	6a 0c                	push   0xc
c001c102:	56                   	push   esi
c001c103:	57                   	push   edi
c001c104:	e8 f9 f4 ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001c109:	83 c4 10             	add    esp,0x10
c001c10c:	4b                   	dec    ebx
c001c10d:	75 f0                	jne    c001c0ff <IDE::polling(unsigned char, unsigned int)+0x11>
c001c10f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c114:	50                   	push   eax
c001c115:	6a 0c                	push   0xc
c001c117:	56                   	push   esi
c001c118:	57                   	push   edi
c001c119:	e8 e4 f4 ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001c11e:	83 c4 10             	add    esp,0x10
c001c121:	a8 01                	test   al,0x1
c001c123:	74 12                	je     c001c137 <IDE::polling(unsigned char, unsigned int)+0x49>
c001c125:	83 ec 0c             	sub    esp,0xc
c001c128:	68 39 1e 02 c0       	push   0xc0021e39
c001c12d:	e8 38 0b ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001c132:	83 c4 10             	add    esp,0x10
c001c135:	eb 17                	jmp    c001c14e <IDE::polling(unsigned char, unsigned int)+0x60>
c001c137:	a8 20                	test   al,0x20
c001c139:	75 0f                	jne    c001c14a <IDE::polling(unsigned char, unsigned int)+0x5c>
c001c13b:	4b                   	dec    ebx
c001c13c:	74 10                	je     c001c14e <IDE::polling(unsigned char, unsigned int)+0x60>
c001c13e:	84 c0                	test   al,al
c001c140:	78 d2                	js     c001c114 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c142:	a8 08                	test   al,0x8
c001c144:	74 ce                	je     c001c114 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c146:	31 c0                	xor    eax,eax
c001c148:	eb 06                	jmp    c001c150 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c14a:	b0 01                	mov    al,0x1
c001c14c:	eb 02                	jmp    c001c150 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c14e:	b0 02                	mov    al,0x2
c001c150:	5b                   	pop    ebx
c001c151:	5e                   	pop    esi
c001c152:	5f                   	pop    edi
c001c153:	c3                   	ret    

c001c154 <ATA::close(int, int, void*)>:
c001c154:	83 ec 0c             	sub    esp,0xc
c001c157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c15b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c161:	85 c0                	test   eax,eax
c001c163:	74 0c                	je     c001c171 <ATA::close(int, int, void*)+0x1d>
c001c165:	83 ec 0c             	sub    esp,0xc
c001c168:	8b 10                	mov    edx,DWORD PTR [eax]
c001c16a:	50                   	push   eax
c001c16b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c16e:	83 c4 10             	add    esp,0x10
c001c171:	31 c0                	xor    eax,eax
c001c173:	83 c4 0c             	add    esp,0xc
c001c176:	c3                   	ret    
c001c177:	90                   	nop

c001c178 <ATA::powerSaving(PowerSavingLevel)>:
c001c178:	c3                   	ret    
c001c179:	90                   	nop

c001c17a <ATA::ATA()>:
c001c17a:	83 ec 0c             	sub    esp,0xc
c001c17d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c181:	83 ec 04             	sub    esp,0x4
c001c184:	68 00 02 00 00       	push   0x200
c001c189:	68 7c 1e 02 c0       	push   0xc0021e7c
c001c18e:	50                   	push   eax
c001c18f:	e8 a0 77 ff ff       	call   c0013934 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c194:	83 c4 10             	add    esp,0x10
c001c197:	ba a8 1e 02 c0       	mov    edx,0xc0021ea8
c001c19c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1a0:	89 10                	mov    DWORD PTR [eax],edx
c001c1a2:	90                   	nop
c001c1a3:	83 c4 0c             	add    esp,0xc
c001c1a6:	c3                   	ret    
c001c1a7:	90                   	nop

c001c1a8 <ATA::flush(bool)>:
c001c1a8:	53                   	push   ebx
c001c1a9:	83 ec 08             	sub    esp,0x8
c001c1ac:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001c1b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c1b5:	19 c0                	sbb    eax,eax
c001c1b7:	83 e0 fd             	and    eax,0xfffffffd
c001c1ba:	05 ea 00 00 00       	add    eax,0xea
c001c1bf:	50                   	push   eax
c001c1c0:	6a 07                	push   0x7
c001c1c2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c1c9:	50                   	push   eax
c001c1ca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c1d0:	e8 6d f3 ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1d5:	83 c4 0c             	add    esp,0xc
c001c1d8:	6a 00                	push   0x0
c001c1da:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c1e1:	50                   	push   eax
c001c1e2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c1e8:	e8 01 ff ff ff       	call   c001c0ee <IDE::polling(unsigned char, unsigned int)>
c001c1ed:	83 c4 18             	add    esp,0x18
c001c1f0:	5b                   	pop    ebx
c001c1f1:	c3                   	ret    

c001c1f2 <ATA::readyForCommand()>:
c001c1f2:	56                   	push   esi
c001c1f3:	53                   	push   ebx
c001c1f4:	31 db                	xor    ebx,ebx
c001c1f6:	50                   	push   eax
c001c1f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c1fb:	50                   	push   eax
c001c1fc:	6a 0c                	push   0xc
c001c1fe:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c205:	50                   	push   eax
c001c206:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c20c:	e8 f1 f3 ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001c211:	83 c4 10             	add    esp,0x10
c001c214:	a8 88                	test   al,0x88
c001c216:	74 23                	je     c001c23b <ATA::readyForCommand()+0x49>
c001c218:	43                   	inc    ebx
c001c219:	83 fb 63             	cmp    ebx,0x63
c001c21c:	7e dd                	jle    c001c1fb <ATA::readyForCommand()+0x9>
c001c21e:	51                   	push   ecx
c001c21f:	51                   	push   ecx
c001c220:	6a 00                	push   0x0
c001c222:	68 40 42 0f 00       	push   0xf4240
c001c227:	e8 99 25 ff ff       	call   c000e7c5 <nanoSleep(unsigned long long)>
c001c22c:	83 c4 10             	add    esp,0x10
c001c22f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c235:	75 c4                	jne    c001c1fb <ATA::readyForCommand()+0x9>
c001c237:	31 c0                	xor    eax,eax
c001c239:	eb 02                	jmp    c001c23d <ATA::readyForCommand()+0x4b>
c001c23b:	b0 01                	mov    al,0x1
c001c23d:	5a                   	pop    edx
c001c23e:	5b                   	pop    ebx
c001c23f:	5e                   	pop    esi
c001c240:	c3                   	ret    
c001c241:	90                   	nop

c001c242 <ATA::access(unsigned long long, int, void*, bool)>:
c001c242:	55                   	push   ebp
c001c243:	57                   	push   edi
c001c244:	56                   	push   esi
c001c245:	53                   	push   ebx
c001c246:	83 ec 2c             	sub    esp,0x2c
c001c249:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c24d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c251:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c255:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c259:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c25d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c261:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c265:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c26b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c26f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c275:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c279:	c1 e0 06             	shl    eax,0x6
c001c27c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c284:	74 5d                	je     c001c2e3 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c286:	89 fa                	mov    edx,edi
c001c288:	89 f0                	mov    eax,esi
c001c28a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c28e:	c1 ea 1c             	shr    edx,0x1c
c001c291:	89 d1                	mov    ecx,edx
c001c293:	09 c1                	or     ecx,eax
c001c295:	74 25                	je     c001c2bc <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c297:	31 ed                	xor    ebp,ebp
c001c299:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c2a0:	89 fa                	mov    edx,edi
c001c2a2:	89 f0                	mov    eax,esi
c001c2a4:	0f ad d0             	shrd   eax,edx,cl
c001c2a7:	d3 ea                	shr    edx,cl
c001c2a9:	f6 c1 20             	test   cl,0x20
c001c2ac:	74 02                	je     c001c2b0 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c2ae:	89 d0                	mov    eax,edx
c001c2b0:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c2b4:	45                   	inc    ebp
c001c2b5:	83 fd 06             	cmp    ebp,0x6
c001c2b8:	75 df                	jne    c001c299 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c2ba:	eb 76                	jmp    c001c332 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c2bc:	89 f0                	mov    eax,esi
c001c2be:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c2c3:	89 fa                	mov    edx,edi
c001c2c5:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c2cc:	0f ac d0 10          	shrd   eax,edx,0x10
c001c2d0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c2d5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c2d9:	c1 ee 18             	shr    esi,0x18
c001c2dc:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c2e1:	eb 56                	jmp    c001c339 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c2e3:	6a 00                	push   0x0
c001c2e5:	6a 3f                	push   0x3f
c001c2e7:	57                   	push   edi
c001c2e8:	56                   	push   esi
c001c2e9:	e8 de 1e 00 00       	call   c001e1cc <__umoddi3>
c001c2ee:	83 c4 10             	add    esp,0x10
c001c2f1:	40                   	inc    eax
c001c2f2:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c2f6:	6a 00                	push   0x0
c001c2f8:	68 f0 03 00 00       	push   0x3f0
c001c2fd:	57                   	push   edi
c001c2fe:	56                   	push   esi
c001c2ff:	e8 c8 1d 00 00       	call   c001e0cc <__udivdi3>
c001c304:	83 c4 10             	add    esp,0x10
c001c307:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c30c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c313:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c318:	6a 00                	push   0x0
c001c31a:	6a 3f                	push   0x3f
c001c31c:	57                   	push   edi
c001c31d:	56                   	push   esi
c001c31e:	e8 a9 1d 00 00       	call   c001e0cc <__udivdi3>
c001c323:	83 c4 10             	add    esp,0x10
c001c326:	89 c6                	mov    esi,eax
c001c328:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c32d:	83 e6 0f             	and    esi,0xf
c001c330:	eb 07                	jmp    c001c339 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c332:	31 f6                	xor    esi,esi
c001c334:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c339:	bf 01 00 00 00       	mov    edi,0x1
c001c33e:	50                   	push   eax
c001c33f:	6a 00                	push   0x0
c001c341:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c348:	50                   	push   eax
c001c349:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c34d:	e8 fc f3 ff ff       	call   c001b74e <IDE::enableIRQs(unsigned char, bool)>
c001c352:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c355:	e8 98 fe ff ff       	call   c001c1f2 <ATA::readyForCommand()>
c001c35a:	83 c4 10             	add    esp,0x10
c001c35d:	84 c0                	test   al,al
c001c35f:	0f 84 50 02 00 00    	je     c001c5b5 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c365:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c36b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c371:	c1 e0 04             	shl    eax,0x4
c001c374:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c37b:	09 c6                	or     esi,eax
c001c37d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001c382:	75 05                	jne    c001c389 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c384:	83 ce a0             	or     esi,0xffffffa0
c001c387:	eb 03                	jmp    c001c38c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c389:	83 ce e0             	or     esi,0xffffffe0
c001c38c:	89 f0                	mov    eax,esi
c001c38e:	0f b6 f0             	movzx  esi,al
c001c391:	56                   	push   esi
c001c392:	6a 06                	push   0x6
c001c394:	51                   	push   ecx
c001c395:	52                   	push   edx
c001c396:	e8 a7 f1 ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c39b:	83 c4 10             	add    esp,0x10
c001c39e:	6a 00                	push   0x0
c001c3a0:	6a 01                	push   0x1
c001c3a2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c3a9:	50                   	push   eax
c001c3aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c3b0:	e8 8d f1 ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3b5:	83 c4 10             	add    esp,0x10
c001c3b8:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c3bd:	75 6e                	jne    c001c42d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c3bf:	6a 00                	push   0x0
c001c3c1:	6a 08                	push   0x8
c001c3c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c3ca:	50                   	push   eax
c001c3cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c3d1:	e8 6c f1 ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3d6:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c3db:	50                   	push   eax
c001c3dc:	6a 09                	push   0x9
c001c3de:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c3e5:	50                   	push   eax
c001c3e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c3ec:	e8 51 f1 ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3f1:	83 c4 20             	add    esp,0x20
c001c3f4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c3f9:	50                   	push   eax
c001c3fa:	6a 0a                	push   0xa
c001c3fc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c403:	50                   	push   eax
c001c404:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c40a:	e8 33 f1 ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c40f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c414:	50                   	push   eax
c001c415:	6a 0b                	push   0xb
c001c417:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c41e:	50                   	push   eax
c001c41f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c425:	e8 18 f1 ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c42a:	83 c4 20             	add    esp,0x20
c001c42d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c432:	50                   	push   eax
c001c433:	6a 02                	push   0x2
c001c435:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c43c:	50                   	push   eax
c001c43d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c443:	e8 fa f0 ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c448:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c44d:	50                   	push   eax
c001c44e:	6a 03                	push   0x3
c001c450:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c457:	50                   	push   eax
c001c458:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c45e:	e8 df f0 ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c463:	83 c4 20             	add    esp,0x20
c001c466:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c46b:	50                   	push   eax
c001c46c:	6a 04                	push   0x4
c001c46e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c475:	50                   	push   eax
c001c476:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c47c:	e8 c1 f0 ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c481:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c486:	50                   	push   eax
c001c487:	6a 05                	push   0x5
c001c489:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c490:	50                   	push   eax
c001c491:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c497:	e8 a6 f0 ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c49c:	83 c4 20             	add    esp,0x20
c001c49f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c4a4:	0f 94 c0             	sete   al
c001c4a7:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c4ac:	74 09                	je     c001c4b7 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001c4ae:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001c4b5:	eb 07                	jmp    c001c4be <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001c4b7:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001c4be:	0f b6 c0             	movzx  eax,al
c001c4c1:	50                   	push   eax
c001c4c2:	6a 07                	push   0x7
c001c4c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c4cb:	50                   	push   eax
c001c4cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c4d2:	e8 6b f0 ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4d7:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c4db:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001c4df:	83 c4 10             	add    esp,0x10
c001c4e2:	85 f6                	test   esi,esi
c001c4e4:	0f 84 ac 00 00 00    	je     c001c596 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001c4ea:	50                   	push   eax
c001c4eb:	6a 01                	push   0x1
c001c4ed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c4f4:	50                   	push   eax
c001c4f5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c4fb:	e8 ee fb ff ff       	call   c001c0ee <IDE::polling(unsigned char, unsigned int)>
c001c500:	83 c4 10             	add    esp,0x10
c001c503:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c509:	84 c0                	test   al,al
c001c50b:	74 20                	je     c001c52d <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001c50d:	0f b6 f8             	movzx  edi,al
c001c510:	0f b6 d2             	movzx  edx,dl
c001c513:	57                   	push   edi
c001c514:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001c51b:	50                   	push   eax
c001c51c:	52                   	push   edx
c001c51d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c523:	e8 30 fa ff ff       	call   c001bf58 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c528:	e9 85 00 00 00       	jmp    c001c5b2 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001c52d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001c532:	74 41                	je     c001c575 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001c534:	31 c9                	xor    ecx,ecx
c001c536:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001c53a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c53e:	50                   	push   eax
c001c53f:	50                   	push   eax
c001c540:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c547:	50                   	push   eax
c001c548:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c54e:	e8 dd ef ff ff       	call   c001b530 <IDE::getBase(unsigned char)>
c001c553:	89 c2                	mov    edx,eax
c001c555:	89 e8                	mov    eax,ebp
c001c557:	66 ef                	out    dx,ax
c001c559:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c55d:	83 c4 10             	add    esp,0x10
c001c560:	41                   	inc    ecx
c001c561:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001c567:	75 cd                	jne    c001c536 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001c569:	4e                   	dec    esi
c001c56a:	81 c7 00 02 00 00    	add    edi,0x200
c001c570:	e9 6d ff ff ff       	jmp    c001c4e2 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001c575:	0f b6 d2             	movzx  edx,dl
c001c578:	51                   	push   ecx
c001c579:	51                   	push   ecx
c001c57a:	52                   	push   edx
c001c57b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c581:	e8 aa ef ff ff       	call   c001b530 <IDE::getBase(unsigned char)>
c001c586:	b9 00 01 00 00       	mov    ecx,0x100
c001c58b:	89 c2                	mov    edx,eax
c001c58d:	fc                   	cld    
c001c58e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001c591:	83 c4 10             	add    esp,0x10
c001c594:	eb d3                	jmp    c001c569 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001c596:	31 ff                	xor    edi,edi
c001c598:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c59d:	74 16                	je     c001c5b5 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c59f:	50                   	push   eax
c001c5a0:	50                   	push   eax
c001c5a1:	31 c0                	xor    eax,eax
c001c5a3:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001c5a8:	0f 94 c0             	sete   al
c001c5ab:	50                   	push   eax
c001c5ac:	53                   	push   ebx
c001c5ad:	e8 f6 fb ff ff       	call   c001c1a8 <ATA::flush(bool)>
c001c5b2:	83 c4 10             	add    esp,0x10
c001c5b5:	83 c4 2c             	add    esp,0x2c
c001c5b8:	89 f8                	mov    eax,edi
c001c5ba:	5b                   	pop    ebx
c001c5bb:	5e                   	pop    esi
c001c5bc:	5f                   	pop    edi
c001c5bd:	5d                   	pop    ebp
c001c5be:	c3                   	ret    
c001c5bf:	90                   	nop

c001c5c0 <ATA::read(unsigned long long, int, void*)>:
c001c5c0:	57                   	push   edi
c001c5c1:	b8 04 00 00 00       	mov    eax,0x4
c001c5c6:	56                   	push   esi
c001c5c7:	53                   	push   ebx
c001c5c8:	83 ec 10             	sub    esp,0x10
c001c5cb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c5cf:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c5d3:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001c5d6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c5da:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c5de:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001c5e4:	77 3b                	ja     c001c621 <ATA::read(unsigned long long, int, void*)+0x61>
c001c5e6:	b8 06 00 00 00       	mov    eax,0x6
c001c5eb:	85 d2                	test   edx,edx
c001c5ed:	74 32                	je     c001c621 <ATA::read(unsigned long long, int, void*)+0x61>
c001c5ef:	50                   	push   eax
c001c5f0:	50                   	push   eax
c001c5f1:	6a 00                	push   0x0
c001c5f3:	52                   	push   edx
c001c5f4:	53                   	push   ebx
c001c5f5:	57                   	push   edi
c001c5f6:	56                   	push   esi
c001c5f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c5fb:	e8 42 fc ff ff       	call   c001c242 <ATA::access(unsigned long long, int, void*, bool)>
c001c600:	83 c4 20             	add    esp,0x20
c001c603:	85 c0                	test   eax,eax
c001c605:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c609:	75 11                	jne    c001c61c <ATA::read(unsigned long long, int, void*)+0x5c>
c001c60b:	01 1d 64 4b 02 c0    	add    DWORD PTR ds:0xc0024b64,ebx
c001c611:	e8 8c 3a ff ff       	call   c00100a2 <VgaText::updateDiskUsage()>
c001c616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c61a:	eb 05                	jmp    c001c621 <ATA::read(unsigned long long, int, void*)+0x61>
c001c61c:	b8 01 00 00 00       	mov    eax,0x1
c001c621:	83 c4 10             	add    esp,0x10
c001c624:	5b                   	pop    ebx
c001c625:	5e                   	pop    esi
c001c626:	5f                   	pop    edi
c001c627:	c3                   	ret    

c001c628 <ATA::write(unsigned long long, int, void*)>:
c001c628:	57                   	push   edi
c001c629:	b8 04 00 00 00       	mov    eax,0x4
c001c62e:	56                   	push   esi
c001c62f:	53                   	push   ebx
c001c630:	83 ec 10             	sub    esp,0x10
c001c633:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c637:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c63b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001c63e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c642:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c646:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001c64c:	77 3b                	ja     c001c689 <ATA::write(unsigned long long, int, void*)+0x61>
c001c64e:	b8 06 00 00 00       	mov    eax,0x6
c001c653:	85 d2                	test   edx,edx
c001c655:	74 32                	je     c001c689 <ATA::write(unsigned long long, int, void*)+0x61>
c001c657:	50                   	push   eax
c001c658:	50                   	push   eax
c001c659:	6a 01                	push   0x1
c001c65b:	52                   	push   edx
c001c65c:	53                   	push   ebx
c001c65d:	57                   	push   edi
c001c65e:	56                   	push   esi
c001c65f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c663:	e8 da fb ff ff       	call   c001c242 <ATA::access(unsigned long long, int, void*, bool)>
c001c668:	83 c4 20             	add    esp,0x20
c001c66b:	85 c0                	test   eax,eax
c001c66d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c671:	75 11                	jne    c001c684 <ATA::write(unsigned long long, int, void*)+0x5c>
c001c673:	01 1d 60 4b 02 c0    	add    DWORD PTR ds:0xc0024b60,ebx
c001c679:	e8 24 3a ff ff       	call   c00100a2 <VgaText::updateDiskUsage()>
c001c67e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c682:	eb 05                	jmp    c001c689 <ATA::write(unsigned long long, int, void*)+0x61>
c001c684:	b8 01 00 00 00       	mov    eax,0x1
c001c689:	83 c4 10             	add    esp,0x10
c001c68c:	5b                   	pop    ebx
c001c68d:	5e                   	pop    esi
c001c68e:	5f                   	pop    edi
c001c68f:	c3                   	ret    

c001c690 <ATA::detectCHS()>:
c001c690:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c694:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001c69a:	c1 e0 06             	shl    eax,0x6
c001c69d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001c6a3:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001c6ad:	c7 44 24 04 8b 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021e8b
c001c6b5:	e9 ce 06 ff ff       	jmp    c000cd88 <panic(char const*)>

c001c6ba <ATA::open(int, int, void*)>:
c001c6ba:	53                   	push   ebx
c001c6bb:	83 ec 08             	sub    esp,0x8
c001c6be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c6c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c6c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c6ca:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c6d0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c6d6:	c1 e0 06             	shl    eax,0x6
c001c6d9:	01 d0                	add    eax,edx
c001c6db:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001c6e2:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001c6e8:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001c6ef:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c6f9:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001c6ff:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001c706:	75 0c                	jne    c001c714 <ATA::open(int, int, void*)+0x5a>
c001c708:	83 ec 0c             	sub    esp,0xc
c001c70b:	53                   	push   ebx
c001c70c:	e8 7f ff ff ff       	call   c001c690 <ATA::detectCHS()>
c001c711:	83 c4 10             	add    esp,0x10
c001c714:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c71a:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c720:	c1 e0 06             	shl    eax,0x6
c001c723:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001c72a:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c734:	d1 e8                	shr    eax,1
c001c736:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001c73c:	6a 04                	push   0x4
c001c73e:	6a 0c                	push   0xc
c001c740:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c747:	50                   	push   eax
c001c748:	52                   	push   edx
c001c749:	e8 f4 ed ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c74e:	90                   	nop
c001c74f:	90                   	nop
c001c750:	6a 00                	push   0x0
c001c752:	6a 0c                	push   0xc
c001c754:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c75b:	50                   	push   eax
c001c75c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c762:	e8 db ed ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c767:	83 c4 14             	add    esp,0x14
c001c76a:	53                   	push   ebx
c001c76b:	e8 2c 72 ff ff       	call   c001399c <PhysicalDisk::startCache()>
c001c770:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c773:	e8 80 8a ff ff       	call   c00151f8 <createPartitionsForDisk(PhysicalDisk*)>
c001c778:	31 c0                	xor    eax,eax
c001c77a:	83 c4 18             	add    esp,0x18
c001c77d:	5b                   	pop    ebx
c001c77e:	c3                   	ret    
c001c77f:	90                   	nop

c001c780 <ATAPI::write(unsigned long long, int, void*)>:
c001c780:	b8 03 00 00 00       	mov    eax,0x3
c001c785:	c3                   	ret    

c001c786 <ATAPI::close(int, int, void*)>:
c001c786:	83 ec 0c             	sub    esp,0xc
c001c789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c78d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c793:	85 c0                	test   eax,eax
c001c795:	74 0c                	je     c001c7a3 <ATAPI::close(int, int, void*)+0x1d>
c001c797:	83 ec 0c             	sub    esp,0xc
c001c79a:	8b 10                	mov    edx,DWORD PTR [eax]
c001c79c:	50                   	push   eax
c001c79d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c7a0:	83 c4 10             	add    esp,0x10
c001c7a3:	31 c0                	xor    eax,eax
c001c7a5:	83 c4 0c             	add    esp,0xc
c001c7a8:	c3                   	ret    
c001c7a9:	90                   	nop

c001c7aa <ATAPI::ATAPI()>:
c001c7aa:	83 ec 0c             	sub    esp,0xc
c001c7ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b1:	83 ec 04             	sub    esp,0x4
c001c7b4:	68 00 08 00 00       	push   0x800
c001c7b9:	68 d4 1e 02 c0       	push   0xc0021ed4
c001c7be:	50                   	push   eax
c001c7bf:	e8 70 71 ff ff       	call   c0013934 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c7c4:	83 c4 10             	add    esp,0x10
c001c7c7:	ba 14 1f 02 c0       	mov    edx,0xc0021f14
c001c7cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d0:	89 10                	mov    DWORD PTR [eax],edx
c001c7d2:	90                   	nop
c001c7d3:	83 c4 0c             	add    esp,0xc
c001c7d6:	c3                   	ret    
c001c7d7:	90                   	nop

c001c7d8 <ATAPI::readyForCommand()>:
c001c7d8:	56                   	push   esi
c001c7d9:	53                   	push   ebx
c001c7da:	31 db                	xor    ebx,ebx
c001c7dc:	50                   	push   eax
c001c7dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c7e1:	50                   	push   eax
c001c7e2:	6a 0c                	push   0xc
c001c7e4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c7eb:	50                   	push   eax
c001c7ec:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c7f2:	e8 0b ee ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001c7f7:	83 c4 10             	add    esp,0x10
c001c7fa:	a8 88                	test   al,0x88
c001c7fc:	74 23                	je     c001c821 <ATAPI::readyForCommand()+0x49>
c001c7fe:	43                   	inc    ebx
c001c7ff:	83 fb 63             	cmp    ebx,0x63
c001c802:	7e dd                	jle    c001c7e1 <ATAPI::readyForCommand()+0x9>
c001c804:	51                   	push   ecx
c001c805:	51                   	push   ecx
c001c806:	6a 00                	push   0x0
c001c808:	68 40 42 0f 00       	push   0xf4240
c001c80d:	e8 b3 1f ff ff       	call   c000e7c5 <nanoSleep(unsigned long long)>
c001c812:	83 c4 10             	add    esp,0x10
c001c815:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c81b:	75 c4                	jne    c001c7e1 <ATAPI::readyForCommand()+0x9>
c001c81d:	31 c0                	xor    eax,eax
c001c81f:	eb 02                	jmp    c001c823 <ATAPI::readyForCommand()+0x4b>
c001c821:	b0 01                	mov    al,0x1
c001c823:	5a                   	pop    edx
c001c824:	5b                   	pop    ebx
c001c825:	5e                   	pop    esi
c001c826:	c3                   	ret    
c001c827:	90                   	nop

c001c828 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c828:	55                   	push   ebp
c001c829:	57                   	push   edi
c001c82a:	56                   	push   esi
c001c82b:	53                   	push   ebx
c001c82c:	83 ec 20             	sub    esp,0x20
c001c82f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c833:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001c837:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c83b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c83f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c843:	6a 01                	push   0x1
c001c845:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c84c:	50                   	push   eax
c001c84d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c853:	e8 f6 ee ff ff       	call   c001b74e <IDE::enableIRQs(unsigned char, bool)>
c001c858:	5e                   	pop    esi
c001c859:	58                   	pop    eax
c001c85a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c861:	50                   	push   eax
c001c862:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c868:	e8 af ec ff ff       	call   c001b51c <IDE::prepareInterrupt(unsigned char)>
c001c86d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c870:	e8 63 ff ff ff       	call   c001c7d8 <ATAPI::readyForCommand()>
c001c875:	83 c4 10             	add    esp,0x10
c001c878:	84 c0                	test   al,al
c001c87a:	75 0a                	jne    c001c886 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001c87c:	bb 01 00 00 00       	mov    ebx,0x1
c001c881:	e9 57 02 00 00       	jmp    c001cadd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c886:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001c88c:	c1 e0 04             	shl    eax,0x4
c001c88f:	0f b6 c0             	movzx  eax,al
c001c892:	50                   	push   eax
c001c893:	6a 06                	push   0x6
c001c895:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c89c:	50                   	push   eax
c001c89d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8a3:	e8 9a ec ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8a8:	6a 00                	push   0x0
c001c8aa:	6a 01                	push   0x1
c001c8ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c8b3:	50                   	push   eax
c001c8b4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8ba:	e8 83 ec ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8bf:	83 c4 20             	add    esp,0x20
c001c8c2:	0f b6 c3             	movzx  eax,bl
c001c8c5:	0f b6 df             	movzx  ebx,bh
c001c8c8:	50                   	push   eax
c001c8c9:	6a 04                	push   0x4
c001c8cb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c8d2:	50                   	push   eax
c001c8d3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8d9:	e8 64 ec ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8de:	53                   	push   ebx
c001c8df:	6a 05                	push   0x5
c001c8e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c8e8:	50                   	push   eax
c001c8e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8ef:	e8 4e ec ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8f4:	83 c4 20             	add    esp,0x20
c001c8f7:	68 a0 00 00 00       	push   0xa0
c001c8fc:	6a 07                	push   0x7
c001c8fe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c905:	50                   	push   eax
c001c906:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c90c:	e8 31 ec ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c911:	83 c4 0c             	add    esp,0xc
c001c914:	6a 01                	push   0x1
c001c916:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c91d:	50                   	push   eax
c001c91e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c924:	e8 c5 f7 ff ff       	call   c001c0ee <IDE::polling(unsigned char, unsigned int)>
c001c929:	83 c4 10             	add    esp,0x10
c001c92c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001c932:	84 c0                	test   al,al
c001c934:	74 23                	je     c001c959 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001c936:	0f b6 d8             	movzx  ebx,al
c001c939:	0f b6 d2             	movzx  edx,dl
c001c93c:	53                   	push   ebx
c001c93d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001c944:	50                   	push   eax
c001c945:	52                   	push   edx
c001c946:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c94c:	e8 07 f6 ff ff       	call   c001bf58 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c951:	83 c4 10             	add    esp,0x10
c001c954:	e9 84 01 00 00       	jmp    c001cadd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c959:	0f b6 d2             	movzx  edx,dl
c001c95c:	53                   	push   ebx
c001c95d:	53                   	push   ebx
c001c95e:	52                   	push   edx
c001c95f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c965:	e8 c6 eb ff ff       	call   c001b530 <IDE::getBase(unsigned char)>
c001c96a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c96e:	b9 06 00 00 00       	mov    ecx,0x6
c001c973:	89 c2                	mov    edx,eax
c001c975:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c978:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c97c:	83 c4 10             	add    esp,0x10
c001c97f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c985:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c98c:	85 db                	test   ebx,ebx
c001c98e:	0f 84 ec 00 00 00    	je     c001ca80 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001c994:	51                   	push   ecx
c001c995:	51                   	push   ecx
c001c996:	52                   	push   edx
c001c997:	50                   	push   eax
c001c998:	e8 13 ed ff ff       	call   c001b6b0 <IDE::waitInterrupt(unsigned char)>
c001c99d:	83 c4 10             	add    esp,0x10
c001c9a0:	84 c0                	test   al,al
c001c9a2:	0f 84 d4 fe ff ff    	je     c001c87c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c9a8:	56                   	push   esi
c001c9a9:	56                   	push   esi
c001c9aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9b1:	50                   	push   eax
c001c9b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9b8:	e8 5f eb ff ff       	call   c001b51c <IDE::prepareInterrupt(unsigned char)>
c001c9bd:	83 c4 0c             	add    esp,0xc
c001c9c0:	6a 04                	push   0x4
c001c9c2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9c9:	50                   	push   eax
c001c9ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9d0:	e8 2d ec ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001c9d5:	83 c4 0c             	add    esp,0xc
c001c9d8:	89 c6                	mov    esi,eax
c001c9da:	6a 05                	push   0x5
c001c9dc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9e3:	50                   	push   eax
c001c9e4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9ea:	e8 13 ec ff ff       	call   c001b602 <IDE::read(unsigned char, unsigned char)>
c001c9ef:	89 f1                	mov    ecx,esi
c001c9f1:	0f b6 c0             	movzx  eax,al
c001c9f4:	0f b6 f1             	movzx  esi,cl
c001c9f7:	c1 e0 08             	shl    eax,0x8
c001c9fa:	09 c6                	or     esi,eax
c001c9fc:	d1 fe                	sar    esi,1
c001c9fe:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ca02:	83 c4 10             	add    esp,0x10
c001ca05:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ca0a:	74 41                	je     c001ca4d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ca0c:	31 c9                	xor    ecx,ecx
c001ca0e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ca14:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ca1b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ca1f:	75 0a                	jne    c001ca2b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001ca21:	01 c9                	add    ecx,ecx
c001ca23:	01 cd                	add    ebp,ecx
c001ca25:	4b                   	dec    ebx
c001ca26:	e9 54 ff ff ff       	jmp    c001c97f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ca2b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ca30:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ca34:	51                   	push   ecx
c001ca35:	51                   	push   ecx
c001ca36:	52                   	push   edx
c001ca37:	50                   	push   eax
c001ca38:	e8 f3 ea ff ff       	call   c001b530 <IDE::getBase(unsigned char)>
c001ca3d:	89 c2                	mov    edx,eax
c001ca3f:	89 f0                	mov    eax,esi
c001ca41:	66 ef                	out    dx,ax
c001ca43:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ca47:	83 c4 10             	add    esp,0x10
c001ca4a:	41                   	inc    ecx
c001ca4b:	eb c1                	jmp    c001ca0e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001ca4d:	31 f6                	xor    esi,esi
c001ca4f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ca55:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ca5c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001ca60:	75 06                	jne    c001ca68 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001ca62:	01 f6                	add    esi,esi
c001ca64:	01 f5                	add    ebp,esi
c001ca66:	eb bd                	jmp    c001ca25 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001ca68:	51                   	push   ecx
c001ca69:	51                   	push   ecx
c001ca6a:	52                   	push   edx
c001ca6b:	50                   	push   eax
c001ca6c:	e8 bf ea ff ff       	call   c001b530 <IDE::getBase(unsigned char)>
c001ca71:	89 c2                	mov    edx,eax
c001ca73:	66 ed                	in     ax,dx
c001ca75:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001ca7a:	83 c4 10             	add    esp,0x10
c001ca7d:	46                   	inc    esi
c001ca7e:	eb cf                	jmp    c001ca4f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001ca80:	51                   	push   ecx
c001ca81:	51                   	push   ecx
c001ca82:	52                   	push   edx
c001ca83:	50                   	push   eax
c001ca84:	e8 27 ec ff ff       	call   c001b6b0 <IDE::waitInterrupt(unsigned char)>
c001ca89:	83 c4 10             	add    esp,0x10
c001ca8c:	84 c0                	test   al,al
c001ca8e:	0f 84 e8 fd ff ff    	je     c001c87c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ca94:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ca99:	52                   	push   edx
c001ca9a:	52                   	push   edx
c001ca9b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001caa2:	50                   	push   eax
c001caa3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001caa9:	e8 6e ea ff ff       	call   c001b51c <IDE::prepareInterrupt(unsigned char)>
c001caae:	83 c4 10             	add    esp,0x10
c001cab1:	50                   	push   eax
c001cab2:	50                   	push   eax
c001cab3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001caba:	50                   	push   eax
c001cabb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cac1:	e8 6a ea ff ff       	call   c001b530 <IDE::getBase(unsigned char)>
c001cac6:	8d 50 07             	lea    edx,[eax+0x7]
c001cac9:	ec                   	in     al,dx
c001caca:	83 c4 10             	add    esp,0x10
c001cacd:	a8 88                	test   al,0x88
c001cacf:	74 0a                	je     c001cadb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001cad1:	4b                   	dec    ebx
c001cad2:	75 dd                	jne    c001cab1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001cad4:	bb 02 00 00 00       	mov    ebx,0x2
c001cad9:	eb 02                	jmp    c001cadd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cadb:	31 db                	xor    ebx,ebx
c001cadd:	83 c4 1c             	add    esp,0x1c
c001cae0:	89 d8                	mov    eax,ebx
c001cae2:	5b                   	pop    ebx
c001cae3:	5e                   	pop    esi
c001cae4:	5f                   	pop    edi
c001cae5:	5d                   	pop    ebp
c001cae6:	c3                   	ret    
c001cae7:	90                   	nop

c001cae8 <ATAPI::diskRemoved()>:
c001cae8:	83 ec 18             	sub    esp,0x18
c001caeb:	68 df 1e 02 c0       	push   0xc0021edf
c001caf0:	e8 75 01 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001caf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001caf9:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001cb00:	83 c4 1c             	add    esp,0x1c
c001cb03:	c3                   	ret    

c001cb04 <ATAPI::eject()>:
c001cb04:	57                   	push   edi
c001cb05:	b9 03 00 00 00       	mov    ecx,0x3
c001cb0a:	53                   	push   ebx
c001cb0b:	83 ec 14             	sub    esp,0x14
c001cb0e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cb12:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cb16:	fc                   	cld    
c001cb17:	31 c0                	xor    eax,eax
c001cb19:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cb1b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001cb20:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001cb25:	50                   	push   eax
c001cb26:	50                   	push   eax
c001cb27:	6a 00                	push   0x0
c001cb29:	6a 00                	push   0x0
c001cb2b:	6a 00                	push   0x0
c001cb2d:	6a 02                	push   0x2
c001cb2f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb33:	50                   	push   eax
c001cb34:	53                   	push   ebx
c001cb35:	e8 ee fc ff ff       	call   c001c828 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cb3a:	83 c4 14             	add    esp,0x14
c001cb3d:	53                   	push   ebx
c001cb3e:	e8 a5 ff ff ff       	call   c001cae8 <ATAPI::diskRemoved()>
c001cb43:	83 c4 24             	add    esp,0x24
c001cb46:	5b                   	pop    ebx
c001cb47:	5f                   	pop    edi
c001cb48:	c3                   	ret    
c001cb49:	90                   	nop

c001cb4a <ATAPI::diskInserted()>:
c001cb4a:	53                   	push   ebx
c001cb4b:	83 ec 14             	sub    esp,0x14
c001cb4e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cb52:	68 f5 1e 02 c0       	push   0xc0021ef5
c001cb57:	e8 0e 01 ff ff       	call   c000cc6a <kprintf(char const*, ...)>
c001cb5c:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001cb63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb66:	e8 31 6e ff ff       	call   c001399c <PhysicalDisk::startCache()>
c001cb6b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001cb6f:	83 c4 18             	add    esp,0x18
c001cb72:	5b                   	pop    ebx
c001cb73:	e9 80 86 ff ff       	jmp    c00151f8 <createPartitionsForDisk(PhysicalDisk*)>

c001cb78 <ATAPI::detectMedia()>:
c001cb78:	56                   	push   esi
c001cb79:	53                   	push   ebx
c001cb7a:	83 ec 28             	sub    esp,0x28
c001cb7d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cb81:	6a 0c                	push   0xc
c001cb83:	6a 00                	push   0x0
c001cb85:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001cb89:	56                   	push   esi
c001cb8a:	e8 79 3a fe ff       	call   c0000608 <memset>
c001cb8f:	58                   	pop    eax
c001cb90:	5a                   	pop    edx
c001cb91:	6a 00                	push   0x0
c001cb93:	6a 00                	push   0x0
c001cb95:	6a 00                	push   0x0
c001cb97:	6a 00                	push   0x0
c001cb99:	56                   	push   esi
c001cb9a:	53                   	push   ebx
c001cb9b:	e8 88 fc ff ff       	call   c001c828 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cba0:	83 c4 1c             	add    esp,0x1c
c001cba3:	6a 0c                	push   0xc
c001cba5:	6a 00                	push   0x0
c001cba7:	56                   	push   esi
c001cba8:	e8 5b 3a fe ff       	call   c0000608 <memset>
c001cbad:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001cbb2:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001cbb7:	59                   	pop    ecx
c001cbb8:	58                   	pop    eax
c001cbb9:	6a 01                	push   0x1
c001cbbb:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001cbbf:	50                   	push   eax
c001cbc0:	6a 00                	push   0x0
c001cbc2:	6a 12                	push   0x12
c001cbc4:	56                   	push   esi
c001cbc5:	53                   	push   ebx
c001cbc6:	e8 5d fc ff ff       	call   c001c828 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cbcb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001cbcf:	83 c4 20             	add    esp,0x20
c001cbd2:	83 e0 7f             	and    eax,0x7f
c001cbd5:	3c 70                	cmp    al,0x70
c001cbd7:	74 15                	je     c001cbee <ATAPI::detectMedia()+0x76>
c001cbd9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cbe0:	75 0c                	jne    c001cbee <ATAPI::detectMedia()+0x76>
c001cbe2:	83 ec 0c             	sub    esp,0xc
c001cbe5:	53                   	push   ebx
c001cbe6:	e8 5f ff ff ff       	call   c001cb4a <ATAPI::diskInserted()>
c001cbeb:	83 c4 10             	add    esp,0x10
c001cbee:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001cbf2:	83 e0 0f             	and    eax,0xf
c001cbf5:	3c 02                	cmp    al,0x2
c001cbf7:	75 1b                	jne    c001cc14 <ATAPI::detectMedia()+0x9c>
c001cbf9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001cbfe:	75 2d                	jne    c001cc2d <ATAPI::detectMedia()+0xb5>
c001cc00:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cc07:	74 24                	je     c001cc2d <ATAPI::detectMedia()+0xb5>
c001cc09:	83 ec 0c             	sub    esp,0xc
c001cc0c:	53                   	push   ebx
c001cc0d:	e8 d6 fe ff ff       	call   c001cae8 <ATAPI::diskRemoved()>
c001cc12:	eb 16                	jmp    c001cc2a <ATAPI::detectMedia()+0xb2>
c001cc14:	84 c0                	test   al,al
c001cc16:	75 15                	jne    c001cc2d <ATAPI::detectMedia()+0xb5>
c001cc18:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cc1f:	75 0c                	jne    c001cc2d <ATAPI::detectMedia()+0xb5>
c001cc21:	83 ec 0c             	sub    esp,0xc
c001cc24:	53                   	push   ebx
c001cc25:	e8 20 ff ff ff       	call   c001cb4a <ATAPI::diskInserted()>
c001cc2a:	83 c4 10             	add    esp,0x10
c001cc2d:	83 c4 24             	add    esp,0x24
c001cc30:	5b                   	pop    ebx
c001cc31:	5e                   	pop    esi
c001cc32:	c3                   	ret    
c001cc33:	90                   	nop

c001cc34 <ATAPI::open(int, int, void*)>:
c001cc34:	53                   	push   ebx
c001cc35:	83 ec 08             	sub    esp,0x8
c001cc38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc40:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc44:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cc4a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cc50:	c1 e0 06             	shl    eax,0x6
c001cc53:	01 d0                	add    eax,edx
c001cc55:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001cc5c:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001cc62:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001cc69:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001cc73:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001cc79:	6a 04                	push   0x4
c001cc7b:	6a 0c                	push   0xc
c001cc7d:	51                   	push   ecx
c001cc7e:	52                   	push   edx
c001cc7f:	e8 be e8 ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc84:	90                   	nop
c001cc85:	90                   	nop
c001cc86:	6a 00                	push   0x0
c001cc88:	6a 0c                	push   0xc
c001cc8a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc91:	50                   	push   eax
c001cc92:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc98:	e8 a5 e8 ff ff       	call   c001b542 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc9d:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001cca4:	83 c4 14             	add    esp,0x14
c001cca7:	53                   	push   ebx
c001cca8:	e8 cb fe ff ff       	call   c001cb78 <ATAPI::detectMedia()>
c001ccad:	31 c0                	xor    eax,eax
c001ccaf:	83 c4 18             	add    esp,0x18
c001ccb2:	5b                   	pop    ebx
c001ccb3:	c3                   	ret    

c001ccb4 <ATAPI::read(unsigned long long, int, void*)>:
c001ccb4:	55                   	push   ebp
c001ccb5:	57                   	push   edi
c001ccb6:	56                   	push   esi
c001ccb7:	53                   	push   ebx
c001ccb8:	83 ec 1c             	sub    esp,0x1c
c001ccbb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ccbf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ccc3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001ccc7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001ccce:	74 41                	je     c001cd11 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001ccd0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ccd4:	b9 03 00 00 00       	mov    ecx,0x3
c001ccd9:	fc                   	cld    
c001ccda:	31 c0                	xor    eax,eax
c001ccdc:	86 fb                	xchg   bl,bh
c001ccde:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cce0:	c1 c3 10             	rol    ebx,0x10
c001cce3:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001cce8:	89 e8                	mov    eax,ebp
c001ccea:	86 fb                	xchg   bl,bh
c001ccec:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ccf0:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001ccf4:	50                   	push   eax
c001ccf5:	50                   	push   eax
c001ccf6:	55                   	push   ebp
c001ccf7:	c1 e5 0b             	shl    ebp,0xb
c001ccfa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ccfe:	6a 00                	push   0x0
c001cd00:	55                   	push   ebp
c001cd01:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cd05:	50                   	push   eax
c001cd06:	56                   	push   esi
c001cd07:	e8 1c fb ff ff       	call   c001c828 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cd0c:	83 c4 20             	add    esp,0x20
c001cd0f:	eb 1a                	jmp    c001cd2b <ATAPI::read(unsigned long long, int, void*)+0x77>
c001cd11:	83 ec 0c             	sub    esp,0xc
c001cd14:	56                   	push   esi
c001cd15:	e8 5e fe ff ff       	call   c001cb78 <ATAPI::detectMedia()>
c001cd1a:	83 c4 10             	add    esp,0x10
c001cd1d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001cd24:	75 aa                	jne    c001ccd0 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001cd26:	b8 02 00 00 00       	mov    eax,0x2
c001cd2b:	83 c4 1c             	add    esp,0x1c
c001cd2e:	5b                   	pop    ebx
c001cd2f:	5e                   	pop    esi
c001cd30:	5f                   	pop    edi
c001cd31:	5d                   	pop    ebp
c001cd32:	c3                   	ret    
c001cd33:	90                   	nop

c001cd34 <AVX::open(int, int, void*)>:
c001cd34:	83 ec 0c             	sub    esp,0xc
c001cd37:	e8 0c 10 00 00       	call   c001dd48 <avxInit>
c001cd3c:	b8 00 00 00 00       	mov    eax,0x0
c001cd41:	83 c4 0c             	add    esp,0xc
c001cd44:	c3                   	ret    
c001cd45:	90                   	nop

c001cd46 <AVX::close(int, int, void*)>:
c001cd46:	83 ec 0c             	sub    esp,0xc
c001cd49:	e8 fb 0f 00 00       	call   c001dd49 <avxClose>
c001cd4e:	b8 00 00 00 00       	mov    eax,0x0
c001cd53:	83 c4 0c             	add    esp,0xc
c001cd56:	c3                   	ret    
c001cd57:	90                   	nop

c001cd58 <AVX::available()>:
c001cd58:	83 ec 0c             	sub    esp,0xc
c001cd5b:	e8 e0 0f 00 00       	call   c001dd40 <avxDetect>
c001cd60:	85 c0                	test   eax,eax
c001cd62:	0f 95 c0             	setne  al
c001cd65:	83 c4 0c             	add    esp,0xc
c001cd68:	c3                   	ret    
c001cd69:	90                   	nop

c001cd6a <AVX::save(void*)>:
c001cd6a:	83 ec 0c             	sub    esp,0xc
c001cd6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cd71:	83 ec 0c             	sub    esp,0xc
c001cd74:	50                   	push   eax
c001cd75:	e8 cc 0f 00 00       	call   c001dd46 <avxSave>
c001cd7a:	83 c4 10             	add    esp,0x10
c001cd7d:	90                   	nop
c001cd7e:	83 c4 0c             	add    esp,0xc
c001cd81:	c3                   	ret    

c001cd82 <AVX::load(void*)>:
c001cd82:	83 ec 0c             	sub    esp,0xc
c001cd85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cd89:	83 ec 0c             	sub    esp,0xc
c001cd8c:	50                   	push   eax
c001cd8d:	e8 b5 0f 00 00       	call   c001dd47 <avxLoad>
c001cd92:	83 c4 10             	add    esp,0x10
c001cd95:	90                   	nop
c001cd96:	83 c4 0c             	add    esp,0xc
c001cd99:	c3                   	ret    

c001cd9a <AVX::AVX()>:
c001cd9a:	83 ec 0c             	sub    esp,0xc
c001cd9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cda1:	83 ec 08             	sub    esp,0x8
c001cda4:	68 40 1f 02 c0       	push   0xc0021f40
c001cda9:	50                   	push   eax
c001cdaa:	e8 63 6c ff ff       	call   c0013a12 <FPU::FPU(char const*)>
c001cdaf:	83 c4 10             	add    esp,0x10
c001cdb2:	ba 50 1f 02 c0       	mov    edx,0xc0021f50
c001cdb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdbb:	89 10                	mov    DWORD PTR [eax],edx
c001cdbd:	90                   	nop
c001cdbe:	83 c4 0c             	add    esp,0xc
c001cdc1:	c3                   	ret    

c001cdc2 <MMX::available()>:
c001cdc2:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c001cdc7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001cdcd:	83 e0 20             	and    eax,0x20
c001cdd0:	84 c0                	test   al,al
c001cdd2:	0f 95 c0             	setne  al
c001cdd5:	c3                   	ret    

c001cdd6 <MMX::open(int, int, void*)>:
c001cdd6:	83 ec 0c             	sub    esp,0xc
c001cdd9:	e8 de 0f 00 00       	call   c001ddbc <x87Init>
c001cdde:	b8 00 00 00 00       	mov    eax,0x0
c001cde3:	83 c4 0c             	add    esp,0xc
c001cde6:	c3                   	ret    
c001cde7:	90                   	nop

c001cde8 <MMX::close(int, int, void*)>:
c001cde8:	83 ec 0c             	sub    esp,0xc
c001cdeb:	e8 e6 0f 00 00       	call   c001ddd6 <x87Close>
c001cdf0:	b8 00 00 00 00       	mov    eax,0x0
c001cdf5:	83 c4 0c             	add    esp,0xc
c001cdf8:	c3                   	ret    
c001cdf9:	90                   	nop

c001cdfa <MMX::save(void*)>:
c001cdfa:	83 ec 0c             	sub    esp,0xc
c001cdfd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce01:	83 ec 0c             	sub    esp,0xc
c001ce04:	50                   	push   eax
c001ce05:	e8 a7 0f 00 00       	call   c001ddb1 <x87Save>
c001ce0a:	83 c4 10             	add    esp,0x10
c001ce0d:	90                   	nop
c001ce0e:	83 c4 0c             	add    esp,0xc
c001ce11:	c3                   	ret    

c001ce12 <MMX::load(void*)>:
c001ce12:	83 ec 0c             	sub    esp,0xc
c001ce15:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce19:	83 ec 0c             	sub    esp,0xc
c001ce1c:	50                   	push   eax
c001ce1d:	e8 95 0f 00 00       	call   c001ddb7 <x87Load>
c001ce22:	83 c4 10             	add    esp,0x10
c001ce25:	90                   	nop
c001ce26:	83 c4 0c             	add    esp,0xc
c001ce29:	c3                   	ret    

c001ce2a <MMX::MMX()>:
c001ce2a:	83 ec 0c             	sub    esp,0xc
c001ce2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce31:	83 ec 08             	sub    esp,0x8
c001ce34:	68 80 1f 02 c0       	push   0xc0021f80
c001ce39:	50                   	push   eax
c001ce3a:	e8 d3 6b ff ff       	call   c0013a12 <FPU::FPU(char const*)>
c001ce3f:	83 c4 10             	add    esp,0x10
c001ce42:	ba 90 1f 02 c0       	mov    edx,0xc0021f90
c001ce47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce4b:	89 10                	mov    DWORD PTR [eax],edx
c001ce4d:	90                   	nop
c001ce4e:	83 c4 0c             	add    esp,0xc
c001ce51:	c3                   	ret    

c001ce52 <SSE::open(int, int, void*)>:
c001ce52:	83 ec 0c             	sub    esp,0xc
c001ce55:	e8 1d 0f 00 00       	call   c001dd77 <sseInit>
c001ce5a:	b8 00 00 00 00       	mov    eax,0x0
c001ce5f:	83 c4 0c             	add    esp,0xc
c001ce62:	c3                   	ret    
c001ce63:	90                   	nop

c001ce64 <SSE::close(int, int, void*)>:
c001ce64:	83 ec 0c             	sub    esp,0xc
c001ce67:	e8 1b 0f 00 00       	call   c001dd87 <sseClose>
c001ce6c:	b8 00 00 00 00       	mov    eax,0x0
c001ce71:	83 c4 0c             	add    esp,0xc
c001ce74:	c3                   	ret    
c001ce75:	90                   	nop

c001ce76 <SSE::available()>:
c001ce76:	83 ec 1c             	sub    esp,0x1c
c001ce79:	e8 d2 0e 00 00       	call   c001dd50 <sseDetect>
c001ce7e:	85 c0                	test   eax,eax
c001ce80:	0f 95 c0             	setne  al
c001ce83:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ce87:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ce8b:	83 c4 1c             	add    esp,0x1c
c001ce8e:	c3                   	ret    
c001ce8f:	90                   	nop

c001ce90 <SSE::save(void*)>:
c001ce90:	83 ec 0c             	sub    esp,0xc
c001ce93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce97:	83 ec 0c             	sub    esp,0xc
c001ce9a:	50                   	push   eax
c001ce9b:	e8 cb 0e 00 00       	call   c001dd6b <sseSave>
c001cea0:	83 c4 10             	add    esp,0x10
c001cea3:	90                   	nop
c001cea4:	83 c4 0c             	add    esp,0xc
c001cea7:	c3                   	ret    

c001cea8 <SSE::load(void*)>:
c001cea8:	83 ec 0c             	sub    esp,0xc
c001ceab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ceaf:	83 ec 0c             	sub    esp,0xc
c001ceb2:	50                   	push   eax
c001ceb3:	e8 b9 0e 00 00       	call   c001dd71 <sseLoad>
c001ceb8:	83 c4 10             	add    esp,0x10
c001cebb:	90                   	nop
c001cebc:	83 c4 0c             	add    esp,0xc
c001cebf:	c3                   	ret    

c001cec0 <SSE::SSE()>:
c001cec0:	83 ec 0c             	sub    esp,0xc
c001cec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cec7:	83 ec 08             	sub    esp,0x8
c001ceca:	68 c0 1f 02 c0       	push   0xc0021fc0
c001cecf:	50                   	push   eax
c001ced0:	e8 3d 6b ff ff       	call   c0013a12 <FPU::FPU(char const*)>
c001ced5:	83 c4 10             	add    esp,0x10
c001ced8:	ba d0 1f 02 c0       	mov    edx,0xc0021fd0
c001cedd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cee1:	89 10                	mov    DWORD PTR [eax],edx
c001cee3:	90                   	nop
c001cee4:	83 c4 0c             	add    esp,0xc
c001cee7:	c3                   	ret    

c001cee8 <x87::open(int, int, void*)>:
c001cee8:	83 ec 0c             	sub    esp,0xc
c001ceeb:	e8 cc 0e 00 00       	call   c001ddbc <x87Init>
c001cef0:	b8 00 00 00 00       	mov    eax,0x0
c001cef5:	83 c4 0c             	add    esp,0xc
c001cef8:	c3                   	ret    
c001cef9:	90                   	nop

c001cefa <x87::close(int, int, void*)>:
c001cefa:	83 ec 0c             	sub    esp,0xc
c001cefd:	e8 d4 0e 00 00       	call   c001ddd6 <x87Close>
c001cf02:	b8 00 00 00 00       	mov    eax,0x0
c001cf07:	83 c4 0c             	add    esp,0xc
c001cf0a:	c3                   	ret    
c001cf0b:	90                   	nop

c001cf0c <x87::available()>:
c001cf0c:	83 ec 0c             	sub    esp,0xc
c001cf0f:	e8 82 0e 00 00       	call   c001dd96 <x87Detect>
c001cf14:	85 c0                	test   eax,eax
c001cf16:	0f 95 c0             	setne  al
c001cf19:	83 c4 0c             	add    esp,0xc
c001cf1c:	c3                   	ret    
c001cf1d:	90                   	nop

c001cf1e <x87::save(void*)>:
c001cf1e:	83 ec 0c             	sub    esp,0xc
c001cf21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf25:	83 ec 0c             	sub    esp,0xc
c001cf28:	50                   	push   eax
c001cf29:	e8 83 0e 00 00       	call   c001ddb1 <x87Save>
c001cf2e:	83 c4 10             	add    esp,0x10
c001cf31:	90                   	nop
c001cf32:	83 c4 0c             	add    esp,0xc
c001cf35:	c3                   	ret    

c001cf36 <x87::load(void*)>:
c001cf36:	83 ec 0c             	sub    esp,0xc
c001cf39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf3d:	83 ec 0c             	sub    esp,0xc
c001cf40:	50                   	push   eax
c001cf41:	e8 71 0e 00 00       	call   c001ddb7 <x87Load>
c001cf46:	83 c4 10             	add    esp,0x10
c001cf49:	90                   	nop
c001cf4a:	83 c4 0c             	add    esp,0xc
c001cf4d:	c3                   	ret    

c001cf4e <x87::x87()>:
c001cf4e:	83 ec 0c             	sub    esp,0xc
c001cf51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf55:	83 ec 08             	sub    esp,0x8
c001cf58:	68 00 20 02 c0       	push   0xc0022000
c001cf5d:	50                   	push   eax
c001cf5e:	e8 af 6a ff ff       	call   c0013a12 <FPU::FPU(char const*)>
c001cf63:	83 c4 10             	add    esp,0x10
c001cf66:	ba 10 20 02 c0       	mov    edx,0xc0022010
c001cf6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf6f:	89 10                	mov    DWORD PTR [eax],edx
c001cf71:	90                   	nop
c001cf72:	83 c4 0c             	add    esp,0xc
c001cf75:	c3                   	ret    

c001cf76 <APIC::disable()>:
c001cf76:	90                   	nop
c001cf77:	c3                   	ret    

c001cf78 <APIC::close(int, int, void*)>:
c001cf78:	55                   	push   ebp
c001cf79:	89 e5                	mov    ebp,esp
c001cf7b:	83 ec 08             	sub    esp,0x8
c001cf7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cf81:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf83:	83 c0 3c             	add    eax,0x3c
c001cf86:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf88:	83 ec 0c             	sub    esp,0xc
c001cf8b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001cf8e:	ff d0                	call   eax
c001cf90:	83 c4 10             	add    esp,0x10
c001cf93:	b8 00 00 00 00       	mov    eax,0x0
c001cf98:	c9                   	leave  
c001cf99:	c3                   	ret    

c001cf9a <IOAPIC::close(int, int, void*)>:
c001cf9a:	b8 00 00 00 00       	mov    eax,0x0
c001cf9f:	c3                   	ret    

c001cfa0 <APIC::io_wait()>:
c001cfa0:	eb 00                	jmp    c001cfa2 <APIC::io_wait()+0x2>
c001cfa2:	eb 00                	jmp    c001cfa4 <APIC::io_wait()+0x4>
c001cfa4:	90                   	nop
c001cfa5:	c3                   	ret    

c001cfa6 <APIC::getBase()>:
c001cfa6:	55                   	push   ebp
c001cfa7:	89 e5                	mov    ebp,esp
c001cfa9:	83 ec 18             	sub    esp,0x18
c001cfac:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c001cfb1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001cfb7:	83 e0 08             	and    eax,0x8
c001cfba:	84 c0                	test   al,al
c001cfbc:	75 07                	jne    c001cfc5 <APIC::getBase()+0x1f>
c001cfbe:	b8 00 00 00 00       	mov    eax,0x0
c001cfc3:	eb 21                	jmp    c001cfe6 <APIC::getBase()+0x40>
c001cfc5:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c001cfca:	83 ec 08             	sub    esp,0x8
c001cfcd:	6a 1b                	push   0x1b
c001cfcf:	50                   	push   eax
c001cfd0:	e8 f1 e1 fe ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c001cfd5:	83 c4 10             	add    esp,0x10
c001cfd8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001cfdb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001cfde:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001cfe1:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cfe6:	c9                   	leave  
c001cfe7:	c3                   	ret    

c001cfe8 <APIC::eoi(unsigned char)>:
c001cfe8:	55                   	push   ebp
c001cfe9:	89 e5                	mov    ebp,esp
c001cfeb:	83 ec 28             	sub    esp,0x28
c001cfee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001cff1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001cff4:	83 ec 0c             	sub    esp,0xc
c001cff7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001cffa:	e8 a7 ff ff ff       	call   c001cfa6 <APIC::getBase()>
c001cfff:	83 c4 10             	add    esp,0x10
c001d002:	05 b0 00 00 00       	add    eax,0xb0
c001d007:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d00a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d00d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d013:	90                   	nop
c001d014:	c9                   	leave  
c001d015:	c3                   	ret    

c001d016 <APIC::open(int, int, void*)>:
c001d016:	55                   	push   ebp
c001d017:	89 e5                	mov    ebp,esp
c001d019:	57                   	push   edi
c001d01a:	56                   	push   esi
c001d01b:	53                   	push   ebx
c001d01c:	83 ec 1c             	sub    esp,0x1c
c001d01f:	83 ec 0c             	sub    esp,0xc
c001d022:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d025:	e8 7c ff ff ff       	call   c001cfa6 <APIC::getBase()>
c001d02a:	83 c4 10             	add    esp,0x10
c001d02d:	05 f0 00 00 00       	add    eax,0xf0
c001d032:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d035:	83 ec 0c             	sub    esp,0xc
c001d038:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d03b:	e8 66 ff ff ff       	call   c001cfa6 <APIC::getBase()>
c001d040:	83 c4 10             	add    esp,0x10
c001d043:	89 c2                	mov    edx,eax
c001d045:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d048:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d04e:	0f b6 f8             	movzx  edi,al
c001d051:	89 d0                	mov    eax,edx
c001d053:	ba 00 00 00 00       	mov    edx,0x0
c001d058:	89 c1                	mov    ecx,eax
c001d05a:	80 e5 ff             	and    ch,0xff
c001d05d:	89 cb                	mov    ebx,ecx
c001d05f:	0f b6 f2             	movzx  esi,dl
c001d062:	89 d8                	mov    eax,ebx
c001d064:	89 f2                	mov    edx,esi
c001d066:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d069:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d06c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d070:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d074:	83 e0 00             	and    eax,0x0
c001d077:	09 d0                	or     eax,edx
c001d079:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d07d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d080:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d086:	8d 50 01             	lea    edx,[eax+0x1]
c001d089:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d08c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d092:	0f b6 d0             	movzx  edx,al
c001d095:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d098:	83 c2 08             	add    edx,0x8
c001d09b:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d09f:	0f b6 c9             	movzx  ecx,cl
c001d0a2:	81 c9 00 00 01 00    	or     ecx,0x10000
c001d0a8:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d0ac:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d0af:	8b 00                	mov    eax,DWORD PTR [eax]
c001d0b1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d0b4:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001d0bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d0be:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d0c1:	89 10                	mov    DWORD PTR [eax],edx
c001d0c3:	b8 00 00 00 00       	mov    eax,0x0
c001d0c8:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d0cb:	5b                   	pop    ebx
c001d0cc:	5e                   	pop    esi
c001d0cd:	5f                   	pop    edi
c001d0ce:	5d                   	pop    ebp
c001d0cf:	c3                   	ret    

c001d0d0 <IOAPIC::IOAPIC()>:
c001d0d0:	83 ec 0c             	sub    esp,0xc
c001d0d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0d7:	83 ec 08             	sub    esp,0x8
c001d0da:	68 40 20 02 c0       	push   0xc0022040
c001d0df:	50                   	push   eax
c001d0e0:	e8 39 66 ff ff       	call   c001371e <Device::Device(char const*)>
c001d0e5:	83 c4 10             	add    esp,0x10
c001d0e8:	ba 68 21 02 c0       	mov    edx,0xc0022168
c001d0ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0f1:	89 10                	mov    DWORD PTR [eax],edx
c001d0f3:	90                   	nop
c001d0f4:	83 c4 0c             	add    esp,0xc
c001d0f7:	c3                   	ret    

c001d0f8 <APIC::APIC()>:
c001d0f8:	53                   	push   ebx
c001d0f9:	83 ec 18             	sub    esp,0x18
c001d0fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d100:	83 ec 08             	sub    esp,0x8
c001d103:	68 48 20 02 c0       	push   0xc0022048
c001d108:	50                   	push   eax
c001d109:	e8 38 6d ff ff       	call   c0013e46 <InterruptController::InterruptController(char const*)>
c001d10e:	83 c4 10             	add    esp,0x10
c001d111:	ba 20 21 02 c0       	mov    edx,0xc0022120
c001d116:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d11a:	89 10                	mov    DWORD PTR [eax],edx
c001d11c:	a0 c0 4b 02 c0       	mov    al,ds:0xc0024bc0
c001d121:	83 f0 01             	xor    eax,0x1
c001d124:	84 c0                	test   al,al
c001d126:	0f 84 96 00 00 00    	je     c001d1c2 <APIC::APIC()+0xca>
c001d12c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d131:	a0 90 40 02 c0       	mov    al,ds:0xc0024090
c001d136:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001d13a:	73 7f                	jae    c001d1bb <APIC::APIC()+0xc3>
c001d13c:	83 ec 0c             	sub    esp,0xc
c001d13f:	68 68 01 00 00       	push   0x168
c001d144:	e8 db 50 ff ff       	call   c0012224 <operator new(unsigned long)>
c001d149:	83 c4 10             	add    esp,0x10
c001d14c:	89 c3                	mov    ebx,eax
c001d14e:	83 ec 0c             	sub    esp,0xc
c001d151:	53                   	push   ebx
c001d152:	e8 79 ff ff ff       	call   c001d0d0 <IOAPIC::IOAPIC()>
c001d157:	83 c4 10             	add    esp,0x10
c001d15a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d15e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d163:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d167:	89 14 85 a0 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb460],edx
c001d16e:	a1 80 4b 02 c0       	mov    eax,ds:0xc0024b80
c001d173:	40                   	inc    eax
c001d174:	a3 80 4b 02 c0       	mov    ds:0xc0024b80,eax
c001d179:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c001d17e:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d184:	83 ec 08             	sub    esp,0x8
c001d187:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d18b:	50                   	push   eax
c001d18c:	e8 9d 63 ff ff       	call   c001352e <Device::addChild(Device*)>
c001d191:	83 c4 10             	add    esp,0x10
c001d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d198:	8b 00                	mov    eax,DWORD PTR [eax]
c001d19a:	83 c0 08             	add    eax,0x8
c001d19d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d19f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001d1a4:	6a 00                	push   0x0
c001d1a6:	6a 00                	push   0x0
c001d1a8:	52                   	push   edx
c001d1a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d1ad:	ff d0                	call   eax
c001d1af:	83 c4 10             	add    esp,0x10
c001d1b2:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001d1b6:	e9 76 ff ff ff       	jmp    c001d131 <APIC::APIC()+0x39>
c001d1bb:	c6 05 c0 4b 02 c0 01 	mov    BYTE PTR ds:0xc0024bc0,0x1
c001d1c2:	90                   	nop
c001d1c3:	83 c4 18             	add    esp,0x18
c001d1c6:	5b                   	pop    ebx
c001d1c7:	c3                   	ret    

c001d1c8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d1c8:	55                   	push   ebp
c001d1c9:	89 e5                	mov    ebp,esp
c001d1cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d1d4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d1d7:	72 1d                	jb     c001d1f6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d1d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1dc:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d1e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1e5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d1eb:	01 d0                	add    eax,edx
c001d1ed:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d1f0:	73 04                	jae    c001d1f6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d1f2:	b0 01                	mov    al,0x1
c001d1f4:	eb 02                	jmp    c001d1f8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d1f6:	b0 00                	mov    al,0x0
c001d1f8:	5d                   	pop    ebp
c001d1f9:	c3                   	ret    

c001d1fa <IOAPIC::read(int)>:
c001d1fa:	55                   	push   ebp
c001d1fb:	89 e5                	mov    ebp,esp
c001d1fd:	83 ec 10             	sub    esp,0x10
c001d200:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d203:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d209:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d20c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d20f:	0f b6 d0             	movzx  edx,al
c001d212:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d215:	89 10                	mov    DWORD PTR [eax],edx
c001d217:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d21a:	83 c0 10             	add    eax,0x10
c001d21d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d21f:	c9                   	leave  
c001d220:	c3                   	ret    
c001d221:	90                   	nop

c001d222 <IOAPIC::open(int, int, void*)>:
c001d222:	55                   	push   ebp
c001d223:	89 e5                	mov    ebp,esp
c001d225:	57                   	push   edi
c001d226:	56                   	push   esi
c001d227:	53                   	push   ebx
c001d228:	83 ec 0c             	sub    esp,0xc
c001d22b:	83 ec 0c             	sub    esp,0xc
c001d22e:	68 73 20 02 c0       	push   0xc0022073
c001d233:	e8 32 fa fe ff       	call   c000cc6a <kprintf(char const*, ...)>
c001d238:	83 c4 10             	add    esp,0x10
c001d23b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d23e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d241:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d247:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d24a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d250:	8b 14 85 c0 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf40]
c001d257:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d25a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d260:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d263:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d269:	8b 14 85 40 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbec0]
c001d270:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d273:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d279:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d27c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d282:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d285:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d28b:	0f b6 f8             	movzx  edi,al
c001d28e:	89 d0                	mov    eax,edx
c001d290:	ba 00 00 00 00       	mov    edx,0x0
c001d295:	89 c1                	mov    ecx,eax
c001d297:	80 e5 ff             	and    ch,0xff
c001d29a:	89 cb                	mov    ebx,ecx
c001d29c:	0f b6 f2             	movzx  esi,dl
c001d29f:	89 d8                	mov    eax,ebx
c001d2a1:	89 f2                	mov    edx,esi
c001d2a3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d2a6:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d2a9:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d2ad:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d2b1:	83 e0 00             	and    eax,0x0
c001d2b4:	09 d0                	or     eax,edx
c001d2b6:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d2ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d2bd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d2c3:	8d 50 01             	lea    edx,[eax+0x1]
c001d2c6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d2c9:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d2cf:	0f b6 d0             	movzx  edx,al
c001d2d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d2d5:	83 c2 08             	add    edx,0x8
c001d2d8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d2dc:	0f b6 c9             	movzx  ecx,cl
c001d2df:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d2e5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d2e9:	83 ec 08             	sub    esp,0x8
c001d2ec:	6a 01                	push   0x1
c001d2ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d2f1:	e8 04 ff ff ff       	call   c001d1fa <IOAPIC::read(int)>
c001d2f6:	83 c4 10             	add    esp,0x10
c001d2f9:	c1 f8 10             	sar    eax,0x10
c001d2fc:	0f b6 c0             	movzx  eax,al
c001d2ff:	8d 50 01             	lea    edx,[eax+0x1]
c001d302:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d305:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d30b:	b8 00 00 00 00       	mov    eax,0x0
c001d310:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d313:	5b                   	pop    ebx
c001d314:	5e                   	pop    esi
c001d315:	5f                   	pop    edi
c001d316:	5d                   	pop    ebp
c001d317:	c3                   	ret    

c001d318 <IOAPIC::write(int, int)>:
c001d318:	55                   	push   ebp
c001d319:	89 e5                	mov    ebp,esp
c001d31b:	83 ec 10             	sub    esp,0x10
c001d31e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d321:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d327:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d32a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d32d:	0f b6 d0             	movzx  edx,al
c001d330:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d333:	89 10                	mov    DWORD PTR [eax],edx
c001d335:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d338:	8d 50 10             	lea    edx,[eax+0x10]
c001d33b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d33e:	89 02                	mov    DWORD PTR [edx],eax
c001d340:	90                   	nop
c001d341:	c9                   	leave  
c001d342:	c3                   	ret    
c001d343:	90                   	nop

c001d344 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001d344:	55                   	push   ebp
c001d345:	89 e5                	mov    ebp,esp
c001d347:	83 ec 20             	sub    esp,0x20
c001d34a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d34d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d350:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d353:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d356:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d359:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d35c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d35f:	88 d0                	mov    al,dl
c001d361:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001d364:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d368:	83 c0 08             	add    eax,0x8
c001d36b:	01 c0                	add    eax,eax
c001d36d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d370:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d374:	83 c0 08             	add    eax,0x8
c001d377:	01 c0                	add    eax,eax
c001d379:	40                   	inc    eax
c001d37a:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001d37d:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d380:	50                   	push   eax
c001d381:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d384:	e8 71 fe ff ff       	call   c001d1fa <IOAPIC::read(int)>
c001d389:	83 c4 08             	add    esp,0x8
c001d38c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d38f:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001d396:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001d399:	c1 e0 18             	shl    eax,0x18
c001d39c:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d39f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d3a2:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d3a5:	52                   	push   edx
c001d3a6:	50                   	push   eax
c001d3a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d3aa:	e8 69 ff ff ff       	call   c001d318 <IOAPIC::write(int, int)>
c001d3af:	83 c4 0c             	add    esp,0xc
c001d3b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d3b5:	50                   	push   eax
c001d3b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d3b9:	e8 3c fe ff ff       	call   c001d1fa <IOAPIC::read(int)>
c001d3be:	83 c4 08             	add    esp,0x8
c001d3c1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d3c4:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001d3cb:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001d3d2:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001d3d9:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001d3e0:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001d3e4:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001d3e7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001d3ea:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d3ed:	52                   	push   edx
c001d3ee:	50                   	push   eax
c001d3ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d3f2:	e8 21 ff ff ff       	call   c001d318 <IOAPIC::write(int, int)>
c001d3f7:	83 c4 0c             	add    esp,0xc
c001d3fa:	90                   	nop
c001d3fb:	c9                   	leave  
c001d3fc:	c3                   	ret    
c001d3fd:	90                   	nop

c001d3fe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001d3fe:	55                   	push   ebp
c001d3ff:	89 e5                	mov    ebp,esp
c001d401:	56                   	push   esi
c001d402:	53                   	push   ebx
c001d403:	83 ec 20             	sub    esp,0x20
c001d406:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d409:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d40c:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001d410:	74 28                	je     c001d43a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d412:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001d416:	7f 12                	jg     c001d42a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001d418:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d41b:	05 c0 25 02 c0       	add    eax,0xc00225c0
c001d420:	8a 00                	mov    al,BYTE PTR [eax]
c001d422:	0f b6 c0             	movzx  eax,al
c001d425:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001d428:	eb 10                	jmp    c001d43a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d42a:	83 ec 0c             	sub    esp,0xc
c001d42d:	68 84 20 02 c0       	push   0xc0022084
c001d432:	e8 51 f9 fe ff       	call   c000cd88 <panic(char const*)>
c001d437:	83 c4 10             	add    esp,0x10
c001d43a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d43e:	a1 80 4b 02 c0       	mov    eax,ds:0xc0024b80
c001d443:	83 ec 08             	sub    esp,0x8
c001d446:	50                   	push   eax
c001d447:	68 bc 20 02 c0       	push   0xc00220bc
c001d44c:	e8 19 f8 fe ff       	call   c000cc6a <kprintf(char const*, ...)>
c001d451:	83 c4 10             	add    esp,0x10
c001d454:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d45b:	a1 80 4b 02 c0       	mov    eax,ds:0xc0024b80
c001d460:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d463:	7d 58                	jge    c001d4bd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001d465:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d468:	8b 04 85 a0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb460]
c001d46f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d472:	83 ec 08             	sub    esp,0x8
c001d475:	52                   	push   edx
c001d476:	50                   	push   eax
c001d477:	e8 4c fd ff ff       	call   c001d1c8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001d47c:	83 c4 10             	add    esp,0x10
c001d47f:	84 c0                	test   al,al
c001d481:	74 35                	je     c001d4b8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001d483:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d486:	8b 1c 85 a0 4b 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdb460]
c001d48d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d490:	83 c0 20             	add    eax,0x20
c001d493:	0f b6 f0             	movzx  esi,al
c001d496:	e8 e8 9a ff ff       	call   c0016f83 <getCPUNumber()>
c001d49b:	99                   	cdq    
c001d49c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001d49f:	0f b6 c9             	movzx  ecx,cl
c001d4a2:	83 ec 0c             	sub    esp,0xc
c001d4a5:	56                   	push   esi
c001d4a6:	52                   	push   edx
c001d4a7:	50                   	push   eax
c001d4a8:	51                   	push   ecx
c001d4a9:	53                   	push   ebx
c001d4aa:	e8 95 fe ff ff       	call   c001d344 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001d4af:	83 c4 20             	add    esp,0x20
c001d4b2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001d4b6:	eb 05                	jmp    c001d4bd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001d4b8:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001d4bb:	eb 9e                	jmp    c001d45b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001d4bd:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d4c0:	83 f0 01             	xor    eax,0x1
c001d4c3:	84 c0                	test   al,al
c001d4c5:	74 10                	je     c001d4d7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001d4c7:	83 ec 0c             	sub    esp,0xc
c001d4ca:	68 d3 20 02 c0       	push   0xc00220d3
c001d4cf:	e8 b4 f8 fe ff       	call   c000cd88 <panic(char const*)>
c001d4d4:	83 c4 10             	add    esp,0x10
c001d4d7:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001d4db:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001d4e2:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001d4e6:	7f 65                	jg     c001d54d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001d4e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d4eb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d4ee:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d4f5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d4f8:	01 ca                	add    edx,ecx
c001d4fa:	83 c2 54             	add    edx,0x54
c001d4fd:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001d501:	85 c0                	test   eax,eax
c001d503:	75 43                	jne    c001d548 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001d505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d508:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d50b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d512:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d515:	01 ca                	add    edx,ecx
c001d517:	8d 4a 54             	lea    ecx,[edx+0x54]
c001d51a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001d51d:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001d521:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d524:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d527:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d52e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d531:	01 ca                	add    edx,ecx
c001d533:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001d539:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d53c:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001d540:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d543:	83 e8 20             	sub    eax,0x20
c001d546:	eb 1a                	jmp    c001d562 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001d548:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001d54b:	eb 95                	jmp    c001d4e2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001d54d:	83 ec 0c             	sub    esp,0xc
c001d550:	68 e0 20 02 c0       	push   0xc00220e0
c001d555:	e8 2e f8 fe ff       	call   c000cd88 <panic(char const*)>
c001d55a:	83 c4 10             	add    esp,0x10
c001d55d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001d562:	8d 65 f8             	lea    esp,[ebp-0x8]
c001d565:	5b                   	pop    ebx
c001d566:	5e                   	pop    esi
c001d567:	5d                   	pop    ebp
c001d568:	c3                   	ret    
c001d569:	90                   	nop

c001d56a <PIC::disable()>:
c001d56a:	55                   	push   ebp
c001d56b:	89 e5                	mov    ebp,esp
c001d56d:	83 ec 10             	sub    esp,0x10
c001d570:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001d576:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001d57a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d57d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001d581:	ee                   	out    dx,al
c001d582:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001d588:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001d58c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001d58f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001d593:	ee                   	out    dx,al
c001d594:	90                   	nop
c001d595:	c9                   	leave  
c001d596:	c3                   	ret    
c001d597:	90                   	nop

c001d598 <PIC::close(int, int, void*)>:
c001d598:	55                   	push   ebp
c001d599:	89 e5                	mov    ebp,esp
c001d59b:	83 ec 08             	sub    esp,0x8
c001d59e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d5a1:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5a3:	83 c0 3c             	add    eax,0x3c
c001d5a6:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5a8:	83 ec 0c             	sub    esp,0xc
c001d5ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d5ae:	ff d0                	call   eax
c001d5b0:	83 c4 10             	add    esp,0x10
c001d5b3:	b8 00 00 00 00       	mov    eax,0x0
c001d5b8:	c9                   	leave  
c001d5b9:	c3                   	ret    

c001d5ba <PIC::PIC()>:
c001d5ba:	83 ec 0c             	sub    esp,0xc
c001d5bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5c1:	83 ec 08             	sub    esp,0x8
c001d5c4:	68 8c 21 02 c0       	push   0xc002218c
c001d5c9:	50                   	push   eax
c001d5ca:	e8 77 68 ff ff       	call   c0013e46 <InterruptController::InterruptController(char const*)>
c001d5cf:	83 c4 10             	add    esp,0x10
c001d5d2:	ba b8 21 02 c0       	mov    edx,0xc00221b8
c001d5d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5db:	89 10                	mov    DWORD PTR [eax],edx
c001d5dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5e1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d5e7:	0f b6 d0             	movzx  edx,al
c001d5ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5ee:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001d5f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5f9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d5ff:	0f b6 d0             	movzx  edx,al
c001d602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d606:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001d60b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d60f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d615:	8d 50 01             	lea    edx,[eax+0x1]
c001d618:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d61c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d622:	0f b6 d0             	movzx  edx,al
c001d625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d629:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d62d:	83 e1 3f             	and    ecx,0x3f
c001d630:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d638:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d63e:	0f b6 d0             	movzx  edx,al
c001d641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d645:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001d64c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d650:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d656:	0f b6 d0             	movzx  edx,al
c001d659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d65d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001d662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d666:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d66c:	8d 50 01             	lea    edx,[eax+0x1]
c001d66f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d673:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d679:	0f b6 d0             	movzx  edx,al
c001d67c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d680:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d684:	83 e1 3f             	and    ecx,0x3f
c001d687:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d68b:	90                   	nop
c001d68c:	83 c4 0c             	add    esp,0xc
c001d68f:	c3                   	ret    

c001d690 <PIC::ioWait()>:
c001d690:	eb 00                	jmp    c001d692 <PIC::ioWait()+0x2>
c001d692:	eb 00                	jmp    c001d694 <PIC::ioWait()+0x4>
c001d694:	90                   	nop
c001d695:	c3                   	ret    

c001d696 <PIC::getIRQReg(int)>:
c001d696:	55                   	push   ebp
c001d697:	89 e5                	mov    ebp,esp
c001d699:	83 ec 10             	sub    esp,0x10
c001d69c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d69f:	0f b6 c0             	movzx  eax,al
c001d6a2:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001d6a8:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001d6ab:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001d6ae:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001d6b2:	ee                   	out    dx,al
c001d6b3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d6b6:	0f b6 c0             	movzx  eax,al
c001d6b9:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001d6bf:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001d6c2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001d6c5:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001d6c9:	ee                   	out    dx,al
c001d6ca:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001d6d0:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001d6d4:	89 c2                	mov    edx,eax
c001d6d6:	ec                   	in     al,dx
c001d6d7:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001d6da:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d6dd:	0f b6 c0             	movzx  eax,al
c001d6e0:	c1 e0 08             	shl    eax,0x8
c001d6e3:	89 c1                	mov    ecx,eax
c001d6e5:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001d6eb:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001d6ef:	89 c2                	mov    edx,eax
c001d6f1:	ec                   	in     al,dx
c001d6f2:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001d6f5:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001d6f8:	0f b6 c0             	movzx  eax,al
c001d6fb:	09 c8                	or     eax,ecx
c001d6fd:	c9                   	leave  
c001d6fe:	c3                   	ret    
c001d6ff:	90                   	nop

c001d700 <PIC::eoi(unsigned char)>:
c001d700:	55                   	push   ebp
c001d701:	89 e5                	mov    ebp,esp
c001d703:	83 ec 14             	sub    esp,0x14
c001d706:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d709:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d70c:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001d710:	75 1e                	jne    c001d730 <PIC::eoi(unsigned char)+0x30>
c001d712:	6a 0b                	push   0xb
c001d714:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d717:	e8 7a ff ff ff       	call   c001d696 <PIC::getIRQReg(int)>
c001d71c:	83 c4 08             	add    esp,0x8
c001d71f:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001d723:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001d727:	25 80 00 00 00       	and    eax,0x80
c001d72c:	85 c0                	test   eax,eax
c001d72e:	74 5f                	je     c001d78f <PIC::eoi(unsigned char)+0x8f>
c001d730:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001d734:	75 2d                	jne    c001d763 <PIC::eoi(unsigned char)+0x63>
c001d736:	6a 0b                	push   0xb
c001d738:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d73b:	e8 56 ff ff ff       	call   c001d696 <PIC::getIRQReg(int)>
c001d740:	83 c4 08             	add    esp,0x8
c001d743:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001d747:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d74a:	66 85 c0             	test   ax,ax
c001d74d:	78 14                	js     c001d763 <PIC::eoi(unsigned char)+0x63>
c001d74f:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001d755:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001d759:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d75c:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001d760:	ee                   	out    dx,al
c001d761:	eb 2d                	jmp    c001d790 <PIC::eoi(unsigned char)+0x90>
c001d763:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001d767:	76 12                	jbe    c001d77b <PIC::eoi(unsigned char)+0x7b>
c001d769:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001d76f:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001d773:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001d776:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001d77a:	ee                   	out    dx,al
c001d77b:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001d781:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001d785:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001d788:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001d78c:	ee                   	out    dx,al
c001d78d:	eb 01                	jmp    c001d790 <PIC::eoi(unsigned char)+0x90>
c001d78f:	90                   	nop
c001d790:	c9                   	leave  
c001d791:	c3                   	ret    

c001d792 <PIC::remap()>:
c001d792:	55                   	push   ebp
c001d793:	89 e5                	mov    ebp,esp
c001d795:	83 ec 48             	sub    esp,0x48
c001d798:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001d79f:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001d7a6:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001d7ac:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001d7af:	89 c2                	mov    edx,eax
c001d7b1:	ec                   	in     al,dx
c001d7b2:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001d7b5:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001d7b8:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001d7bb:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001d7c1:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001d7c4:	89 c2                	mov    edx,eax
c001d7c6:	ec                   	in     al,dx
c001d7c7:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001d7ca:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001d7cd:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001d7d0:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001d7d6:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001d7da:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001d7dd:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001d7e0:	ee                   	out    dx,al
c001d7e1:	83 ec 0c             	sub    esp,0xc
c001d7e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d7e7:	e8 a4 fe ff ff       	call   c001d690 <PIC::ioWait()>
c001d7ec:	83 c4 10             	add    esp,0x10
c001d7ef:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001d7f5:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001d7f9:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001d7fc:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001d7ff:	ee                   	out    dx,al
c001d800:	83 ec 0c             	sub    esp,0xc
c001d803:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d806:	e8 85 fe ff ff       	call   c001d690 <PIC::ioWait()>
c001d80b:	83 c4 10             	add    esp,0x10
c001d80e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d811:	0f b6 c0             	movzx  eax,al
c001d814:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001d81a:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001d81d:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001d820:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001d823:	ee                   	out    dx,al
c001d824:	83 ec 0c             	sub    esp,0xc
c001d827:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d82a:	e8 61 fe ff ff       	call   c001d690 <PIC::ioWait()>
c001d82f:	83 c4 10             	add    esp,0x10
c001d832:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d835:	0f b6 c0             	movzx  eax,al
c001d838:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001d83e:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001d841:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001d844:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d847:	ee                   	out    dx,al
c001d848:	83 ec 0c             	sub    esp,0xc
c001d84b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d84e:	e8 3d fe ff ff       	call   c001d690 <PIC::ioWait()>
c001d853:	83 c4 10             	add    esp,0x10
c001d856:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001d85c:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001d860:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001d863:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001d866:	ee                   	out    dx,al
c001d867:	83 ec 0c             	sub    esp,0xc
c001d86a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d86d:	e8 1e fe ff ff       	call   c001d690 <PIC::ioWait()>
c001d872:	83 c4 10             	add    esp,0x10
c001d875:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001d87b:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001d87f:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001d882:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001d885:	ee                   	out    dx,al
c001d886:	83 ec 0c             	sub    esp,0xc
c001d889:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d88c:	e8 ff fd ff ff       	call   c001d690 <PIC::ioWait()>
c001d891:	83 c4 10             	add    esp,0x10
c001d894:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001d89a:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001d89e:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001d8a1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d8a4:	ee                   	out    dx,al
c001d8a5:	83 ec 0c             	sub    esp,0xc
c001d8a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d8ab:	e8 e0 fd ff ff       	call   c001d690 <PIC::ioWait()>
c001d8b0:	83 c4 10             	add    esp,0x10
c001d8b3:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001d8b9:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001d8bd:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001d8c0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d8c3:	ee                   	out    dx,al
c001d8c4:	83 ec 0c             	sub    esp,0xc
c001d8c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d8ca:	e8 c1 fd ff ff       	call   c001d690 <PIC::ioWait()>
c001d8cf:	83 c4 10             	add    esp,0x10
c001d8d2:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001d8d6:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001d8dc:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001d8df:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001d8e2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001d8e5:	ee                   	out    dx,al
c001d8e6:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001d8ea:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001d8f0:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001d8f3:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001d8f6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d8f9:	ee                   	out    dx,al
c001d8fa:	90                   	nop
c001d8fb:	c9                   	leave  
c001d8fc:	c3                   	ret    
c001d8fd:	90                   	nop

c001d8fe <PIC::open(int, int, void*)>:
c001d8fe:	55                   	push   ebp
c001d8ff:	89 e5                	mov    ebp,esp
c001d901:	83 ec 18             	sub    esp,0x18
c001d904:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001d90a:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001d90e:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001d911:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001d915:	ee                   	out    dx,al
c001d916:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001d91c:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001d920:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001d923:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001d927:	ee                   	out    dx,al
c001d928:	83 ec 0c             	sub    esp,0xc
c001d92b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d92e:	e8 5f fe ff ff       	call   c001d792 <PIC::remap()>
c001d933:	83 c4 10             	add    esp,0x10
c001d936:	b8 00 00 00 00       	mov    eax,0x0
c001d93b:	c9                   	leave  
c001d93c:	c3                   	ret    
c001d93d:	90                   	nop

c001d93e <APICTimer::close(int, int, void*)>:
c001d93e:	b8 00 00 00 00       	mov    eax,0x0
c001d943:	c3                   	ret    

c001d944 <apicTimerHandler(regs*, void*)>:
c001d944:	83 ec 0c             	sub    esp,0xc
c001d947:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d94b:	8b 00                	mov    eax,DWORD PTR [eax]
c001d94d:	99                   	cdq    
c001d94e:	52                   	push   edx
c001d94f:	50                   	push   eax
c001d950:	6a 00                	push   0x0
c001d952:	68 00 ca 9a 3b       	push   0x3b9aca00
c001d957:	e8 70 07 00 00       	call   c001e0cc <__udivdi3>
c001d95c:	83 c4 10             	add    esp,0x10
c001d95f:	83 ec 08             	sub    esp,0x8
c001d962:	52                   	push   edx
c001d963:	50                   	push   eax
c001d964:	e8 b0 7b ff ff       	call   c0015519 <timerHandler(unsigned long long)>
c001d969:	83 c4 10             	add    esp,0x10
c001d96c:	90                   	nop
c001d96d:	83 c4 0c             	add    esp,0xc
c001d970:	c3                   	ret    
c001d971:	90                   	nop

c001d972 <APICTimer::write(int)>:
c001d972:	53                   	push   ebx
c001d973:	83 ec 28             	sub    esp,0x28
c001d976:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d97a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d97e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d984:	e8 fd 95 ff ff       	call   c0016f86 <thisCPU()>
c001d989:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001d98f:	83 ec 0c             	sub    esp,0xc
c001d992:	50                   	push   eax
c001d993:	e8 0e f6 ff ff       	call   c001cfa6 <APIC::getBase()>
c001d998:	83 c4 10             	add    esp,0x10
c001d99b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d99f:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c001d9a4:	8b 15 54 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e54
c001d9aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d9ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001d9b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d9b6:	05 e0 03 00 00       	add    eax,0x3e0
c001d9bb:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001d9c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d9c5:	05 80 03 00 00       	add    eax,0x380
c001d9ca:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001d9d0:	fb                   	sti    
c001d9d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9d5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d9d9:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001d9de:	83 d2 00             	adc    edx,0x0
c001d9e1:	89 c1                	mov    ecx,eax
c001d9e3:	89 d3                	mov    ebx,edx
c001d9e5:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c001d9ea:	8b 15 54 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e54
c001d9f0:	39 c8                	cmp    eax,ecx
c001d9f2:	89 d0                	mov    eax,edx
c001d9f4:	19 d8                	sbb    eax,ebx
c001d9f6:	73 02                	jae    c001d9fa <APICTimer::write(int)+0x88>
c001d9f8:	eb d7                	jmp    c001d9d1 <APICTimer::write(int)+0x5f>
c001d9fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d9fe:	05 20 03 00 00       	add    eax,0x320
c001da03:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001da09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001da0d:	05 90 03 00 00       	add    eax,0x390
c001da12:	8b 00                	mov    eax,DWORD PTR [eax]
c001da14:	f7 d0                	not    eax
c001da16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001da1a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001da1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da22:	ba 00 00 00 00       	mov    edx,0x0
c001da27:	f7 f3                	div    ebx
c001da29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001da2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da31:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001da37:	0d 00 00 02 00       	or     eax,0x20000
c001da3c:	89 c2                	mov    edx,eax
c001da3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001da42:	05 20 03 00 00       	add    eax,0x320
c001da47:	89 10                	mov    DWORD PTR [eax],edx
c001da49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001da4d:	05 e0 03 00 00       	add    eax,0x3e0
c001da52:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001da58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001da5c:	05 80 03 00 00       	add    eax,0x380
c001da61:	89 c2                	mov    edx,eax
c001da63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001da67:	89 02                	mov    DWORD PTR [edx],eax
c001da69:	90                   	nop
c001da6a:	83 c4 28             	add    esp,0x28
c001da6d:	5b                   	pop    ebx
c001da6e:	c3                   	ret    
c001da6f:	90                   	nop

c001da70 <APICTimer::open(int, int, void*)>:
c001da70:	57                   	push   edi
c001da71:	56                   	push   esi
c001da72:	53                   	push   ebx
c001da73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da77:	8b 00                	mov    eax,DWORD PTR [eax]
c001da79:	83 c0 24             	add    eax,0x24
c001da7c:	8b 00                	mov    eax,DWORD PTR [eax]
c001da7e:	83 ec 08             	sub    esp,0x8
c001da81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da89:	ff d0                	call   eax
c001da8b:	83 c4 10             	add    esp,0x10
c001da8e:	e8 f3 94 ff ff       	call   c0016f86 <thisCPU()>
c001da93:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001da99:	83 ec 0c             	sub    esp,0xc
c001da9c:	50                   	push   eax
c001da9d:	e8 04 f5 ff ff       	call   c001cfa6 <APIC::getBase()>
c001daa2:	83 c4 10             	add    esp,0x10
c001daa5:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001daab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001daaf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dab5:	0f b6 f8             	movzx  edi,al
c001dab8:	89 d0                	mov    eax,edx
c001daba:	ba 00 00 00 00       	mov    edx,0x0
c001dabf:	89 c1                	mov    ecx,eax
c001dac1:	80 e5 ff             	and    ch,0xff
c001dac4:	89 cb                	mov    ebx,ecx
c001dac6:	0f b6 f2             	movzx  esi,dl
c001dac9:	89 d8                	mov    eax,ebx
c001dacb:	89 f2                	mov    edx,esi
c001dacd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dad1:	8d 5f 08             	lea    ebx,[edi+0x8]
c001dad4:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001dad8:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001dadc:	83 e0 00             	and    eax,0x0
c001dadf:	09 d0                	or     eax,edx
c001dae1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001dae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dae9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001daef:	8d 50 01             	lea    edx,[eax+0x1]
c001daf2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001daf6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001dafc:	0f b6 d0             	movzx  edx,al
c001daff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db03:	83 c2 08             	add    edx,0x8
c001db06:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001db0a:	0f b6 c9             	movzx  ecx,cl
c001db0d:	81 c9 00 00 01 00    	or     ecx,0x10000
c001db13:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001db17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db1b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001db1f:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001db25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db29:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db2d:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001db33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db37:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001db3d:	83 ec 0c             	sub    esp,0xc
c001db40:	51                   	push   ecx
c001db41:	6a 01                	push   0x1
c001db43:	68 44 d9 01 c0       	push   0xc001d944
c001db48:	52                   	push   edx
c001db49:	50                   	push   eax
c001db4a:	e8 33 59 ff ff       	call   c0013482 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001db4f:	83 c4 20             	add    esp,0x20
c001db52:	89 c2                	mov    edx,eax
c001db54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db58:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001db5e:	b8 00 00 00 00       	mov    eax,0x0
c001db63:	5b                   	pop    ebx
c001db64:	5e                   	pop    esi
c001db65:	5f                   	pop    edi
c001db66:	c3                   	ret    
c001db67:	90                   	nop

c001db68 <APICTimer::APICTimer()>:
c001db68:	83 ec 0c             	sub    esp,0xc
c001db6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db6f:	83 ec 08             	sub    esp,0x8
c001db72:	68 f8 21 02 c0       	push   0xc00221f8
c001db77:	50                   	push   eax
c001db78:	e8 0d 79 ff ff       	call   c001548a <Timer::Timer(char const*)>
c001db7d:	83 c4 10             	add    esp,0x10
c001db80:	ba 0c 22 02 c0       	mov    edx,0xc002220c
c001db85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db89:	89 10                	mov    DWORD PTR [eax],edx
c001db8b:	90                   	nop
c001db8c:	83 c4 0c             	add    esp,0xc
c001db8f:	c3                   	ret    

c001db90 <PIT::write(int)>:
c001db90:	83 ec 10             	sub    esp,0x10
c001db93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db97:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001db9b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dba1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dba5:	a3 c4 4b 02 c0       	mov    ds:0xc0024bc4,eax
c001dbaa:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001dbaf:	99                   	cdq    
c001dbb0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001dbb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dbb8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001dbbf:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001dbc4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001dbc8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001dbcd:	ee                   	out    dx,al
c001dbce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dbd2:	0f b6 c0             	movzx  eax,al
c001dbd5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001dbdc:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001dbe0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001dbe4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001dbe9:	ee                   	out    dx,al
c001dbea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dbee:	c1 f8 08             	sar    eax,0x8
c001dbf1:	0f b6 c0             	movzx  eax,al
c001dbf4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001dbfb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001dbff:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001dc03:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001dc08:	ee                   	out    dx,al
c001dc09:	90                   	nop
c001dc0a:	83 c4 10             	add    esp,0x10
c001dc0d:	c3                   	ret    

c001dc0e <pitHandler(regs*, void*)>:
c001dc0e:	83 ec 0c             	sub    esp,0xc
c001dc11:	a1 c4 4b 02 c0       	mov    eax,ds:0xc0024bc4
c001dc16:	99                   	cdq    
c001dc17:	52                   	push   edx
c001dc18:	50                   	push   eax
c001dc19:	6a 00                	push   0x0
c001dc1b:	68 00 ca 9a 3b       	push   0x3b9aca00
c001dc20:	e8 a7 04 00 00       	call   c001e0cc <__udivdi3>
c001dc25:	83 c4 10             	add    esp,0x10
c001dc28:	83 ec 08             	sub    esp,0x8
c001dc2b:	52                   	push   edx
c001dc2c:	50                   	push   eax
c001dc2d:	e8 e7 78 ff ff       	call   c0015519 <timerHandler(unsigned long long)>
c001dc32:	83 c4 10             	add    esp,0x10
c001dc35:	90                   	nop
c001dc36:	83 c4 0c             	add    esp,0xc
c001dc39:	c3                   	ret    

c001dc3a <PIT::open(int, int, void*)>:
c001dc3a:	83 ec 0c             	sub    esp,0xc
c001dc3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc41:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc43:	83 c0 24             	add    eax,0x24
c001dc46:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc48:	83 ec 08             	sub    esp,0x8
c001dc4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc53:	ff d0                	call   eax
c001dc55:	83 c4 10             	add    esp,0x10
c001dc58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc5c:	83 ec 0c             	sub    esp,0xc
c001dc5f:	6a 00                	push   0x0
c001dc61:	6a 01                	push   0x1
c001dc63:	68 0e dc 01 c0       	push   0xc001dc0e
c001dc68:	6a 00                	push   0x0
c001dc6a:	50                   	push   eax
c001dc6b:	e8 12 58 ff ff       	call   c0013482 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc70:	83 c4 20             	add    esp,0x20
c001dc73:	89 c2                	mov    edx,eax
c001dc75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc79:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dc7f:	b8 00 00 00 00       	mov    eax,0x0
c001dc84:	83 c4 0c             	add    esp,0xc
c001dc87:	c3                   	ret    

c001dc88 <PIT::close(int, int, void*)>:
c001dc88:	83 ec 0c             	sub    esp,0xc
c001dc8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc8f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001dc99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc9d:	6a 01                	push   0x1
c001dc9f:	68 0e dc 01 c0       	push   0xc001dc0e
c001dca4:	6a 00                	push   0x0
c001dca6:	50                   	push   eax
c001dca7:	e8 34 58 ff ff       	call   c00134e0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001dcac:	83 c4 10             	add    esp,0x10
c001dcaf:	b8 00 00 00 00       	mov    eax,0x0
c001dcb4:	83 c4 0c             	add    esp,0xc
c001dcb7:	c3                   	ret    

c001dcb8 <PIT::PIT()>:
c001dcb8:	83 ec 0c             	sub    esp,0xc
c001dcbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcbf:	83 ec 08             	sub    esp,0x8
c001dcc2:	68 34 22 02 c0       	push   0xc0022234
c001dcc7:	50                   	push   eax
c001dcc8:	e8 bd 77 ff ff       	call   c001548a <Timer::Timer(char const*)>
c001dccd:	83 c4 10             	add    esp,0x10
c001dcd0:	ba 5c 22 02 c0       	mov    edx,0xc002225c
c001dcd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcd9:	89 10                	mov    DWORD PTR [eax],edx
c001dcdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcdf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dce5:	0f b6 d0             	movzx  edx,al
c001dce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcec:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001dcf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcf7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dcfd:	0f b6 d0             	movzx  edx,al
c001dd00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd04:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001dd09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd0d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dd13:	8d 50 01             	lea    edx,[eax+0x1]
c001dd16:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd1a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dd20:	0f b6 d0             	movzx  edx,al
c001dd23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd27:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dd2b:	83 e1 3f             	and    ecx,0x3f
c001dd2e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dd32:	90                   	nop
c001dd33:	83 c4 0c             	add    esp,0xc
c001dd36:	c3                   	ret    
c001dd37:	66 90                	xchg   ax,ax
c001dd39:	66 90                	xchg   ax,ax
c001dd3b:	66 90                	xchg   ax,ax
c001dd3d:	66 90                	xchg   ax,ax
c001dd3f:	90                   	nop

c001dd40 <avxDetect>:
c001dd40:	b8 00 00 00 00       	mov    eax,0x0
c001dd45:	c3                   	ret    

c001dd46 <avxSave>:
c001dd46:	c3                   	ret    

c001dd47 <avxLoad>:
c001dd47:	c3                   	ret    

c001dd48 <avxInit>:
c001dd48:	c3                   	ret    

c001dd49 <avxClose>:
c001dd49:	c3                   	ret    
c001dd4a:	66 90                	xchg   ax,ax
c001dd4c:	66 90                	xchg   ax,ax
c001dd4e:	66 90                	xchg   ax,ax

c001dd50 <sseDetect>:
c001dd50:	b8 01 00 00 00       	mov    eax,0x1
c001dd55:	0f a2                	cpuid  
c001dd57:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001dd5d:	74 06                	je     c001dd65 <sseDetect.noSSE>
c001dd5f:	b8 01 00 00 00       	mov    eax,0x1
c001dd64:	c3                   	ret    

c001dd65 <sseDetect.noSSE>:
c001dd65:	b8 00 00 00 00       	mov    eax,0x0
c001dd6a:	c3                   	ret    

c001dd6b <sseSave>:
c001dd6b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001dd70:	c3                   	ret    

c001dd71 <sseLoad>:
c001dd71:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001dd76:	c3                   	ret    

c001dd77 <sseInit>:
c001dd77:	e8 40 00 00 00       	call   c001ddbc <x87Init>
c001dd7c:	0f 20 e0             	mov    eax,cr4
c001dd7f:	66 0d 00 06          	or     ax,0x600
c001dd83:	0f 22 e0             	mov    cr4,eax
c001dd86:	c3                   	ret    

c001dd87 <sseClose>:
c001dd87:	c3                   	ret    
c001dd88:	66 90                	xchg   ax,ax
c001dd8a:	66 90                	xchg   ax,ax
c001dd8c:	66 90                	xchg   ax,ax
c001dd8e:	66 90                	xchg   ax,ax

c001dd90 <value_37F>:
c001dd90:	7f 03                	jg     c001dd95 <value_37A+0x1>

c001dd92 <value_37E>:
c001dd92:	7e 03                	jle    c001dd97 <x87Detect+0x1>

c001dd94 <value_37A>:
c001dd94:	7a 03                	jp     c001dd99 <x87Detect+0x3>

c001dd96 <x87Detect>:
c001dd96:	b8 01 00 00 00       	mov    eax,0x1
c001dd9b:	0f a2                	cpuid  
c001dd9d:	f7 c2 01 00 00 00    	test   edx,0x1
c001dda3:	74 06                	je     c001ddab <x87Detect.nox87>
c001dda5:	b8 01 00 00 00       	mov    eax,0x1
c001ddaa:	c3                   	ret    

c001ddab <x87Detect.nox87>:
c001ddab:	b8 00 00 00 00       	mov    eax,0x0
c001ddb0:	c3                   	ret    

c001ddb1 <x87Save>:
c001ddb1:	9b dd 74 24 08       	fsave  [esp+0x8]
c001ddb6:	c3                   	ret    

c001ddb7 <x87Load>:
c001ddb7:	dd 64 24 08          	frstor [esp+0x8]
c001ddbb:	c3                   	ret    

c001ddbc <x87Init>:
c001ddbc:	9b db e3             	finit  
c001ddbf:	0f 20 c0             	mov    eax,cr0
c001ddc2:	66 25 fb ff          	and    ax,0xfffb
c001ddc6:	66 0d 22 00          	or     ax,0x22
c001ddca:	0f 22 c0             	mov    cr0,eax
c001ddcd:	0f 06                	clts   
c001ddcf:	d9 2d 94 dd 01 c0    	fldcw  WORD PTR ds:0xc001dd94
c001ddd5:	c3                   	ret    

c001ddd6 <x87Close>:
c001ddd6:	c3                   	ret    
c001ddd7:	90                   	nop

c001ddd8 <__do_global_ctors_aux>:
c001ddd8:	a1 08 ef 01 c0       	mov    eax,ds:0xc001ef08
c001dddd:	83 f8 ff             	cmp    eax,0xffffffff
c001dde0:	74 1a                	je     c001ddfc <__do_global_ctors_aux+0x24>
c001dde2:	55                   	push   ebp
c001dde3:	89 e5                	mov    ebp,esp
c001dde5:	53                   	push   ebx
c001dde6:	52                   	push   edx
c001dde7:	bb 08 ef 01 c0       	mov    ebx,0xc001ef08
c001ddec:	ff d0                	call   eax
c001ddee:	83 eb 04             	sub    ebx,0x4
c001ddf1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ddf3:	83 f8 ff             	cmp    eax,0xffffffff
c001ddf6:	75 f4                	jne    c001ddec <__do_global_ctors_aux+0x14>
c001ddf8:	58                   	pop    eax
c001ddf9:	5b                   	pop    ebx
c001ddfa:	5d                   	pop    ebp
c001ddfb:	c3                   	ret    
c001ddfc:	c3                   	ret    
c001ddfd:	66 90                	xchg   ax,ax
c001ddff:	90                   	nop

c001de00 <__divdi3>:
c001de00:	55                   	push   ebp
c001de01:	57                   	push   edi
c001de02:	56                   	push   esi
c001de03:	53                   	push   ebx
c001de04:	83 ec 1c             	sub    esp,0x1c
c001de07:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001de0b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001de0f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001de12:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001de16:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001de1a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001de1e:	85 db                	test   ebx,ebx
c001de20:	0f 88 8e 00 00 00    	js     c001deb4 <__divdi3+0xb4>
c001de26:	89 dd                	mov    ebp,ebx
c001de28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001de30:	89 d3                	mov    ebx,edx
c001de32:	85 d2                	test   edx,edx
c001de34:	79 0d                	jns    c001de43 <__divdi3+0x43>
c001de36:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001de3a:	f7 d8                	neg    eax
c001de3c:	83 d2 00             	adc    edx,0x0
c001de3f:	f7 da                	neg    edx
c001de41:	89 d3                	mov    ebx,edx
c001de43:	89 c7                	mov    edi,eax
c001de45:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001de48:	85 db                	test   ebx,ebx
c001de4a:	75 48                	jne    c001de94 <__divdi3+0x94>
c001de4c:	39 ef                	cmp    edi,ebp
c001de4e:	76 24                	jbe    c001de74 <__divdi3+0x74>
c001de50:	89 ea                	mov    edx,ebp
c001de52:	f7 f7                	div    edi
c001de54:	89 c1                	mov    ecx,eax
c001de56:	31 f6                	xor    esi,esi
c001de58:	89 c8                	mov    eax,ecx
c001de5a:	89 f2                	mov    edx,esi
c001de5c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001de60:	85 c9                	test   ecx,ecx
c001de62:	74 07                	je     c001de6b <__divdi3+0x6b>
c001de64:	f7 d8                	neg    eax
c001de66:	83 d2 00             	adc    edx,0x0
c001de69:	f7 da                	neg    edx
c001de6b:	83 c4 1c             	add    esp,0x1c
c001de6e:	5b                   	pop    ebx
c001de6f:	5e                   	pop    esi
c001de70:	5f                   	pop    edi
c001de71:	5d                   	pop    ebp
c001de72:	c3                   	ret    
c001de73:	90                   	nop
c001de74:	85 ff                	test   edi,edi
c001de76:	75 0b                	jne    c001de83 <__divdi3+0x83>
c001de78:	b8 01 00 00 00       	mov    eax,0x1
c001de7d:	31 d2                	xor    edx,edx
c001de7f:	f7 f3                	div    ebx
c001de81:	89 c7                	mov    edi,eax
c001de83:	31 d2                	xor    edx,edx
c001de85:	89 e8                	mov    eax,ebp
c001de87:	f7 f7                	div    edi
c001de89:	89 c6                	mov    esi,eax
c001de8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001de8e:	f7 f7                	div    edi
c001de90:	89 c1                	mov    ecx,eax
c001de92:	eb c4                	jmp    c001de58 <__divdi3+0x58>
c001de94:	39 eb                	cmp    ebx,ebp
c001de96:	77 3c                	ja     c001ded4 <__divdi3+0xd4>
c001de98:	0f bd f3             	bsr    esi,ebx
c001de9b:	83 f6 1f             	xor    esi,0x1f
c001de9e:	75 40                	jne    c001dee0 <__divdi3+0xe0>
c001dea0:	39 eb                	cmp    ebx,ebp
c001dea2:	72 09                	jb     c001dead <__divdi3+0xad>
c001dea4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001dea7:	0f 87 97 00 00 00    	ja     c001df44 <__divdi3+0x144>
c001dead:	b9 01 00 00 00       	mov    ecx,0x1
c001deb2:	eb a4                	jmp    c001de58 <__divdi3+0x58>
c001deb4:	f7 d9                	neg    ecx
c001deb6:	83 d3 00             	adc    ebx,0x0
c001deb9:	f7 db                	neg    ebx
c001debb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001debe:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001dec2:	89 dd                	mov    ebp,ebx
c001dec4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001decc:	e9 5f ff ff ff       	jmp    c001de30 <__divdi3+0x30>
c001ded1:	8d 76 00             	lea    esi,[esi+0x0]
c001ded4:	31 f6                	xor    esi,esi
c001ded6:	31 c9                	xor    ecx,ecx
c001ded8:	e9 7b ff ff ff       	jmp    c001de58 <__divdi3+0x58>
c001dedd:	8d 76 00             	lea    esi,[esi+0x0]
c001dee0:	b8 20 00 00 00       	mov    eax,0x20
c001dee5:	29 f0                	sub    eax,esi
c001dee7:	89 f1                	mov    ecx,esi
c001dee9:	d3 e3                	shl    ebx,cl
c001deeb:	89 fa                	mov    edx,edi
c001deed:	88 c1                	mov    cl,al
c001deef:	d3 ea                	shr    edx,cl
c001def1:	09 da                	or     edx,ebx
c001def3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001def7:	89 f1                	mov    ecx,esi
c001def9:	d3 e7                	shl    edi,cl
c001defb:	89 eb                	mov    ebx,ebp
c001defd:	88 c1                	mov    cl,al
c001deff:	d3 eb                	shr    ebx,cl
c001df01:	89 f1                	mov    ecx,esi
c001df03:	d3 e5                	shl    ebp,cl
c001df05:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001df08:	88 c1                	mov    cl,al
c001df0a:	d3 ea                	shr    edx,cl
c001df0c:	09 d5                	or     ebp,edx
c001df0e:	89 e8                	mov    eax,ebp
c001df10:	89 da                	mov    edx,ebx
c001df12:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001df16:	89 d3                	mov    ebx,edx
c001df18:	89 c5                	mov    ebp,eax
c001df1a:	f7 e7                	mul    edi
c001df1c:	39 d3                	cmp    ebx,edx
c001df1e:	72 18                	jb     c001df38 <__divdi3+0x138>
c001df20:	74 0a                	je     c001df2c <__divdi3+0x12c>
c001df22:	89 e9                	mov    ecx,ebp
c001df24:	31 f6                	xor    esi,esi
c001df26:	e9 2d ff ff ff       	jmp    c001de58 <__divdi3+0x58>
c001df2b:	90                   	nop
c001df2c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001df2f:	89 f1                	mov    ecx,esi
c001df31:	d3 e7                	shl    edi,cl
c001df33:	39 c7                	cmp    edi,eax
c001df35:	73 eb                	jae    c001df22 <__divdi3+0x122>
c001df37:	90                   	nop
c001df38:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001df3b:	31 f6                	xor    esi,esi
c001df3d:	e9 16 ff ff ff       	jmp    c001de58 <__divdi3+0x58>
c001df42:	66 90                	xchg   ax,ax
c001df44:	31 c9                	xor    ecx,ecx
c001df46:	e9 0d ff ff ff       	jmp    c001de58 <__divdi3+0x58>
c001df4b:	90                   	nop

c001df4c <__moddi3>:
c001df4c:	55                   	push   ebp
c001df4d:	57                   	push   edi
c001df4e:	56                   	push   esi
c001df4f:	53                   	push   ebx
c001df50:	83 ec 2c             	sub    esp,0x2c
c001df53:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001df57:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001df5b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001df5f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001df63:	85 db                	test   ebx,ebx
c001df65:	0f 88 85 00 00 00    	js     c001dff0 <__moddi3+0xa4>
c001df6b:	89 de                	mov    esi,ebx
c001df6d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001df75:	89 d7                	mov    edi,edx
c001df77:	85 d2                	test   edx,edx
c001df79:	79 09                	jns    c001df84 <__moddi3+0x38>
c001df7b:	f7 d8                	neg    eax
c001df7d:	83 d2 00             	adc    edx,0x0
c001df80:	f7 da                	neg    edx
c001df82:	89 d7                	mov    edi,edx
c001df84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001df88:	89 cd                	mov    ebp,ecx
c001df8a:	85 ff                	test   edi,edi
c001df8c:	75 52                	jne    c001dfe0 <__moddi3+0x94>
c001df8e:	89 c3                	mov    ebx,eax
c001df90:	39 f0                	cmp    eax,esi
c001df92:	76 24                	jbe    c001dfb8 <__moddi3+0x6c>
c001df94:	89 c8                	mov    eax,ecx
c001df96:	89 f2                	mov    edx,esi
c001df98:	f7 f3                	div    ebx
c001df9a:	89 d6                	mov    esi,edx
c001df9c:	89 f0                	mov    eax,esi
c001df9e:	31 d2                	xor    edx,edx
c001dfa0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dfa4:	85 c9                	test   ecx,ecx
c001dfa6:	74 07                	je     c001dfaf <__moddi3+0x63>
c001dfa8:	f7 d8                	neg    eax
c001dfaa:	83 d2 00             	adc    edx,0x0
c001dfad:	f7 da                	neg    edx
c001dfaf:	83 c4 2c             	add    esp,0x2c
c001dfb2:	5b                   	pop    ebx
c001dfb3:	5e                   	pop    esi
c001dfb4:	5f                   	pop    edi
c001dfb5:	5d                   	pop    ebp
c001dfb6:	c3                   	ret    
c001dfb7:	90                   	nop
c001dfb8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dfbc:	85 db                	test   ebx,ebx
c001dfbe:	75 0d                	jne    c001dfcd <__moddi3+0x81>
c001dfc0:	b8 01 00 00 00       	mov    eax,0x1
c001dfc5:	31 d2                	xor    edx,edx
c001dfc7:	f7 f7                	div    edi
c001dfc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dfcd:	89 f0                	mov    eax,esi
c001dfcf:	31 d2                	xor    edx,edx
c001dfd1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001dfd5:	f7 f7                	div    edi
c001dfd7:	89 e8                	mov    eax,ebp
c001dfd9:	f7 f7                	div    edi
c001dfdb:	89 d6                	mov    esi,edx
c001dfdd:	eb bd                	jmp    c001df9c <__moddi3+0x50>
c001dfdf:	90                   	nop
c001dfe0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001dfe4:	39 f7                	cmp    edi,esi
c001dfe6:	76 20                	jbe    c001e008 <__moddi3+0xbc>
c001dfe8:	89 c8                	mov    eax,ecx
c001dfea:	89 f2                	mov    edx,esi
c001dfec:	eb b2                	jmp    c001dfa0 <__moddi3+0x54>
c001dfee:	66 90                	xchg   ax,ax
c001dff0:	f7 d9                	neg    ecx
c001dff2:	83 d3 00             	adc    ebx,0x0
c001dff5:	f7 db                	neg    ebx
c001dff7:	89 de                	mov    esi,ebx
c001dff9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e001:	e9 6f ff ff ff       	jmp    c001df75 <__moddi3+0x29>
c001e006:	66 90                	xchg   ax,ax
c001e008:	0f bd c7             	bsr    eax,edi
c001e00b:	83 f0 1f             	xor    eax,0x1f
c001e00e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e012:	75 24                	jne    c001e038 <__moddi3+0xec>
c001e014:	39 f7                	cmp    edi,esi
c001e016:	72 06                	jb     c001e01e <__moddi3+0xd2>
c001e018:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e01c:	77 0c                	ja     c001e02a <__moddi3+0xde>
c001e01e:	89 e9                	mov    ecx,ebp
c001e020:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e024:	19 fe                	sbb    esi,edi
c001e026:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e02a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e02e:	89 f2                	mov    edx,esi
c001e030:	e9 6b ff ff ff       	jmp    c001dfa0 <__moddi3+0x54>
c001e035:	8d 76 00             	lea    esi,[esi+0x0]
c001e038:	b8 20 00 00 00       	mov    eax,0x20
c001e03d:	89 c2                	mov    edx,eax
c001e03f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e043:	29 da                	sub    edx,ebx
c001e045:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e049:	88 d9                	mov    cl,bl
c001e04b:	d3 e7                	shl    edi,cl
c001e04d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e051:	88 d1                	mov    cl,dl
c001e053:	d3 e8                	shr    eax,cl
c001e055:	09 c7                	or     edi,eax
c001e057:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e05b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e05f:	89 d8                	mov    eax,ebx
c001e061:	88 d9                	mov    cl,bl
c001e063:	d3 e7                	shl    edi,cl
c001e065:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e069:	89 f3                	mov    ebx,esi
c001e06b:	88 d1                	mov    cl,dl
c001e06d:	d3 eb                	shr    ebx,cl
c001e06f:	89 c7                	mov    edi,eax
c001e071:	88 c1                	mov    cl,al
c001e073:	d3 e6                	shl    esi,cl
c001e075:	89 e8                	mov    eax,ebp
c001e077:	88 d1                	mov    cl,dl
c001e079:	d3 e8                	shr    eax,cl
c001e07b:	09 f0                	or     eax,esi
c001e07d:	89 f9                	mov    ecx,edi
c001e07f:	d3 e5                	shl    ebp,cl
c001e081:	89 da                	mov    edx,ebx
c001e083:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e087:	89 d3                	mov    ebx,edx
c001e089:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e08d:	89 c6                	mov    esi,eax
c001e08f:	89 d1                	mov    ecx,edx
c001e091:	39 d3                	cmp    ebx,edx
c001e093:	72 27                	jb     c001e0bc <__moddi3+0x170>
c001e095:	74 21                	je     c001e0b8 <__moddi3+0x16c>
c001e097:	29 f5                	sub    ebp,esi
c001e099:	19 cb                	sbb    ebx,ecx
c001e09b:	89 de                	mov    esi,ebx
c001e09d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e0a1:	d3 e6                	shl    esi,cl
c001e0a3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e0a7:	89 f9                	mov    ecx,edi
c001e0a9:	d3 ed                	shr    ebp,cl
c001e0ab:	09 ee                	or     esi,ebp
c001e0ad:	89 f0                	mov    eax,esi
c001e0af:	d3 eb                	shr    ebx,cl
c001e0b1:	89 da                	mov    edx,ebx
c001e0b3:	e9 e8 fe ff ff       	jmp    c001dfa0 <__moddi3+0x54>
c001e0b8:	39 c5                	cmp    ebp,eax
c001e0ba:	73 db                	jae    c001e097 <__moddi3+0x14b>
c001e0bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e0c0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e0c4:	89 d1                	mov    ecx,edx
c001e0c6:	89 c6                	mov    esi,eax
c001e0c8:	eb cd                	jmp    c001e097 <__moddi3+0x14b>
c001e0ca:	66 90                	xchg   ax,ax

c001e0cc <__udivdi3>:
c001e0cc:	55                   	push   ebp
c001e0cd:	57                   	push   edi
c001e0ce:	56                   	push   esi
c001e0cf:	53                   	push   ebx
c001e0d0:	83 ec 1c             	sub    esp,0x1c
c001e0d3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e0d7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e0db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e0df:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e0e3:	85 d2                	test   edx,edx
c001e0e5:	75 41                	jne    c001e128 <__udivdi3+0x5c>
c001e0e7:	39 f7                	cmp    edi,esi
c001e0e9:	76 15                	jbe    c001e100 <__udivdi3+0x34>
c001e0eb:	89 e8                	mov    eax,ebp
c001e0ed:	89 f2                	mov    edx,esi
c001e0ef:	f7 f7                	div    edi
c001e0f1:	31 db                	xor    ebx,ebx
c001e0f3:	89 da                	mov    edx,ebx
c001e0f5:	83 c4 1c             	add    esp,0x1c
c001e0f8:	5b                   	pop    ebx
c001e0f9:	5e                   	pop    esi
c001e0fa:	5f                   	pop    edi
c001e0fb:	5d                   	pop    ebp
c001e0fc:	c3                   	ret    
c001e0fd:	8d 76 00             	lea    esi,[esi+0x0]
c001e100:	89 f9                	mov    ecx,edi
c001e102:	85 ff                	test   edi,edi
c001e104:	75 0b                	jne    c001e111 <__udivdi3+0x45>
c001e106:	b8 01 00 00 00       	mov    eax,0x1
c001e10b:	31 d2                	xor    edx,edx
c001e10d:	f7 f7                	div    edi
c001e10f:	89 c1                	mov    ecx,eax
c001e111:	31 d2                	xor    edx,edx
c001e113:	89 f0                	mov    eax,esi
c001e115:	f7 f1                	div    ecx
c001e117:	89 c3                	mov    ebx,eax
c001e119:	89 e8                	mov    eax,ebp
c001e11b:	f7 f1                	div    ecx
c001e11d:	89 da                	mov    edx,ebx
c001e11f:	83 c4 1c             	add    esp,0x1c
c001e122:	5b                   	pop    ebx
c001e123:	5e                   	pop    esi
c001e124:	5f                   	pop    edi
c001e125:	5d                   	pop    ebp
c001e126:	c3                   	ret    
c001e127:	90                   	nop
c001e128:	39 f2                	cmp    edx,esi
c001e12a:	77 1c                	ja     c001e148 <__udivdi3+0x7c>
c001e12c:	0f bd da             	bsr    ebx,edx
c001e12f:	83 f3 1f             	xor    ebx,0x1f
c001e132:	75 24                	jne    c001e158 <__udivdi3+0x8c>
c001e134:	39 f2                	cmp    edx,esi
c001e136:	72 08                	jb     c001e140 <__udivdi3+0x74>
c001e138:	39 ef                	cmp    edi,ebp
c001e13a:	0f 87 84 00 00 00    	ja     c001e1c4 <__udivdi3+0xf8>
c001e140:	b8 01 00 00 00       	mov    eax,0x1
c001e145:	eb ac                	jmp    c001e0f3 <__udivdi3+0x27>
c001e147:	90                   	nop
c001e148:	31 db                	xor    ebx,ebx
c001e14a:	31 c0                	xor    eax,eax
c001e14c:	89 da                	mov    edx,ebx
c001e14e:	83 c4 1c             	add    esp,0x1c
c001e151:	5b                   	pop    ebx
c001e152:	5e                   	pop    esi
c001e153:	5f                   	pop    edi
c001e154:	5d                   	pop    ebp
c001e155:	c3                   	ret    
c001e156:	66 90                	xchg   ax,ax
c001e158:	b8 20 00 00 00       	mov    eax,0x20
c001e15d:	29 d8                	sub    eax,ebx
c001e15f:	88 d9                	mov    cl,bl
c001e161:	d3 e2                	shl    edx,cl
c001e163:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e167:	89 fa                	mov    edx,edi
c001e169:	88 c1                	mov    cl,al
c001e16b:	d3 ea                	shr    edx,cl
c001e16d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e171:	09 d1                	or     ecx,edx
c001e173:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e177:	88 d9                	mov    cl,bl
c001e179:	d3 e7                	shl    edi,cl
c001e17b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e17f:	89 f7                	mov    edi,esi
c001e181:	88 c1                	mov    cl,al
c001e183:	d3 ef                	shr    edi,cl
c001e185:	88 d9                	mov    cl,bl
c001e187:	d3 e6                	shl    esi,cl
c001e189:	89 ea                	mov    edx,ebp
c001e18b:	88 c1                	mov    cl,al
c001e18d:	d3 ea                	shr    edx,cl
c001e18f:	09 d6                	or     esi,edx
c001e191:	89 f0                	mov    eax,esi
c001e193:	89 fa                	mov    edx,edi
c001e195:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e199:	89 d7                	mov    edi,edx
c001e19b:	89 c6                	mov    esi,eax
c001e19d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e1a1:	39 d7                	cmp    edi,edx
c001e1a3:	72 13                	jb     c001e1b8 <__udivdi3+0xec>
c001e1a5:	74 09                	je     c001e1b0 <__udivdi3+0xe4>
c001e1a7:	89 f0                	mov    eax,esi
c001e1a9:	31 db                	xor    ebx,ebx
c001e1ab:	e9 43 ff ff ff       	jmp    c001e0f3 <__udivdi3+0x27>
c001e1b0:	88 d9                	mov    cl,bl
c001e1b2:	d3 e5                	shl    ebp,cl
c001e1b4:	39 c5                	cmp    ebp,eax
c001e1b6:	73 ef                	jae    c001e1a7 <__udivdi3+0xdb>
c001e1b8:	8d 46 ff             	lea    eax,[esi-0x1]
c001e1bb:	31 db                	xor    ebx,ebx
c001e1bd:	e9 31 ff ff ff       	jmp    c001e0f3 <__udivdi3+0x27>
c001e1c2:	66 90                	xchg   ax,ax
c001e1c4:	31 c0                	xor    eax,eax
c001e1c6:	e9 28 ff ff ff       	jmp    c001e0f3 <__udivdi3+0x27>
c001e1cb:	90                   	nop

c001e1cc <__umoddi3>:
c001e1cc:	55                   	push   ebp
c001e1cd:	57                   	push   edi
c001e1ce:	56                   	push   esi
c001e1cf:	53                   	push   ebx
c001e1d0:	83 ec 1c             	sub    esp,0x1c
c001e1d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e1d7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e1db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e1df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e1e3:	89 da                	mov    edx,ebx
c001e1e5:	85 c0                	test   eax,eax
c001e1e7:	75 37                	jne    c001e220 <__umoddi3+0x54>
c001e1e9:	39 df                	cmp    edi,ebx
c001e1eb:	76 13                	jbe    c001e200 <__umoddi3+0x34>
c001e1ed:	89 f0                	mov    eax,esi
c001e1ef:	f7 f7                	div    edi
c001e1f1:	89 d0                	mov    eax,edx
c001e1f3:	31 d2                	xor    edx,edx
c001e1f5:	83 c4 1c             	add    esp,0x1c
c001e1f8:	5b                   	pop    ebx
c001e1f9:	5e                   	pop    esi
c001e1fa:	5f                   	pop    edi
c001e1fb:	5d                   	pop    ebp
c001e1fc:	c3                   	ret    
c001e1fd:	8d 76 00             	lea    esi,[esi+0x0]
c001e200:	89 fd                	mov    ebp,edi
c001e202:	85 ff                	test   edi,edi
c001e204:	75 0b                	jne    c001e211 <__umoddi3+0x45>
c001e206:	b8 01 00 00 00       	mov    eax,0x1
c001e20b:	31 d2                	xor    edx,edx
c001e20d:	f7 f7                	div    edi
c001e20f:	89 c5                	mov    ebp,eax
c001e211:	89 d8                	mov    eax,ebx
c001e213:	31 d2                	xor    edx,edx
c001e215:	f7 f5                	div    ebp
c001e217:	89 f0                	mov    eax,esi
c001e219:	f7 f5                	div    ebp
c001e21b:	89 d0                	mov    eax,edx
c001e21d:	eb d4                	jmp    c001e1f3 <__umoddi3+0x27>
c001e21f:	90                   	nop
c001e220:	89 f1                	mov    ecx,esi
c001e222:	39 d8                	cmp    eax,ebx
c001e224:	76 0a                	jbe    c001e230 <__umoddi3+0x64>
c001e226:	89 f0                	mov    eax,esi
c001e228:	83 c4 1c             	add    esp,0x1c
c001e22b:	5b                   	pop    ebx
c001e22c:	5e                   	pop    esi
c001e22d:	5f                   	pop    edi
c001e22e:	5d                   	pop    ebp
c001e22f:	c3                   	ret    
c001e230:	0f bd e8             	bsr    ebp,eax
c001e233:	83 f5 1f             	xor    ebp,0x1f
c001e236:	75 1c                	jne    c001e254 <__umoddi3+0x88>
c001e238:	39 d8                	cmp    eax,ebx
c001e23a:	72 04                	jb     c001e240 <__umoddi3+0x74>
c001e23c:	39 f7                	cmp    edi,esi
c001e23e:	77 08                	ja     c001e248 <__umoddi3+0x7c>
c001e240:	89 da                	mov    edx,ebx
c001e242:	29 fe                	sub    esi,edi
c001e244:	19 c2                	sbb    edx,eax
c001e246:	89 f1                	mov    ecx,esi
c001e248:	89 c8                	mov    eax,ecx
c001e24a:	83 c4 1c             	add    esp,0x1c
c001e24d:	5b                   	pop    ebx
c001e24e:	5e                   	pop    esi
c001e24f:	5f                   	pop    edi
c001e250:	5d                   	pop    ebp
c001e251:	c3                   	ret    
c001e252:	66 90                	xchg   ax,ax
c001e254:	ba 20 00 00 00       	mov    edx,0x20
c001e259:	29 ea                	sub    edx,ebp
c001e25b:	89 e9                	mov    ecx,ebp
c001e25d:	d3 e0                	shl    eax,cl
c001e25f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e263:	89 f8                	mov    eax,edi
c001e265:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e269:	88 d1                	mov    cl,dl
c001e26b:	d3 e8                	shr    eax,cl
c001e26d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e271:	09 c1                	or     ecx,eax
c001e273:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e277:	89 e9                	mov    ecx,ebp
c001e279:	d3 e7                	shl    edi,cl
c001e27b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e27f:	89 d8                	mov    eax,ebx
c001e281:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e285:	88 d1                	mov    cl,dl
c001e287:	d3 e8                	shr    eax,cl
c001e289:	89 c7                	mov    edi,eax
c001e28b:	89 e9                	mov    ecx,ebp
c001e28d:	d3 e3                	shl    ebx,cl
c001e28f:	89 f0                	mov    eax,esi
c001e291:	88 d1                	mov    cl,dl
c001e293:	d3 e8                	shr    eax,cl
c001e295:	09 d8                	or     eax,ebx
c001e297:	89 e9                	mov    ecx,ebp
c001e299:	d3 e6                	shl    esi,cl
c001e29b:	89 f3                	mov    ebx,esi
c001e29d:	89 fa                	mov    edx,edi
c001e29f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e2a3:	89 d1                	mov    ecx,edx
c001e2a5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e2a9:	89 c6                	mov    esi,eax
c001e2ab:	89 d7                	mov    edi,edx
c001e2ad:	39 d1                	cmp    ecx,edx
c001e2af:	72 27                	jb     c001e2d8 <__umoddi3+0x10c>
c001e2b1:	74 21                	je     c001e2d4 <__umoddi3+0x108>
c001e2b3:	89 ca                	mov    edx,ecx
c001e2b5:	29 f3                	sub    ebx,esi
c001e2b7:	19 fa                	sbb    edx,edi
c001e2b9:	89 d0                	mov    eax,edx
c001e2bb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e2bf:	d3 e0                	shl    eax,cl
c001e2c1:	89 e9                	mov    ecx,ebp
c001e2c3:	d3 eb                	shr    ebx,cl
c001e2c5:	09 d8                	or     eax,ebx
c001e2c7:	d3 ea                	shr    edx,cl
c001e2c9:	83 c4 1c             	add    esp,0x1c
c001e2cc:	5b                   	pop    ebx
c001e2cd:	5e                   	pop    esi
c001e2ce:	5f                   	pop    edi
c001e2cf:	5d                   	pop    ebp
c001e2d0:	c3                   	ret    
c001e2d1:	8d 76 00             	lea    esi,[esi+0x0]
c001e2d4:	39 c3                	cmp    ebx,eax
c001e2d6:	73 db                	jae    c001e2b3 <__umoddi3+0xe7>
c001e2d8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e2dc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e2e0:	89 d7                	mov    edi,edx
c001e2e2:	89 c6                	mov    esi,eax
c001e2e4:	eb cd                	jmp    c001e2b3 <__umoddi3+0xe7>
c001e2e6:	66 90                	xchg   ax,ax
c001e2e8:	66 90                	xchg   ax,ax
c001e2ea:	66 90                	xchg   ax,ax
c001e2ec:	66 90                	xchg   ax,ax
c001e2ee:	66 90                	xchg   ax,ax

c001e2f0 <fabs>:
c001e2f0:	83 ec 0c             	sub    esp,0xc
c001e2f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2f7:	89 04 24             	mov    DWORD PTR [esp],eax
c001e2fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2fe:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001e303:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e307:	dd 04 24             	fld    QWORD PTR [esp]
c001e30a:	83 c4 0c             	add    esp,0xc
c001e30d:	c3                   	ret    
c001e30e:	66 90                	xchg   ax,ax

c001e310 <lrint>:
c001e310:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001e314:	83 ec 04             	sub    esp,0x4
c001e317:	db 1c 24             	fistp  DWORD PTR [esp]
c001e31a:	58                   	pop    eax
c001e31b:	c3                   	ret    

c001e31c <lrintf>:
c001e31c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001e320:	83 ec 04             	sub    esp,0x4
c001e323:	db 1c 24             	fistp  DWORD PTR [esp]
c001e326:	58                   	pop    eax
c001e327:	c3                   	ret    

Disassembly of section .init:

c001e328 <_init>:
c001e328:	55                   	push   ebp
c001e329:	89 e5                	mov    ebp,esp
c001e32b:	e8 e8 1d fe ff       	call   c0000118 <frame_dummy>
c001e330:	e8 a3 fa ff ff       	call   c001ddd8 <__do_global_ctors_aux>
c001e335:	5d                   	pop    ebp
c001e336:	c3                   	ret    

Disassembly of section .fini:

c001e337 <_fini>:
c001e337:	55                   	push   ebp
c001e338:	89 e5                	mov    ebp,esp
c001e33a:	e8 69 1d fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001e33f:	5d                   	pop    ebp
c001e340:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e342 <Computer::~Computer()>:
c001e342:	83 ec 0c             	sub    esp,0xc
c001e345:	ba 58 fd 01 c0       	mov    edx,0xc001fd58
c001e34a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e34e:	89 10                	mov    DWORD PTR [eax],edx
c001e350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e354:	83 ec 0c             	sub    esp,0xc
c001e357:	50                   	push   eax
c001e358:	e8 73 50 ff ff       	call   c00133d0 <Device::~Device()>
c001e35d:	83 c4 10             	add    esp,0x10
c001e360:	90                   	nop
c001e361:	83 c4 0c             	add    esp,0xc
c001e364:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e366 <Computer::~Computer()>:
c001e366:	83 ec 0c             	sub    esp,0xc
c001e369:	83 ec 0c             	sub    esp,0xc
c001e36c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e370:	e8 cd ff ff ff       	call   c001e342 <Computer::~Computer()>
c001e375:	83 c4 10             	add    esp,0x10
c001e378:	83 ec 08             	sub    esp,0x8
c001e37b:	68 ec 01 00 00       	push   0x1ec
c001e380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e384:	e8 aa 3e ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c001e389:	83 c4 10             	add    esp,0x10
c001e38c:	83 c4 0c             	add    esp,0xc
c001e38f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e390 <idleCommon()>:
c001e390:	83 ec 0c             	sub    esp,0xc
c001e393:	e8 74 fd fe ff       	call   c000e10c <lockScheduler()>
c001e398:	e8 a3 00 ff ff       	call   c000e440 <schedule()>
c001e39d:	83 c4 0c             	add    esp,0xc
c001e3a0:	e9 69 fd fe ff       	jmp    c000e10e <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001e3a5 <CPU::readCR0()>:
c001e3a5:	83 ec 10             	sub    esp,0x10
c001e3a8:	0f 20 c0             	mov    eax,cr0
c001e3ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e3af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e3b3:	83 c4 10             	add    esp,0x10
c001e3b6:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001e3b7 <CPU::readCR2()>:
c001e3b7:	83 ec 10             	sub    esp,0x10
c001e3ba:	0f 20 d0             	mov    eax,cr2
c001e3bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e3c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e3c5:	83 c4 10             	add    esp,0x10
c001e3c8:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001e3c9 <CPU::readCR3()>:
c001e3c9:	83 ec 10             	sub    esp,0x10
c001e3cc:	0f 20 d8             	mov    eax,cr3
c001e3cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e3d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e3d7:	83 c4 10             	add    esp,0x10
c001e3da:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001e3db <CPU::readCR4()>:
c001e3db:	83 ec 10             	sub    esp,0x10
c001e3de:	0f 20 e0             	mov    eax,cr4
c001e3e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e3e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e3e9:	83 c4 10             	add    esp,0x10
c001e3ec:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001e3ed <CPU::writeCR3(unsigned long)>:
c001e3ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3f1:	0f 22 d8             	mov    cr3,eax
c001e3f4:	90                   	nop
c001e3f5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001e3f6 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001e3f6:	90                   	nop
c001e3f7:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001e3f8 <ThreadControlBlock::ThreadControlBlock()>:
c001e3f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3fc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e403:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e407:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001e40e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e412:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001e419:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e41d:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001e424:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e428:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e42c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e430:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001e434:	90                   	nop
c001e435:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001e436 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001e436:	83 ec 0c             	sub    esp,0xc
c001e439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e43d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e447:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e452:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e45d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e467:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e46e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e472:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e479:	83 ec 0c             	sub    esp,0xc
c001e47c:	68 b0 06 02 c0       	push   0xc00206b0
c001e481:	e8 e4 e7 fe ff       	call   c000cc6a <kprintf(char const*, ...)>
c001e486:	83 c4 10             	add    esp,0x10
c001e489:	90                   	nop
c001e48a:	83 c4 0c             	add    esp,0xc
c001e48d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001e48e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001e48e:	83 ec 0c             	sub    esp,0xc
c001e491:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e496:	75 10                	jne    c001e4a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001e498:	83 ec 0c             	sub    esp,0xc
c001e49b:	68 cc 06 02 c0       	push   0xc00206cc
c001e4a0:	e8 e3 e8 fe ff       	call   c000cd88 <panic(char const*)>
c001e4a5:	83 c4 10             	add    esp,0x10
c001e4a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4ae:	85 c0                	test   eax,eax
c001e4b0:	74 34                	je     c001e4e6 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001e4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e4b9:	85 c0                	test   eax,eax
c001e4bb:	74 29                	je     c001e4e6 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001e4bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e4c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e4c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001e4cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e4d3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e4d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e4dd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e4e4:	eb 65                	jmp    c001e54b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001e4e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4ea:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4ec:	85 c0                	test   eax,eax
c001e4ee:	75 4b                	jne    c001e53b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001e4f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e4f7:	85 c0                	test   eax,eax
c001e4f9:	75 40                	jne    c001e53b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001e4fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e503:	89 10                	mov    DWORD PTR [eax],edx
c001e505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e509:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e50d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e514:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e517:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e51e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e522:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e525:	85 c0                	test   eax,eax
c001e527:	74 22                	je     c001e54b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001e529:	83 ec 0c             	sub    esp,0xc
c001e52c:	68 ee 06 02 c0       	push   0xc00206ee
c001e531:	e8 52 e8 fe ff       	call   c000cd88 <panic(char const*)>
c001e536:	83 c4 10             	add    esp,0x10
c001e539:	eb 10                	jmp    c001e54b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001e53b:	83 ec 0c             	sub    esp,0xc
c001e53e:	68 f8 06 02 c0       	push   0xc00206f8
c001e543:	e8 40 e8 fe ff       	call   c000cd88 <panic(char const*)>
c001e548:	83 c4 10             	add    esp,0x10
c001e54b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e54f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e552:	8d 50 01             	lea    edx,[eax+0x1]
c001e555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e559:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e55c:	90                   	nop
c001e55d:	83 c4 0c             	add    esp,0xc
c001e560:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001e562 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001e562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e566:	8b 00                	mov    eax,DWORD PTR [eax]
c001e568:	85 c0                	test   eax,eax
c001e56a:	75 0e                	jne    c001e57a <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e56c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e570:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e573:	85 c0                	test   eax,eax
c001e575:	75 03                	jne    c001e57a <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e577:	b0 01                	mov    al,0x1
c001e579:	c3                   	ret    
c001e57a:	b0 00                	mov    al,0x0
c001e57c:	90                   	nop
c001e57d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001e57e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001e57e:	83 ec 0c             	sub    esp,0xc
c001e581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e585:	8b 00                	mov    eax,DWORD PTR [eax]
c001e587:	85 c0                	test   eax,eax
c001e589:	75 15                	jne    c001e5a0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001e58b:	83 ec 0c             	sub    esp,0xc
c001e58e:	68 04 07 02 c0       	push   0xc0020704
c001e593:	e8 f0 e7 fe ff       	call   c000cd88 <panic(char const*)>
c001e598:	83 c4 10             	add    esp,0x10
c001e59b:	e9 88 00 00 00       	jmp    c001e628 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001e5a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5a7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e5aa:	85 c0                	test   eax,eax
c001e5ac:	0f 95 c0             	setne  al
c001e5af:	84 c0                	test   al,al
c001e5b1:	74 10                	je     c001e5c3 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001e5b3:	83 ec 0c             	sub    esp,0xc
c001e5b6:	68 4f 07 02 c0       	push   0xc002074f
c001e5bb:	e8 c8 e7 fe ff       	call   c000cd88 <panic(char const*)>
c001e5c0:	83 c4 10             	add    esp,0x10
c001e5c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5c7:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5c9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e5cc:	85 c0                	test   eax,eax
c001e5ce:	0f 94 c0             	sete   al
c001e5d1:	84 c0                	test   al,al
c001e5d3:	74 33                	je     c001e608 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001e5d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e5df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e5ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e5f1:	83 f8 01             	cmp    eax,0x1
c001e5f4:	74 21                	je     c001e617 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001e5f6:	83 ec 0c             	sub    esp,0xc
c001e5f9:	68 28 07 02 c0       	push   0xc0020728
c001e5fe:	e8 85 e7 fe ff       	call   c000cd88 <panic(char const*)>
c001e603:	83 c4 10             	add    esp,0x10
c001e606:	eb 0f                	jmp    c001e617 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001e608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e60c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e60e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e615:	89 10                	mov    DWORD PTR [eax],edx
c001e617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e61b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e61e:	8d 50 ff             	lea    edx,[eax-0x1]
c001e621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e625:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e628:	83 c4 0c             	add    esp,0xc
c001e62b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001e62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001e62c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e630:	8b 00                	mov    eax,DWORD PTR [eax]
c001e632:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001e634 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001e634:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e638:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e63b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e63c <LinkedList<UnixFile>::~LinkedList()>:
c001e63c:	90                   	nop
c001e63d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e63e <LinkedList<UnixFile>::LinkedList()>:
c001e63e:	83 ec 0c             	sub    esp,0xc
c001e641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e645:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e64b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e64f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e65a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e665:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e66b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e66f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e67a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e681:	83 ec 0c             	sub    esp,0xc
c001e684:	68 b0 06 02 c0       	push   0xc00206b0
c001e689:	e8 dc e5 fe ff       	call   c000cc6a <kprintf(char const*, ...)>
c001e68e:	83 c4 10             	add    esp,0x10
c001e691:	90                   	nop
c001e692:	83 c4 0c             	add    esp,0xc
c001e695:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e696 <LinkedList<UnixFile>::getFirstElement()>:
c001e696:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e69a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e69c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e69e <LinkedList<UnixFile>::removeFirst()>:
c001e69e:	83 ec 0c             	sub    esp,0xc
c001e6a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6a5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6a7:	85 c0                	test   eax,eax
c001e6a9:	75 12                	jne    c001e6bd <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e6ab:	83 ec 0c             	sub    esp,0xc
c001e6ae:	68 04 07 02 c0       	push   0xc0020704
c001e6b3:	e8 d0 e6 fe ff       	call   c000cd88 <panic(char const*)>
c001e6b8:	83 c4 10             	add    esp,0x10
c001e6bb:	eb 7e                	jmp    c001e73b <LinkedList<UnixFile>::removeFirst()+0x9d>
c001e6bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e6c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e6c7:	85 c0                	test   eax,eax
c001e6c9:	74 10                	je     c001e6db <LinkedList<UnixFile>::removeFirst()+0x3d>
c001e6cb:	83 ec 0c             	sub    esp,0xc
c001e6ce:	68 4f 07 02 c0       	push   0xc002074f
c001e6d3:	e8 b0 e6 fe ff       	call   c000cd88 <panic(char const*)>
c001e6d8:	83 c4 10             	add    esp,0x10
c001e6db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6df:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6e1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e6e4:	85 c0                	test   eax,eax
c001e6e6:	75 33                	jne    c001e71b <LinkedList<UnixFile>::removeFirst()+0x7d>
c001e6e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e6f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6f6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e6fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e701:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e704:	83 f8 01             	cmp    eax,0x1
c001e707:	74 21                	je     c001e72a <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e709:	83 ec 0c             	sub    esp,0xc
c001e70c:	68 28 07 02 c0       	push   0xc0020728
c001e711:	e8 72 e6 fe ff       	call   c000cd88 <panic(char const*)>
c001e716:	83 c4 10             	add    esp,0x10
c001e719:	eb 0f                	jmp    c001e72a <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e71b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e71f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e721:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e728:	89 10                	mov    DWORD PTR [eax],edx
c001e72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e731:	8d 50 ff             	lea    edx,[eax-0x1]
c001e734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e738:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e73b:	83 c4 0c             	add    esp,0xc
c001e73e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001e740 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001e740:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e744:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e747:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e748 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e748:	83 ec 1c             	sub    esp,0x1c
c001e74b:	83 ec 0c             	sub    esp,0xc
c001e74e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e752:	e8 3f ff ff ff       	call   c001e696 <LinkedList<UnixFile>::getFirstElement()>
c001e757:	83 c4 10             	add    esp,0x10
c001e75a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e75e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e763:	74 43                	je     c001e7a8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x60>
c001e765:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e769:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c001e76d:	75 20                	jne    c001e78f <LinkedList<UnixFile>::addElement(UnixFile*)+0x47>
c001e76f:	83 ec 0c             	sub    esp,0xc
c001e772:	68 f4 08 02 c0       	push   0xc00208f4
c001e777:	e8 ee e4 fe ff       	call   c000cc6a <kprintf(char const*, ...)>
c001e77c:	83 c4 10             	add    esp,0x10
c001e77f:	83 ec 0c             	sub    esp,0xc
c001e782:	68 0b 09 02 c0       	push   0xc002090b
c001e787:	e8 fc e5 fe ff       	call   c000cd88 <panic(char const*)>
c001e78c:	83 c4 10             	add    esp,0x10
c001e78f:	83 ec 08             	sub    esp,0x8
c001e792:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e796:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e79a:	e8 a1 ff ff ff       	call   c001e740 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001e79f:	83 c4 10             	add    esp,0x10
c001e7a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e7a6:	eb b6                	jmp    c001e75e <LinkedList<UnixFile>::addElement(UnixFile*)+0x16>
c001e7a8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e7ad:	75 10                	jne    c001e7bf <LinkedList<UnixFile>::addElement(UnixFile*)+0x77>
c001e7af:	83 ec 0c             	sub    esp,0xc
c001e7b2:	68 cc 06 02 c0       	push   0xc00206cc
c001e7b7:	e8 cc e5 fe ff       	call   c000cd88 <panic(char const*)>
c001e7bc:	83 c4 10             	add    esp,0x10
c001e7bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7c3:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7c5:	85 c0                	test   eax,eax
c001e7c7:	74 34                	je     c001e7fd <LinkedList<UnixFile>::addElement(UnixFile*)+0xb5>
c001e7c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e7d0:	85 c0                	test   eax,eax
c001e7d2:	74 29                	je     c001e7fd <LinkedList<UnixFile>::addElement(UnixFile*)+0xb5>
c001e7d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e7db:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e7df:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e7e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7e6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e7ea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e7ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e7f4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e7fb:	eb 65                	jmp    c001e862 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001e7fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e801:	8b 00                	mov    eax,DWORD PTR [eax]
c001e803:	85 c0                	test   eax,eax
c001e805:	75 4b                	jne    c001e852 <LinkedList<UnixFile>::addElement(UnixFile*)+0x10a>
c001e807:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e80b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e80e:	85 c0                	test   eax,eax
c001e810:	75 40                	jne    c001e852 <LinkedList<UnixFile>::addElement(UnixFile*)+0x10a>
c001e812:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e816:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e81a:	89 10                	mov    DWORD PTR [eax],edx
c001e81c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e820:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e824:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e827:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e82b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e82e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e835:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e839:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e83c:	85 c0                	test   eax,eax
c001e83e:	74 22                	je     c001e862 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001e840:	83 ec 0c             	sub    esp,0xc
c001e843:	68 ee 06 02 c0       	push   0xc00206ee
c001e848:	e8 3b e5 fe ff       	call   c000cd88 <panic(char const*)>
c001e84d:	83 c4 10             	add    esp,0x10
c001e850:	eb 10                	jmp    c001e862 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001e852:	83 ec 0c             	sub    esp,0xc
c001e855:	68 f8 06 02 c0       	push   0xc00206f8
c001e85a:	e8 29 e5 fe ff       	call   c000cd88 <panic(char const*)>
c001e85f:	83 c4 10             	add    esp,0x10
c001e862:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e866:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e869:	8d 50 01             	lea    edx,[eax+0x1]
c001e86c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e870:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e873:	90                   	nop
c001e874:	83 c4 1c             	add    esp,0x1c
c001e877:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001e878 <DriverlessDevice::~DriverlessDevice()>:
c001e878:	ba a4 0e 02 c0       	mov    edx,0xc0020ea4
c001e87d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e881:	89 10                	mov    DWORD PTR [eax],edx
c001e883:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e887:	50                   	push   eax
c001e888:	e8 43 4b ff ff       	call   c00133d0 <Device::~Device()>
c001e88d:	83 c4 04             	add    esp,0x4
c001e890:	90                   	nop
c001e891:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001e892 <DriverlessDevice::~DriverlessDevice()>:
c001e892:	83 ec 0c             	sub    esp,0xc
c001e895:	83 ec 0c             	sub    esp,0xc
c001e898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e89c:	e8 d7 ff ff ff       	call   c001e878 <DriverlessDevice::~DriverlessDevice()>
c001e8a1:	83 c4 10             	add    esp,0x10
c001e8a4:	83 ec 08             	sub    esp,0x8
c001e8a7:	68 58 01 00 00       	push   0x158
c001e8ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8b0:	e8 7e 39 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c001e8b5:	83 c4 10             	add    esp,0x10
c001e8b8:	83 c4 0c             	add    esp,0xc
c001e8bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001e8bc <LinkedList<Device>::addElement(Device*)>:
c001e8bc:	83 ec 0c             	sub    esp,0xc
c001e8bf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e8c4:	75 10                	jne    c001e8d6 <LinkedList<Device>::addElement(Device*)+0x1a>
c001e8c6:	83 ec 0c             	sub    esp,0xc
c001e8c9:	68 cc 06 02 c0       	push   0xc00206cc
c001e8ce:	e8 b5 e4 fe ff       	call   c000cd88 <panic(char const*)>
c001e8d3:	83 c4 10             	add    esp,0x10
c001e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8da:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8dc:	85 c0                	test   eax,eax
c001e8de:	74 3a                	je     c001e91a <LinkedList<Device>::addElement(Device*)+0x5e>
c001e8e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8e7:	85 c0                	test   eax,eax
c001e8e9:	74 2f                	je     c001e91a <LinkedList<Device>::addElement(Device*)+0x5e>
c001e8eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8f6:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001e8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e904:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e90b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e90e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e918:	eb 68                	jmp    c001e982 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e91a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e91e:	8b 00                	mov    eax,DWORD PTR [eax]
c001e920:	85 c0                	test   eax,eax
c001e922:	75 4e                	jne    c001e972 <LinkedList<Device>::addElement(Device*)+0xb6>
c001e924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e928:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e92b:	85 c0                	test   eax,eax
c001e92d:	75 43                	jne    c001e972 <LinkedList<Device>::addElement(Device*)+0xb6>
c001e92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e933:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e937:	89 10                	mov    DWORD PTR [eax],edx
c001e939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e93d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e941:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e948:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e94b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e959:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e95c:	85 c0                	test   eax,eax
c001e95e:	74 22                	je     c001e982 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e960:	83 ec 0c             	sub    esp,0xc
c001e963:	68 ee 06 02 c0       	push   0xc00206ee
c001e968:	e8 1b e4 fe ff       	call   c000cd88 <panic(char const*)>
c001e96d:	83 c4 10             	add    esp,0x10
c001e970:	eb 10                	jmp    c001e982 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e972:	83 ec 0c             	sub    esp,0xc
c001e975:	68 f8 06 02 c0       	push   0xc00206f8
c001e97a:	e8 09 e4 fe ff       	call   c000cd88 <panic(char const*)>
c001e97f:	83 c4 10             	add    esp,0x10
c001e982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e986:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e989:	8d 50 01             	lea    edx,[eax+0x1]
c001e98c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e990:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e993:	90                   	nop
c001e994:	83 c4 0c             	add    esp,0xc
c001e997:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001e998 <LinkedList<Device>::LinkedList()>:
c001e998:	83 ec 0c             	sub    esp,0xc
c001e99b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e99f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e9a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e9b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e9bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e9c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e9db:	83 ec 0c             	sub    esp,0xc
c001e9de:	68 b0 06 02 c0       	push   0xc00206b0
c001e9e3:	e8 82 e2 fe ff       	call   c000cc6a <kprintf(char const*, ...)>
c001e9e8:	83 c4 10             	add    esp,0x10
c001e9eb:	90                   	nop
c001e9ec:	83 c4 0c             	add    esp,0xc
c001e9ef:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001e9f0 <CPU::readDR0()>:
c001e9f0:	83 ec 10             	sub    esp,0x10
c001e9f3:	0f 21 c0             	mov    eax,db0
c001e9f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9fe:	83 c4 10             	add    esp,0x10
c001ea01:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001ea02 <CPU::readDR1()>:
c001ea02:	83 ec 10             	sub    esp,0x10
c001ea05:	0f 21 c8             	mov    eax,db1
c001ea08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea10:	83 c4 10             	add    esp,0x10
c001ea13:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001ea14 <CPU::readDR2()>:
c001ea14:	83 ec 10             	sub    esp,0x10
c001ea17:	0f 21 d0             	mov    eax,db2
c001ea1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea22:	83 c4 10             	add    esp,0x10
c001ea25:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001ea26 <CPU::readDR3()>:
c001ea26:	83 ec 10             	sub    esp,0x10
c001ea29:	0f 21 d8             	mov    eax,db3
c001ea2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea34:	83 c4 10             	add    esp,0x10
c001ea37:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001ea38 <CPU::readDR6()>:
c001ea38:	83 ec 10             	sub    esp,0x10
c001ea3b:	0f 21 f0             	mov    eax,db6
c001ea3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea46:	83 c4 10             	add    esp,0x10
c001ea49:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001ea4a <CPU::readDR7()>:
c001ea4a:	83 ec 10             	sub    esp,0x10
c001ea4d:	0f 21 f8             	mov    eax,db7
c001ea50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea58:	83 c4 10             	add    esp,0x10
c001ea5b:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ea5c <ACPI::~ACPI()>:
c001ea5c:	83 ec 0c             	sub    esp,0xc
c001ea5f:	ba 08 16 02 c0       	mov    edx,0xc0021608
c001ea64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea68:	89 10                	mov    DWORD PTR [eax],edx
c001ea6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea6e:	83 ec 0c             	sub    esp,0xc
c001ea71:	50                   	push   eax
c001ea72:	e8 59 49 ff ff       	call   c00133d0 <Device::~Device()>
c001ea77:	83 c4 10             	add    esp,0x10
c001ea7a:	90                   	nop
c001ea7b:	83 c4 0c             	add    esp,0xc
c001ea7e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ea80 <ACPI::~ACPI()>:
c001ea80:	83 ec 0c             	sub    esp,0xc
c001ea83:	83 ec 0c             	sub    esp,0xc
c001ea86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea8a:	e8 cd ff ff ff       	call   c001ea5c <ACPI::~ACPI()>
c001ea8f:	83 c4 10             	add    esp,0x10
c001ea92:	83 ec 08             	sub    esp,0x8
c001ea95:	68 68 22 00 00       	push   0x2268
c001ea9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea9e:	e8 90 37 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c001eaa3:	83 c4 10             	add    esp,0x10
c001eaa6:	83 c4 0c             	add    esp,0xc
c001eaa9:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001eaaa <CPU::~CPU()>:
c001eaaa:	83 ec 0c             	sub    esp,0xc
c001eaad:	ba 58 18 02 c0       	mov    edx,0xc0021858
c001eab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab6:	89 10                	mov    DWORD PTR [eax],edx
c001eab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eabc:	83 ec 0c             	sub    esp,0xc
c001eabf:	50                   	push   eax
c001eac0:	e8 0b 49 ff ff       	call   c00133d0 <Device::~Device()>
c001eac5:	83 c4 10             	add    esp,0x10
c001eac8:	90                   	nop
c001eac9:	83 c4 0c             	add    esp,0xc
c001eacc:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001eace <CPU::~CPU()>:
c001eace:	83 ec 0c             	sub    esp,0xc
c001ead1:	83 ec 0c             	sub    esp,0xc
c001ead4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ead8:	e8 cd ff ff ff       	call   c001eaaa <CPU::~CPU()>
c001eadd:	83 c4 10             	add    esp,0x10
c001eae0:	83 ec 08             	sub    esp,0x8
c001eae3:	68 98 11 00 00       	push   0x1198
c001eae8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eaec:	e8 42 37 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c001eaf1:	83 c4 10             	add    esp,0x10
c001eaf4:	83 c4 0c             	add    esp,0xc
c001eaf7:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001eaf8 <CPU::writeDR7(unsigned long)>:
c001eaf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eafc:	0f 23 f8             	mov    db7,eax
c001eaff:	90                   	nop
c001eb00:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001eb01 <CPU::writeCR4(unsigned long)>:
c001eb01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb05:	0f 22 e0             	mov    cr4,eax
c001eb08:	90                   	nop
c001eb09:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001eb0a <PCI::~PCI()>:
c001eb0a:	83 ec 0c             	sub    esp,0xc
c001eb0d:	ba f4 1b 02 c0       	mov    edx,0xc0021bf4
c001eb12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb16:	89 10                	mov    DWORD PTR [eax],edx
c001eb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb1c:	83 ec 0c             	sub    esp,0xc
c001eb1f:	50                   	push   eax
c001eb20:	e8 bb 42 ff ff       	call   c0012de0 <Bus::~Bus()>
c001eb25:	83 c4 10             	add    esp,0x10
c001eb28:	90                   	nop
c001eb29:	83 c4 0c             	add    esp,0xc
c001eb2c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001eb2e <PCI::~PCI()>:
c001eb2e:	83 ec 0c             	sub    esp,0xc
c001eb31:	83 ec 0c             	sub    esp,0xc
c001eb34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb38:	e8 cd ff ff ff       	call   c001eb0a <PCI::~PCI()>
c001eb3d:	83 c4 10             	add    esp,0x10
c001eb40:	83 ec 08             	sub    esp,0x8
c001eb43:	68 58 01 00 00       	push   0x158
c001eb48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb4c:	e8 e2 36 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c001eb51:	83 c4 10             	add    esp,0x10
c001eb54:	83 c4 0c             	add    esp,0xc
c001eb57:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001eb58 <IDE::~IDE()>:
c001eb58:	83 ec 0c             	sub    esp,0xc
c001eb5b:	ba 58 1e 02 c0       	mov    edx,0xc0021e58
c001eb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb64:	89 10                	mov    DWORD PTR [eax],edx
c001eb66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb6a:	83 ec 0c             	sub    esp,0xc
c001eb6d:	50                   	push   eax
c001eb6e:	e8 73 4d ff ff       	call   c00138e6 <HardDiskController::~HardDiskController()>
c001eb73:	83 c4 10             	add    esp,0x10
c001eb76:	90                   	nop
c001eb77:	83 c4 0c             	add    esp,0xc
c001eb7a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001eb7c <IDE::~IDE()>:
c001eb7c:	83 ec 0c             	sub    esp,0xc
c001eb7f:	83 ec 0c             	sub    esp,0xc
c001eb82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb86:	e8 cd ff ff ff       	call   c001eb58 <IDE::~IDE()>
c001eb8b:	83 c4 10             	add    esp,0x10
c001eb8e:	83 ec 08             	sub    esp,0x8
c001eb91:	68 70 02 00 00       	push   0x270
c001eb96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb9a:	e8 94 36 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c001eb9f:	83 c4 10             	add    esp,0x10
c001eba2:	83 c4 0c             	add    esp,0xc
c001eba5:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001eba6 <ATA::~ATA()>:
c001eba6:	83 ec 0c             	sub    esp,0xc
c001eba9:	ba a8 1e 02 c0       	mov    edx,0xc0021ea8
c001ebae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebb2:	89 10                	mov    DWORD PTR [eax],edx
c001ebb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebb8:	83 ec 0c             	sub    esp,0xc
c001ebbb:	50                   	push   eax
c001ebbc:	e8 03 4e ff ff       	call   c00139c4 <PhysicalDisk::~PhysicalDisk()>
c001ebc1:	83 c4 10             	add    esp,0x10
c001ebc4:	90                   	nop
c001ebc5:	83 c4 0c             	add    esp,0xc
c001ebc8:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ebca <ATA::~ATA()>:
c001ebca:	83 ec 0c             	sub    esp,0xc
c001ebcd:	83 ec 0c             	sub    esp,0xc
c001ebd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebd4:	e8 cd ff ff ff       	call   c001eba6 <ATA::~ATA()>
c001ebd9:	83 c4 10             	add    esp,0x10
c001ebdc:	83 ec 08             	sub    esp,0x8
c001ebdf:	68 7c 01 00 00       	push   0x17c
c001ebe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebe8:	e8 46 36 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c001ebed:	83 c4 10             	add    esp,0x10
c001ebf0:	83 c4 0c             	add    esp,0xc
c001ebf3:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ebf4 <ATAPI::~ATAPI()>:
c001ebf4:	83 ec 0c             	sub    esp,0xc
c001ebf7:	ba 14 1f 02 c0       	mov    edx,0xc0021f14
c001ebfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec00:	89 10                	mov    DWORD PTR [eax],edx
c001ec02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec06:	83 ec 0c             	sub    esp,0xc
c001ec09:	50                   	push   eax
c001ec0a:	e8 b5 4d ff ff       	call   c00139c4 <PhysicalDisk::~PhysicalDisk()>
c001ec0f:	83 c4 10             	add    esp,0x10
c001ec12:	90                   	nop
c001ec13:	83 c4 0c             	add    esp,0xc
c001ec16:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001ec18 <ATAPI::~ATAPI()>:
c001ec18:	83 ec 0c             	sub    esp,0xc
c001ec1b:	83 ec 0c             	sub    esp,0xc
c001ec1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec22:	e8 cd ff ff ff       	call   c001ebf4 <ATAPI::~ATAPI()>
c001ec27:	83 c4 10             	add    esp,0x10
c001ec2a:	83 ec 08             	sub    esp,0x8
c001ec2d:	68 80 01 00 00       	push   0x180
c001ec32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec36:	e8 f8 35 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c001ec3b:	83 c4 10             	add    esp,0x10
c001ec3e:	83 c4 0c             	add    esp,0xc
c001ec41:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001ec42 <AVX::~AVX()>:
c001ec42:	83 ec 0c             	sub    esp,0xc
c001ec45:	ba 50 1f 02 c0       	mov    edx,0xc0021f50
c001ec4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec4e:	89 10                	mov    DWORD PTR [eax],edx
c001ec50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec54:	83 ec 0c             	sub    esp,0xc
c001ec57:	50                   	push   eax
c001ec58:	e8 eb 4d ff ff       	call   c0013a48 <FPU::~FPU()>
c001ec5d:	83 c4 10             	add    esp,0x10
c001ec60:	90                   	nop
c001ec61:	83 c4 0c             	add    esp,0xc
c001ec64:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001ec66 <AVX::~AVX()>:
c001ec66:	83 ec 0c             	sub    esp,0xc
c001ec69:	83 ec 0c             	sub    esp,0xc
c001ec6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec70:	e8 cd ff ff ff       	call   c001ec42 <AVX::~AVX()>
c001ec75:	83 c4 10             	add    esp,0x10
c001ec78:	83 ec 08             	sub    esp,0x8
c001ec7b:	68 58 01 00 00       	push   0x158
c001ec80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec84:	e8 aa 35 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c001ec89:	83 c4 10             	add    esp,0x10
c001ec8c:	83 c4 0c             	add    esp,0xc
c001ec8f:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001ec90 <MMX::~MMX()>:
c001ec90:	83 ec 0c             	sub    esp,0xc
c001ec93:	ba 90 1f 02 c0       	mov    edx,0xc0021f90
c001ec98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec9c:	89 10                	mov    DWORD PTR [eax],edx
c001ec9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca2:	83 ec 0c             	sub    esp,0xc
c001eca5:	50                   	push   eax
c001eca6:	e8 9d 4d ff ff       	call   c0013a48 <FPU::~FPU()>
c001ecab:	83 c4 10             	add    esp,0x10
c001ecae:	90                   	nop
c001ecaf:	83 c4 0c             	add    esp,0xc
c001ecb2:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001ecb4 <MMX::~MMX()>:
c001ecb4:	83 ec 0c             	sub    esp,0xc
c001ecb7:	83 ec 0c             	sub    esp,0xc
c001ecba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ecbe:	e8 cd ff ff ff       	call   c001ec90 <MMX::~MMX()>
c001ecc3:	83 c4 10             	add    esp,0x10
c001ecc6:	83 ec 08             	sub    esp,0x8
c001ecc9:	68 58 01 00 00       	push   0x158
c001ecce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ecd2:	e8 5c 35 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c001ecd7:	83 c4 10             	add    esp,0x10
c001ecda:	83 c4 0c             	add    esp,0xc
c001ecdd:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001ecde <SSE::~SSE()>:
c001ecde:	83 ec 0c             	sub    esp,0xc
c001ece1:	ba d0 1f 02 c0       	mov    edx,0xc0021fd0
c001ece6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecea:	89 10                	mov    DWORD PTR [eax],edx
c001ecec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf0:	83 ec 0c             	sub    esp,0xc
c001ecf3:	50                   	push   eax
c001ecf4:	e8 4f 4d ff ff       	call   c0013a48 <FPU::~FPU()>
c001ecf9:	83 c4 10             	add    esp,0x10
c001ecfc:	90                   	nop
c001ecfd:	83 c4 0c             	add    esp,0xc
c001ed00:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001ed02 <SSE::~SSE()>:
c001ed02:	83 ec 0c             	sub    esp,0xc
c001ed05:	83 ec 0c             	sub    esp,0xc
c001ed08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed0c:	e8 cd ff ff ff       	call   c001ecde <SSE::~SSE()>
c001ed11:	83 c4 10             	add    esp,0x10
c001ed14:	83 ec 08             	sub    esp,0x8
c001ed17:	68 58 01 00 00       	push   0x158
c001ed1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed20:	e8 0e 35 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c001ed25:	83 c4 10             	add    esp,0x10
c001ed28:	83 c4 0c             	add    esp,0xc
c001ed2b:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001ed2c <x87::~x87()>:
c001ed2c:	83 ec 0c             	sub    esp,0xc
c001ed2f:	ba 10 20 02 c0       	mov    edx,0xc0022010
c001ed34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed38:	89 10                	mov    DWORD PTR [eax],edx
c001ed3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed3e:	83 ec 0c             	sub    esp,0xc
c001ed41:	50                   	push   eax
c001ed42:	e8 01 4d ff ff       	call   c0013a48 <FPU::~FPU()>
c001ed47:	83 c4 10             	add    esp,0x10
c001ed4a:	90                   	nop
c001ed4b:	83 c4 0c             	add    esp,0xc
c001ed4e:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001ed50 <x87::~x87()>:
c001ed50:	83 ec 0c             	sub    esp,0xc
c001ed53:	83 ec 0c             	sub    esp,0xc
c001ed56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed5a:	e8 cd ff ff ff       	call   c001ed2c <x87::~x87()>
c001ed5f:	83 c4 10             	add    esp,0x10
c001ed62:	83 ec 08             	sub    esp,0x8
c001ed65:	68 58 01 00 00       	push   0x158
c001ed6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed6e:	e8 c0 34 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c001ed73:	83 c4 10             	add    esp,0x10
c001ed76:	83 c4 0c             	add    esp,0xc
c001ed79:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001ed7a <IOAPIC::~IOAPIC()>:
c001ed7a:	83 ec 0c             	sub    esp,0xc
c001ed7d:	ba 68 21 02 c0       	mov    edx,0xc0022168
c001ed82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed86:	89 10                	mov    DWORD PTR [eax],edx
c001ed88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed8c:	83 ec 0c             	sub    esp,0xc
c001ed8f:	50                   	push   eax
c001ed90:	e8 3b 46 ff ff       	call   c00133d0 <Device::~Device()>
c001ed95:	83 c4 10             	add    esp,0x10
c001ed98:	90                   	nop
c001ed99:	83 c4 0c             	add    esp,0xc
c001ed9c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ed9e <IOAPIC::~IOAPIC()>:
c001ed9e:	83 ec 0c             	sub    esp,0xc
c001eda1:	83 ec 0c             	sub    esp,0xc
c001eda4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eda8:	e8 cd ff ff ff       	call   c001ed7a <IOAPIC::~IOAPIC()>
c001edad:	83 c4 10             	add    esp,0x10
c001edb0:	83 ec 08             	sub    esp,0x8
c001edb3:	68 68 01 00 00       	push   0x168
c001edb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edbc:	e8 72 34 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c001edc1:	83 c4 10             	add    esp,0x10
c001edc4:	83 c4 0c             	add    esp,0xc
c001edc7:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001edc8 <APIC::~APIC()>:
c001edc8:	83 ec 0c             	sub    esp,0xc
c001edcb:	ba 20 21 02 c0       	mov    edx,0xc0022120
c001edd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd4:	89 10                	mov    DWORD PTR [eax],edx
c001edd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edda:	83 ec 0c             	sub    esp,0xc
c001eddd:	50                   	push   eax
c001edde:	e8 09 51 ff ff       	call   c0013eec <InterruptController::~InterruptController()>
c001ede3:	83 c4 10             	add    esp,0x10
c001ede6:	90                   	nop
c001ede7:	83 c4 0c             	add    esp,0xc
c001edea:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001edec <APIC::~APIC()>:
c001edec:	83 ec 0c             	sub    esp,0xc
c001edef:	83 ec 0c             	sub    esp,0xc
c001edf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edf6:	e8 cd ff ff ff       	call   c001edc8 <APIC::~APIC()>
c001edfb:	83 c4 10             	add    esp,0x10
c001edfe:	83 ec 08             	sub    esp,0x8
c001ee01:	68 58 21 00 00       	push   0x2158
c001ee06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee0a:	e8 24 34 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c001ee0f:	83 c4 10             	add    esp,0x10
c001ee12:	83 c4 0c             	add    esp,0xc
c001ee15:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001ee16 <PIC::~PIC()>:
c001ee16:	83 ec 0c             	sub    esp,0xc
c001ee19:	ba b8 21 02 c0       	mov    edx,0xc00221b8
c001ee1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee22:	89 10                	mov    DWORD PTR [eax],edx
c001ee24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee28:	83 ec 0c             	sub    esp,0xc
c001ee2b:	50                   	push   eax
c001ee2c:	e8 bb 50 ff ff       	call   c0013eec <InterruptController::~InterruptController()>
c001ee31:	83 c4 10             	add    esp,0x10
c001ee34:	90                   	nop
c001ee35:	83 c4 0c             	add    esp,0xc
c001ee38:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001ee3a <PIC::~PIC()>:
c001ee3a:	83 ec 0c             	sub    esp,0xc
c001ee3d:	83 ec 0c             	sub    esp,0xc
c001ee40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee44:	e8 cd ff ff ff       	call   c001ee16 <PIC::~PIC()>
c001ee49:	83 c4 10             	add    esp,0x10
c001ee4c:	83 ec 08             	sub    esp,0x8
c001ee4f:	68 58 21 00 00       	push   0x2158
c001ee54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee58:	e8 d6 33 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c001ee5d:	83 c4 10             	add    esp,0x10
c001ee60:	83 c4 0c             	add    esp,0xc
c001ee63:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ee64 <APICTimer::~APICTimer()>:
c001ee64:	83 ec 0c             	sub    esp,0xc
c001ee67:	ba 0c 22 02 c0       	mov    edx,0xc002220c
c001ee6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee70:	89 10                	mov    DWORD PTR [eax],edx
c001ee72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee76:	83 ec 0c             	sub    esp,0xc
c001ee79:	50                   	push   eax
c001ee7a:	e8 41 66 ff ff       	call   c00154c0 <Timer::~Timer()>
c001ee7f:	83 c4 10             	add    esp,0x10
c001ee82:	90                   	nop
c001ee83:	83 c4 0c             	add    esp,0xc
c001ee86:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ee88 <APICTimer::~APICTimer()>:
c001ee88:	83 ec 0c             	sub    esp,0xc
c001ee8b:	83 ec 0c             	sub    esp,0xc
c001ee8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee92:	e8 cd ff ff ff       	call   c001ee64 <APICTimer::~APICTimer()>
c001ee97:	83 c4 10             	add    esp,0x10
c001ee9a:	83 ec 08             	sub    esp,0x8
c001ee9d:	68 60 01 00 00       	push   0x160
c001eea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eea6:	e8 88 33 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c001eeab:	83 c4 10             	add    esp,0x10
c001eeae:	83 c4 0c             	add    esp,0xc
c001eeb1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001eeb2 <PIT::~PIT()>:
c001eeb2:	83 ec 0c             	sub    esp,0xc
c001eeb5:	ba 5c 22 02 c0       	mov    edx,0xc002225c
c001eeba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eebe:	89 10                	mov    DWORD PTR [eax],edx
c001eec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eec4:	83 ec 0c             	sub    esp,0xc
c001eec7:	50                   	push   eax
c001eec8:	e8 f3 65 ff ff       	call   c00154c0 <Timer::~Timer()>
c001eecd:	83 c4 10             	add    esp,0x10
c001eed0:	90                   	nop
c001eed1:	83 c4 0c             	add    esp,0xc
c001eed4:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001eed6 <PIT::~PIT()>:
c001eed6:	83 ec 0c             	sub    esp,0xc
c001eed9:	83 ec 0c             	sub    esp,0xc
c001eedc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eee0:	e8 cd ff ff ff       	call   c001eeb2 <PIT::~PIT()>
c001eee5:	83 c4 10             	add    esp,0x10
c001eee8:	83 ec 08             	sub    esp,0x8
c001eeeb:	68 5c 01 00 00       	push   0x15c
c001eef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eef4:	e8 3a 33 ff ff       	call   c0012233 <operator delete(void*, unsigned long)>
c001eef9:	83 c4 10             	add    esp,0x10
c001eefc:	83 c4 0c             	add    esp,0xc
c001eeff:	c3                   	ret    
